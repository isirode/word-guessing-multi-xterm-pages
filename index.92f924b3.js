function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
var $parcel$global =
typeof globalThis !== 'undefined'
  ? globalThis
  : typeof self !== 'undefined'
  ? self
  : typeof window !== 'undefined'
  ? window
  : typeof global !== 'undefined'
  ? global
  : {};
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequire4bc0"];
if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequire4bc0"] = parcelRequire;
}
parcelRequire.register("bqCSz", function(module, exports) {

var $e9rKa = parcelRequire("e9rKa");
var $852047ff4e0d4957$require$Argument = $e9rKa.Argument;

var $3ctXX = parcelRequire("3ctXX");
var $852047ff4e0d4957$require$Command = $3ctXX.Command;

var $ijHVT = parcelRequire("ijHVT");
var $852047ff4e0d4957$require$CommanderError = $ijHVT.CommanderError;
var $852047ff4e0d4957$require$InvalidArgumentError = $ijHVT.InvalidArgumentError;

var $1rwQj = parcelRequire("1rwQj");
var $852047ff4e0d4957$require$Help = $1rwQj.Help;

var $aI2sl = parcelRequire("aI2sl");
var $852047ff4e0d4957$require$Option = $aI2sl.Option;
// @ts-check
/**
 * Expose the root command.
 */ exports = module.exports = new $852047ff4e0d4957$require$Command();
exports.program = exports; // More explicit access to global command.
// Implicit export of createArgument, createCommand, and createOption.
/**
 * Expose classes
 */ exports.Argument = $852047ff4e0d4957$require$Argument;
exports.Command = $852047ff4e0d4957$require$Command;
exports.CommanderError = $852047ff4e0d4957$require$CommanderError;
exports.Help = $852047ff4e0d4957$require$Help;
exports.InvalidArgumentError = $852047ff4e0d4957$require$InvalidArgumentError;
exports.InvalidOptionArgumentError = $852047ff4e0d4957$require$InvalidArgumentError; // Deprecated
exports.Option = $852047ff4e0d4957$require$Option;

});
parcelRequire.register("e9rKa", function(module, exports) {

$parcel$export(module.exports, "Argument", () => $a4d76d48f1f82ae4$export$84637ea037d2e218, (v) => $a4d76d48f1f82ae4$export$84637ea037d2e218 = v);
$parcel$export(module.exports, "humanReadableArgName", () => $a4d76d48f1f82ae4$export$6e65b3a729b8c0d8, (v) => $a4d76d48f1f82ae4$export$6e65b3a729b8c0d8 = v);
var $a4d76d48f1f82ae4$export$84637ea037d2e218;
var $a4d76d48f1f82ae4$export$6e65b3a729b8c0d8;

var $ijHVT = parcelRequire("ijHVT");
var $a4d76d48f1f82ae4$require$InvalidArgumentError = $ijHVT.InvalidArgumentError;
// @ts-check
class $a4d76d48f1f82ae4$var$Argument {
    /**
   * Initialize a new command argument with the given name and description.
   * The default is that the argument is required, and you can explicitly
   * indicate this with <> around the name. Put [] around the name for an optional argument.
   *
   * @param {string} name
   * @param {string} [description]
   */ constructor(name, description){
        this.description = description || "";
        this.variadic = false;
        this.parseArg = undefined;
        this.defaultValue = undefined;
        this.defaultValueDescription = undefined;
        this.argChoices = undefined;
        switch(name[0]){
            case "<":
                this.required = true;
                this._name = name.slice(1, -1);
                break;
            case "[":
                this.required = false;
                this._name = name.slice(1, -1);
                break;
            default:
                this.required = true;
                this._name = name;
                break;
        }
        if (this._name.length > 3 && this._name.slice(-3) === "...") {
            this.variadic = true;
            this._name = this._name.slice(0, -3);
        }
    }
    /**
   * Return argument name.
   *
   * @return {string}
   */ name() {
        return this._name;
    }
    /**
   * @api private
   */ _concatValue(value, previous) {
        if (previous === this.defaultValue || !Array.isArray(previous)) return [
            value
        ];
        return previous.concat(value);
    }
    /**
   * Set the default value, and optionally supply the description to be displayed in the help.
   *
   * @param {any} value
   * @param {string} [description]
   * @return {Argument}
   */ default(value, description) {
        this.defaultValue = value;
        this.defaultValueDescription = description;
        return this;
    }
    /**
   * Set the custom handler for processing CLI command arguments into argument values.
   *
   * @param {Function} [fn]
   * @return {Argument}
   */ argParser(fn) {
        this.parseArg = fn;
        return this;
    }
    /**
   * Only allow argument value to be one of choices.
   *
   * @param {string[]} values
   * @return {Argument}
   */ choices(values) {
        this.argChoices = values.slice();
        this.parseArg = (arg, previous)=>{
            if (!this.argChoices.includes(arg)) throw new $a4d76d48f1f82ae4$require$InvalidArgumentError(`Allowed choices are ${this.argChoices.join(", ")}.`);
            if (this.variadic) return this._concatValue(arg, previous);
            return arg;
        };
        return this;
    }
    /**
   * Make argument required.
   */ argRequired() {
        this.required = true;
        return this;
    }
    /**
   * Make argument optional.
   */ argOptional() {
        this.required = false;
        return this;
    }
}
/**
 * Takes an argument and returns its human readable equivalent for help usage.
 *
 * @param {Argument} arg
 * @return {string}
 * @api private
 */ function $a4d76d48f1f82ae4$var$humanReadableArgName(arg) {
    const nameOutput = arg.name() + (arg.variadic === true ? "..." : "");
    return arg.required ? "<" + nameOutput + ">" : "[" + nameOutput + "]";
}
$a4d76d48f1f82ae4$export$84637ea037d2e218 = $a4d76d48f1f82ae4$var$Argument;
$a4d76d48f1f82ae4$export$6e65b3a729b8c0d8 = $a4d76d48f1f82ae4$var$humanReadableArgName;

});
parcelRequire.register("ijHVT", function(module, exports) {

$parcel$export(module.exports, "CommanderError", () => $d55c14783b3976a5$export$e42852c0d9bd9ade, (v) => $d55c14783b3976a5$export$e42852c0d9bd9ade = v);
$parcel$export(module.exports, "InvalidArgumentError", () => $d55c14783b3976a5$export$9c711d4a95378233, (v) => $d55c14783b3976a5$export$9c711d4a95378233 = v);
// @ts-check
/**
 * CommanderError class
 * @class
 */ var $d55c14783b3976a5$export$e42852c0d9bd9ade;
var $d55c14783b3976a5$export$9c711d4a95378233;
class $d55c14783b3976a5$var$CommanderError extends Error {
    /**
   * Constructs the CommanderError class
   * @param {number} exitCode suggested exit code which could be used with process.exit
   * @param {string} code an id string representing the error
   * @param {string} message human-readable description of the error
   * @constructor
   */ constructor(exitCode, code, message){
        super(message);
        // properly capture stack trace in Node.js
        Error.captureStackTrace(this, this.constructor);
        this.name = this.constructor.name;
        this.code = code;
        this.exitCode = exitCode;
        this.nestedError = undefined;
    }
}
/**
 * InvalidArgumentError class
 * @class
 */ class $d55c14783b3976a5$var$InvalidArgumentError extends $d55c14783b3976a5$var$CommanderError {
    /**
   * Constructs the InvalidArgumentError class
   * @param {string} [message] explanation of why argument is invalid
   * @constructor
   */ constructor(message){
        super(1, "commander.invalidArgument", message);
        // properly capture stack trace in Node.js
        Error.captureStackTrace(this, this.constructor);
        this.name = this.constructor.name;
    }
}
$d55c14783b3976a5$export$e42852c0d9bd9ade = $d55c14783b3976a5$var$CommanderError;
$d55c14783b3976a5$export$9c711d4a95378233 = $d55c14783b3976a5$var$InvalidArgumentError;

});


parcelRequire.register("3ctXX", function(module, exports) {

$parcel$export(module.exports, "Command", () => $2549bcbc79d91117$export$cc7e12c76513e857, (v) => $2549bcbc79d91117$export$cc7e12c76513e857 = v);
var $2549bcbc79d91117$export$cc7e12c76513e857;

var $fLrIr = parcelRequire("fLrIr");
var $2549bcbc79d91117$require$Buffer = $fLrIr.Buffer;

var $eCV8S = parcelRequire("eCV8S");
var $2549bcbc79d91117$require$EventEmitter = $eCV8S.EventEmitter;

var $XDU19 = parcelRequire("XDU19");

var $ceblk = parcelRequire("ceblk");

var $XDU19 = parcelRequire("XDU19");

var $jx7mO = parcelRequire("jx7mO");

var $e9rKa = parcelRequire("e9rKa");
var $2549bcbc79d91117$require$Argument = $e9rKa.Argument;
var $2549bcbc79d91117$require$humanReadableArgName = $e9rKa.humanReadableArgName;

var $ijHVT = parcelRequire("ijHVT");
var $2549bcbc79d91117$require$CommanderError = $ijHVT.CommanderError;

var $1rwQj = parcelRequire("1rwQj");
var $2549bcbc79d91117$require$Help = $1rwQj.Help;

var $aI2sl = parcelRequire("aI2sl");
var $2549bcbc79d91117$require$Option = $aI2sl.Option;
var $2549bcbc79d91117$require$splitOptionFlags = $aI2sl.splitOptionFlags;
var $2549bcbc79d91117$require$DualOptions = $aI2sl.DualOptions;

var $5XsVv = parcelRequire("5XsVv");
var $2549bcbc79d91117$require$suggestSimilar = $5XsVv.suggestSimilar;
// @ts-check
class $2549bcbc79d91117$var$Command extends $2549bcbc79d91117$require$EventEmitter {
    /**
   * Initialize a new `Command`.
   *
   * @param {string} [name]
   */ constructor(name){
        super();
        /** @type {Command[]} */ this.commands = [];
        /** @type {Option[]} */ this.options = [];
        this.parent = null;
        this._allowUnknownOption = false;
        this._allowExcessArguments = true;
        /** @type {Argument[]} */ this._args = [];
        /** @type {string[]} */ this.args = []; // cli args with options removed
        this.rawArgs = [];
        this.processedArgs = []; // like .args but after custom processing and collecting variadic
        this._scriptPath = null;
        this._name = name || "";
        this._optionValues = {};
        this._optionValueSources = {}; // default, env, cli etc
        this._storeOptionsAsProperties = false;
        this._actionHandler = null;
        this._executableHandler = false;
        this._executableFile = null; // custom name for executable
        this._executableDir = null; // custom search directory for subcommands
        this._defaultCommandName = null;
        this._exitCallback = null;
        this._aliases = [];
        this._combineFlagAndOptionalValue = true;
        this._description = "";
        this._summary = "";
        this._argsDescription = undefined; // legacy
        this._enablePositionalOptions = false;
        this._passThroughOptions = false;
        this._lifeCycleHooks = {}; // a hash of arrays
        /** @type {boolean | string} */ this._showHelpAfterError = false;
        this._showSuggestionAfterError = true;
        // see .configureOutput() for docs
        this._outputConfiguration = {
            writeOut: (str)=>$jx7mO.stdout.write(str),
            writeErr: (str)=>$jx7mO.stderr.write(str),
            getOutHelpWidth: ()=>$jx7mO.stdout.isTTY ? $jx7mO.stdout.columns : undefined,
            getErrHelpWidth: ()=>$jx7mO.stderr.isTTY ? $jx7mO.stderr.columns : undefined,
            outputError: (str, write)=>write(str)
        };
        this._hidden = false;
        this._hasHelpOption = true;
        this._helpFlags = "-h, --help";
        this._helpDescription = "display help for command";
        this._helpShortFlag = "-h";
        this._helpLongFlag = "--help";
        this._addImplicitHelpCommand = undefined; // Deliberately undefined, not decided whether true or false
        this._helpCommandName = "help";
        this._helpCommandnameAndArgs = "help [command]";
        this._helpCommandDescription = "display help for command";
        this._helpConfiguration = {};
    }
    /**
   * Copy settings that are useful to have in common across root command and subcommands.
   *
   * (Used internally when adding a command using `.command()` so subcommands inherit parent settings.)
   *
   * @param {Command} sourceCommand
   * @return {Command} `this` command for chaining
   */ copyInheritedSettings(sourceCommand) {
        this._outputConfiguration = sourceCommand._outputConfiguration;
        this._hasHelpOption = sourceCommand._hasHelpOption;
        this._helpFlags = sourceCommand._helpFlags;
        this._helpDescription = sourceCommand._helpDescription;
        this._helpShortFlag = sourceCommand._helpShortFlag;
        this._helpLongFlag = sourceCommand._helpLongFlag;
        this._helpCommandName = sourceCommand._helpCommandName;
        this._helpCommandnameAndArgs = sourceCommand._helpCommandnameAndArgs;
        this._helpCommandDescription = sourceCommand._helpCommandDescription;
        this._helpConfiguration = sourceCommand._helpConfiguration;
        this._exitCallback = sourceCommand._exitCallback;
        this._storeOptionsAsProperties = sourceCommand._storeOptionsAsProperties;
        this._combineFlagAndOptionalValue = sourceCommand._combineFlagAndOptionalValue;
        this._allowExcessArguments = sourceCommand._allowExcessArguments;
        this._enablePositionalOptions = sourceCommand._enablePositionalOptions;
        this._showHelpAfterError = sourceCommand._showHelpAfterError;
        this._showSuggestionAfterError = sourceCommand._showSuggestionAfterError;
        return this;
    }
    /**
   * Define a command.
   *
   * There are two styles of command: pay attention to where to put the description.
   *
   * @example
   * // Command implemented using action handler (description is supplied separately to `.command`)
   * program
   *   .command('clone <source> [destination]')
   *   .description('clone a repository into a newly created directory')
   *   .action((source, destination) => {
   *     console.log('clone command called');
   *   });
   *
   * // Command implemented using separate executable file (description is second parameter to `.command`)
   * program
   *   .command('start <service>', 'start named service')
   *   .command('stop [service]', 'stop named service, or all if no name supplied');
   *
   * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`
   * @param {Object|string} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)
   * @param {Object} [execOpts] - configuration options (for executable)
   * @return {Command} returns new command for action handler, or `this` for executable command
   */ command(nameAndArgs, actionOptsOrExecDesc, execOpts) {
        let desc = actionOptsOrExecDesc;
        let opts = execOpts;
        if (typeof desc === "object" && desc !== null) {
            opts = desc;
            desc = null;
        }
        opts = opts || {};
        const [, name, args] = nameAndArgs.match(/([^ ]+) *(.*)/);
        const cmd = this.createCommand(name);
        if (desc) {
            cmd.description(desc);
            cmd._executableHandler = true;
        }
        if (opts.isDefault) this._defaultCommandName = cmd._name;
        cmd._hidden = !!(opts.noHelp || opts.hidden); // noHelp is deprecated old name for hidden
        cmd._executableFile = opts.executableFile || null; // Custom name for executable file, set missing to null to match constructor
        if (args) cmd.arguments(args);
        this.commands.push(cmd);
        cmd.parent = this;
        cmd.copyInheritedSettings(this);
        if (desc) return this;
        return cmd;
    }
    /**
   * Factory routine to create a new unattached command.
   *
   * See .command() for creating an attached subcommand, which uses this routine to
   * create the command. You can override createCommand to customise subcommands.
   *
   * @param {string} [name]
   * @return {Command} new command
   */ createCommand(name) {
        return new $2549bcbc79d91117$var$Command(name);
    }
    /**
   * You can customise the help with a subclass of Help by overriding createHelp,
   * or by overriding Help properties using configureHelp().
   *
   * @return {Help}
   */ createHelp() {
        return Object.assign(new $2549bcbc79d91117$require$Help(), this.configureHelp());
    }
    /**
   * You can customise the help by overriding Help properties using configureHelp(),
   * or with a subclass of Help by overriding createHelp().
   *
   * @param {Object} [configuration] - configuration options
   * @return {Command|Object} `this` command for chaining, or stored configuration
   */ configureHelp(configuration) {
        if (configuration === undefined) return this._helpConfiguration;
        this._helpConfiguration = configuration;
        return this;
    }
    /**
   * The default output goes to stdout and stderr. You can customise this for special
   * applications. You can also customise the display of errors by overriding outputError.
   *
   * The configuration properties are all functions:
   *
   *     // functions to change where being written, stdout and stderr
   *     writeOut(str)
   *     writeErr(str)
   *     // matching functions to specify width for wrapping help
   *     getOutHelpWidth()
   *     getErrHelpWidth()
   *     // functions based on what is being written out
   *     outputError(str, write) // used for displaying errors, and not used for displaying help
   *
   * @param {Object} [configuration] - configuration options
   * @return {Command|Object} `this` command for chaining, or stored configuration
   */ configureOutput(configuration) {
        if (configuration === undefined) return this._outputConfiguration;
        Object.assign(this._outputConfiguration, configuration);
        return this;
    }
    /**
   * Display the help or a custom message after an error occurs.
   *
   * @param {boolean|string} [displayHelp]
   * @return {Command} `this` command for chaining
   */ showHelpAfterError(displayHelp = true) {
        if (typeof displayHelp !== "string") displayHelp = !!displayHelp;
        this._showHelpAfterError = displayHelp;
        return this;
    }
    /**
   * Display suggestion of similar commands for unknown commands, or options for unknown options.
   *
   * @param {boolean} [displaySuggestion]
   * @return {Command} `this` command for chaining
   */ showSuggestionAfterError(displaySuggestion = true) {
        this._showSuggestionAfterError = !!displaySuggestion;
        return this;
    }
    /**
   * Add a prepared subcommand.
   *
   * See .command() for creating an attached subcommand which inherits settings from its parent.
   *
   * @param {Command} cmd - new subcommand
   * @param {Object} [opts] - configuration options
   * @return {Command} `this` command for chaining
   */ addCommand(cmd, opts) {
        if (!cmd._name) throw new Error(`Command passed to .addCommand() must have a name
- specify the name in Command constructor or using .name()`);
        opts = opts || {};
        if (opts.isDefault) this._defaultCommandName = cmd._name;
        if (opts.noHelp || opts.hidden) cmd._hidden = true; // modifying passed command due to existing implementation
        this.commands.push(cmd);
        cmd.parent = this;
        return this;
    }
    /**
   * Factory routine to create a new unattached argument.
   *
   * See .argument() for creating an attached argument, which uses this routine to
   * create the argument. You can override createArgument to return a custom argument.
   *
   * @param {string} name
   * @param {string} [description]
   * @return {Argument} new argument
   */ createArgument(name, description) {
        return new $2549bcbc79d91117$require$Argument(name, description);
    }
    /**
   * Define argument syntax for command.
   *
   * The default is that the argument is required, and you can explicitly
   * indicate this with <> around the name. Put [] around the name for an optional argument.
   *
   * @example
   * program.argument('<input-file>');
   * program.argument('[output-file]');
   *
   * @param {string} name
   * @param {string} [description]
   * @param {Function|*} [fn] - custom argument processing function
   * @param {*} [defaultValue]
   * @return {Command} `this` command for chaining
   */ argument(name, description, fn, defaultValue) {
        const argument = this.createArgument(name, description);
        if (typeof fn === "function") argument.default(defaultValue).argParser(fn);
        else argument.default(fn);
        this.addArgument(argument);
        return this;
    }
    /**
   * Define argument syntax for command, adding multiple at once (without descriptions).
   *
   * See also .argument().
   *
   * @example
   * program.arguments('<cmd> [env]');
   *
   * @param {string} names
   * @return {Command} `this` command for chaining
   */ arguments(names) {
        names.split(/ +/).forEach((detail)=>{
            this.argument(detail);
        });
        return this;
    }
    /**
   * Define argument syntax for command, adding a prepared argument.
   *
   * @param {Argument} argument
   * @return {Command} `this` command for chaining
   */ addArgument(argument) {
        const previousArgument = this._args.slice(-1)[0];
        if (previousArgument && previousArgument.variadic) throw new Error(`only the last argument can be variadic '${previousArgument.name()}'`);
        if (argument.required && argument.defaultValue !== undefined && argument.parseArg === undefined) throw new Error(`a default value for a required argument is never used: '${argument.name()}'`);
        this._args.push(argument);
        return this;
    }
    /**
   * Override default decision whether to add implicit help command.
   *
   *    addHelpCommand() // force on
   *    addHelpCommand(false); // force off
   *    addHelpCommand('help [cmd]', 'display help for [cmd]'); // force on with custom details
   *
   * @return {Command} `this` command for chaining
   */ addHelpCommand(enableOrNameAndArgs, description) {
        if (enableOrNameAndArgs === false) this._addImplicitHelpCommand = false;
        else {
            this._addImplicitHelpCommand = true;
            if (typeof enableOrNameAndArgs === "string") {
                this._helpCommandName = enableOrNameAndArgs.split(" ")[0];
                this._helpCommandnameAndArgs = enableOrNameAndArgs;
            }
            this._helpCommandDescription = description || this._helpCommandDescription;
        }
        return this;
    }
    /**
   * @return {boolean}
   * @api private
   */ _hasImplicitHelpCommand() {
        if (this._addImplicitHelpCommand === undefined) return this.commands.length && !this._actionHandler && !this._findCommand("help");
        return this._addImplicitHelpCommand;
    }
    /**
   * Add hook for life cycle event.
   *
   * @param {string} event
   * @param {Function} listener
   * @return {Command} `this` command for chaining
   */ hook(event, listener) {
        const allowedValues = [
            "preSubcommand",
            "preAction",
            "postAction"
        ];
        if (!allowedValues.includes(event)) throw new Error(`Unexpected value for event passed to hook : '${event}'.
Expecting one of '${allowedValues.join("', '")}'`);
        if (this._lifeCycleHooks[event]) this._lifeCycleHooks[event].push(listener);
        else this._lifeCycleHooks[event] = [
            listener
        ];
        return this;
    }
    /**
   * Register callback to use as replacement for calling process.exit.
   *
   * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing
   * @return {Command} `this` command for chaining
   */ exitOverride(fn) {
        if (fn) this._exitCallback = fn;
        else this._exitCallback = (err)=>{
            if (err.code !== "commander.executeSubCommandAsync") throw err;
        };
        return this;
    }
    /**
   * Call process.exit, and _exitCallback if defined.
   *
   * @param {number} exitCode exit code for using with process.exit
   * @param {string} code an id string representing the error
   * @param {string} message human-readable description of the error
   * @return never
   * @api private
   */ _exit(exitCode, code, message) {
        if (this._exitCallback) this._exitCallback(new $2549bcbc79d91117$require$CommanderError(exitCode, code, message));
        $jx7mO.exit(exitCode);
    }
    /**
   * Register callback `fn` for the command.
   *
   * @example
   * program
   *   .command('serve')
   *   .description('start service')
   *   .action(function() {
   *      // do work here
   *   });
   *
   * @param {Function} fn
   * @return {Command} `this` command for chaining
   */ action(fn) {
        const listener = (args)=>{
            // The .action callback takes an extra parameter which is the command or options.
            const expectedArgsCount = this._args.length;
            const actionArgs = args.slice(0, expectedArgsCount);
            if (this._storeOptionsAsProperties) actionArgs[expectedArgsCount] = this; // backwards compatible "options"
            else actionArgs[expectedArgsCount] = this.opts();
            actionArgs.push(this);
            return fn.apply(this, actionArgs);
        };
        this._actionHandler = listener;
        return this;
    }
    /**
   * Factory routine to create a new unattached option.
   *
   * See .option() for creating an attached option, which uses this routine to
   * create the option. You can override createOption to return a custom option.
   *
   * @param {string} flags
   * @param {string} [description]
   * @return {Option} new option
   */ createOption(flags, description) {
        return new $2549bcbc79d91117$require$Option(flags, description);
    }
    /**
   * Add an option.
   *
   * @param {Option} option
   * @return {Command} `this` command for chaining
   */ addOption(option) {
        const oname = option.name();
        const name = option.attributeName();
        // store default value
        if (option.negate) {
            // --no-foo is special and defaults foo to true, unless a --foo option is already defined
            const positiveLongFlag = option.long.replace(/^--no-/, "--");
            if (!this._findOption(positiveLongFlag)) this.setOptionValueWithSource(name, option.defaultValue === undefined ? true : option.defaultValue, "default");
        } else if (option.defaultValue !== undefined) this.setOptionValueWithSource(name, option.defaultValue, "default");
        // register the option
        this.options.push(option);
        // handler for cli and env supplied values
        const handleOptionValue = (val, invalidValueMessage, valueSource)=>{
            // val is null for optional option used without an optional-argument.
            // val is undefined for boolean and negated option.
            if (val == null && option.presetArg !== undefined) val = option.presetArg;
            // custom processing
            const oldValue = this.getOptionValue(name);
            if (val !== null && option.parseArg) try {
                val = option.parseArg(val, oldValue);
            } catch (err) {
                if (err.code === "commander.invalidArgument") {
                    const message = `${invalidValueMessage} ${err.message}`;
                    this.error(message, {
                        exitCode: err.exitCode,
                        code: err.code
                    });
                }
                throw err;
            }
            else if (val !== null && option.variadic) val = option._concatValue(val, oldValue);
            // Fill-in appropriate missing values. Long winded but easy to follow.
            if (val == null) {
                if (option.negate) val = false;
                else if (option.isBoolean() || option.optional) val = true;
                else val = ""; // not normal, parseArg might have failed or be a mock function for testing
            }
            this.setOptionValueWithSource(name, val, valueSource);
        };
        this.on("option:" + oname, (val)=>{
            const invalidValueMessage = `error: option '${option.flags}' argument '${val}' is invalid.`;
            handleOptionValue(val, invalidValueMessage, "cli");
        });
        if (option.envVar) this.on("optionEnv:" + oname, (val)=>{
            const invalidValueMessage = `error: option '${option.flags}' value '${val}' from env '${option.envVar}' is invalid.`;
            handleOptionValue(val, invalidValueMessage, "env");
        });
        return this;
    }
    /**
   * Internal implementation shared by .option() and .requiredOption()
   *
   * @api private
   */ _optionEx(config, flags, description, fn, defaultValue) {
        if (typeof flags === "object" && flags instanceof $2549bcbc79d91117$require$Option) throw new Error("To add an Option object use addOption() instead of option() or requiredOption()");
        const option = this.createOption(flags, description);
        option.makeOptionMandatory(!!config.mandatory);
        if (typeof fn === "function") option.default(defaultValue).argParser(fn);
        else if (fn instanceof RegExp) {
            // deprecated
            const regex = fn;
            fn = (val, def)=>{
                const m = regex.exec(val);
                return m ? m[0] : def;
            };
            option.default(defaultValue).argParser(fn);
        } else option.default(fn);
        return this.addOption(option);
    }
    /**
   * Define option with `flags`, `description` and optional
   * coercion `fn`.
   *
   * The `flags` string contains the short and/or long flags,
   * separated by comma, a pipe or space. The following are all valid
   * all will output this way when `--help` is used.
   *
   *     "-p, --pepper"
   *     "-p|--pepper"
   *     "-p --pepper"
   *
   * @example
   * // simple boolean defaulting to undefined
   * program.option('-p, --pepper', 'add pepper');
   *
   * program.pepper
   * // => undefined
   *
   * --pepper
   * program.pepper
   * // => true
   *
   * // simple boolean defaulting to true (unless non-negated option is also defined)
   * program.option('-C, --no-cheese', 'remove cheese');
   *
   * program.cheese
   * // => true
   *
   * --no-cheese
   * program.cheese
   * // => false
   *
   * // required argument
   * program.option('-C, --chdir <path>', 'change the working directory');
   *
   * --chdir /tmp
   * program.chdir
   * // => "/tmp"
   *
   * // optional argument
   * program.option('-c, --cheese [type]', 'add cheese [marble]');
   *
   * @param {string} flags
   * @param {string} [description]
   * @param {Function|*} [fn] - custom option processing function or default value
   * @param {*} [defaultValue]
   * @return {Command} `this` command for chaining
   */ option(flags, description, fn, defaultValue) {
        return this._optionEx({}, flags, description, fn, defaultValue);
    }
    /**
  * Add a required option which must have a value after parsing. This usually means
  * the option must be specified on the command line. (Otherwise the same as .option().)
  *
  * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space.
  *
  * @param {string} flags
  * @param {string} [description]
  * @param {Function|*} [fn] - custom option processing function or default value
  * @param {*} [defaultValue]
  * @return {Command} `this` command for chaining
  */ requiredOption(flags, description, fn, defaultValue) {
        return this._optionEx({
            mandatory: true
        }, flags, description, fn, defaultValue);
    }
    /**
   * Alter parsing of short flags with optional values.
   *
   * @example
   * // for `.option('-f,--flag [value]'):
   * program.combineFlagAndOptionalValue(true);  // `-f80` is treated like `--flag=80`, this is the default behaviour
   * program.combineFlagAndOptionalValue(false) // `-fb` is treated like `-f -b`
   *
   * @param {Boolean} [combine=true] - if `true` or omitted, an optional value can be specified directly after the flag.
   */ combineFlagAndOptionalValue(combine = true) {
        this._combineFlagAndOptionalValue = !!combine;
        return this;
    }
    /**
   * Allow unknown options on the command line.
   *
   * @param {Boolean} [allowUnknown=true] - if `true` or omitted, no error will be thrown
   * for unknown options.
   */ allowUnknownOption(allowUnknown = true) {
        this._allowUnknownOption = !!allowUnknown;
        return this;
    }
    /**
   * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.
   *
   * @param {Boolean} [allowExcess=true] - if `true` or omitted, no error will be thrown
   * for excess arguments.
   */ allowExcessArguments(allowExcess = true) {
        this._allowExcessArguments = !!allowExcess;
        return this;
    }
    /**
   * Enable positional options. Positional means global options are specified before subcommands which lets
   * subcommands reuse the same option names, and also enables subcommands to turn on passThroughOptions.
   * The default behaviour is non-positional and global options may appear anywhere on the command line.
   *
   * @param {Boolean} [positional=true]
   */ enablePositionalOptions(positional = true) {
        this._enablePositionalOptions = !!positional;
        return this;
    }
    /**
   * Pass through options that come after command-arguments rather than treat them as command-options,
   * so actual command-options come before command-arguments. Turning this on for a subcommand requires
   * positional options to have been enabled on the program (parent commands).
   * The default behaviour is non-positional and options may appear before or after command-arguments.
   *
   * @param {Boolean} [passThrough=true]
   * for unknown options.
   */ passThroughOptions(passThrough = true) {
        this._passThroughOptions = !!passThrough;
        if (!!this.parent && passThrough && !this.parent._enablePositionalOptions) throw new Error("passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)");
        return this;
    }
    /**
    * Whether to store option values as properties on command object,
    * or store separately (specify false). In both cases the option values can be accessed using .opts().
    *
    * @param {boolean} [storeAsProperties=true]
    * @return {Command} `this` command for chaining
    */ storeOptionsAsProperties(storeAsProperties = true) {
        this._storeOptionsAsProperties = !!storeAsProperties;
        if (this.options.length) throw new Error("call .storeOptionsAsProperties() before adding options");
        return this;
    }
    /**
   * Retrieve option value.
   *
   * @param {string} key
   * @return {Object} value
   */ getOptionValue(key) {
        if (this._storeOptionsAsProperties) return this[key];
        return this._optionValues[key];
    }
    /**
   * Store option value.
   *
   * @param {string} key
   * @param {Object} value
   * @return {Command} `this` command for chaining
   */ setOptionValue(key, value) {
        return this.setOptionValueWithSource(key, value, undefined);
    }
    /**
    * Store option value and where the value came from.
    *
    * @param {string} key
    * @param {Object} value
    * @param {string} source - expected values are default/config/env/cli/implied
    * @return {Command} `this` command for chaining
    */ setOptionValueWithSource(key, value, source) {
        if (this._storeOptionsAsProperties) this[key] = value;
        else this._optionValues[key] = value;
        this._optionValueSources[key] = source;
        return this;
    }
    /**
    * Get source of option value.
    * Expected values are default | config | env | cli | implied
    *
    * @param {string} key
    * @return {string}
    */ getOptionValueSource(key) {
        return this._optionValueSources[key];
    }
    /**
    * Get source of option value. See also .optsWithGlobals().
    * Expected values are default | config | env | cli | implied
    *
    * @param {string} key
    * @return {string}
    */ getOptionValueSourceWithGlobals(key) {
        // global overwrites local, like optsWithGlobals
        let source;
        $2549bcbc79d91117$var$getCommandAndParents(this).forEach((cmd)=>{
            if (cmd.getOptionValueSource(key) !== undefined) source = cmd.getOptionValueSource(key);
        });
        return source;
    }
    /**
   * Get user arguments from implied or explicit arguments.
   * Side-effects: set _scriptPath if args included script. Used for default program name, and subcommand searches.
   *
   * @api private
   */ _prepareUserArgs(argv, parseOptions) {
        if (argv !== undefined && !Array.isArray(argv)) throw new Error("first parameter to parse must be array or undefined");
        parseOptions = parseOptions || {};
        // Default to using process.argv
        if (argv === undefined) {
            argv = $jx7mO.argv;
            // @ts-ignore: unknown property
            if ($jx7mO.versions && $jx7mO.versions.electron) parseOptions.from = "electron";
        }
        this.rawArgs = argv.slice();
        // make it a little easier for callers by supporting various argv conventions
        let userArgs;
        switch(parseOptions.from){
            case undefined:
            case "node":
                this._scriptPath = argv[1];
                userArgs = argv.slice(2);
                break;
            case "electron":
                // @ts-ignore: unknown property
                if ($jx7mO.defaultApp) {
                    this._scriptPath = argv[1];
                    userArgs = argv.slice(2);
                } else userArgs = argv.slice(1);
                break;
            case "user":
                userArgs = argv.slice(0);
                break;
            default:
                throw new Error(`unexpected parse option { from: '${parseOptions.from}' }`);
        }
        // Find default name for program from arguments.
        if (!this._name && this._scriptPath) this.nameFromFilename(this._scriptPath);
        this._name = this._name || "program";
        return userArgs;
    }
    /**
   * Parse `argv`, setting options and invoking commands when defined.
   *
   * The default expectation is that the arguments are from node and have the application as argv[0]
   * and the script being run in argv[1], with user parameters after that.
   *
   * @example
   * program.parse(process.argv);
   * program.parse(); // implicitly use process.argv and auto-detect node vs electron conventions
   * program.parse(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]
   *
   * @param {string[]} [argv] - optional, defaults to process.argv
   * @param {Object} [parseOptions] - optionally specify style of options with from: node/user/electron
   * @param {string} [parseOptions.from] - where the args are from: 'node', 'user', 'electron'
   * @return {Command} `this` command for chaining
   */ parse(argv, parseOptions) {
        const userArgs = this._prepareUserArgs(argv, parseOptions);
        this._parseCommand([], userArgs);
        return this;
    }
    /**
   * Parse `argv`, setting options and invoking commands when defined.
   *
   * Use parseAsync instead of parse if any of your action handlers are async. Returns a Promise.
   *
   * The default expectation is that the arguments are from node and have the application as argv[0]
   * and the script being run in argv[1], with user parameters after that.
   *
   * @example
   * await program.parseAsync(process.argv);
   * await program.parseAsync(); // implicitly use process.argv and auto-detect node vs electron conventions
   * await program.parseAsync(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]
   *
   * @param {string[]} [argv]
   * @param {Object} [parseOptions]
   * @param {string} parseOptions.from - where the args are from: 'node', 'user', 'electron'
   * @return {Promise}
   */ async parseAsync(argv, parseOptions) {
        const userArgs = this._prepareUserArgs(argv, parseOptions);
        await this._parseCommand([], userArgs);
        return this;
    }
    /**
   * Execute a sub-command executable.
   *
   * @api private
   */ _executeSubCommand(subcommand, args) {
        args = args.slice();
        let launchWithNode = false; // Use node for source targets so do not need to get permissions correct, and on Windows.
        const sourceExt = [
            ".js",
            ".ts",
            ".tsx",
            ".mjs",
            ".cjs"
        ];
        function findFile(baseDir, baseName) {
            // Look for specified file
            const localBin = $ceblk.resolve(baseDir, baseName);
            if ($XDU19.existsSync(localBin)) return localBin;
            // Stop looking if candidate already has an expected extension.
            if (sourceExt.includes($ceblk.extname(baseName))) return undefined;
            // Try all the extensions.
            const foundExt = sourceExt.find((ext)=>$XDU19.existsSync(`${localBin}${ext}`));
            if (foundExt) return `${localBin}${foundExt}`;
            return undefined;
        }
        // Not checking for help first. Unlikely to have mandatory and executable, and can't robustly test for help flags in external command.
        this._checkForMissingMandatoryOptions();
        this._checkForConflictingOptions();
        // executableFile and executableDir might be full path, or just a name
        let executableFile = subcommand._executableFile || `${this._name}-${subcommand._name}`;
        let executableDir = this._executableDir || "";
        if (this._scriptPath) {
            let resolvedScriptPath; // resolve possible symlink for installed npm binary
            try {
                resolvedScriptPath = $XDU19.realpathSync(this._scriptPath);
            } catch (err) {
                resolvedScriptPath = this._scriptPath;
            }
            executableDir = $ceblk.resolve($ceblk.dirname(resolvedScriptPath), executableDir);
        }
        // Look for a local file in preference to a command in PATH.
        if (executableDir) {
            let localFile = findFile(executableDir, executableFile);
            // Legacy search using prefix of script name instead of command name
            if (!localFile && !subcommand._executableFile && this._scriptPath) {
                const legacyName = $ceblk.basename(this._scriptPath, $ceblk.extname(this._scriptPath));
                if (legacyName !== this._name) localFile = findFile(executableDir, `${legacyName}-${subcommand._name}`);
            }
            executableFile = localFile || executableFile;
        }
        launchWithNode = sourceExt.includes($ceblk.extname(executableFile));
        let proc;
        if ($jx7mO.platform !== "win32") {
            if (launchWithNode) {
                args.unshift(executableFile);
                // add executable arguments to spawn
                args = $2549bcbc79d91117$var$incrementNodeInspectorPort($jx7mO.execArgv).concat(args);
                proc = $XDU19.spawn($jx7mO.argv[0], args, {
                    stdio: "inherit"
                });
            } else proc = $XDU19.spawn(executableFile, args, {
                stdio: "inherit"
            });
        } else {
            args.unshift(executableFile);
            // add executable arguments to spawn
            args = $2549bcbc79d91117$var$incrementNodeInspectorPort($jx7mO.execArgv).concat(args);
            proc = $XDU19.spawn($jx7mO.execPath, args, {
                stdio: "inherit"
            });
        }
        if (!proc.killed) {
            const signals = [
                "SIGUSR1",
                "SIGUSR2",
                "SIGTERM",
                "SIGINT",
                "SIGHUP"
            ];
            signals.forEach((signal)=>{
                // @ts-ignore
                $jx7mO.on(signal, ()=>{
                    if (proc.killed === false && proc.exitCode === null) proc.kill(signal);
                });
            });
        }
        // By default terminate process when spawned process terminates.
        // Suppressing the exit if exitCallback defined is a bit messy and of limited use, but does allow process to stay running!
        const exitCallback = this._exitCallback;
        if (!exitCallback) proc.on("close", $jx7mO.exit.bind($jx7mO));
        else proc.on("close", ()=>{
            exitCallback(new $2549bcbc79d91117$require$CommanderError($jx7mO.exitCode || 0, "commander.executeSubCommandAsync", "(close)"));
        });
        proc.on("error", (err)=>{
            // @ts-ignore
            if (err.code === "ENOENT") {
                const executableDirMessage = executableDir ? `searched for local subcommand relative to directory '${executableDir}'` : "no directory for search for local subcommand, use .executableDir() to supply a custom directory";
                const executableMissing = `'${executableFile}' does not exist
 - if '${subcommand._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead
 - if the default executable name is not suitable, use the executableFile option to supply a custom name or path
 - ${executableDirMessage}`;
                throw new Error(executableMissing);
            // @ts-ignore
            } else if (err.code === "EACCES") throw new Error(`'${executableFile}' not executable`);
            if (!exitCallback) $jx7mO.exit(1);
            else {
                const wrappedError = new $2549bcbc79d91117$require$CommanderError(1, "commander.executeSubCommandAsync", "(error)");
                wrappedError.nestedError = err;
                exitCallback(wrappedError);
            }
        });
        // Store the reference to the child process
        this.runningCommand = proc;
    }
    /**
   * @api private
   */ _dispatchSubcommand(commandName, operands, unknown) {
        const subCommand = this._findCommand(commandName);
        if (!subCommand) this.help({
            error: true
        });
        let hookResult;
        hookResult = this._chainOrCallSubCommandHook(hookResult, subCommand, "preSubcommand");
        hookResult = this._chainOrCall(hookResult, ()=>{
            if (subCommand._executableHandler) this._executeSubCommand(subCommand, operands.concat(unknown));
            else return subCommand._parseCommand(operands, unknown);
        });
        return hookResult;
    }
    /**
   * Check this.args against expected this._args.
   *
   * @api private
   */ _checkNumberOfArguments() {
        // too few
        this._args.forEach((arg, i)=>{
            if (arg.required && this.args[i] == null) this.missingArgument(arg.name());
        });
        // too many
        if (this._args.length > 0 && this._args[this._args.length - 1].variadic) return;
        if (this.args.length > this._args.length) this._excessArguments(this.args);
    }
    /**
   * Process this.args using this._args and save as this.processedArgs!
   *
   * @api private
   */ _processArguments() {
        const myParseArg = (argument, value, previous)=>{
            // Extra processing for nice error message on parsing failure.
            let parsedValue = value;
            if (value !== null && argument.parseArg) try {
                parsedValue = argument.parseArg(value, previous);
            } catch (err) {
                if (err.code === "commander.invalidArgument") {
                    const message = `error: command-argument value '${value}' is invalid for argument '${argument.name()}'. ${err.message}`;
                    this.error(message, {
                        exitCode: err.exitCode,
                        code: err.code
                    });
                }
                throw err;
            }
            return parsedValue;
        };
        this._checkNumberOfArguments();
        const processedArgs = [];
        this._args.forEach((declaredArg, index)=>{
            let value = declaredArg.defaultValue;
            if (declaredArg.variadic) {
                // Collect together remaining arguments for passing together as an array.
                if (index < this.args.length) {
                    value = this.args.slice(index);
                    if (declaredArg.parseArg) value = value.reduce((processed, v)=>{
                        return myParseArg(declaredArg, v, processed);
                    }, declaredArg.defaultValue);
                } else if (value === undefined) value = [];
            } else if (index < this.args.length) {
                value = this.args[index];
                if (declaredArg.parseArg) value = myParseArg(declaredArg, value, declaredArg.defaultValue);
            }
            processedArgs[index] = value;
        });
        this.processedArgs = processedArgs;
    }
    /**
   * Once we have a promise we chain, but call synchronously until then.
   *
   * @param {Promise|undefined} promise
   * @param {Function} fn
   * @return {Promise|undefined}
   * @api private
   */ _chainOrCall(promise, fn) {
        // thenable
        if (promise && promise.then && typeof promise.then === "function") // already have a promise, chain callback
        return promise.then(()=>fn());
        // callback might return a promise
        return fn();
    }
    /**
   *
   * @param {Promise|undefined} promise
   * @param {string} event
   * @return {Promise|undefined}
   * @api private
   */ _chainOrCallHooks(promise, event) {
        let result = promise;
        const hooks = [];
        $2549bcbc79d91117$var$getCommandAndParents(this).reverse().filter((cmd)=>cmd._lifeCycleHooks[event] !== undefined).forEach((hookedCommand)=>{
            hookedCommand._lifeCycleHooks[event].forEach((callback)=>{
                hooks.push({
                    hookedCommand: hookedCommand,
                    callback: callback
                });
            });
        });
        if (event === "postAction") hooks.reverse();
        hooks.forEach((hookDetail)=>{
            result = this._chainOrCall(result, ()=>{
                return hookDetail.callback(hookDetail.hookedCommand, this);
            });
        });
        return result;
    }
    /**
   *
   * @param {Promise|undefined} promise
   * @param {Command} subCommand
   * @param {string} event
   * @return {Promise|undefined}
   * @api private
   */ _chainOrCallSubCommandHook(promise, subCommand, event) {
        let result = promise;
        if (this._lifeCycleHooks[event] !== undefined) this._lifeCycleHooks[event].forEach((hook)=>{
            result = this._chainOrCall(result, ()=>{
                return hook(this, subCommand);
            });
        });
        return result;
    }
    /**
   * Process arguments in context of this command.
   * Returns action result, in case it is a promise.
   *
   * @api private
   */ _parseCommand(operands, unknown) {
        const parsed = this.parseOptions(unknown);
        this._parseOptionsEnv(); // after cli, so parseArg not called on both cli and env
        this._parseOptionsImplied();
        operands = operands.concat(parsed.operands);
        unknown = parsed.unknown;
        this.args = operands.concat(unknown);
        if (operands && this._findCommand(operands[0])) return this._dispatchSubcommand(operands[0], operands.slice(1), unknown);
        if (this._hasImplicitHelpCommand() && operands[0] === this._helpCommandName) {
            if (operands.length === 1) this.help();
            return this._dispatchSubcommand(operands[1], [], [
                this._helpLongFlag
            ]);
        }
        if (this._defaultCommandName) {
            $2549bcbc79d91117$var$outputHelpIfRequested(this, unknown); // Run the help for default command from parent rather than passing to default command
            return this._dispatchSubcommand(this._defaultCommandName, operands, unknown);
        }
        if (this.commands.length && this.args.length === 0 && !this._actionHandler && !this._defaultCommandName) // probably missing subcommand and no handler, user needs help (and exit)
        this.help({
            error: true
        });
        $2549bcbc79d91117$var$outputHelpIfRequested(this, parsed.unknown);
        this._checkForMissingMandatoryOptions();
        this._checkForConflictingOptions();
        // We do not always call this check to avoid masking a "better" error, like unknown command.
        const checkForUnknownOptions = ()=>{
            if (parsed.unknown.length > 0) this.unknownOption(parsed.unknown[0]);
        };
        const commandEvent = `command:${this.name()}`;
        if (this._actionHandler) {
            checkForUnknownOptions();
            this._processArguments();
            let actionResult;
            actionResult = this._chainOrCallHooks(actionResult, "preAction");
            actionResult = this._chainOrCall(actionResult, ()=>this._actionHandler(this.processedArgs));
            if (this.parent) actionResult = this._chainOrCall(actionResult, ()=>{
                this.parent.emit(commandEvent, operands, unknown); // legacy
            });
            actionResult = this._chainOrCallHooks(actionResult, "postAction");
            return actionResult;
        }
        if (this.parent && this.parent.listenerCount(commandEvent)) {
            checkForUnknownOptions();
            this._processArguments();
            this.parent.emit(commandEvent, operands, unknown); // legacy
        } else if (operands.length) {
            if (this._findCommand("*")) return this._dispatchSubcommand("*", operands, unknown);
            if (this.listenerCount("command:*")) // skip option check, emit event for possible misspelling suggestion
            this.emit("command:*", operands, unknown);
            else if (this.commands.length) this.unknownCommand();
            else {
                checkForUnknownOptions();
                this._processArguments();
            }
        } else if (this.commands.length) {
            checkForUnknownOptions();
            // This command has subcommands and nothing hooked up at this level, so display help (and exit).
            this.help({
                error: true
            });
        } else {
            checkForUnknownOptions();
            this._processArguments();
        // fall through for caller to handle after calling .parse()
        }
    }
    /**
   * Find matching command.
   *
   * @api private
   */ _findCommand(name) {
        if (!name) return undefined;
        return this.commands.find((cmd)=>cmd._name === name || cmd._aliases.includes(name));
    }
    /**
   * Return an option matching `arg` if any.
   *
   * @param {string} arg
   * @return {Option}
   * @api private
   */ _findOption(arg) {
        return this.options.find((option)=>option.is(arg));
    }
    /**
   * Display an error message if a mandatory option does not have a value.
   * Called after checking for help flags in leaf subcommand.
   *
   * @api private
   */ _checkForMissingMandatoryOptions() {
        // Walk up hierarchy so can call in subcommand after checking for displaying help.
        for(let cmd = this; cmd; cmd = cmd.parent)cmd.options.forEach((anOption)=>{
            if (anOption.mandatory && cmd.getOptionValue(anOption.attributeName()) === undefined) cmd.missingMandatoryOptionValue(anOption);
        });
    }
    /**
   * Display an error message if conflicting options are used together in this.
   *
   * @api private
   */ _checkForConflictingLocalOptions() {
        const definedNonDefaultOptions = this.options.filter((option)=>{
            const optionKey = option.attributeName();
            if (this.getOptionValue(optionKey) === undefined) return false;
            return this.getOptionValueSource(optionKey) !== "default";
        });
        const optionsWithConflicting = definedNonDefaultOptions.filter((option)=>option.conflictsWith.length > 0);
        optionsWithConflicting.forEach((option)=>{
            const conflictingAndDefined = definedNonDefaultOptions.find((defined)=>option.conflictsWith.includes(defined.attributeName()));
            if (conflictingAndDefined) this._conflictingOption(option, conflictingAndDefined);
        });
    }
    /**
   * Display an error message if conflicting options are used together.
   * Called after checking for help flags in leaf subcommand.
   *
   * @api private
   */ _checkForConflictingOptions() {
        // Walk up hierarchy so can call in subcommand after checking for displaying help.
        for(let cmd = this; cmd; cmd = cmd.parent)cmd._checkForConflictingLocalOptions();
    }
    /**
   * Parse options from `argv` removing known options,
   * and return argv split into operands and unknown arguments.
   *
   * Examples:
   *
   *     argv => operands, unknown
   *     --known kkk op => [op], []
   *     op --known kkk => [op], []
   *     sub --unknown uuu op => [sub], [--unknown uuu op]
   *     sub -- --unknown uuu op => [sub --unknown uuu op], []
   *
   * @param {String[]} argv
   * @return {{operands: String[], unknown: String[]}}
   */ parseOptions(argv) {
        const operands = []; // operands, not options or values
        const unknown = []; // first unknown option and remaining unknown args
        let dest = operands;
        const args = argv.slice();
        function maybeOption(arg) {
            return arg.length > 1 && arg[0] === "-";
        }
        // parse options
        let activeVariadicOption = null;
        while(args.length){
            const arg = args.shift();
            // literal
            if (arg === "--") {
                if (dest === unknown) dest.push(arg);
                dest.push(...args);
                break;
            }
            if (activeVariadicOption && !maybeOption(arg)) {
                this.emit(`option:${activeVariadicOption.name()}`, arg);
                continue;
            }
            activeVariadicOption = null;
            if (maybeOption(arg)) {
                const option = this._findOption(arg);
                // recognised option, call listener to assign value with possible custom processing
                if (option) {
                    if (option.required) {
                        const value = args.shift();
                        if (value === undefined) this.optionMissingArgument(option);
                        this.emit(`option:${option.name()}`, value);
                    } else if (option.optional) {
                        let value = null;
                        // historical behaviour is optional value is following arg unless an option
                        if (args.length > 0 && !maybeOption(args[0])) value = args.shift();
                        this.emit(`option:${option.name()}`, value);
                    } else this.emit(`option:${option.name()}`);
                    activeVariadicOption = option.variadic ? option : null;
                    continue;
                }
            }
            // Look for combo options following single dash, eat first one if known.
            if (arg.length > 2 && arg[0] === "-" && arg[1] !== "-") {
                const option = this._findOption(`-${arg[1]}`);
                if (option) {
                    if (option.required || option.optional && this._combineFlagAndOptionalValue) // option with value following in same argument
                    this.emit(`option:${option.name()}`, arg.slice(2));
                    else {
                        // boolean option, emit and put back remainder of arg for further processing
                        this.emit(`option:${option.name()}`);
                        args.unshift(`-${arg.slice(2)}`);
                    }
                    continue;
                }
            }
            // Look for known long flag with value, like --foo=bar
            if (/^--[^=]+=/.test(arg)) {
                const index = arg.indexOf("=");
                const option = this._findOption(arg.slice(0, index));
                if (option && (option.required || option.optional)) {
                    this.emit(`option:${option.name()}`, arg.slice(index + 1));
                    continue;
                }
            }
            // Not a recognised option by this command.
            // Might be a command-argument, or subcommand option, or unknown option, or help command or option.
            // An unknown option means further arguments also classified as unknown so can be reprocessed by subcommands.
            if (maybeOption(arg)) dest = unknown;
            // If using positionalOptions, stop processing our options at subcommand.
            if ((this._enablePositionalOptions || this._passThroughOptions) && operands.length === 0 && unknown.length === 0) {
                if (this._findCommand(arg)) {
                    operands.push(arg);
                    if (args.length > 0) unknown.push(...args);
                    break;
                } else if (arg === this._helpCommandName && this._hasImplicitHelpCommand()) {
                    operands.push(arg);
                    if (args.length > 0) operands.push(...args);
                    break;
                } else if (this._defaultCommandName) {
                    unknown.push(arg);
                    if (args.length > 0) unknown.push(...args);
                    break;
                }
            }
            // If using passThroughOptions, stop processing options at first command-argument.
            if (this._passThroughOptions) {
                dest.push(arg);
                if (args.length > 0) dest.push(...args);
                break;
            }
            // add arg
            dest.push(arg);
        }
        return {
            operands: operands,
            unknown: unknown
        };
    }
    /**
   * Return an object containing local option values as key-value pairs.
   *
   * @return {Object}
   */ opts() {
        if (this._storeOptionsAsProperties) {
            // Preserve original behaviour so backwards compatible when still using properties
            const result = {};
            const len = this.options.length;
            for(let i = 0; i < len; i++){
                const key = this.options[i].attributeName();
                result[key] = key === this._versionOptionName ? this._version : this[key];
            }
            return result;
        }
        return this._optionValues;
    }
    /**
   * Return an object containing merged local and global option values as key-value pairs.
   *
   * @return {Object}
   */ optsWithGlobals() {
        // globals overwrite locals
        return $2549bcbc79d91117$var$getCommandAndParents(this).reduce((combinedOptions, cmd)=>Object.assign(combinedOptions, cmd.opts()), {});
    }
    /**
   * Display error message and exit (or call exitOverride).
   *
   * @param {string} message
   * @param {Object} [errorOptions]
   * @param {string} [errorOptions.code] - an id string representing the error
   * @param {number} [errorOptions.exitCode] - used with process.exit
   */ error(message, errorOptions) {
        // output handling
        this._outputConfiguration.outputError(`${message}\n`, this._outputConfiguration.writeErr);
        if (typeof this._showHelpAfterError === "string") this._outputConfiguration.writeErr(`${this._showHelpAfterError}\n`);
        else if (this._showHelpAfterError) {
            this._outputConfiguration.writeErr("\n");
            this.outputHelp({
                error: true
            });
        }
        // exit handling
        const config = errorOptions || {};
        const exitCode = config.exitCode || 1;
        const code = config.code || "commander.error";
        this._exit(exitCode, code, message);
    }
    /**
   * Apply any option related environment variables, if option does
   * not have a value from cli or client code.
   *
   * @api private
   */ _parseOptionsEnv() {
        this.options.forEach((option)=>{
            if (option.envVar && option.envVar in $jx7mO.env) {
                const optionKey = option.attributeName();
                // Priority check. Do not overwrite cli or options from unknown source (client-code).
                if (this.getOptionValue(optionKey) === undefined || [
                    "default",
                    "config",
                    "env"
                ].includes(this.getOptionValueSource(optionKey))) {
                    if (option.required || option.optional) // keep very simple, optional always takes value
                    this.emit(`optionEnv:${option.name()}`, $jx7mO.env[option.envVar]);
                    else // keep very simple, only care that envVar defined and not the value
                    this.emit(`optionEnv:${option.name()}`);
                }
            }
        });
    }
    /**
   * Apply any implied option values, if option is undefined or default value.
   *
   * @api private
   */ _parseOptionsImplied() {
        const dualHelper = new $2549bcbc79d91117$require$DualOptions(this.options);
        const hasCustomOptionValue = (optionKey)=>{
            return this.getOptionValue(optionKey) !== undefined && ![
                "default",
                "implied"
            ].includes(this.getOptionValueSource(optionKey));
        };
        this.options.filter((option)=>option.implied !== undefined && hasCustomOptionValue(option.attributeName()) && dualHelper.valueFromOption(this.getOptionValue(option.attributeName()), option)).forEach((option)=>{
            Object.keys(option.implied).filter((impliedKey)=>!hasCustomOptionValue(impliedKey)).forEach((impliedKey)=>{
                this.setOptionValueWithSource(impliedKey, option.implied[impliedKey], "implied");
            });
        });
    }
    /**
   * Argument `name` is missing.
   *
   * @param {string} name
   * @api private
   */ missingArgument(name) {
        const message = `error: missing required argument '${name}'`;
        this.error(message, {
            code: "commander.missingArgument"
        });
    }
    /**
   * `Option` is missing an argument.
   *
   * @param {Option} option
   * @api private
   */ optionMissingArgument(option) {
        const message = `error: option '${option.flags}' argument missing`;
        this.error(message, {
            code: "commander.optionMissingArgument"
        });
    }
    /**
   * `Option` does not have a value, and is a mandatory option.
   *
   * @param {Option} option
   * @api private
   */ missingMandatoryOptionValue(option) {
        const message = `error: required option '${option.flags}' not specified`;
        this.error(message, {
            code: "commander.missingMandatoryOptionValue"
        });
    }
    /**
   * `Option` conflicts with another option.
   *
   * @param {Option} option
   * @param {Option} conflictingOption
   * @api private
   */ _conflictingOption(option, conflictingOption) {
        // The calling code does not know whether a negated option is the source of the
        // value, so do some work to take an educated guess.
        const findBestOptionFromValue = (option)=>{
            const optionKey = option.attributeName();
            const optionValue = this.getOptionValue(optionKey);
            const negativeOption = this.options.find((target)=>target.negate && optionKey === target.attributeName());
            const positiveOption = this.options.find((target)=>!target.negate && optionKey === target.attributeName());
            if (negativeOption && (negativeOption.presetArg === undefined && optionValue === false || negativeOption.presetArg !== undefined && optionValue === negativeOption.presetArg)) return negativeOption;
            return positiveOption || option;
        };
        const getErrorMessage = (option)=>{
            const bestOption = findBestOptionFromValue(option);
            const optionKey = bestOption.attributeName();
            const source = this.getOptionValueSource(optionKey);
            if (source === "env") return `environment variable '${bestOption.envVar}'`;
            return `option '${bestOption.flags}'`;
        };
        const message = `error: ${getErrorMessage(option)} cannot be used with ${getErrorMessage(conflictingOption)}`;
        this.error(message, {
            code: "commander.conflictingOption"
        });
    }
    /**
   * Unknown option `flag`.
   *
   * @param {string} flag
   * @api private
   */ unknownOption(flag) {
        if (this._allowUnknownOption) return;
        let suggestion = "";
        if (flag.startsWith("--") && this._showSuggestionAfterError) {
            // Looping to pick up the global options too
            let candidateFlags = [];
            let command = this;
            do {
                const moreFlags = command.createHelp().visibleOptions(command).filter((option)=>option.long).map((option)=>option.long);
                candidateFlags = candidateFlags.concat(moreFlags);
                command = command.parent;
            }while (command && !command._enablePositionalOptions);
            suggestion = $2549bcbc79d91117$require$suggestSimilar(flag, candidateFlags);
        }
        const message = `error: unknown option '${flag}'${suggestion}`;
        this.error(message, {
            code: "commander.unknownOption"
        });
    }
    /**
   * Excess arguments, more than expected.
   *
   * @param {string[]} receivedArgs
   * @api private
   */ _excessArguments(receivedArgs) {
        if (this._allowExcessArguments) return;
        const expected = this._args.length;
        const s = expected === 1 ? "" : "s";
        const forSubcommand = this.parent ? ` for '${this.name()}'` : "";
        const message = `error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${receivedArgs.length}.`;
        this.error(message, {
            code: "commander.excessArguments"
        });
    }
    /**
   * Unknown command.
   *
   * @api private
   */ unknownCommand() {
        const unknownName = this.args[0];
        let suggestion = "";
        if (this._showSuggestionAfterError) {
            const candidateNames = [];
            this.createHelp().visibleCommands(this).forEach((command)=>{
                candidateNames.push(command.name());
                // just visible alias
                if (command.alias()) candidateNames.push(command.alias());
            });
            suggestion = $2549bcbc79d91117$require$suggestSimilar(unknownName, candidateNames);
        }
        const message = `error: unknown command '${unknownName}'${suggestion}`;
        this.error(message, {
            code: "commander.unknownCommand"
        });
    }
    /**
   * Set the program version to `str`.
   *
   * This method auto-registers the "-V, --version" flag
   * which will print the version number when passed.
   *
   * You can optionally supply the  flags and description to override the defaults.
   *
   * @param {string} str
   * @param {string} [flags]
   * @param {string} [description]
   * @return {this | string} `this` command for chaining, or version string if no arguments
   */ version(str, flags, description) {
        if (str === undefined) return this._version;
        this._version = str;
        flags = flags || "-V, --version";
        description = description || "output the version number";
        const versionOption = this.createOption(flags, description);
        this._versionOptionName = versionOption.attributeName();
        this.options.push(versionOption);
        this.on("option:" + versionOption.name(), ()=>{
            this._outputConfiguration.writeOut(`${str}\n`);
            this._exit(0, "commander.version", str);
        });
        return this;
    }
    /**
   * Set the description.
   *
   * @param {string} [str]
   * @param {Object} [argsDescription]
   * @return {string|Command}
   */ description(str, argsDescription) {
        if (str === undefined && argsDescription === undefined) return this._description;
        this._description = str;
        if (argsDescription) this._argsDescription = argsDescription;
        return this;
    }
    /**
   * Set the summary. Used when listed as subcommand of parent.
   *
   * @param {string} [str]
   * @return {string|Command}
   */ summary(str) {
        if (str === undefined) return this._summary;
        this._summary = str;
        return this;
    }
    /**
   * Set an alias for the command.
   *
   * You may call more than once to add multiple aliases. Only the first alias is shown in the auto-generated help.
   *
   * @param {string} [alias]
   * @return {string|Command}
   */ alias(alias) {
        if (alias === undefined) return this._aliases[0]; // just return first, for backwards compatibility
        /** @type {Command} */ let command = this;
        if (this.commands.length !== 0 && this.commands[this.commands.length - 1]._executableHandler) // assume adding alias for last added executable subcommand, rather than this
        command = this.commands[this.commands.length - 1];
        if (alias === command._name) throw new Error("Command alias can't be the same as its name");
        command._aliases.push(alias);
        return this;
    }
    /**
   * Set aliases for the command.
   *
   * Only the first alias is shown in the auto-generated help.
   *
   * @param {string[]} [aliases]
   * @return {string[]|Command}
   */ aliases(aliases) {
        // Getter for the array of aliases is the main reason for having aliases() in addition to alias().
        if (aliases === undefined) return this._aliases;
        aliases.forEach((alias)=>this.alias(alias));
        return this;
    }
    /**
   * Set / get the command usage `str`.
   *
   * @param {string} [str]
   * @return {String|Command}
   */ usage(str) {
        if (str === undefined) {
            if (this._usage) return this._usage;
            const args = this._args.map((arg)=>{
                return $2549bcbc79d91117$require$humanReadableArgName(arg);
            });
            return [].concat(this.options.length || this._hasHelpOption ? "[options]" : [], this.commands.length ? "[command]" : [], this._args.length ? args : []).join(" ");
        }
        this._usage = str;
        return this;
    }
    /**
   * Get or set the name of the command.
   *
   * @param {string} [str]
   * @return {string|Command}
   */ name(str) {
        if (str === undefined) return this._name;
        this._name = str;
        return this;
    }
    /**
   * Set the name of the command from script filename, such as process.argv[1],
   * or require.main.filename, or __filename.
   *
   * (Used internally and public although not documented in README.)
   *
   * @example
   * program.nameFromFilename(require.main.filename);
   *
   * @param {string} filename
   * @return {Command}
   */ nameFromFilename(filename) {
        this._name = $ceblk.basename(filename, $ceblk.extname(filename));
        return this;
    }
    /**
   * Get or set the directory for searching for executable subcommands of this command.
   *
   * @example
   * program.executableDir(__dirname);
   * // or
   * program.executableDir('subcommands');
   *
   * @param {string} [path]
   * @return {string|Command}
   */ executableDir(path) {
        if (path === undefined) return this._executableDir;
        this._executableDir = path;
        return this;
    }
    /**
   * Return program help documentation.
   *
   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to wrap for stderr instead of stdout
   * @return {string}
   */ helpInformation(contextOptions) {
        const helper = this.createHelp();
        if (helper.helpWidth === undefined) helper.helpWidth = contextOptions && contextOptions.error ? this._outputConfiguration.getErrHelpWidth() : this._outputConfiguration.getOutHelpWidth();
        return helper.formatHelp(this, helper);
    }
    /**
   * @api private
   */ _getHelpContext(contextOptions) {
        contextOptions = contextOptions || {};
        const context = {
            error: !!contextOptions.error
        };
        let write;
        if (context.error) write = (arg)=>this._outputConfiguration.writeErr(arg);
        else write = (arg)=>this._outputConfiguration.writeOut(arg);
        context.write = contextOptions.write || write;
        context.command = this;
        return context;
    }
    /**
   * Output help information for this command.
   *
   * Outputs built-in help, and custom text added using `.addHelpText()`.
   *
   * @param {{ error: boolean } | Function} [contextOptions] - pass {error:true} to write to stderr instead of stdout
   */ outputHelp(contextOptions) {
        let deprecatedCallback;
        if (typeof contextOptions === "function") {
            deprecatedCallback = contextOptions;
            contextOptions = undefined;
        }
        const context = this._getHelpContext(contextOptions);
        $2549bcbc79d91117$var$getCommandAndParents(this).reverse().forEach((command)=>command.emit("beforeAllHelp", context));
        this.emit("beforeHelp", context);
        let helpInformation = this.helpInformation(context);
        if (deprecatedCallback) {
            helpInformation = deprecatedCallback(helpInformation);
            if (typeof helpInformation !== "string" && !$2549bcbc79d91117$require$Buffer.isBuffer(helpInformation)) throw new Error("outputHelp callback must return a string or a Buffer");
        }
        context.write(helpInformation);
        this.emit(this._helpLongFlag); // deprecated
        this.emit("afterHelp", context);
        $2549bcbc79d91117$var$getCommandAndParents(this).forEach((command)=>command.emit("afterAllHelp", context));
    }
    /**
   * You can pass in flags and a description to override the help
   * flags and help description for your command. Pass in false to
   * disable the built-in help option.
   *
   * @param {string | boolean} [flags]
   * @param {string} [description]
   * @return {Command} `this` command for chaining
   */ helpOption(flags, description) {
        if (typeof flags === "boolean") {
            this._hasHelpOption = flags;
            return this;
        }
        this._helpFlags = flags || this._helpFlags;
        this._helpDescription = description || this._helpDescription;
        const helpFlags = $2549bcbc79d91117$require$splitOptionFlags(this._helpFlags);
        this._helpShortFlag = helpFlags.shortFlag;
        this._helpLongFlag = helpFlags.longFlag;
        return this;
    }
    /**
   * Output help information and exit.
   *
   * Outputs built-in help, and custom text added using `.addHelpText()`.
   *
   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to write to stderr instead of stdout
   */ help(contextOptions) {
        this.outputHelp(contextOptions);
        let exitCode = $jx7mO.exitCode || 0;
        if (exitCode === 0 && contextOptions && typeof contextOptions !== "function" && contextOptions.error) exitCode = 1;
        // message: do not have all displayed text available so only passing placeholder.
        this._exit(exitCode, "commander.help", "(outputHelp)");
    }
    /**
   * Add additional text to be displayed with the built-in help.
   *
   * Position is 'before' or 'after' to affect just this command,
   * and 'beforeAll' or 'afterAll' to affect this command and all its subcommands.
   *
   * @param {string} position - before or after built-in help
   * @param {string | Function} text - string to add, or a function returning a string
   * @return {Command} `this` command for chaining
   */ addHelpText(position, text) {
        const allowedValues = [
            "beforeAll",
            "before",
            "after",
            "afterAll"
        ];
        if (!allowedValues.includes(position)) throw new Error(`Unexpected value for position to addHelpText.
Expecting one of '${allowedValues.join("', '")}'`);
        const helpEvent = `${position}Help`;
        this.on(helpEvent, (context)=>{
            let helpStr;
            if (typeof text === "function") helpStr = text({
                error: context.error,
                command: context.command
            });
            else helpStr = text;
            // Ignore falsy value when nothing to output.
            if (helpStr) context.write(`${helpStr}\n`);
        });
        return this;
    }
}
/**
 * Output help information if help flags specified
 *
 * @param {Command} cmd - command to output help for
 * @param {Array} args - array of options to search for help flags
 * @api private
 */ function $2549bcbc79d91117$var$outputHelpIfRequested(cmd, args) {
    const helpOption = cmd._hasHelpOption && args.find((arg)=>arg === cmd._helpLongFlag || arg === cmd._helpShortFlag);
    if (helpOption) {
        cmd.outputHelp();
        // (Do not have all displayed text available so only passing placeholder.)
        cmd._exit(0, "commander.helpDisplayed", "(outputHelp)");
    }
}
/**
 * Scan arguments and increment port number for inspect calls (to avoid conflicts when spawning new command).
 *
 * @param {string[]} args - array of arguments from node.execArgv
 * @returns {string[]}
 * @api private
 */ function $2549bcbc79d91117$var$incrementNodeInspectorPort(args) {
    // Testing for these options:
    //  --inspect[=[host:]port]
    //  --inspect-brk[=[host:]port]
    //  --inspect-port=[host:]port
    return args.map((arg)=>{
        if (!arg.startsWith("--inspect")) return arg;
        let debugOption;
        let debugHost = "127.0.0.1";
        let debugPort = "9229";
        let match;
        if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) // e.g. --inspect
        debugOption = match[1];
        else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null) {
            debugOption = match[1];
            if (/^\d+$/.test(match[3])) // e.g. --inspect=1234
            debugPort = match[3];
            else // e.g. --inspect=localhost
            debugHost = match[3];
        } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\d+)$/)) !== null) {
            // e.g. --inspect=localhost:1234
            debugOption = match[1];
            debugHost = match[3];
            debugPort = match[4];
        }
        if (debugOption && debugPort !== "0") return `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;
        return arg;
    });
}
/**
 * @param {Command} startCommand
 * @returns {Command[]}
 * @api private
 */ function $2549bcbc79d91117$var$getCommandAndParents(startCommand) {
    const result = [];
    for(let command = startCommand; command; command = command.parent)result.push(command);
    return result;
}
$2549bcbc79d91117$export$cc7e12c76513e857 = $2549bcbc79d91117$var$Command;

});
parcelRequire.register("fLrIr", function(module, exports) {

$parcel$export(module.exports, "Buffer", () => $b7a0be958144de64$export$a143d493d941bafc, (v) => $b7a0be958144de64$export$a143d493d941bafc = v);
$parcel$export(module.exports, "SlowBuffer", () => $b7a0be958144de64$export$e4cf37d7f6fb9e0a, (v) => $b7a0be958144de64$export$e4cf37d7f6fb9e0a = v);
$parcel$export(module.exports, "INSPECT_MAX_BYTES", () => $b7a0be958144de64$export$f99ded8fe4b79145, (v) => $b7a0be958144de64$export$f99ded8fe4b79145 = v);
$parcel$export(module.exports, "kMaxLength", () => $b7a0be958144de64$export$599f31c3813fae4d, (v) => $b7a0be958144de64$export$599f31c3813fae4d = v);
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ var $b7a0be958144de64$export$a143d493d941bafc;
var $b7a0be958144de64$export$e4cf37d7f6fb9e0a;
var $b7a0be958144de64$export$f99ded8fe4b79145;
var $b7a0be958144de64$export$599f31c3813fae4d;
"use strict";

var $eMlbL = parcelRequire("eMlbL");

var $1fiOU = parcelRequire("1fiOU");
var $b7a0be958144de64$var$customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
$b7a0be958144de64$export$a143d493d941bafc = $b7a0be958144de64$var$Buffer;
$b7a0be958144de64$export$e4cf37d7f6fb9e0a = $b7a0be958144de64$var$SlowBuffer;
$b7a0be958144de64$export$f99ded8fe4b79145 = 50;
var $b7a0be958144de64$var$K_MAX_LENGTH = 0x7fffffff;
$b7a0be958144de64$export$599f31c3813fae4d = $b7a0be958144de64$var$K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ $b7a0be958144de64$var$Buffer.TYPED_ARRAY_SUPPORT = $b7a0be958144de64$var$typedArraySupport();
if (!$b7a0be958144de64$var$Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function $b7a0be958144de64$var$typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        var arr = new Uint8Array(1);
        var proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty($b7a0be958144de64$var$Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!$b7a0be958144de64$var$Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty($b7a0be958144de64$var$Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!$b7a0be958144de64$var$Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function $b7a0be958144de64$var$createBuffer(length) {
    if (length > $b7a0be958144de64$var$K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, $b7a0be958144de64$var$Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function $b7a0be958144de64$var$Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return $b7a0be958144de64$var$allocUnsafe(arg);
    }
    return $b7a0be958144de64$var$from(arg, encodingOrOffset, length);
}
$b7a0be958144de64$var$Buffer.poolSize = 8192 // not used by this implementation
;
function $b7a0be958144de64$var$from(value, encodingOrOffset, length) {
    if (typeof value === "string") return $b7a0be958144de64$var$fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return $b7a0be958144de64$var$fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if ($b7a0be958144de64$var$isInstance(value, ArrayBuffer) || value && $b7a0be958144de64$var$isInstance(value.buffer, ArrayBuffer)) return $b7a0be958144de64$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && ($b7a0be958144de64$var$isInstance(value, SharedArrayBuffer) || value && $b7a0be958144de64$var$isInstance(value.buffer, SharedArrayBuffer))) return $b7a0be958144de64$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return $b7a0be958144de64$var$Buffer.from(valueOf, encodingOrOffset, length);
    var b = $b7a0be958144de64$var$fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return $b7a0be958144de64$var$Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ $b7a0be958144de64$var$Buffer.from = function(value, encodingOrOffset, length) {
    return $b7a0be958144de64$var$from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf($b7a0be958144de64$var$Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf($b7a0be958144de64$var$Buffer, Uint8Array);
function $b7a0be958144de64$var$assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function $b7a0be958144de64$var$alloc(size, fill, encoding) {
    $b7a0be958144de64$var$assertSize(size);
    if (size <= 0) return $b7a0be958144de64$var$createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? $b7a0be958144de64$var$createBuffer(size).fill(fill, encoding) : $b7a0be958144de64$var$createBuffer(size).fill(fill);
    return $b7a0be958144de64$var$createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ $b7a0be958144de64$var$Buffer.alloc = function(size, fill, encoding) {
    return $b7a0be958144de64$var$alloc(size, fill, encoding);
};
function $b7a0be958144de64$var$allocUnsafe(size) {
    $b7a0be958144de64$var$assertSize(size);
    return $b7a0be958144de64$var$createBuffer(size < 0 ? 0 : $b7a0be958144de64$var$checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ $b7a0be958144de64$var$Buffer.allocUnsafe = function(size) {
    return $b7a0be958144de64$var$allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ $b7a0be958144de64$var$Buffer.allocUnsafeSlow = function(size) {
    return $b7a0be958144de64$var$allocUnsafe(size);
};
function $b7a0be958144de64$var$fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!$b7a0be958144de64$var$Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    var length = $b7a0be958144de64$var$byteLength(string, encoding) | 0;
    var buf = $b7a0be958144de64$var$createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function $b7a0be958144de64$var$fromArrayLike(array) {
    var length = array.length < 0 ? 0 : $b7a0be958144de64$var$checked(array.length) | 0;
    var buf = $b7a0be958144de64$var$createBuffer(length);
    for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function $b7a0be958144de64$var$fromArrayView(arrayView) {
    if ($b7a0be958144de64$var$isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return $b7a0be958144de64$var$fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return $b7a0be958144de64$var$fromArrayLike(arrayView);
}
function $b7a0be958144de64$var$fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    var buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, $b7a0be958144de64$var$Buffer.prototype);
    return buf;
}
function $b7a0be958144de64$var$fromObject(obj) {
    if ($b7a0be958144de64$var$Buffer.isBuffer(obj)) {
        var len = $b7a0be958144de64$var$checked(obj.length) | 0;
        var buf = $b7a0be958144de64$var$createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || $b7a0be958144de64$var$numberIsNaN(obj.length)) return $b7a0be958144de64$var$createBuffer(0);
        return $b7a0be958144de64$var$fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return $b7a0be958144de64$var$fromArrayLike(obj.data);
}
function $b7a0be958144de64$var$checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= $b7a0be958144de64$var$K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + $b7a0be958144de64$var$K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function $b7a0be958144de64$var$SlowBuffer(length) {
    if (+length != length) length = 0;
    return $b7a0be958144de64$var$Buffer.alloc(+length);
}
$b7a0be958144de64$var$Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== $b7a0be958144de64$var$Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
$b7a0be958144de64$var$Buffer.compare = function compare(a, b) {
    if ($b7a0be958144de64$var$isInstance(a, Uint8Array)) a = $b7a0be958144de64$var$Buffer.from(a, a.offset, a.byteLength);
    if ($b7a0be958144de64$var$isInstance(b, Uint8Array)) b = $b7a0be958144de64$var$Buffer.from(b, b.offset, b.byteLength);
    if (!$b7a0be958144de64$var$Buffer.isBuffer(a) || !$b7a0be958144de64$var$Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
$b7a0be958144de64$var$Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
$b7a0be958144de64$var$Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return $b7a0be958144de64$var$Buffer.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = $b7a0be958144de64$var$Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if ($b7a0be958144de64$var$isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) $b7a0be958144de64$var$Buffer.from(buf).copy(buffer, pos);
            else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!$b7a0be958144de64$var$Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function $b7a0be958144de64$var$byteLength(string, encoding) {
    if ($b7a0be958144de64$var$Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || $b7a0be958144de64$var$isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return $b7a0be958144de64$var$utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return $b7a0be958144de64$var$base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : $b7a0be958144de64$var$utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
$b7a0be958144de64$var$Buffer.byteLength = $b7a0be958144de64$var$byteLength;
function $b7a0be958144de64$var$slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return $b7a0be958144de64$var$hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return $b7a0be958144de64$var$utf8Slice(this, start, end);
        case "ascii":
            return $b7a0be958144de64$var$asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return $b7a0be958144de64$var$latin1Slice(this, start, end);
        case "base64":
            return $b7a0be958144de64$var$base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return $b7a0be958144de64$var$utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
$b7a0be958144de64$var$Buffer.prototype._isBuffer = true;
function $b7a0be958144de64$var$swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
$b7a0be958144de64$var$Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(var i = 0; i < len; i += 2)$b7a0be958144de64$var$swap(this, i, i + 1);
    return this;
};
$b7a0be958144de64$var$Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(var i = 0; i < len; i += 4){
        $b7a0be958144de64$var$swap(this, i, i + 3);
        $b7a0be958144de64$var$swap(this, i + 1, i + 2);
    }
    return this;
};
$b7a0be958144de64$var$Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(var i = 0; i < len; i += 8){
        $b7a0be958144de64$var$swap(this, i, i + 7);
        $b7a0be958144de64$var$swap(this, i + 1, i + 6);
        $b7a0be958144de64$var$swap(this, i + 2, i + 5);
        $b7a0be958144de64$var$swap(this, i + 3, i + 4);
    }
    return this;
};
$b7a0be958144de64$var$Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return $b7a0be958144de64$var$utf8Slice(this, 0, length);
    return $b7a0be958144de64$var$slowToString.apply(this, arguments);
};
$b7a0be958144de64$var$Buffer.prototype.toLocaleString = $b7a0be958144de64$var$Buffer.prototype.toString;
$b7a0be958144de64$var$Buffer.prototype.equals = function equals(b) {
    if (!$b7a0be958144de64$var$Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return $b7a0be958144de64$var$Buffer.compare(this, b) === 0;
};
$b7a0be958144de64$var$Buffer.prototype.inspect = function inspect() {
    var str = "";
    var max = $b7a0be958144de64$export$f99ded8fe4b79145;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if ($b7a0be958144de64$var$customInspectSymbol) $b7a0be958144de64$var$Buffer.prototype[$b7a0be958144de64$var$customInspectSymbol] = $b7a0be958144de64$var$Buffer.prototype.inspect;
$b7a0be958144de64$var$Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if ($b7a0be958144de64$var$isInstance(target, Uint8Array)) target = $b7a0be958144de64$var$Buffer.from(target, target.offset, target.byteLength);
    if (!$b7a0be958144de64$var$Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function $b7a0be958144de64$var$bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if ($b7a0be958144de64$var$numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = $b7a0be958144de64$var$Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if ($b7a0be958144de64$var$Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return $b7a0be958144de64$var$arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return $b7a0be958144de64$var$arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function $b7a0be958144de64$var$arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    var i;
    if (dir) {
        var foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
$b7a0be958144de64$var$Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
$b7a0be958144de64$var$Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return $b7a0be958144de64$var$bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
$b7a0be958144de64$var$Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return $b7a0be958144de64$var$bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function $b7a0be958144de64$var$hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    var strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    for(var i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if ($b7a0be958144de64$var$numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function $b7a0be958144de64$var$utf8Write(buf, string, offset, length) {
    return $b7a0be958144de64$var$blitBuffer($b7a0be958144de64$var$utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function $b7a0be958144de64$var$asciiWrite(buf, string, offset, length) {
    return $b7a0be958144de64$var$blitBuffer($b7a0be958144de64$var$asciiToBytes(string), buf, offset, length);
}
function $b7a0be958144de64$var$base64Write(buf, string, offset, length) {
    return $b7a0be958144de64$var$blitBuffer($b7a0be958144de64$var$base64ToBytes(string), buf, offset, length);
}
function $b7a0be958144de64$var$ucs2Write(buf, string, offset, length) {
    return $b7a0be958144de64$var$blitBuffer($b7a0be958144de64$var$utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
$b7a0be958144de64$var$Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    var loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return $b7a0be958144de64$var$hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return $b7a0be958144de64$var$utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return $b7a0be958144de64$var$asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return $b7a0be958144de64$var$base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return $b7a0be958144de64$var$ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
$b7a0be958144de64$var$Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function $b7a0be958144de64$var$base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return $eMlbL.fromByteArray(buf);
    else return $eMlbL.fromByteArray(buf.slice(start, end));
}
function $b7a0be958144de64$var$utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return $b7a0be958144de64$var$decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var $b7a0be958144de64$var$MAX_ARGUMENTS_LENGTH = 0x1000;
function $b7a0be958144de64$var$decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= $b7a0be958144de64$var$MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    var res = "";
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += $b7a0be958144de64$var$MAX_ARGUMENTS_LENGTH));
    return res;
}
function $b7a0be958144de64$var$asciiSlice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function $b7a0be958144de64$var$latin1Slice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function $b7a0be958144de64$var$hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = "";
    for(var i = start; i < end; ++i)out += $b7a0be958144de64$var$hexSliceLookupTable[buf[i]];
    return out;
}
function $b7a0be958144de64$var$utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
$b7a0be958144de64$var$Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, $b7a0be958144de64$var$Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function $b7a0be958144de64$var$checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
$b7a0be958144de64$var$Buffer.prototype.readUintLE = $b7a0be958144de64$var$Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
$b7a0be958144de64$var$Buffer.prototype.readUintBE = $b7a0be958144de64$var$Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset + --byteLength];
    var mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
$b7a0be958144de64$var$Buffer.prototype.readUint8 = $b7a0be958144de64$var$Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkOffset(offset, 1, this.length);
    return this[offset];
};
$b7a0be958144de64$var$Buffer.prototype.readUint16LE = $b7a0be958144de64$var$Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
$b7a0be958144de64$var$Buffer.prototype.readUint16BE = $b7a0be958144de64$var$Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
$b7a0be958144de64$var$Buffer.prototype.readUint32LE = $b7a0be958144de64$var$Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
$b7a0be958144de64$var$Buffer.prototype.readUint32BE = $b7a0be958144de64$var$Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
$b7a0be958144de64$var$Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$b7a0be958144de64$var$Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$b7a0be958144de64$var$Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
$b7a0be958144de64$var$Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
$b7a0be958144de64$var$Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
$b7a0be958144de64$var$Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
$b7a0be958144de64$var$Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
$b7a0be958144de64$var$Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkOffset(offset, 4, this.length);
    return $1fiOU.read(this, offset, true, 23, 4);
};
$b7a0be958144de64$var$Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkOffset(offset, 4, this.length);
    return $1fiOU.read(this, offset, false, 23, 4);
};
$b7a0be958144de64$var$Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkOffset(offset, 8, this.length);
    return $1fiOU.read(this, offset, true, 52, 8);
};
$b7a0be958144de64$var$Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkOffset(offset, 8, this.length);
    return $1fiOU.read(this, offset, false, 52, 8);
};
function $b7a0be958144de64$var$checkInt(buf, value, offset, ext, max, min) {
    if (!$b7a0be958144de64$var$Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
$b7a0be958144de64$var$Buffer.prototype.writeUintLE = $b7a0be958144de64$var$Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $b7a0be958144de64$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
$b7a0be958144de64$var$Buffer.prototype.writeUintBE = $b7a0be958144de64$var$Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $b7a0be958144de64$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
$b7a0be958144de64$var$Buffer.prototype.writeUint8 = $b7a0be958144de64$var$Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
$b7a0be958144de64$var$Buffer.prototype.writeUint16LE = $b7a0be958144de64$var$Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$b7a0be958144de64$var$Buffer.prototype.writeUint16BE = $b7a0be958144de64$var$Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
$b7a0be958144de64$var$Buffer.prototype.writeUint32LE = $b7a0be958144de64$var$Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
$b7a0be958144de64$var$Buffer.prototype.writeUint32BE = $b7a0be958144de64$var$Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
$b7a0be958144de64$var$Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        $b7a0be958144de64$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
$b7a0be958144de64$var$Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        $b7a0be958144de64$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
$b7a0be958144de64$var$Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
$b7a0be958144de64$var$Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$b7a0be958144de64$var$Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
$b7a0be958144de64$var$Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
$b7a0be958144de64$var$Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function $b7a0be958144de64$var$checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function $b7a0be958144de64$var$writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    $1fiOU.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
$b7a0be958144de64$var$Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return $b7a0be958144de64$var$writeFloat(this, value, offset, true, noAssert);
};
$b7a0be958144de64$var$Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return $b7a0be958144de64$var$writeFloat(this, value, offset, false, noAssert);
};
function $b7a0be958144de64$var$writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $b7a0be958144de64$var$checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    $1fiOU.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
$b7a0be958144de64$var$Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return $b7a0be958144de64$var$writeDouble(this, value, offset, true, noAssert);
};
$b7a0be958144de64$var$Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return $b7a0be958144de64$var$writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
$b7a0be958144de64$var$Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!$b7a0be958144de64$var$Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
$b7a0be958144de64$var$Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !$b7a0be958144de64$var$Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = $b7a0be958144de64$var$Buffer.isBuffer(val) ? val : $b7a0be958144de64$var$Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// HELPER FUNCTIONS
// ================
var $b7a0be958144de64$var$INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function $b7a0be958144de64$var$base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace($b7a0be958144de64$var$INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function $b7a0be958144de64$var$utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function $b7a0be958144de64$var$asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function $b7a0be958144de64$var$utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function $b7a0be958144de64$var$base64ToBytes(str) {
    return $eMlbL.toByteArray($b7a0be958144de64$var$base64clean(str));
}
function $b7a0be958144de64$var$blitBuffer(src, dst, offset, length) {
    for(var i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function $b7a0be958144de64$var$isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function $b7a0be958144de64$var$numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var $b7a0be958144de64$var$hexSliceLookupTable = function() {
    var alphabet = "0123456789abcdef";
    var table = new Array(256);
    for(var i = 0; i < 16; ++i){
        var i16 = i * 16;
        for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();

});
parcelRequire.register("eMlbL", function(module, exports) {

$parcel$export(module.exports, "toByteArray", () => $ac25fc04456e3fd9$export$d622b2ad8d90c771, (v) => $ac25fc04456e3fd9$export$d622b2ad8d90c771 = v);
$parcel$export(module.exports, "fromByteArray", () => $ac25fc04456e3fd9$export$6100ba28696e12de, (v) => $ac25fc04456e3fd9$export$6100ba28696e12de = v);
var $ac25fc04456e3fd9$export$a48f0734ac7c2329;
var $ac25fc04456e3fd9$export$d622b2ad8d90c771;
var $ac25fc04456e3fd9$export$6100ba28696e12de;
"use strict";
$ac25fc04456e3fd9$export$a48f0734ac7c2329 = $ac25fc04456e3fd9$var$byteLength;
$ac25fc04456e3fd9$export$d622b2ad8d90c771 = $ac25fc04456e3fd9$var$toByteArray;
$ac25fc04456e3fd9$export$6100ba28696e12de = $ac25fc04456e3fd9$var$fromByteArray;
var $ac25fc04456e3fd9$var$lookup = [];
var $ac25fc04456e3fd9$var$revLookup = [];
var $ac25fc04456e3fd9$var$Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var $ac25fc04456e3fd9$var$code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var $ac25fc04456e3fd9$var$i = 0, $ac25fc04456e3fd9$var$len = $ac25fc04456e3fd9$var$code.length; $ac25fc04456e3fd9$var$i < $ac25fc04456e3fd9$var$len; ++$ac25fc04456e3fd9$var$i){
    $ac25fc04456e3fd9$var$lookup[$ac25fc04456e3fd9$var$i] = $ac25fc04456e3fd9$var$code[$ac25fc04456e3fd9$var$i];
    $ac25fc04456e3fd9$var$revLookup[$ac25fc04456e3fd9$var$code.charCodeAt($ac25fc04456e3fd9$var$i)] = $ac25fc04456e3fd9$var$i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
$ac25fc04456e3fd9$var$revLookup["-".charCodeAt(0)] = 62;
$ac25fc04456e3fd9$var$revLookup["_".charCodeAt(0)] = 63;
function $ac25fc04456e3fd9$var$getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function $ac25fc04456e3fd9$var$byteLength(b64) {
    var lens = $ac25fc04456e3fd9$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $ac25fc04456e3fd9$var$_byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $ac25fc04456e3fd9$var$toByteArray(b64) {
    var tmp;
    var lens = $ac25fc04456e3fd9$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new $ac25fc04456e3fd9$var$Arr($ac25fc04456e3fd9$var$_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = $ac25fc04456e3fd9$var$revLookup[b64.charCodeAt(i)] << 18 | $ac25fc04456e3fd9$var$revLookup[b64.charCodeAt(i + 1)] << 12 | $ac25fc04456e3fd9$var$revLookup[b64.charCodeAt(i + 2)] << 6 | $ac25fc04456e3fd9$var$revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = $ac25fc04456e3fd9$var$revLookup[b64.charCodeAt(i)] << 2 | $ac25fc04456e3fd9$var$revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = $ac25fc04456e3fd9$var$revLookup[b64.charCodeAt(i)] << 10 | $ac25fc04456e3fd9$var$revLookup[b64.charCodeAt(i + 1)] << 4 | $ac25fc04456e3fd9$var$revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function $ac25fc04456e3fd9$var$tripletToBase64(num) {
    return $ac25fc04456e3fd9$var$lookup[num >> 18 & 0x3F] + $ac25fc04456e3fd9$var$lookup[num >> 12 & 0x3F] + $ac25fc04456e3fd9$var$lookup[num >> 6 & 0x3F] + $ac25fc04456e3fd9$var$lookup[num & 0x3F];
}
function $ac25fc04456e3fd9$var$encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push($ac25fc04456e3fd9$var$tripletToBase64(tmp));
    }
    return output.join("");
}
function $ac25fc04456e3fd9$var$fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push($ac25fc04456e3fd9$var$encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push($ac25fc04456e3fd9$var$lookup[tmp >> 2] + $ac25fc04456e3fd9$var$lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push($ac25fc04456e3fd9$var$lookup[tmp >> 10] + $ac25fc04456e3fd9$var$lookup[tmp >> 4 & 0x3F] + $ac25fc04456e3fd9$var$lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

});

parcelRequire.register("1fiOU", function(module, exports) {

$parcel$export(module.exports, "read", () => $0e85ca6f74073291$export$aafa59e2e03f2942, (v) => $0e85ca6f74073291$export$aafa59e2e03f2942 = v);
$parcel$export(module.exports, "write", () => $0e85ca6f74073291$export$68d8715fc104d294, (v) => $0e85ca6f74073291$export$68d8715fc104d294 = v);
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ var $0e85ca6f74073291$export$aafa59e2e03f2942;
var $0e85ca6f74073291$export$68d8715fc104d294;
$0e85ca6f74073291$export$aafa59e2e03f2942 = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
$0e85ca6f74073291$export$68d8715fc104d294 = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

});


parcelRequire.register("eCV8S", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var $aa60f0906879d102$var$R = typeof Reflect === "object" ? Reflect : null;
var $aa60f0906879d102$var$ReflectApply = $aa60f0906879d102$var$R && typeof $aa60f0906879d102$var$R.apply === "function" ? $aa60f0906879d102$var$R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var $aa60f0906879d102$var$ReflectOwnKeys;
if ($aa60f0906879d102$var$R && typeof $aa60f0906879d102$var$R.ownKeys === "function") $aa60f0906879d102$var$ReflectOwnKeys = $aa60f0906879d102$var$R.ownKeys;
else if (Object.getOwnPropertySymbols) $aa60f0906879d102$var$ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else $aa60f0906879d102$var$ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function $aa60f0906879d102$var$ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var $aa60f0906879d102$var$NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function $aa60f0906879d102$var$EventEmitter() {
    $aa60f0906879d102$var$EventEmitter.init.call(this);
}
module.exports = $aa60f0906879d102$var$EventEmitter;
module.exports.once = $aa60f0906879d102$var$once;
// Backwards-compat with node 0.10.x
$aa60f0906879d102$var$EventEmitter.EventEmitter = $aa60f0906879d102$var$EventEmitter;
$aa60f0906879d102$var$EventEmitter.prototype._events = undefined;
$aa60f0906879d102$var$EventEmitter.prototype._eventsCount = 0;
$aa60f0906879d102$var$EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var $aa60f0906879d102$var$defaultMaxListeners = 10;
function $aa60f0906879d102$var$checkListener(listener) {
    if (typeof listener !== "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty($aa60f0906879d102$var$EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function() {
        return $aa60f0906879d102$var$defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || $aa60f0906879d102$var$NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        $aa60f0906879d102$var$defaultMaxListeners = arg;
    }
});
$aa60f0906879d102$var$EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
$aa60f0906879d102$var$EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== "number" || n < 0 || $aa60f0906879d102$var$NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
    this._maxListeners = n;
    return this;
};
function $aa60f0906879d102$var$_getMaxListeners(that) {
    if (that._maxListeners === undefined) return $aa60f0906879d102$var$EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
$aa60f0906879d102$var$EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return $aa60f0906879d102$var$_getMaxListeners(this);
};
$aa60f0906879d102$var$EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === "error";
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === "function") $aa60f0906879d102$var$ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = $aa60f0906879d102$var$arrayClone(handler, len);
        for(var i = 0; i < len; ++i)$aa60f0906879d102$var$ReflectApply(listeners[i], this, args);
    }
    return true;
};
function $aa60f0906879d102$var$_addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    $aa60f0906879d102$var$checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit("newListener", type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === "function") // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = $aa60f0906879d102$var$_getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners " + "added. Use emitter.setMaxListeners() to " + "increase limit");
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            $aa60f0906879d102$var$ProcessEmitWarning(w);
        }
    }
    return target;
}
$aa60f0906879d102$var$EventEmitter.prototype.addListener = function addListener(type, listener) {
    return $aa60f0906879d102$var$_addListener(this, type, listener, false);
};
$aa60f0906879d102$var$EventEmitter.prototype.on = $aa60f0906879d102$var$EventEmitter.prototype.addListener;
$aa60f0906879d102$var$EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return $aa60f0906879d102$var$_addListener(this, type, listener, true);
};
function $aa60f0906879d102$var$onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function $aa60f0906879d102$var$_onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = $aa60f0906879d102$var$onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
$aa60f0906879d102$var$EventEmitter.prototype.once = function once(type, listener) {
    $aa60f0906879d102$var$checkListener(listener);
    this.on(type, $aa60f0906879d102$var$_onceWrap(this, type, listener));
    return this;
};
$aa60f0906879d102$var$EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    $aa60f0906879d102$var$checkListener(listener);
    this.prependListener(type, $aa60f0906879d102$var$_onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
$aa60f0906879d102$var$EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    $aa60f0906879d102$var$checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
        }
    } else if (typeof list !== "function") {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else $aa60f0906879d102$var$spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit("removeListener", type, originalListener || listener);
    }
    return this;
};
$aa60f0906879d102$var$EventEmitter.prototype.off = $aa60f0906879d102$var$EventEmitter.prototype.removeListener;
$aa60f0906879d102$var$EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === "removeListener") continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === "function") this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function $aa60f0906879d102$var$_listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === "function") return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? $aa60f0906879d102$var$unwrapListeners(evlistener) : $aa60f0906879d102$var$arrayClone(evlistener, evlistener.length);
}
$aa60f0906879d102$var$EventEmitter.prototype.listeners = function listeners(type) {
    return $aa60f0906879d102$var$_listeners(this, type, true);
};
$aa60f0906879d102$var$EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return $aa60f0906879d102$var$_listeners(this, type, false);
};
$aa60f0906879d102$var$EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === "function") return emitter.listenerCount(type);
    else return $aa60f0906879d102$var$listenerCount.call(emitter, type);
};
$aa60f0906879d102$var$EventEmitter.prototype.listenerCount = $aa60f0906879d102$var$listenerCount;
function $aa60f0906879d102$var$listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === "function") return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
$aa60f0906879d102$var$EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? $aa60f0906879d102$var$ReflectOwnKeys(this._events) : [];
};
function $aa60f0906879d102$var$arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function $aa60f0906879d102$var$spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function $aa60f0906879d102$var$unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function $aa60f0906879d102$var$once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === "function") emitter.removeListener("error", errorListener);
            resolve([].slice.call(arguments));
        }
        $aa60f0906879d102$var$eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== "error") $aa60f0906879d102$var$addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function $aa60f0906879d102$var$addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") $aa60f0906879d102$var$eventTargetAgnosticAddListener(emitter, "error", handler, flags);
}
function $aa60f0906879d102$var$eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === "function") {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === "function") // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}

});

parcelRequire.register("XDU19", function(module, exports) {
"use strict";

});

parcelRequire.register("ceblk", function(module, exports) {
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var $jx7mO = parcelRequire("jx7mO");
"use strict";
function $8e6f9755a87227d9$var$assertPath(path) {
    if (typeof path !== "string") throw new TypeError("Path must be a string. Received " + JSON.stringify(path));
}
// Resolves . and .. elements in a path with directory names
function $8e6f9755a87227d9$var$normalizeStringPosix(path, allowAboveRoot) {
    var res = "";
    var lastSegmentLength = 0;
    var lastSlash = -1;
    var dots = 0;
    var code;
    for(var i = 0; i <= path.length; ++i){
        if (i < path.length) code = path.charCodeAt(i);
        else if (code === 47 /*/*/ ) break;
        else code = 47 /*/*/ ;
        if (code === 47 /*/*/ ) {
            if (lastSlash === i - 1 || dots === 1) ;
            else if (lastSlash !== i - 1 && dots === 2) {
                if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/  || res.charCodeAt(res.length - 2) !== 46 /*.*/ ) {
                    if (res.length > 2) {
                        var lastSlashIndex = res.lastIndexOf("/");
                        if (lastSlashIndex !== res.length - 1) {
                            if (lastSlashIndex === -1) {
                                res = "";
                                lastSegmentLength = 0;
                            } else {
                                res = res.slice(0, lastSlashIndex);
                                lastSegmentLength = res.length - 1 - res.lastIndexOf("/");
                            }
                            lastSlash = i;
                            dots = 0;
                            continue;
                        }
                    } else if (res.length === 2 || res.length === 1) {
                        res = "";
                        lastSegmentLength = 0;
                        lastSlash = i;
                        dots = 0;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    if (res.length > 0) res += "/..";
                    else res = "..";
                    lastSegmentLength = 2;
                }
            } else {
                if (res.length > 0) res += "/" + path.slice(lastSlash + 1, i);
                else res = path.slice(lastSlash + 1, i);
                lastSegmentLength = i - lastSlash - 1;
            }
            lastSlash = i;
            dots = 0;
        } else if (code === 46 /*.*/  && dots !== -1) ++dots;
        else dots = -1;
    }
    return res;
}
function $8e6f9755a87227d9$var$_format(sep, pathObject) {
    var dir = pathObject.dir || pathObject.root;
    var base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
    if (!dir) return base;
    if (dir === pathObject.root) return dir + base;
    return dir + sep + base;
}
var $8e6f9755a87227d9$var$posix = {
    // path.resolve([from ...], to)
    resolve: function resolve() {
        var resolvedPath = "";
        var resolvedAbsolute = false;
        var cwd;
        for(var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--){
            var path;
            if (i >= 0) path = arguments[i];
            else {
                if (cwd === undefined) cwd = $jx7mO.cwd();
                path = cwd;
            }
            $8e6f9755a87227d9$var$assertPath(path);
            // Skip empty entries
            if (path.length === 0) continue;
            resolvedPath = path + "/" + resolvedPath;
            resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/ ;
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        // Normalize the path
        resolvedPath = $8e6f9755a87227d9$var$normalizeStringPosix(resolvedPath, !resolvedAbsolute);
        if (resolvedAbsolute) {
            if (resolvedPath.length > 0) return "/" + resolvedPath;
            else return "/";
        } else if (resolvedPath.length > 0) return resolvedPath;
        else return ".";
    },
    normalize: function normalize(path) {
        $8e6f9755a87227d9$var$assertPath(path);
        if (path.length === 0) return ".";
        var isAbsolute = path.charCodeAt(0) === 47 /*/*/ ;
        var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/ ;
        // Normalize the path
        path = $8e6f9755a87227d9$var$normalizeStringPosix(path, !isAbsolute);
        if (path.length === 0 && !isAbsolute) path = ".";
        if (path.length > 0 && trailingSeparator) path += "/";
        if (isAbsolute) return "/" + path;
        return path;
    },
    isAbsolute: function isAbsolute(path) {
        $8e6f9755a87227d9$var$assertPath(path);
        return path.length > 0 && path.charCodeAt(0) === 47 /*/*/ ;
    },
    join: function join() {
        if (arguments.length === 0) return ".";
        var joined;
        for(var i = 0; i < arguments.length; ++i){
            var arg = arguments[i];
            $8e6f9755a87227d9$var$assertPath(arg);
            if (arg.length > 0) {
                if (joined === undefined) joined = arg;
                else joined += "/" + arg;
            }
        }
        if (joined === undefined) return ".";
        return $8e6f9755a87227d9$var$posix.normalize(joined);
    },
    relative: function relative(from, to) {
        $8e6f9755a87227d9$var$assertPath(from);
        $8e6f9755a87227d9$var$assertPath(to);
        if (from === to) return "";
        from = $8e6f9755a87227d9$var$posix.resolve(from);
        to = $8e6f9755a87227d9$var$posix.resolve(to);
        if (from === to) return "";
        // Trim any leading backslashes
        var fromStart = 1;
        for(; fromStart < from.length; ++fromStart){
            if (from.charCodeAt(fromStart) !== 47 /*/*/ ) break;
        }
        var fromEnd = from.length;
        var fromLen = fromEnd - fromStart;
        // Trim any leading backslashes
        var toStart = 1;
        for(; toStart < to.length; ++toStart){
            if (to.charCodeAt(toStart) !== 47 /*/*/ ) break;
        }
        var toEnd = to.length;
        var toLen = toEnd - toStart;
        // Compare paths to find the longest common path from root
        var length = fromLen < toLen ? fromLen : toLen;
        var lastCommonSep = -1;
        var i = 0;
        for(; i <= length; ++i){
            if (i === length) {
                if (toLen > length) {
                    if (to.charCodeAt(toStart + i) === 47 /*/*/ ) // We get here if `from` is the exact base path for `to`.
                    // For example: from='/foo/bar'; to='/foo/bar/baz'
                    return to.slice(toStart + i + 1);
                    else if (i === 0) // We get here if `from` is the root
                    // For example: from='/'; to='/foo'
                    return to.slice(toStart + i);
                } else if (fromLen > length) {
                    if (from.charCodeAt(fromStart + i) === 47 /*/*/ ) // We get here if `to` is the exact base path for `from`.
                    // For example: from='/foo/bar/baz'; to='/foo/bar'
                    lastCommonSep = i;
                    else if (i === 0) // We get here if `to` is the root.
                    // For example: from='/foo'; to='/'
                    lastCommonSep = 0;
                }
                break;
            }
            var fromCode = from.charCodeAt(fromStart + i);
            var toCode = to.charCodeAt(toStart + i);
            if (fromCode !== toCode) break;
            else if (fromCode === 47 /*/*/ ) lastCommonSep = i;
        }
        var out = "";
        // Generate the relative path based on the path difference between `to`
        // and `from`
        for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i)if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/ ) {
            if (out.length === 0) out += "..";
            else out += "/..";
        }
        // Lastly, append the rest of the destination (`to`) path that comes after
        // the common path parts
        if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
        else {
            toStart += lastCommonSep;
            if (to.charCodeAt(toStart) === 47 /*/*/ ) ++toStart;
            return to.slice(toStart);
        }
    },
    _makeLong: function _makeLong(path) {
        return path;
    },
    dirname: function dirname(path) {
        $8e6f9755a87227d9$var$assertPath(path);
        if (path.length === 0) return ".";
        var code = path.charCodeAt(0);
        var hasRoot = code === 47 /*/*/ ;
        var end = -1;
        var matchedSlash = true;
        for(var i = path.length - 1; i >= 1; --i){
            code = path.charCodeAt(i);
            if (code === 47 /*/*/ ) {
                if (!matchedSlash) {
                    end = i;
                    break;
                }
            } else // We saw the first non-path separator
            matchedSlash = false;
        }
        if (end === -1) return hasRoot ? "/" : ".";
        if (hasRoot && end === 1) return "//";
        return path.slice(0, end);
    },
    basename: function basename(path, ext) {
        if (ext !== undefined && typeof ext !== "string") throw new TypeError('"ext" argument must be a string');
        $8e6f9755a87227d9$var$assertPath(path);
        var start = 0;
        var end = -1;
        var matchedSlash = true;
        var i;
        if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
            if (ext.length === path.length && ext === path) return "";
            var extIdx = ext.length - 1;
            var firstNonSlashEnd = -1;
            for(i = path.length - 1; i >= 0; --i){
                var code = path.charCodeAt(i);
                if (code === 47 /*/*/ ) // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                {
                    if (!matchedSlash) {
                        start = i + 1;
                        break;
                    }
                } else {
                    if (firstNonSlashEnd === -1) {
                        // We saw the first non-path separator, remember this index in case
                        // we need it if the extension ends up not matching
                        matchedSlash = false;
                        firstNonSlashEnd = i + 1;
                    }
                    if (extIdx >= 0) {
                        // Try to match the explicit extension
                        if (code === ext.charCodeAt(extIdx)) {
                            if (--extIdx === -1) // We matched the extension, so mark this as the end of our path
                            // component
                            end = i;
                        } else {
                            // Extension does not match, so our result is the entire path
                            // component
                            extIdx = -1;
                            end = firstNonSlashEnd;
                        }
                    }
                }
            }
            if (start === end) end = firstNonSlashEnd;
            else if (end === -1) end = path.length;
            return path.slice(start, end);
        } else {
            for(i = path.length - 1; i >= 0; --i){
                if (path.charCodeAt(i) === 47 /*/*/ ) // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                {
                    if (!matchedSlash) {
                        start = i + 1;
                        break;
                    }
                } else if (end === -1) {
                    // We saw the first non-path separator, mark this as the end of our
                    // path component
                    matchedSlash = false;
                    end = i + 1;
                }
            }
            if (end === -1) return "";
            return path.slice(start, end);
        }
    },
    extname: function extname(path) {
        $8e6f9755a87227d9$var$assertPath(path);
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var matchedSlash = true;
        // Track the state of characters (if any) we see before our first dot and
        // after any path separator we find
        var preDotState = 0;
        for(var i = path.length - 1; i >= 0; --i){
            var code = path.charCodeAt(i);
            if (code === 47 /*/*/ ) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                }
                continue;
            }
            if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
            }
            if (code === 46 /*.*/ ) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1) startDot = i;
                else if (preDotState !== 1) preDotState = 1;
            } else if (startDot !== -1) // We saw a non-dot and non-path separator before our dot, so we should
            // have a good chance at having a non-empty extension
            preDotState = -1;
        }
        if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
        preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) return "";
        return path.slice(startDot, end);
    },
    format: function format(pathObject) {
        if (pathObject === null || typeof pathObject !== "object") throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
        return $8e6f9755a87227d9$var$_format("/", pathObject);
    },
    parse: function parse(path) {
        $8e6f9755a87227d9$var$assertPath(path);
        var ret = {
            root: "",
            dir: "",
            base: "",
            ext: "",
            name: ""
        };
        if (path.length === 0) return ret;
        var code = path.charCodeAt(0);
        var isAbsolute = code === 47 /*/*/ ;
        var start;
        if (isAbsolute) {
            ret.root = "/";
            start = 1;
        } else start = 0;
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var matchedSlash = true;
        var i = path.length - 1;
        // Track the state of characters (if any) we see before our first dot and
        // after any path separator we find
        var preDotState = 0;
        // Get non-dir info
        for(; i >= start; --i){
            code = path.charCodeAt(i);
            if (code === 47 /*/*/ ) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                }
                continue;
            }
            if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
            }
            if (code === 46 /*.*/ ) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1) startDot = i;
                else if (preDotState !== 1) preDotState = 1;
            } else if (startDot !== -1) // We saw a non-dot and non-path separator before our dot, so we should
            // have a good chance at having a non-empty extension
            preDotState = -1;
        }
        if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
        preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
            if (end !== -1) {
                if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);
                else ret.base = ret.name = path.slice(startPart, end);
            }
        } else {
            if (startPart === 0 && isAbsolute) {
                ret.name = path.slice(1, startDot);
                ret.base = path.slice(1, end);
            } else {
                ret.name = path.slice(startPart, startDot);
                ret.base = path.slice(startPart, end);
            }
            ret.ext = path.slice(startDot, end);
        }
        if (startPart > 0) ret.dir = path.slice(0, startPart - 1);
        else if (isAbsolute) ret.dir = "/";
        return ret;
    },
    sep: "/",
    delimiter: ":",
    win32: null,
    posix: null
};
$8e6f9755a87227d9$var$posix.posix = $8e6f9755a87227d9$var$posix;
module.exports = $8e6f9755a87227d9$var$posix;

});
parcelRequire.register("jx7mO", function(module, exports) {
// shim for using process in browser
var $e386d04c379f86b6$var$process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var $e386d04c379f86b6$var$cachedSetTimeout;
var $e386d04c379f86b6$var$cachedClearTimeout;
function $e386d04c379f86b6$var$defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function $e386d04c379f86b6$var$defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") $e386d04c379f86b6$var$cachedSetTimeout = setTimeout;
        else $e386d04c379f86b6$var$cachedSetTimeout = $e386d04c379f86b6$var$defaultSetTimout;
    } catch (e) {
        $e386d04c379f86b6$var$cachedSetTimeout = $e386d04c379f86b6$var$defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") $e386d04c379f86b6$var$cachedClearTimeout = clearTimeout;
        else $e386d04c379f86b6$var$cachedClearTimeout = $e386d04c379f86b6$var$defaultClearTimeout;
    } catch (e) {
        $e386d04c379f86b6$var$cachedClearTimeout = $e386d04c379f86b6$var$defaultClearTimeout;
    }
})();
function $e386d04c379f86b6$var$runTimeout(fun) {
    if ($e386d04c379f86b6$var$cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if (($e386d04c379f86b6$var$cachedSetTimeout === $e386d04c379f86b6$var$defaultSetTimout || !$e386d04c379f86b6$var$cachedSetTimeout) && setTimeout) {
        $e386d04c379f86b6$var$cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $e386d04c379f86b6$var$cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return $e386d04c379f86b6$var$cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return $e386d04c379f86b6$var$cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function $e386d04c379f86b6$var$runClearTimeout(marker) {
    if ($e386d04c379f86b6$var$cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if (($e386d04c379f86b6$var$cachedClearTimeout === $e386d04c379f86b6$var$defaultClearTimeout || !$e386d04c379f86b6$var$cachedClearTimeout) && clearTimeout) {
        $e386d04c379f86b6$var$cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $e386d04c379f86b6$var$cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return $e386d04c379f86b6$var$cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return $e386d04c379f86b6$var$cachedClearTimeout.call(this, marker);
        }
    }
}
var $e386d04c379f86b6$var$queue = [];
var $e386d04c379f86b6$var$draining = false;
var $e386d04c379f86b6$var$currentQueue;
var $e386d04c379f86b6$var$queueIndex = -1;
function $e386d04c379f86b6$var$cleanUpNextTick() {
    if (!$e386d04c379f86b6$var$draining || !$e386d04c379f86b6$var$currentQueue) return;
    $e386d04c379f86b6$var$draining = false;
    if ($e386d04c379f86b6$var$currentQueue.length) $e386d04c379f86b6$var$queue = $e386d04c379f86b6$var$currentQueue.concat($e386d04c379f86b6$var$queue);
    else $e386d04c379f86b6$var$queueIndex = -1;
    if ($e386d04c379f86b6$var$queue.length) $e386d04c379f86b6$var$drainQueue();
}
function $e386d04c379f86b6$var$drainQueue() {
    if ($e386d04c379f86b6$var$draining) return;
    var timeout = $e386d04c379f86b6$var$runTimeout($e386d04c379f86b6$var$cleanUpNextTick);
    $e386d04c379f86b6$var$draining = true;
    var len = $e386d04c379f86b6$var$queue.length;
    while(len){
        $e386d04c379f86b6$var$currentQueue = $e386d04c379f86b6$var$queue;
        $e386d04c379f86b6$var$queue = [];
        while(++$e386d04c379f86b6$var$queueIndex < len)if ($e386d04c379f86b6$var$currentQueue) $e386d04c379f86b6$var$currentQueue[$e386d04c379f86b6$var$queueIndex].run();
        $e386d04c379f86b6$var$queueIndex = -1;
        len = $e386d04c379f86b6$var$queue.length;
    }
    $e386d04c379f86b6$var$currentQueue = null;
    $e386d04c379f86b6$var$draining = false;
    $e386d04c379f86b6$var$runClearTimeout(timeout);
}
$e386d04c379f86b6$var$process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    $e386d04c379f86b6$var$queue.push(new $e386d04c379f86b6$var$Item(fun, args));
    if ($e386d04c379f86b6$var$queue.length === 1 && !$e386d04c379f86b6$var$draining) $e386d04c379f86b6$var$runTimeout($e386d04c379f86b6$var$drainQueue);
};
// v8 likes predictible objects
function $e386d04c379f86b6$var$Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
$e386d04c379f86b6$var$Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
$e386d04c379f86b6$var$process.title = "browser";
$e386d04c379f86b6$var$process.browser = true;
$e386d04c379f86b6$var$process.env = {};
$e386d04c379f86b6$var$process.argv = [];
$e386d04c379f86b6$var$process.version = ""; // empty string to avoid regexp issues
$e386d04c379f86b6$var$process.versions = {};
function $e386d04c379f86b6$var$noop() {}
$e386d04c379f86b6$var$process.on = $e386d04c379f86b6$var$noop;
$e386d04c379f86b6$var$process.addListener = $e386d04c379f86b6$var$noop;
$e386d04c379f86b6$var$process.once = $e386d04c379f86b6$var$noop;
$e386d04c379f86b6$var$process.off = $e386d04c379f86b6$var$noop;
$e386d04c379f86b6$var$process.removeListener = $e386d04c379f86b6$var$noop;
$e386d04c379f86b6$var$process.removeAllListeners = $e386d04c379f86b6$var$noop;
$e386d04c379f86b6$var$process.emit = $e386d04c379f86b6$var$noop;
$e386d04c379f86b6$var$process.prependListener = $e386d04c379f86b6$var$noop;
$e386d04c379f86b6$var$process.prependOnceListener = $e386d04c379f86b6$var$noop;
$e386d04c379f86b6$var$process.listeners = function(name) {
    return [];
};
$e386d04c379f86b6$var$process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
$e386d04c379f86b6$var$process.cwd = function() {
    return "/";
};
$e386d04c379f86b6$var$process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
$e386d04c379f86b6$var$process.umask = function() {
    return 0;
};

});


parcelRequire.register("1rwQj", function(module, exports) {

$parcel$export(module.exports, "Help", () => $10d1c9f4d694c380$export$1be7516c0280bee8, (v) => $10d1c9f4d694c380$export$1be7516c0280bee8 = v);
var $10d1c9f4d694c380$export$1be7516c0280bee8;

var $e9rKa = parcelRequire("e9rKa");
var $10d1c9f4d694c380$require$humanReadableArgName = $e9rKa.humanReadableArgName;
/**
 * TypeScript import types for JSDoc, used by Visual Studio Code IntelliSense and `npm run typescript-checkJS`
 * https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#import-types
 * @typedef { import("./argument.js").Argument } Argument
 * @typedef { import("./command.js").Command } Command
 * @typedef { import("./option.js").Option } Option
 */ // @ts-check
// Although this is a class, methods are static in style to allow override using subclass or just functions.
class $10d1c9f4d694c380$var$Help {
    constructor(){
        this.helpWidth = undefined;
        this.sortSubcommands = false;
        this.sortOptions = false;
        this.showGlobalOptions = false;
    }
    /**
   * Get an array of the visible subcommands. Includes a placeholder for the implicit help command, if there is one.
   *
   * @param {Command} cmd
   * @returns {Command[]}
   */ visibleCommands(cmd) {
        const visibleCommands = cmd.commands.filter((cmd)=>!cmd._hidden);
        if (cmd._hasImplicitHelpCommand()) {
            // Create a command matching the implicit help command.
            const [, helpName, helpArgs] = cmd._helpCommandnameAndArgs.match(/([^ ]+) *(.*)/);
            const helpCommand = cmd.createCommand(helpName).helpOption(false);
            helpCommand.description(cmd._helpCommandDescription);
            if (helpArgs) helpCommand.arguments(helpArgs);
            visibleCommands.push(helpCommand);
        }
        if (this.sortSubcommands) visibleCommands.sort((a, b)=>{
            // @ts-ignore: overloaded return type
            return a.name().localeCompare(b.name());
        });
        return visibleCommands;
    }
    /**
   * Compare options for sort.
   *
   * @param {Option} a
   * @param {Option} b
   * @returns number
   */ compareOptions(a, b) {
        const getSortKey = (option)=>{
            // WYSIWYG for order displayed in help. Short used for comparison if present. No special handling for negated.
            return option.short ? option.short.replace(/^-/, "") : option.long.replace(/^--/, "");
        };
        return getSortKey(a).localeCompare(getSortKey(b));
    }
    /**
   * Get an array of the visible options. Includes a placeholder for the implicit help option, if there is one.
   *
   * @param {Command} cmd
   * @returns {Option[]}
   */ visibleOptions(cmd) {
        const visibleOptions = cmd.options.filter((option)=>!option.hidden);
        // Implicit help
        const showShortHelpFlag = cmd._hasHelpOption && cmd._helpShortFlag && !cmd._findOption(cmd._helpShortFlag);
        const showLongHelpFlag = cmd._hasHelpOption && !cmd._findOption(cmd._helpLongFlag);
        if (showShortHelpFlag || showLongHelpFlag) {
            let helpOption;
            if (!showShortHelpFlag) helpOption = cmd.createOption(cmd._helpLongFlag, cmd._helpDescription);
            else if (!showLongHelpFlag) helpOption = cmd.createOption(cmd._helpShortFlag, cmd._helpDescription);
            else helpOption = cmd.createOption(cmd._helpFlags, cmd._helpDescription);
            visibleOptions.push(helpOption);
        }
        if (this.sortOptions) visibleOptions.sort(this.compareOptions);
        return visibleOptions;
    }
    /**
   * Get an array of the visible global options. (Not including help.)
   *
   * @param {Command} cmd
   * @returns {Option[]}
   */ visibleGlobalOptions(cmd) {
        if (!this.showGlobalOptions) return [];
        const globalOptions = [];
        for(let parentCmd = cmd.parent; parentCmd; parentCmd = parentCmd.parent){
            const visibleOptions = parentCmd.options.filter((option)=>!option.hidden);
            globalOptions.push(...visibleOptions);
        }
        if (this.sortOptions) globalOptions.sort(this.compareOptions);
        return globalOptions;
    }
    /**
   * Get an array of the arguments if any have a description.
   *
   * @param {Command} cmd
   * @returns {Argument[]}
   */ visibleArguments(cmd) {
        // Side effect! Apply the legacy descriptions before the arguments are displayed.
        if (cmd._argsDescription) cmd._args.forEach((argument)=>{
            argument.description = argument.description || cmd._argsDescription[argument.name()] || "";
        });
        // If there are any arguments with a description then return all the arguments.
        if (cmd._args.find((argument)=>argument.description)) return cmd._args;
        return [];
    }
    /**
   * Get the command term to show in the list of subcommands.
   *
   * @param {Command} cmd
   * @returns {string}
   */ subcommandTerm(cmd) {
        // Legacy. Ignores custom usage string, and nested commands.
        const args = cmd._args.map((arg)=>$10d1c9f4d694c380$require$humanReadableArgName(arg)).join(" ");
        return cmd._name + (cmd._aliases[0] ? "|" + cmd._aliases[0] : "") + (cmd.options.length ? " [options]" : "") + // simplistic check for non-help option
        (args ? " " + args : "");
    }
    /**
   * Get the option term to show in the list of options.
   *
   * @param {Option} option
   * @returns {string}
   */ optionTerm(option) {
        return option.flags;
    }
    /**
   * Get the argument term to show in the list of arguments.
   *
   * @param {Argument} argument
   * @returns {string}
   */ argumentTerm(argument) {
        return argument.name();
    }
    /**
   * Get the longest command term length.
   *
   * @param {Command} cmd
   * @param {Help} helper
   * @returns {number}
   */ longestSubcommandTermLength(cmd, helper) {
        return helper.visibleCommands(cmd).reduce((max, command)=>{
            return Math.max(max, helper.subcommandTerm(command).length);
        }, 0);
    }
    /**
   * Get the longest option term length.
   *
   * @param {Command} cmd
   * @param {Help} helper
   * @returns {number}
   */ longestOptionTermLength(cmd, helper) {
        return helper.visibleOptions(cmd).reduce((max, option)=>{
            return Math.max(max, helper.optionTerm(option).length);
        }, 0);
    }
    /**
   * Get the longest global option term length.
   *
   * @param {Command} cmd
   * @param {Help} helper
   * @returns {number}
   */ longestGlobalOptionTermLength(cmd, helper) {
        return helper.visibleGlobalOptions(cmd).reduce((max, option)=>{
            return Math.max(max, helper.optionTerm(option).length);
        }, 0);
    }
    /**
   * Get the longest argument term length.
   *
   * @param {Command} cmd
   * @param {Help} helper
   * @returns {number}
   */ longestArgumentTermLength(cmd, helper) {
        return helper.visibleArguments(cmd).reduce((max, argument)=>{
            return Math.max(max, helper.argumentTerm(argument).length);
        }, 0);
    }
    /**
   * Get the command usage to be displayed at the top of the built-in help.
   *
   * @param {Command} cmd
   * @returns {string}
   */ commandUsage(cmd) {
        // Usage
        let cmdName = cmd._name;
        if (cmd._aliases[0]) cmdName = cmdName + "|" + cmd._aliases[0];
        let parentCmdNames = "";
        for(let parentCmd = cmd.parent; parentCmd; parentCmd = parentCmd.parent)parentCmdNames = parentCmd.name() + " " + parentCmdNames;
        return parentCmdNames + cmdName + " " + cmd.usage();
    }
    /**
   * Get the description for the command.
   *
   * @param {Command} cmd
   * @returns {string}
   */ commandDescription(cmd) {
        // @ts-ignore: overloaded return type
        return cmd.description();
    }
    /**
   * Get the subcommand summary to show in the list of subcommands.
   * (Fallback to description for backwards compatibility.)
   *
   * @param {Command} cmd
   * @returns {string}
   */ subcommandDescription(cmd) {
        // @ts-ignore: overloaded return type
        return cmd.summary() || cmd.description();
    }
    /**
   * Get the option description to show in the list of options.
   *
   * @param {Option} option
   * @return {string}
   */ optionDescription(option) {
        const extraInfo = [];
        if (option.argChoices) extraInfo.push(// use stringify to match the display of the default value
        `choices: ${option.argChoices.map((choice)=>JSON.stringify(choice)).join(", ")}`);
        if (option.defaultValue !== undefined) {
            // default for boolean and negated more for programmer than end user,
            // but show true/false for boolean option as may be for hand-rolled env or config processing.
            const showDefault = option.required || option.optional || option.isBoolean() && typeof option.defaultValue === "boolean";
            if (showDefault) extraInfo.push(`default: ${option.defaultValueDescription || JSON.stringify(option.defaultValue)}`);
        }
        // preset for boolean and negated are more for programmer than end user
        if (option.presetArg !== undefined && option.optional) extraInfo.push(`preset: ${JSON.stringify(option.presetArg)}`);
        if (option.envVar !== undefined) extraInfo.push(`env: ${option.envVar}`);
        if (extraInfo.length > 0) return `${option.description} (${extraInfo.join(", ")})`;
        return option.description;
    }
    /**
   * Get the argument description to show in the list of arguments.
   *
   * @param {Argument} argument
   * @return {string}
   */ argumentDescription(argument) {
        const extraInfo = [];
        if (argument.argChoices) extraInfo.push(// use stringify to match the display of the default value
        `choices: ${argument.argChoices.map((choice)=>JSON.stringify(choice)).join(", ")}`);
        if (argument.defaultValue !== undefined) extraInfo.push(`default: ${argument.defaultValueDescription || JSON.stringify(argument.defaultValue)}`);
        if (extraInfo.length > 0) {
            const extraDescripton = `(${extraInfo.join(", ")})`;
            if (argument.description) return `${argument.description} ${extraDescripton}`;
            return extraDescripton;
        }
        return argument.description;
    }
    /**
   * Generate the built-in help text.
   *
   * @param {Command} cmd
   * @param {Help} helper
   * @returns {string}
   */ formatHelp(cmd, helper) {
        const termWidth = helper.padWidth(cmd, helper);
        const helpWidth = helper.helpWidth || 80;
        const itemIndentWidth = 2;
        const itemSeparatorWidth = 2; // between term and description
        function formatItem(term, description) {
            if (description) {
                const fullText = `${term.padEnd(termWidth + itemSeparatorWidth)}${description}`;
                return helper.wrap(fullText, helpWidth - itemIndentWidth, termWidth + itemSeparatorWidth);
            }
            return term;
        }
        function formatList(textArray) {
            return textArray.join("\n").replace(/^/gm, " ".repeat(itemIndentWidth));
        }
        // Usage
        let output = [
            `Usage: ${helper.commandUsage(cmd)}`,
            ""
        ];
        // Description
        const commandDescription = helper.commandDescription(cmd);
        if (commandDescription.length > 0) output = output.concat([
            helper.wrap(commandDescription, helpWidth, 0),
            ""
        ]);
        // Arguments
        const argumentList = helper.visibleArguments(cmd).map((argument)=>{
            return formatItem(helper.argumentTerm(argument), helper.argumentDescription(argument));
        });
        if (argumentList.length > 0) output = output.concat([
            "Arguments:",
            formatList(argumentList),
            ""
        ]);
        // Options
        const optionList = helper.visibleOptions(cmd).map((option)=>{
            return formatItem(helper.optionTerm(option), helper.optionDescription(option));
        });
        if (optionList.length > 0) output = output.concat([
            "Options:",
            formatList(optionList),
            ""
        ]);
        if (this.showGlobalOptions) {
            const globalOptionList = helper.visibleGlobalOptions(cmd).map((option)=>{
                return formatItem(helper.optionTerm(option), helper.optionDescription(option));
            });
            if (globalOptionList.length > 0) output = output.concat([
                "Global Options:",
                formatList(globalOptionList),
                ""
            ]);
        }
        // Commands
        const commandList = helper.visibleCommands(cmd).map((cmd)=>{
            return formatItem(helper.subcommandTerm(cmd), helper.subcommandDescription(cmd));
        });
        if (commandList.length > 0) output = output.concat([
            "Commands:",
            formatList(commandList),
            ""
        ]);
        return output.join("\n");
    }
    /**
   * Calculate the pad width from the maximum term length.
   *
   * @param {Command} cmd
   * @param {Help} helper
   * @returns {number}
   */ padWidth(cmd, helper) {
        return Math.max(helper.longestOptionTermLength(cmd, helper), helper.longestGlobalOptionTermLength(cmd, helper), helper.longestSubcommandTermLength(cmd, helper), helper.longestArgumentTermLength(cmd, helper));
    }
    /**
   * Wrap the given string to width characters per line, with lines after the first indented.
   * Do not wrap if insufficient room for wrapping (minColumnWidth), or string is manually formatted.
   *
   * @param {string} str
   * @param {number} width
   * @param {number} indent
   * @param {number} [minColumnWidth=40]
   * @return {string}
   *
   */ wrap(str, width, indent, minColumnWidth = 40) {
        // Full \s characters, minus the linefeeds.
        const indents = " \\f\\t\\v\xa0  -   　\uFEFF";
        // Detect manually wrapped and indented strings by searching for line break followed by spaces.
        const manualIndent = new RegExp(`[\\n][${indents}]+`);
        if (str.match(manualIndent)) return str;
        // Do not wrap if not enough room for a wrapped column of text (as could end up with a word per line).
        const columnWidth = width - indent;
        if (columnWidth < minColumnWidth) return str;
        const leadingStr = str.slice(0, indent);
        const columnText = str.slice(indent).replace("\r\n", "\n");
        const indentString = " ".repeat(indent);
        const zeroWidthSpace = "​";
        const breaks = `\\s${zeroWidthSpace}`;
        // Match line end (so empty lines don't collapse),
        // or as much text as will fit in column, or excess text up to first break.
        const regex = new RegExp(`\n|.{1,${columnWidth - 1}}([${breaks}]|$)|[^${breaks}]+?([${breaks}]|$)`, "g");
        const lines = columnText.match(regex) || [];
        return leadingStr + lines.map((line, i)=>{
            if (line === "\n") return ""; // preserve empty lines
            return (i > 0 ? indentString : "") + line.trimEnd();
        }).join("\n");
    }
}
$10d1c9f4d694c380$export$1be7516c0280bee8 = $10d1c9f4d694c380$var$Help;

});

parcelRequire.register("aI2sl", function(module, exports) {

$parcel$export(module.exports, "Option", () => $7cbfeb341fe12fab$export$36d18380658d5d20, (v) => $7cbfeb341fe12fab$export$36d18380658d5d20 = v);
$parcel$export(module.exports, "splitOptionFlags", () => $7cbfeb341fe12fab$export$cc71cd927828fbd0, (v) => $7cbfeb341fe12fab$export$cc71cd927828fbd0 = v);
$parcel$export(module.exports, "DualOptions", () => $7cbfeb341fe12fab$export$f016b541f40b8e65, (v) => $7cbfeb341fe12fab$export$f016b541f40b8e65 = v);
var $7cbfeb341fe12fab$export$36d18380658d5d20;
var $7cbfeb341fe12fab$export$cc71cd927828fbd0;
var $7cbfeb341fe12fab$export$f016b541f40b8e65;

var $ijHVT = parcelRequire("ijHVT");
var $7cbfeb341fe12fab$require$InvalidArgumentError = $ijHVT.InvalidArgumentError;
// @ts-check
class $7cbfeb341fe12fab$var$Option {
    /**
   * Initialize a new `Option` with the given `flags` and `description`.
   *
   * @param {string} flags
   * @param {string} [description]
   */ constructor(flags, description){
        this.flags = flags;
        this.description = description || "";
        this.required = flags.includes("<"); // A value must be supplied when the option is specified.
        this.optional = flags.includes("["); // A value is optional when the option is specified.
        // variadic test ignores <value,...> et al which might be used to describe custom splitting of single argument
        this.variadic = /\w\.\.\.[>\]]$/.test(flags); // The option can take multiple values.
        this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.
        const optionFlags = $7cbfeb341fe12fab$var$splitOptionFlags(flags);
        this.short = optionFlags.shortFlag;
        this.long = optionFlags.longFlag;
        this.negate = false;
        if (this.long) this.negate = this.long.startsWith("--no-");
        this.defaultValue = undefined;
        this.defaultValueDescription = undefined;
        this.presetArg = undefined;
        this.envVar = undefined;
        this.parseArg = undefined;
        this.hidden = false;
        this.argChoices = undefined;
        this.conflictsWith = [];
        this.implied = undefined;
    }
    /**
   * Set the default value, and optionally supply the description to be displayed in the help.
   *
   * @param {any} value
   * @param {string} [description]
   * @return {Option}
   */ default(value, description) {
        this.defaultValue = value;
        this.defaultValueDescription = description;
        return this;
    }
    /**
   * Preset to use when option used without option-argument, especially optional but also boolean and negated.
   * The custom processing (parseArg) is called.
   *
   * @example
   * new Option('--color').default('GREYSCALE').preset('RGB');
   * new Option('--donate [amount]').preset('20').argParser(parseFloat);
   *
   * @param {any} arg
   * @return {Option}
   */ preset(arg) {
        this.presetArg = arg;
        return this;
    }
    /**
   * Add option name(s) that conflict with this option.
   * An error will be displayed if conflicting options are found during parsing.
   *
   * @example
   * new Option('--rgb').conflicts('cmyk');
   * new Option('--js').conflicts(['ts', 'jsx']);
   *
   * @param {string | string[]} names
   * @return {Option}
   */ conflicts(names) {
        this.conflictsWith = this.conflictsWith.concat(names);
        return this;
    }
    /**
   * Specify implied option values for when this option is set and the implied options are not.
   *
   * The custom processing (parseArg) is not called on the implied values.
   *
   * @example
   * program
   *   .addOption(new Option('--log', 'write logging information to file'))
   *   .addOption(new Option('--trace', 'log extra details').implies({ log: 'trace.txt' }));
   *
   * @param {Object} impliedOptionValues
   * @return {Option}
   */ implies(impliedOptionValues) {
        this.implied = Object.assign(this.implied || {}, impliedOptionValues);
        return this;
    }
    /**
   * Set environment variable to check for option value.
   *
   * An environment variable is only used if when processed the current option value is
   * undefined, or the source of the current value is 'default' or 'config' or 'env'.
   *
   * @param {string} name
   * @return {Option}
   */ env(name) {
        this.envVar = name;
        return this;
    }
    /**
   * Set the custom handler for processing CLI option arguments into option values.
   *
   * @param {Function} [fn]
   * @return {Option}
   */ argParser(fn) {
        this.parseArg = fn;
        return this;
    }
    /**
   * Whether the option is mandatory and must have a value after parsing.
   *
   * @param {boolean} [mandatory=true]
   * @return {Option}
   */ makeOptionMandatory(mandatory = true) {
        this.mandatory = !!mandatory;
        return this;
    }
    /**
   * Hide option in help.
   *
   * @param {boolean} [hide=true]
   * @return {Option}
   */ hideHelp(hide = true) {
        this.hidden = !!hide;
        return this;
    }
    /**
   * @api private
   */ _concatValue(value, previous) {
        if (previous === this.defaultValue || !Array.isArray(previous)) return [
            value
        ];
        return previous.concat(value);
    }
    /**
   * Only allow option value to be one of choices.
   *
   * @param {string[]} values
   * @return {Option}
   */ choices(values) {
        this.argChoices = values.slice();
        this.parseArg = (arg, previous)=>{
            if (!this.argChoices.includes(arg)) throw new $7cbfeb341fe12fab$require$InvalidArgumentError(`Allowed choices are ${this.argChoices.join(", ")}.`);
            if (this.variadic) return this._concatValue(arg, previous);
            return arg;
        };
        return this;
    }
    /**
   * Return option name.
   *
   * @return {string}
   */ name() {
        if (this.long) return this.long.replace(/^--/, "");
        return this.short.replace(/^-/, "");
    }
    /**
   * Return option name, in a camelcase format that can be used
   * as a object attribute key.
   *
   * @return {string}
   * @api private
   */ attributeName() {
        return $7cbfeb341fe12fab$var$camelcase(this.name().replace(/^no-/, ""));
    }
    /**
   * Check if `arg` matches the short or long flag.
   *
   * @param {string} arg
   * @return {boolean}
   * @api private
   */ is(arg) {
        return this.short === arg || this.long === arg;
    }
    /**
   * Return whether a boolean option.
   *
   * Options are one of boolean, negated, required argument, or optional argument.
   *
   * @return {boolean}
   * @api private
   */ isBoolean() {
        return !this.required && !this.optional && !this.negate;
    }
}
/**
 * This class is to make it easier to work with dual options, without changing the existing
 * implementation. We support separate dual options for separate positive and negative options,
 * like `--build` and `--no-build`, which share a single option value. This works nicely for some
 * use cases, but is tricky for others where we want separate behaviours despite
 * the single shared option value.
 */ class $7cbfeb341fe12fab$var$DualOptions {
    /**
   * @param {Option[]} options
   */ constructor(options){
        this.positiveOptions = new Map();
        this.negativeOptions = new Map();
        this.dualOptions = new Set();
        options.forEach((option)=>{
            if (option.negate) this.negativeOptions.set(option.attributeName(), option);
            else this.positiveOptions.set(option.attributeName(), option);
        });
        this.negativeOptions.forEach((value, key)=>{
            if (this.positiveOptions.has(key)) this.dualOptions.add(key);
        });
    }
    /**
   * Did the value come from the option, and not from possible matching dual option?
   *
   * @param {any} value
   * @param {Option} option
   * @returns {boolean}
   */ valueFromOption(value, option) {
        const optionKey = option.attributeName();
        if (!this.dualOptions.has(optionKey)) return true;
        // Use the value to deduce if (probably) came from the option.
        const preset = this.negativeOptions.get(optionKey).presetArg;
        const negativeValue = preset !== undefined ? preset : false;
        return option.negate === (negativeValue === value);
    }
}
/**
 * Convert string from kebab-case to camelCase.
 *
 * @param {string} str
 * @return {string}
 * @api private
 */ function $7cbfeb341fe12fab$var$camelcase(str) {
    return str.split("-").reduce((str, word)=>{
        return str + word[0].toUpperCase() + word.slice(1);
    });
}
/**
 * Split the short and long flag out of something like '-m,--mixed <value>'
 *
 * @api private
 */ function $7cbfeb341fe12fab$var$splitOptionFlags(flags) {
    let shortFlag;
    let longFlag;
    // Use original very loose parsing to maintain backwards compatibility for now,
    // which allowed for example unintended `-sw, --short-word` [sic].
    const flagParts = flags.split(/[ |,]+/);
    if (flagParts.length > 1 && !/^[[<]/.test(flagParts[1])) shortFlag = flagParts.shift();
    longFlag = flagParts.shift();
    // Add support for lone short flag without significantly changing parsing!
    if (!shortFlag && /^-[^-]$/.test(longFlag)) {
        shortFlag = longFlag;
        longFlag = undefined;
    }
    return {
        shortFlag: shortFlag,
        longFlag: longFlag
    };
}
$7cbfeb341fe12fab$export$36d18380658d5d20 = $7cbfeb341fe12fab$var$Option;
$7cbfeb341fe12fab$export$cc71cd927828fbd0 = $7cbfeb341fe12fab$var$splitOptionFlags;
$7cbfeb341fe12fab$export$f016b541f40b8e65 = $7cbfeb341fe12fab$var$DualOptions;

});

parcelRequire.register("5XsVv", function(module, exports) {

$parcel$export(module.exports, "suggestSimilar", () => $4568e6a10be7c772$export$fb428148996def8f, (v) => $4568e6a10be7c772$export$fb428148996def8f = v);
var $4568e6a10be7c772$export$fb428148996def8f;
const $4568e6a10be7c772$var$maxDistance = 3;
function $4568e6a10be7c772$var$editDistance(a, b) {
    // https://en.wikipedia.org/wiki/Damerau–Levenshtein_distance
    // Calculating optimal string alignment distance, no substring is edited more than once.
    // (Simple implementation.)
    // Quick early exit, return worst case.
    if (Math.abs(a.length - b.length) > $4568e6a10be7c772$var$maxDistance) return Math.max(a.length, b.length);
    // distance between prefix substrings of a and b
    const d = [];
    // pure deletions turn a into empty string
    for(let i = 0; i <= a.length; i++)d[i] = [
        i
    ];
    // pure insertions turn empty string into b
    for(let j = 0; j <= b.length; j++)d[0][j] = j;
    // fill matrix
    for(let j = 1; j <= b.length; j++)for(let i = 1; i <= a.length; i++){
        let cost = 1;
        if (a[i - 1] === b[j - 1]) cost = 0;
        else cost = 1;
        d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost // substitution
        );
        // transposition
        if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + 1);
    }
    return d[a.length][b.length];
}
/**
 * Find close matches, restricted to same number of edits.
 *
 * @param {string} word
 * @param {string[]} candidates
 * @returns {string}
 */ function $4568e6a10be7c772$var$suggestSimilar(word, candidates) {
    if (!candidates || candidates.length === 0) return "";
    // remove possible duplicates
    candidates = Array.from(new Set(candidates));
    const searchingOptions = word.startsWith("--");
    if (searchingOptions) {
        word = word.slice(2);
        candidates = candidates.map((candidate)=>candidate.slice(2));
    }
    let similar = [];
    let bestDistance = $4568e6a10be7c772$var$maxDistance;
    const minSimilarity = 0.4;
    candidates.forEach((candidate)=>{
        if (candidate.length <= 1) return; // no one character guesses
        const distance = $4568e6a10be7c772$var$editDistance(word, candidate);
        const length = Math.max(word.length, candidate.length);
        const similarity = (length - distance) / length;
        if (similarity > minSimilarity) {
            if (distance < bestDistance) {
                // better edit distance, throw away previous worse matches
                bestDistance = distance;
                similar = [
                    candidate
                ];
            } else if (distance === bestDistance) similar.push(candidate);
        }
    });
    similar.sort((a, b)=>a.localeCompare(b));
    if (searchingOptions) similar = similar.map((candidate)=>`--${candidate}`);
    if (similar.length > 1) return `\n(Did you mean one of ${similar.join(", ")}?)`;
    if (similar.length === 1) return `\n(Did you mean ${similar[0]}?)`;
    return "";
}
$4568e6a10be7c772$export$fb428148996def8f = $4568e6a10be7c772$var$suggestSimilar;

});



parcelRequire.register("6kwtT", function(module, exports) {

var $jx7mO = parcelRequire("jx7mO");
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.defaultHelpGenerator = exports.parseCmd = exports.parseFlag = exports.parseValueFlag = exports.defaultCmdParserSettings = exports.helpFlag = exports.fillCmdDefinitionRecursive = exports.defaultCmdDefinitionSettings = exports.getProcessArgs = exports.anyToString = exports.CmdError = void 0;
exports = module.exports = parseCmd;
exports.default = exports;
var CmdError = function(_super) {
    __extends(CmdError, _super);
    function CmdError(msg) {
        return _super.call(this, msg) || this;
    }
    return CmdError;
}(Error);
exports.CmdError = CmdError;
function anyToString(value) {
    if (typeof value == "object") {
        if (value == null) return "NULL";
        var v = void 0;
        try {
            v = JSON.stringify(value);
        } catch (err) {}
        if (typeof v == "string" && v.length > 0) return v;
        v = "" + value;
        if (typeof v == "string" && v.length > 0) return v;
        return "{}";
    } else return "" + value;
}
exports.anyToString = anyToString;
function getProcessArgs() {
    return {
        nodePath: $jx7mO.argv[0],
        appPath: $jx7mO.argv[1],
        args: $jx7mO.argv.slice(2)
    };
}
exports.getProcessArgs = getProcessArgs;
exports.defaultCmdDefinitionSettings = {
    cmds: [],
    allowUnknownArgs: false,
    allowUnknownFlags: false,
    multiValues: false,
    details: undefined,
    alias: [],
    flags: [],
    group: undefined
};
function fillCmdDefinitionRecursive(cmd, globalFlags, helpFlag) {
    var cmd2 = __assign(__assign(__assign({}, exports.defaultCmdDefinitionSettings), cmd), {
        name: cmd.name.toLowerCase(),
        alias: cmd.alias ? cmd.alias.map(function(a) {
            return a.toLowerCase();
        }) : []
    });
    cmd2.flags = __spreadArray(__spreadArray(__spreadArray([], globalFlags, true), cmd2.flags, true), [
        helpFlag
    ], false).map(function(f) {
        f.name = f.name.toLowerCase();
        f.alias = f.alias ? f.alias.map(function(a) {
            return a.toLowerCase();
        }) : [];
        return f;
    });
    cmd2.cmds = cmd2.cmds.map(function(subCmd) {
        return fillCmdDefinitionRecursive(subCmd, globalFlags, helpFlag);
    });
    return cmd2;
}
exports.fillCmdDefinitionRecursive = fillCmdDefinitionRecursive;
exports.helpFlag = {
    name: "help",
    description: "Shows this help output",
    shorthand: "h"
};
exports.defaultCmdParserSettings = {
    cmd: {},
    args: getProcessArgs().args,
    helpWords: [
        "-h",
        "--help"
    ],
    globalFlags: [],
    globalHelpMsg: undefined,
    helpGeneratorFunction: defaultHelpGenerator,
    helpFlag: exports.helpFlag
};
function parseValueFlag(flag, flagvalue, restArgs, res) {
    if (flagvalue.startsWith('"')) {
        while(restArgs.length > 0){
            flagvalue += restArgs.shift();
            if (flagvalue.endsWith('"')) break;
        }
        flagvalue = flagvalue.slice(1, -1);
    }
    var value = undefined;
    var tmp = flagvalue.toLowerCase();
    if (flag.types.includes("boolean")) {
        if (tmp == "true") value = true;
        else if (tmp == "false") value = false;
    }
    if (!value && flag.types.includes("number")) {
        tmp = Number(flagvalue);
        if (!isNaN(tmp)) value = flagvalue;
    }
    if (!value && flag.types.includes("string")) value = flagvalue;
    flag.types.forEach(function(type) {
        if (typeof type == "string") return;
        value = type.validate(flagvalue);
    });
    if (value == undefined) throw new CmdError("Type of '" + flag.name + "' needs to be a '" + flag.types.map(function(t) {
        return typeof t == "string" ? t : t.name;
    }).join("', '") + "'!");
    if (flag.multiValues) {
        if (!res.arrayFlags[flag.name]) res.arrayFlags[flag.name] = [];
        res.arrayFlags[flag.name].push(value);
        if (flag.exe) res.exeValueFlags.push([
            value,
            flag
        ]);
    } else {
        if (typeof res.valueFlags[flag.name] == "string") throw new Error("Value flag for '" + flag.name + "' is set multiple times but is just allows once");
        res.valueFlags[flag.name] = value;
        if (flag.exe) res.exeValueFlags.push([
            value,
            flag
        ]);
    }
}
exports.parseValueFlag = parseValueFlag;
function parseFlag(flag, res) {
    if (!res.flags.includes(flag.name)) {
        res.flags.push(flag.name);
        if (flag.exe) res.exeFlags.push(flag);
    }
}
exports.parseFlag = parseFlag;
function parseCmd(options) {
    var _this = this;
    var settings = __assign(__assign({}, exports.defaultCmdParserSettings), options);
    settings.cmd = fillCmdDefinitionRecursive(settings.cmd, settings.globalFlags, settings.helpFlag);
    var restArgs = settings.args;
    if (restArgs.length > 0 && restArgs[0] == settings.cmd.name) restArgs.shift();
    var res = {
        cmd: settings.cmd,
        args: [],
        flags: [],
        arrayFlags: {},
        valueFlags: {},
        parents: [
            settings.cmd
        ],
        settings: settings,
        err: undefined,
        exe: undefined,
        meta: {},
        helpResult: false,
        exeFlags: [],
        exeValueFlags: []
    };
    while(restArgs.length > 0){
        var arg = restArgs[0];
        var lowerArg = arg.toLowerCase();
        var found = false;
        for(var _i = 0, _a = res.cmd.cmds; _i < _a.length; _i++){
            var cmd = _a[_i];
            if (cmd.name == lowerArg || cmd.alias && cmd.alias.includes(lowerArg)) {
                restArgs.shift();
                res.cmd = cmd;
                found = true;
                break;
            }
        }
        if (!found) break;
    }
    try {
        for(var index2 = 0; index2 < res.cmd.flags.length; index2++){
            var flag = res.cmd.flags[index2];
            flag.name = flag.name.toLowerCase();
            if (flag.alias && Array.isArray(flag.alias) && flag.alias.length > 0) flag.alias = flag.alias.map(function(a) {
                return a.toLowerCase();
            });
        }
        while(restArgs.length > 0){
            var arg = restArgs.shift();
            var lowerArg = arg.toLowerCase();
            if (arg == "") continue;
            else if (lowerArg == "--help" || lowerArg == "-h") {
                if (!res.flags.includes("help")) res.flags.push("help");
            } else if (arg.startsWith("--")) {
                var equalIndex = arg.indexOf("=");
                var flagname = void 0;
                var flagvalue = undefined;
                if (equalIndex == -1) flagname = arg.substring(2);
                else {
                    flagname = arg.substring(2, equalIndex);
                    flagvalue = arg.substring(equalIndex + 1);
                }
                if (flagname.length == 0) throw new Error("Empty flag!");
                var found = false;
                for(var index2 = 0; index2 < res.cmd.flags.length; index2++){
                    var flag = res.cmd.flags[index2];
                    if (flag.alias) flag.alias.includes(flagname);
                    if (flag.name.toLowerCase() != flagname && (!flag.alias || !flag.alias.includes(flagname))) continue;
                    flag.types && flag.types.length > 0 ? parseValueFlag(flag, flagvalue !== null && flagvalue !== void 0 ? flagvalue : restArgs.shift(), restArgs, res) : parseFlag(flag, res);
                    found = true;
                    break;
                }
                if (!found) {
                    if (res.cmd.allowUnknownFlags) {
                        res.args.push(arg);
                        continue;
                    }
                    throw new CmdError('Unknown flag: "--' + flagname + '"');
                }
            } else if (arg.startsWith("-")) {
                var shorthands = arg.substring(1).split("");
                for(var index2 = shorthands.length - 1; index2 >= 0; index2--){
                    var shorthand = shorthands[index2];
                    var found = false;
                    for(var _b = 0, _c = res.cmd.flags; _b < _c.length; _b++){
                        var flag = _c[_b];
                        if (flag.shorthand && flag.shorthand == shorthand) {
                            restArgs = __spreadArray([
                                "--" + flag.name
                            ], restArgs, true);
                            found = true;
                            break;
                        }
                    }
                    if (!found) {
                        if (res.cmd.allowUnknownFlags) {
                            res.args.push(arg);
                            continue;
                        }
                        throw new CmdError('Unknown shorthand flag: "-' + shorthand + '"');
                    }
                }
            } else {
                if (!res.cmd.allowUnknownArgs) throw new CmdError('Unknown command argument: "' + arg + '"');
                res.args.push(arg);
            }
        }
        for(var index = 0; index < res.cmd.flags.length; index++){
            var flag = res.cmd.flags[index];
            if (flag.types && !Object.keys(res.valueFlags).includes(flag.name)) {
                var type = typeof flag.default;
                if (type == "string" || type == "number" || type == "boolean") {
                    if (flag.multiValues) res.arrayFlags[flag.name] = [
                        "" + flag.default
                    ];
                    else res.valueFlags[flag.name] = "" + flag.default;
                } else if (flag.required) throw new CmdError("Flag '" + flag.name + "' is required but not set!");
            } else if (!res.flags.includes(flag.name) && !Object.keys(res.valueFlags).includes(flag.name)) {
                var type = typeof flag.default;
                if (type == "string" || type == "number" || type == "boolean") {
                    if (flag.multiValues) res.arrayFlags[flag.name] = [
                        "" + flag.default
                    ];
                    else res.valueFlags[flag.name] = "" + flag.default;
                } else if (flag.required) throw new CmdError("Flag '" + flag.name + "' is required but not set!");
            }
        }
    } catch (err) {
        res.err = err;
        res.exe = function() {
            return __awaiter(_this, void 0, void 0, function() {
                var _a;
                return __generator(this, function(_b) {
                    console.error(err instanceof CmdError ? "Cmdy" + err.message : "UnknownError | " + ((_a = err.stack) !== null && _a !== void 0 ? _a : err));
                    return [
                        2,
                        res
                    ];
                });
            });
        };
    }
    res.cmd.flags.forEach(function(f) {
        if (!Array.isArray(f.types)) return;
        if (!res.arrayFlags[f.name]) {
            if (f.multiValues) res.arrayFlags[f.name] = [];
        }
    });
    res.exeFlags = res.exeFlags.sort(function(a, b) {
        var _a, _b;
        return ((_a = a.exePriority) !== null && _a !== void 0 ? _a : 0) - ((_b = b.exePriority) !== null && _b !== void 0 ? _b : 0);
    });
    res.exeValueFlags = res.exeValueFlags.sort(function(a, b) {
        var _a, _b;
        return ((_a = a[1].exePriority) !== null && _a !== void 0 ? _a : 0) - ((_b = b[1].exePriority) !== null && _b !== void 0 ? _b : 0);
    });
    if (!res.cmd.exe) settings.helpGeneratorFunction(res);
    else if (!res.err) {
        if (res.flags.includes("help")) settings.helpGeneratorFunction(res);
        else res.exe = function() {
            return __awaiter(_this, void 0, void 0, function() {
                var _i, _a, flag, _b, _c, flag;
                return __generator(this, function(_d) {
                    switch(_d.label){
                        case 0:
                            _i = 0, _a = res.exeFlags;
                            _d.label = 1;
                        case 1:
                            if (!(_i < _a.length)) return [
                                3,
                                4
                            ];
                            flag = _a[_i];
                            return [
                                4,
                                flag.exe(res, undefined)
                            ];
                        case 2:
                            _d.sent();
                            _d.label = 3;
                        case 3:
                            _i++;
                            return [
                                3,
                                1
                            ];
                        case 4:
                            _b = 0, _c = res.exeValueFlags;
                            _d.label = 5;
                        case 5:
                            if (!(_b < _c.length)) return [
                                3,
                                8
                            ];
                            flag = _c[_b];
                            return [
                                4,
                                flag[1].exe(res, flag[0])
                            ];
                        case 6:
                            _d.sent();
                            _d.label = 7;
                        case 7:
                            _b++;
                            return [
                                3,
                                5
                            ];
                        case 8:
                            return [
                                4,
                                res.cmd.exe(res)
                            ];
                        case 9:
                            _d.sent();
                            return [
                                2,
                                res
                            ];
                    }
                });
            });
        };
    }
    return res;
}
exports.parseCmd = parseCmd;
function defaultHelpGenerator(data) {
    var _this = this;
    data.helpResult = true;
    var message = "# " + data.cmd.name.toUpperCase() + " #";
    !data.cmd.exe && (message += "\n\nERROR: Command " + data.cmd.name + " not directly executeable!");
    message += "\n\nUsage: " + data.parents.map(function(a) {
        return a.name;
    }).join(" ");
    if (data.cmd.flags.length > 0) message += " [OPTIONS]";
    if (data.cmd.cmds && data.cmd.cmds.length > 0) message += " COMMAND";
    if (data.cmd.allowUnknownArgs) message += " [ARGUMENTS]";
    message += "\n\n" + data.cmd.description;
    if (data.cmd.flags.length > 0) {
        message += "\n\nOptions:\n";
        var options = [];
        var biggest = 0;
        for(var index = 0; index < data.cmd.flags.length; index++){
            var flag = data.cmd.flags[index];
            var flagMsg = void 0;
            if (flag.shorthand) flagMsg = "  -" + flag.shorthand + ", --" + flag.name;
            else flagMsg = "      --" + flag.name;
            if (flag.types && flag.types.length > 0) flagMsg += " [" + flag.types.map(function(t) {
                return typeof t == "string" ? t : t.name;
            }).join(" | ") + "]";
            if (flagMsg.length > biggest) biggest = flagMsg.length;
            options.push(flagMsg);
        }
        for(var index = 0; index < options.length; index++){
            while(options[index].length <= biggest)options[index] += " ";
            options[index] += data.cmd.flags[index].description;
        }
        message += options.join("\n");
    }
    if (data.cmd.cmds && data.cmd.cmds.length > 0) {
        var groups_1 = {
            "default": []
        };
        data.cmd.cmds.forEach(function(cmd) {
            var _a;
            var group = (_a = cmd.group) !== null && _a !== void 0 ? _a : "default";
            if (!groups_1[group]) groups_1[group] = [];
            groups_1[group].push(cmd);
        });
        var keys = Object.keys(groups_1).reverse();
        for(var index = 0; index < keys.length; index++){
            var group = keys[index];
            var groupCmds = groups_1[group];
            var formatedGroupName = group == "default" ? "" : group.substring(0, 1).toUpperCase() + group.substring(1) + " ";
            message += "\n\n" + formatedGroupName + "Commands:\n";
            var commands = [];
            var biggest = 7;
            for(var index2 = 0; index2 < groupCmds.length; index2++){
                var cmdName = groupCmds[index2].name;
                if (cmdName.length > biggest) biggest = cmdName.length;
                commands.push(cmdName);
            }
            for(var index2 = 0; index2 < commands.length; index2++){
                while(commands[index2].length <= biggest)commands[index2] += " ";
                commands[index2] += groupCmds[index2].description;
            }
            message += commands.join("\n");
        }
    }
    if (data.cmd.details && data.flags.includes("help")) message += "\n\nDetails:\n" + data.cmd.details;
    else message += "\n\nRun '" + data.parents.map(function(a) {
        return a.name;
    }).join(" ") + " --help' for more informations on a command.";
    if (data.settings.globalHelpMsg) message += "\n\n" + data.settings.globalHelpMsg;
    data.msg = message;
    data.exe = function() {
        return __awaiter(_this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                console.info(message);
                return [
                    2,
                    data
                ];
            });
        });
    };
    return data;
}
exports.defaultHelpGenerator = defaultHelpGenerator;

});

parcelRequire.register("4Dor1", function(module, exports) {
// We are modularizing this manually because the current modularize setting in Emscripten has some issues:
// https://github.com/kripken/emscripten/issues/5820
// In addition, When you use emcc's modularization, it still expects to export a global object called `Module`,
// which is able to be used/called before the WASM is loaded.
// The modularization below exports a promise that loads and resolves to the actual sql.js module.
// That way, this module can't be used before the WASM is finished loading.
// We are going to define a function that a user will call to start loading initializing our Sql.js library
// However, that function might be called multiple times, and on subsequent calls, we don't actually want it to instantiate a new instance of the Module
// Instead, we want to return the previously loaded module
// TODO: Make this not declare a global if used in the browser
var __dirname = "../../node_modules/sql.js/dist";

var $jx7mO = parcelRequire("jx7mO");

var $fLrIr = parcelRequire("fLrIr");
var $35fdc2376fda24c1$require$Buffer = $fLrIr.Buffer;
var initSqlJsPromise = undefined;




var initSqlJs = function(moduleConfig) {
    if (initSqlJsPromise) return initSqlJsPromise;
    // If we're here, we've never called this function before
    initSqlJsPromise = new Promise(function(resolveModule, reject) {
        // We are modularizing this manually because the current modularize setting in Emscripten has some issues:
        // https://github.com/kripken/emscripten/issues/5820
        // The way to affect the loading of emcc compiled modules is to create a variable called `Module` and add
        // properties to it, like `preRun`, `postRun`, etc
        // We are using that to get notified when the WASM has finished loading.
        // Only then will we return our promise
        // If they passed in a moduleConfig object, use that
        // Otherwise, initialize Module to the empty object
        var Module = typeof moduleConfig !== "undefined" ? moduleConfig : {};
        // EMCC only allows for a single onAbort function (not an array of functions)
        // So if the user defined their own onAbort function, we remember it and call it
        var originalOnAbortFunction = Module["onAbort"];
        Module["onAbort"] = function(errorThatCausedAbort) {
            reject(new Error(errorThatCausedAbort));
            if (originalOnAbortFunction) originalOnAbortFunction(errorThatCausedAbort);
        };
        Module["postRun"] = Module["postRun"] || [];
        Module["postRun"].push(function() {
            // When Emscripted calls postRun, this promise resolves with the built Module
            resolveModule(Module);
        });
        // There is a section of code in the emcc-generated code below that looks like this:
        // (Note that this is lowercase `module`)
        // if (typeof module !== 'undefined') {
        //     module['exports'] = Module;
        // }
        // When that runs, it's going to overwrite our own modularization export efforts in shell-post.js!
        // The only way to tell emcc not to emit it is to pass the MODULARIZE=1 or MODULARIZE_INSTANCE=1 flags,
        // but that carries with it additional unnecessary baggage/bugs we don't want either.
        // So, we have three options:
        // 1) We undefine `module`
        // 2) We remember what `module['exports']` was at the beginning of this function and we restore it later
        // 3) We write a script to remove those lines of code as part of the Make process.
        //
        // Since those are the only lines of code that care about module, we will undefine it. It's the most straightforward
        // of the options, and has the side effect of reducing emcc's efforts to modify the module if its output were to change in the future.
        // That's a nice side effect since we're handling the modularization efforts ourselves
        module = undefined;
        // The emcc-generated code and shell-post.js code goes below,
        // meaning that all of it runs inside of this promise. If anything throws an exception, our promise will abort
        var e;
        e || (e = typeof Module !== "undefined" ? Module : {});
        e.onRuntimeInitialized = function() {
            function a(g, m) {
                switch(typeof m){
                    case "boolean":
                        gc(g, m ? 1 : 0);
                        break;
                    case "number":
                        hc(g, m);
                        break;
                    case "string":
                        ic(g, m, -1, -1);
                        break;
                    case "object":
                        if (null === m) kb(g);
                        else if (null != m.length) {
                            var n = aa(m);
                            jc(g, n, m.length, -1);
                            ba(n);
                        } else xa(g, "Wrong API use : tried to return a value of an unknown type (" + m + ").", -1);
                        break;
                    default:
                        kb(g);
                }
            }
            function b(g, m) {
                for(var n = [], p = 0; p < g; p += 1){
                    var v = l(m + 4 * p, "i32"), y = kc(v);
                    if (1 === y || 2 === y) v = lc(v);
                    else if (3 === y) v = mc(v);
                    else if (4 === y) {
                        y = v;
                        v = nc(y);
                        y = oc(y);
                        for(var L = new Uint8Array(v), G = 0; G < v; G += 1)L[G] = r[y + G];
                        v = L;
                    } else v = null;
                    n.push(v);
                }
                return n;
            }
            function c(g, m) {
                this.La = g;
                this.db = m;
                this.Ja = 1;
                this.fb = [];
            }
            function d(g, m) {
                this.db = m;
                m = ca(g) + 1;
                this.Ya = da(m);
                if (null === this.Ya) throw Error("Unable to allocate memory for the SQL string");
                t(g, u, this.Ya, m);
                this.eb = this.Ya;
                this.Ua = this.ib = null;
            }
            function f(g) {
                this.filename = "dbfile_" + (4294967295 * Math.random() >>> 0);
                if (null != g) {
                    var m = this.filename, n = "/", p = m;
                    n && (n = "string" == typeof n ? n : ea(n), p = m ? z(n + "/" + m) : n);
                    m = fa(!0, !0);
                    p = ha(p, (void 0 !== m ? m : 438) & 4095 | 32768, 0);
                    if (g) {
                        if ("string" == typeof g) {
                            n = Array(g.length);
                            for(var v = 0, y = g.length; v < y; ++v)n[v] = g.charCodeAt(v);
                            g = n;
                        }
                        ia(p, m | 146);
                        n = ja(p, 577);
                        ka(n, g, 0, g.length, 0);
                        la(n);
                        ia(p, m);
                    }
                }
                this.handleError(q(this.filename, h));
                this.db = l(h, "i32");
                pc(this.db);
                this.Za = {};
                this.Na = {};
            }
            var h = B(4), k = e.cwrap, q = k("sqlite3_open", "number", [
                "string",
                "number"
            ]), x = k("sqlite3_close_v2", "number", [
                "number"
            ]), w = k("sqlite3_exec", "number", [
                "number",
                "string",
                "number",
                "number",
                "number"
            ]), A = k("sqlite3_changes", "number", [
                "number"
            ]), S = k("sqlite3_prepare_v2", "number", [
                "number",
                "string",
                "number",
                "number",
                "number"
            ]), nb = k("sqlite3_sql", "string", [
                "number"
            ]), qc = k("sqlite3_normalized_sql", "string", [
                "number"
            ]), ob = k("sqlite3_prepare_v2", "number", [
                "number",
                "number",
                "number",
                "number",
                "number"
            ]), rc = k("sqlite3_bind_text", "number", [
                "number",
                "number",
                "number",
                "number",
                "number"
            ]), pb = k("sqlite3_bind_blob", "number", [
                "number",
                "number",
                "number",
                "number",
                "number"
            ]), sc = k("sqlite3_bind_double", "number", [
                "number",
                "number",
                "number"
            ]), tc = k("sqlite3_bind_int", "number", [
                "number",
                "number",
                "number"
            ]), uc = k("sqlite3_bind_parameter_index", "number", [
                "number",
                "string"
            ]), vc = k("sqlite3_step", "number", [
                "number"
            ]), wc = k("sqlite3_errmsg", "string", [
                "number"
            ]), xc = k("sqlite3_column_count", "number", [
                "number"
            ]), yc = k("sqlite3_data_count", "number", [
                "number"
            ]), zc = k("sqlite3_column_double", "number", [
                "number",
                "number"
            ]), qb = k("sqlite3_column_text", "string", [
                "number",
                "number"
            ]), Ac = k("sqlite3_column_blob", "number", [
                "number",
                "number"
            ]), Bc = k("sqlite3_column_bytes", "number", [
                "number",
                "number"
            ]), Cc = k("sqlite3_column_type", "number", [
                "number",
                "number"
            ]), Dc = k("sqlite3_column_name", "string", [
                "number",
                "number"
            ]), Ec = k("sqlite3_reset", "number", [
                "number"
            ]), Fc = k("sqlite3_clear_bindings", "number", [
                "number"
            ]), Gc = k("sqlite3_finalize", "number", [
                "number"
            ]), rb = k("sqlite3_create_function_v2", "number", "number string number number number number number number number".split(" ")), kc = k("sqlite3_value_type", "number", [
                "number"
            ]), nc = k("sqlite3_value_bytes", "number", [
                "number"
            ]), mc = k("sqlite3_value_text", "string", [
                "number"
            ]), oc = k("sqlite3_value_blob", "number", [
                "number"
            ]), lc = k("sqlite3_value_double", "number", [
                "number"
            ]), hc = k("sqlite3_result_double", "", [
                "number",
                "number"
            ]), kb = k("sqlite3_result_null", "", [
                "number"
            ]), ic = k("sqlite3_result_text", "", [
                "number",
                "string",
                "number",
                "number"
            ]), jc = k("sqlite3_result_blob", "", [
                "number",
                "number",
                "number",
                "number"
            ]), gc = k("sqlite3_result_int", "", [
                "number",
                "number"
            ]), xa = k("sqlite3_result_error", "", [
                "number",
                "string",
                "number"
            ]), sb = k("sqlite3_aggregate_context", "number", [
                "number",
                "number"
            ]), pc = k("RegisterExtensionFunctions", "number", [
                "number"
            ]);
            c.prototype.bind = function(g) {
                if (!this.La) throw "Statement closed";
                this.reset();
                return Array.isArray(g) ? this.xb(g) : null != g && "object" === typeof g ? this.yb(g) : !0;
            };
            c.prototype.step = function() {
                if (!this.La) throw "Statement closed";
                this.Ja = 1;
                var g = vc(this.La);
                switch(g){
                    case 100:
                        return !0;
                    case 101:
                        return !1;
                    default:
                        throw this.db.handleError(g);
                }
            };
            c.prototype.sb = function(g) {
                null == g && (g = this.Ja, this.Ja += 1);
                return zc(this.La, g);
            };
            c.prototype.Cb = function(g) {
                null == g && (g = this.Ja, this.Ja += 1);
                g = qb(this.La, g);
                if ("function" !== typeof BigInt) throw Error("BigInt is not supported");
                return BigInt(g);
            };
            c.prototype.Db = function(g) {
                null == g && (g = this.Ja, this.Ja += 1);
                return qb(this.La, g);
            };
            c.prototype.getBlob = function(g) {
                null == g && (g = this.Ja, this.Ja += 1);
                var m = Bc(this.La, g);
                g = Ac(this.La, g);
                for(var n = new Uint8Array(m), p = 0; p < m; p += 1)n[p] = r[g + p];
                return n;
            };
            c.prototype.get = function(g, m) {
                m = m || {};
                null != g && this.bind(g) && this.step();
                g = [];
                for(var n = yc(this.La), p = 0; p < n; p += 1)switch(Cc(this.La, p)){
                    case 1:
                        var v = m.useBigInt ? this.Cb(p) : this.sb(p);
                        g.push(v);
                        break;
                    case 2:
                        g.push(this.sb(p));
                        break;
                    case 3:
                        g.push(this.Db(p));
                        break;
                    case 4:
                        g.push(this.getBlob(p));
                        break;
                    default:
                        g.push(null);
                }
                return g;
            };
            c.prototype.getColumnNames = function() {
                for(var g = [], m = xc(this.La), n = 0; n < m; n += 1)g.push(Dc(this.La, n));
                return g;
            };
            c.prototype.getAsObject = function(g, m) {
                g = this.get(g, m);
                m = this.getColumnNames();
                for(var n = {}, p = 0; p < m.length; p += 1)n[m[p]] = g[p];
                return n;
            };
            c.prototype.getSQL = function() {
                return nb(this.La);
            };
            c.prototype.getNormalizedSQL = function() {
                return qc(this.La);
            };
            c.prototype.run = function(g) {
                null != g && this.bind(g);
                this.step();
                return this.reset();
            };
            c.prototype.nb = function(g, m) {
                null == m && (m = this.Ja, this.Ja += 1);
                g = ma(g);
                var n = aa(g);
                this.fb.push(n);
                this.db.handleError(rc(this.La, m, n, g.length - 1, 0));
            };
            c.prototype.wb = function(g, m) {
                null == m && (m = this.Ja, this.Ja += 1);
                var n = aa(g);
                this.fb.push(n);
                this.db.handleError(pb(this.La, m, n, g.length, 0));
            };
            c.prototype.mb = function(g, m) {
                null == m && (m = this.Ja, this.Ja += 1);
                this.db.handleError((g === (g | 0) ? tc : sc)(this.La, m, g));
            };
            c.prototype.zb = function(g) {
                null == g && (g = this.Ja, this.Ja += 1);
                pb(this.La, g, 0, 0, 0);
            };
            c.prototype.ob = function(g, m) {
                null == m && (m = this.Ja, this.Ja += 1);
                switch(typeof g){
                    case "string":
                        this.nb(g, m);
                        return;
                    case "number":
                        this.mb(g, m);
                        return;
                    case "bigint":
                        this.nb(g.toString(), m);
                        return;
                    case "boolean":
                        this.mb(g + 0, m);
                        return;
                    case "object":
                        if (null === g) {
                            this.zb(m);
                            return;
                        }
                        if (null != g.length) {
                            this.wb(g, m);
                            return;
                        }
                }
                throw "Wrong API use : tried to bind a value of an unknown type (" + g + ").";
            };
            c.prototype.yb = function(g) {
                var m = this;
                Object.keys(g).forEach(function(n) {
                    var p = uc(m.La, n);
                    0 !== p && m.ob(g[n], p);
                });
                return !0;
            };
            c.prototype.xb = function(g) {
                for(var m = 0; m < g.length; m += 1)this.ob(g[m], m + 1);
                return !0;
            };
            c.prototype.reset = function() {
                this.freemem();
                return 0 === Fc(this.La) && 0 === Ec(this.La);
            };
            c.prototype.freemem = function() {
                for(var g; void 0 !== (g = this.fb.pop());)ba(g);
            };
            c.prototype.free = function() {
                this.freemem();
                var g = 0 === Gc(this.La);
                delete this.db.Za[this.La];
                this.La = 0;
                return g;
            };
            d.prototype.next = function() {
                if (null === this.Ya) return {
                    done: !0
                };
                null !== this.Ua && (this.Ua.free(), this.Ua = null);
                if (!this.db.db) throw this.gb(), Error("Database closed");
                var g = oa(), m = B(4);
                pa(h);
                pa(m);
                try {
                    this.db.handleError(ob(this.db.db, this.eb, -1, h, m));
                    this.eb = l(m, "i32");
                    var n = l(h, "i32");
                    if (0 === n) return this.gb(), {
                        done: !0
                    };
                    this.Ua = new c(n, this.db);
                    this.db.Za[n] = this.Ua;
                    return {
                        value: this.Ua,
                        done: !1
                    };
                } catch (p) {
                    throw this.ib = C(this.eb), this.gb(), p;
                } finally{
                    qa(g);
                }
            };
            d.prototype.gb = function() {
                ba(this.Ya);
                this.Ya = null;
            };
            d.prototype.getRemainingSQL = function() {
                return null !== this.ib ? this.ib : C(this.eb);
            };
            "function" === typeof Symbol && "symbol" === typeof Symbol.iterator && (d.prototype[Symbol.iterator] = function() {
                return this;
            });
            f.prototype.run = function(g, m) {
                if (!this.db) throw "Database closed";
                if (m) {
                    g = this.prepare(g, m);
                    try {
                        g.step();
                    } finally{
                        g.free();
                    }
                } else this.handleError(w(this.db, g, 0, 0, h));
                return this;
            };
            f.prototype.exec = function(g, m, n) {
                if (!this.db) throw "Database closed";
                var p = oa(), v = null;
                try {
                    var y = ca(g) + 1, L = B(y);
                    t(g, r, L, y);
                    var G = L;
                    var H = B(4);
                    for(g = []; 0 !== l(G, "i8");){
                        pa(h);
                        pa(H);
                        this.handleError(ob(this.db, G, -1, h, H));
                        var I = l(h, "i32");
                        G = l(H, "i32");
                        if (0 !== I) {
                            y = null;
                            v = new c(I, this);
                            for(null != m && v.bind(m); v.step();)null === y && (y = {
                                columns: v.getColumnNames(),
                                values: []
                            }, g.push(y)), y.values.push(v.get(null, n));
                            v.free();
                        }
                    }
                    return g;
                } catch (na) {
                    throw v && v.free(), na;
                } finally{
                    qa(p);
                }
            };
            f.prototype.each = function(g, m, n, p, v) {
                "function" === typeof m && (p = n, n = m, m = void 0);
                g = this.prepare(g, m);
                try {
                    for(; g.step();)n(g.getAsObject(null, v));
                } finally{
                    g.free();
                }
                if ("function" === typeof p) return p();
            };
            f.prototype.prepare = function(g, m) {
                pa(h);
                this.handleError(S(this.db, g, -1, h, 0));
                g = l(h, "i32");
                if (0 === g) throw "Nothing to prepare";
                var n = new c(g, this);
                null != m && n.bind(m);
                return this.Za[g] = n;
            };
            f.prototype.iterateStatements = function(g) {
                return new d(g, this);
            };
            f.prototype["export"] = function() {
                Object.values(this.Za).forEach(function(m) {
                    m.free();
                });
                Object.values(this.Na).forEach(ra);
                this.Na = {};
                this.handleError(x(this.db));
                var g = sa(this.filename);
                this.handleError(q(this.filename, h));
                this.db = l(h, "i32");
                return g;
            };
            f.prototype.close = function() {
                null !== this.db && (Object.values(this.Za).forEach(function(g) {
                    g.free();
                }), Object.values(this.Na).forEach(ra), this.Na = {}, this.handleError(x(this.db)), ta("/" + this.filename), this.db = null);
            };
            f.prototype.handleError = function(g) {
                if (0 === g) return null;
                g = wc(this.db);
                throw Error(g);
            };
            f.prototype.getRowsModified = function() {
                return A(this.db);
            };
            f.prototype.create_function = function(g, m) {
                Object.prototype.hasOwnProperty.call(this.Na, g) && (ra(this.Na[g]), delete this.Na[g]);
                var n = ua(function(p, v, y) {
                    v = b(v, y);
                    try {
                        var L = m.apply(null, v);
                    } catch (G) {
                        xa(p, G, -1);
                        return;
                    }
                    a(p, L);
                }, "viii");
                this.Na[g] = n;
                this.handleError(rb(this.db, g, m.length, 1, 0, n, 0, 0, 0));
                return this;
            };
            f.prototype.create_aggregate = function(g, m) {
                var n = m.init || function() {
                    return null;
                }, p = m.finalize || function(H) {
                    return H;
                }, v = m.step;
                if (!v) throw "An aggregate function must have a step function in " + g;
                var y = {};
                Object.hasOwnProperty.call(this.Na, g) && (ra(this.Na[g]), delete this.Na[g]);
                m = g + "__finalize";
                Object.hasOwnProperty.call(this.Na, m) && (ra(this.Na[m]), delete this.Na[m]);
                var L = ua(function(H, I, na) {
                    var Z = sb(H, 1);
                    Object.hasOwnProperty.call(y, Z) || (y[Z] = n());
                    I = b(I, na);
                    I = [
                        y[Z]
                    ].concat(I);
                    try {
                        y[Z] = v.apply(null, I);
                    } catch (Ic) {
                        delete y[Z], xa(H, Ic, -1);
                    }
                }, "viii"), G = ua(function(H) {
                    var I = sb(H, 1);
                    try {
                        var na = p(y[I]);
                    } catch (Z) {
                        delete y[I];
                        xa(H, Z, -1);
                        return;
                    }
                    a(H, na);
                    delete y[I];
                }, "vi");
                this.Na[g] = L;
                this.Na[m] = G;
                this.handleError(rb(this.db, g, v.length - 1, 1, 0, 0, L, G, 0));
                return this;
            };
            e.Database = f;
        };
        var va = Object.assign({}, e), wa = "./this.program", ya = "object" == typeof window, za = "function" == typeof importScripts, Aa = "object" == typeof $jx7mO && "object" == typeof $jx7mO.versions && "string" == typeof $jx7mO.versions.node, D = "", Ba, Ca, Da, fs, Ea, Fa;
        if (Aa) D = za ? (parcelRequire("ceblk")).dirname(D) + "/" : __dirname + "/", Fa = ()=>{
            Ea || (fs = (parcelRequire("XDU19")), Ea = (parcelRequire("ceblk")));
        }, Ba = function(a, b) {
            Fa();
            a = Ea.normalize(a);
            return fs.readFileSync(a, b ? void 0 : "utf8");
        }, Da = (a)=>{
            a = Ba(a, !0);
            a.buffer || (a = new Uint8Array(a));
            return a;
        }, Ca = (a, b, c)=>{
            Fa();
            a = Ea.normalize(a);
            fs.readFile(a, function(d, f) {
                d ? c(d) : b(f.buffer);
            });
        }, 1 < $jx7mO.argv.length && (wa = $jx7mO.argv[1].replace(/\\/g, "/")), $jx7mO.argv.slice(2), module.exports = e, e.inspect = function() {
            return "[Emscripten Module object]";
        };
        else if (ya || za) za ? D = self.location.href : "undefined" != typeof document && document.currentScript && (D = document.currentScript.src), D = 0 !== D.indexOf("blob:") ? D.substr(0, D.replace(/[?#].*/, "").lastIndexOf("/") + 1) : "", Ba = (a)=>{
            var b = new XMLHttpRequest;
            b.open("GET", a, !1);
            b.send(null);
            return b.responseText;
        }, za && (Da = (a)=>{
            var b = new XMLHttpRequest;
            b.open("GET", a, !1);
            b.responseType = "arraybuffer";
            b.send(null);
            return new Uint8Array(b.response);
        }), Ca = (a, b, c)=>{
            var d = new XMLHttpRequest;
            d.open("GET", a, !0);
            d.responseType = "arraybuffer";
            d.onload = ()=>{
                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();
            };
            d.onerror = c;
            d.send(null);
        };
        var Ga = e.print || console.log.bind(console), Ha = e.printErr || console.warn.bind(console);
        Object.assign(e, va);
        va = null;
        e.thisProgram && (wa = e.thisProgram);
        var Ia;
        e.wasmBinary && (Ia = e.wasmBinary);
        var noExitRuntime = e.noExitRuntime || !0;
        "object" != typeof WebAssembly && E("no native wasm support detected");
        var Ja, Ka = !1, La = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0;
        function Ma(a, b, c) {
            var d = b + c;
            for(c = b; a[c] && !(c >= d);)++c;
            if (16 < c - b && a.buffer && La) return La.decode(a.subarray(b, c));
            for(d = ""; b < c;){
                var f = a[b++];
                if (f & 128) {
                    var h = a[b++] & 63;
                    if (192 == (f & 224)) d += String.fromCharCode((f & 31) << 6 | h);
                    else {
                        var k = a[b++] & 63;
                        f = 224 == (f & 240) ? (f & 15) << 12 | h << 6 | k : (f & 7) << 18 | h << 12 | k << 6 | a[b++] & 63;
                        65536 > f ? d += String.fromCharCode(f) : (f -= 65536, d += String.fromCharCode(55296 | f >> 10, 56320 | f & 1023));
                    }
                } else d += String.fromCharCode(f);
            }
            return d;
        }
        function C(a, b) {
            return a ? Ma(u, a, b) : "";
        }
        function t(a, b, c, d) {
            if (!(0 < d)) return 0;
            var f = c;
            d = c + d - 1;
            for(var h = 0; h < a.length; ++h){
                var k = a.charCodeAt(h);
                if (55296 <= k && 57343 >= k) {
                    var q = a.charCodeAt(++h);
                    k = 65536 + ((k & 1023) << 10) | q & 1023;
                }
                if (127 >= k) {
                    if (c >= d) break;
                    b[c++] = k;
                } else {
                    if (2047 >= k) {
                        if (c + 1 >= d) break;
                        b[c++] = 192 | k >> 6;
                    } else {
                        if (65535 >= k) {
                            if (c + 2 >= d) break;
                            b[c++] = 224 | k >> 12;
                        } else {
                            if (c + 3 >= d) break;
                            b[c++] = 240 | k >> 18;
                            b[c++] = 128 | k >> 12 & 63;
                        }
                        b[c++] = 128 | k >> 6 & 63;
                    }
                    b[c++] = 128 | k & 63;
                }
            }
            b[c] = 0;
            return c - f;
        }
        function ca(a) {
            for(var b = 0, c = 0; c < a.length; ++c){
                var d = a.charCodeAt(c);
                127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;
            }
            return b;
        }
        var Na, r, u, Oa, F, J, Pa, Qa;
        function Ra() {
            var a = Ja.buffer;
            Na = a;
            e.HEAP8 = r = new Int8Array(a);
            e.HEAP16 = Oa = new Int16Array(a);
            e.HEAP32 = F = new Int32Array(a);
            e.HEAPU8 = u = new Uint8Array(a);
            e.HEAPU16 = new Uint16Array(a);
            e.HEAPU32 = J = new Uint32Array(a);
            e.HEAPF32 = Pa = new Float32Array(a);
            e.HEAPF64 = Qa = new Float64Array(a);
        }
        var K, Sa = [], Ta = [], Ua = [];
        function Va() {
            var a = e.preRun.shift();
            Sa.unshift(a);
        }
        var Wa = 0, Xa = null, Ya = null;
        function E(a) {
            if (e.onAbort) e.onAbort(a);
            a = "Aborted(" + a + ")";
            Ha(a);
            Ka = !0;
            throw new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");
        }
        function Za() {
            return M.startsWith("data:application/octet-stream;base64,");
        }
        var M;
        M = "sql-wasm.wasm";
        if (!Za()) {
            var $a = M;
            M = e.locateFile ? e.locateFile($a, D) : D + $a;
        }
        function ab() {
            var a = M;
            try {
                if (a == M && Ia) return new Uint8Array(Ia);
                if (Da) return Da(a);
                throw "both async and sync fetching of the wasm failed";
            } catch (b) {
                E(b);
            }
        }
        function bb() {
            if (!Ia && (ya || za)) {
                if ("function" == typeof fetch && !M.startsWith("file://")) return fetch(M, {
                    credentials: "same-origin"
                }).then(function(a) {
                    if (!a.ok) throw "failed to load wasm binary file at '" + M + "'";
                    return a.arrayBuffer();
                }).catch(function() {
                    return ab();
                });
                if (Ca) return new Promise(function(a, b) {
                    Ca(M, function(c) {
                        a(new Uint8Array(c));
                    }, b);
                });
            }
            return Promise.resolve().then(function() {
                return ab();
            });
        }
        var N, O;
        function cb(a) {
            for(; 0 < a.length;)a.shift()(e);
        }
        function l(a, b = "i8") {
            b.endsWith("*") && (b = "*");
            switch(b){
                case "i1":
                    return r[a >> 0];
                case "i8":
                    return r[a >> 0];
                case "i16":
                    return Oa[a >> 1];
                case "i32":
                    return F[a >> 2];
                case "i64":
                    return F[a >> 2];
                case "float":
                    return Pa[a >> 2];
                case "double":
                    return Qa[a >> 3];
                case "*":
                    return J[a >> 2];
                default:
                    E("invalid type for getValue: " + b);
            }
            return null;
        }
        function pa(a) {
            var b = "i32";
            b.endsWith("*") && (b = "*");
            switch(b){
                case "i1":
                    r[a >> 0] = 0;
                    break;
                case "i8":
                    r[a >> 0] = 0;
                    break;
                case "i16":
                    Oa[a >> 1] = 0;
                    break;
                case "i32":
                    F[a >> 2] = 0;
                    break;
                case "i64":
                    O = [
                        0,
                        (N = 0, 1 <= +Math.abs(N) ? 0 < N ? (Math.min(+Math.floor(N / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((N - +(~~N >>> 0)) / 4294967296) >>> 0 : 0)
                    ];
                    F[a >> 2] = O[0];
                    F[a + 4 >> 2] = O[1];
                    break;
                case "float":
                    Pa[a >> 2] = 0;
                    break;
                case "double":
                    Qa[a >> 3] = 0;
                    break;
                case "*":
                    J[a >> 2] = 0;
                    break;
                default:
                    E("invalid type for setValue: " + b);
            }
        }
        var db = (a, b)=>{
            for(var c = 0, d = a.length - 1; 0 <= d; d--){
                var f = a[d];
                "." === f ? a.splice(d, 1) : ".." === f ? (a.splice(d, 1), c++) : c && (a.splice(d, 1), c--);
            }
            if (b) for(; c; c--)a.unshift("..");
            return a;
        }, z = (a)=>{
            var b = "/" === a.charAt(0), c = "/" === a.substr(-1);
            (a = db(a.split("/").filter((d)=>!!d), !b).join("/")) || b || (a = ".");
            a && c && (a += "/");
            return (b ? "/" : "") + a;
        }, eb = (a)=>{
            var b = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(a).slice(1);
            a = b[0];
            b = b[1];
            if (!a && !b) return ".";
            b && (b = b.substr(0, b.length - 1));
            return a + b;
        }, fb = (a)=>{
            if ("/" === a) return "/";
            a = z(a);
            a = a.replace(/\/$/, "");
            var b = a.lastIndexOf("/");
            return -1 === b ? a : a.substr(b + 1);
        };
        function gb() {
            if ("object" == typeof crypto && "function" == typeof crypto.getRandomValues) {
                var a = new Uint8Array(1);
                return ()=>{
                    crypto.getRandomValues(a);
                    return a[0];
                };
            }
            if (Aa) try {
                var b = (parcelRequire("kgCOo"));
                return ()=>b.randomBytes(1)[0];
            } catch (c) {}
            return ()=>E("randomDevice");
        }
        function hb() {
            for(var a = "", b = !1, c = arguments.length - 1; -1 <= c && !b; c--){
                b = 0 <= c ? arguments[c] : "/";
                if ("string" != typeof b) throw new TypeError("Arguments to path.resolve must be strings");
                if (!b) return "";
                a = b + "/" + a;
                b = "/" === b.charAt(0);
            }
            a = db(a.split("/").filter((d)=>!!d), !b).join("/");
            return (b ? "/" : "") + a || ".";
        }
        function ma(a, b) {
            var c = Array(ca(a) + 1);
            a = t(a, c, 0, c.length);
            b && (c.length = a);
            return c;
        }
        var ib = [];
        function jb(a, b) {
            ib[a] = {
                input: [],
                output: [],
                Xa: b
            };
            lb(a, mb);
        }
        var mb = {
            open: function(a) {
                var b = ib[a.node.rdev];
                if (!b) throw new P(43);
                a.tty = b;
                a.seekable = !1;
            },
            close: function(a) {
                a.tty.Xa.fsync(a.tty);
            },
            fsync: function(a) {
                a.tty.Xa.fsync(a.tty);
            },
            read: function(a, b, c, d) {
                if (!a.tty || !a.tty.Xa.tb) throw new P(60);
                for(var f = 0, h = 0; h < d; h++){
                    try {
                        var k = a.tty.Xa.tb(a.tty);
                    } catch (q) {
                        throw new P(29);
                    }
                    if (void 0 === k && 0 === f) throw new P(6);
                    if (null === k || void 0 === k) break;
                    f++;
                    b[c + h] = k;
                }
                f && (a.node.timestamp = Date.now());
                return f;
            },
            write: function(a, b, c, d) {
                if (!a.tty || !a.tty.Xa.jb) throw new P(60);
                try {
                    for(var f = 0; f < d; f++)a.tty.Xa.jb(a.tty, b[c + f]);
                } catch (h) {
                    throw new P(29);
                }
                d && (a.node.timestamp = Date.now());
                return f;
            }
        }, tb = {
            tb: function(a) {
                if (!a.input.length) {
                    var b = null;
                    if (Aa) {
                        var c = $35fdc2376fda24c1$require$Buffer.alloc(256), d = 0;
                        try {
                            d = fs.readSync($jx7mO.stdin.fd, c, 0, 256, -1);
                        } catch (f) {
                            if (f.toString().includes("EOF")) d = 0;
                            else throw f;
                        }
                        0 < d ? b = c.slice(0, d).toString("utf-8") : b = null;
                    } else "undefined" != typeof window && "function" == typeof window.prompt ? (b = window.prompt("Input: "), null !== b && (b += "\n")) : "function" == typeof readline && (b = readline(), null !== b && (b += "\n"));
                    if (!b) return null;
                    a.input = ma(b, !0);
                }
                return a.input.shift();
            },
            jb: function(a, b) {
                null === b || 10 === b ? (Ga(Ma(a.output, 0)), a.output = []) : 0 != b && a.output.push(b);
            },
            fsync: function(a) {
                a.output && 0 < a.output.length && (Ga(Ma(a.output, 0)), a.output = []);
            }
        }, ub = {
            jb: function(a, b) {
                null === b || 10 === b ? (Ha(Ma(a.output, 0)), a.output = []) : 0 != b && a.output.push(b);
            },
            fsync: function(a) {
                a.output && 0 < a.output.length && (Ha(Ma(a.output, 0)), a.output = []);
            }
        }, Q = {
            Qa: null,
            Ra: function() {
                return Q.createNode(null, "/", 16895, 0);
            },
            createNode: function(a, b, c, d) {
                if (24576 === (c & 61440) || 4096 === (c & 61440)) throw new P(63);
                Q.Qa || (Q.Qa = {
                    dir: {
                        node: {
                            Pa: Q.Ga.Pa,
                            Oa: Q.Ga.Oa,
                            lookup: Q.Ga.lookup,
                            ab: Q.Ga.ab,
                            rename: Q.Ga.rename,
                            unlink: Q.Ga.unlink,
                            rmdir: Q.Ga.rmdir,
                            readdir: Q.Ga.readdir,
                            symlink: Q.Ga.symlink
                        },
                        stream: {
                            Ta: Q.Ha.Ta
                        }
                    },
                    file: {
                        node: {
                            Pa: Q.Ga.Pa,
                            Oa: Q.Ga.Oa
                        },
                        stream: {
                            Ta: Q.Ha.Ta,
                            read: Q.Ha.read,
                            write: Q.Ha.write,
                            lb: Q.Ha.lb,
                            bb: Q.Ha.bb,
                            cb: Q.Ha.cb
                        }
                    },
                    link: {
                        node: {
                            Pa: Q.Ga.Pa,
                            Oa: Q.Ga.Oa,
                            readlink: Q.Ga.readlink
                        },
                        stream: {}
                    },
                    pb: {
                        node: {
                            Pa: Q.Ga.Pa,
                            Oa: Q.Ga.Oa
                        },
                        stream: vb
                    }
                });
                c = wb(a, b, c, d);
                16384 === (c.mode & 61440) ? (c.Ga = Q.Qa.dir.node, c.Ha = Q.Qa.dir.stream, c.Ia = {}) : 32768 === (c.mode & 61440) ? (c.Ga = Q.Qa.file.node, c.Ha = Q.Qa.file.stream, c.Ma = 0, c.Ia = null) : 40960 === (c.mode & 61440) ? (c.Ga = Q.Qa.link.node, c.Ha = Q.Qa.link.stream) : 8192 === (c.mode & 61440) && (c.Ga = Q.Qa.pb.node, c.Ha = Q.Qa.pb.stream);
                c.timestamp = Date.now();
                a && (a.Ia[b] = c, a.timestamp = c.timestamp);
                return c;
            },
            Jb: function(a) {
                return a.Ia ? a.Ia.subarray ? a.Ia.subarray(0, a.Ma) : new Uint8Array(a.Ia) : new Uint8Array(0);
            },
            qb: function(a, b) {
                var c = a.Ia ? a.Ia.length : 0;
                c >= b || (b = Math.max(b, c * (1048576 > c ? 2 : 1.125) >>> 0), 0 != c && (b = Math.max(b, 256)), c = a.Ia, a.Ia = new Uint8Array(b), 0 < a.Ma && a.Ia.set(c.subarray(0, a.Ma), 0));
            },
            Gb: function(a, b) {
                if (a.Ma != b) {
                    if (0 == b) a.Ia = null, a.Ma = 0;
                    else {
                        var c = a.Ia;
                        a.Ia = new Uint8Array(b);
                        c && a.Ia.set(c.subarray(0, Math.min(b, a.Ma)));
                        a.Ma = b;
                    }
                }
            },
            Ga: {
                Pa: function(a) {
                    var b = {};
                    b.dev = 8192 === (a.mode & 61440) ? a.id : 1;
                    b.ino = a.id;
                    b.mode = a.mode;
                    b.nlink = 1;
                    b.uid = 0;
                    b.gid = 0;
                    b.rdev = a.rdev;
                    16384 === (a.mode & 61440) ? b.size = 4096 : 32768 === (a.mode & 61440) ? b.size = a.Ma : 40960 === (a.mode & 61440) ? b.size = a.link.length : b.size = 0;
                    b.atime = new Date(a.timestamp);
                    b.mtime = new Date(a.timestamp);
                    b.ctime = new Date(a.timestamp);
                    b.Ab = 4096;
                    b.blocks = Math.ceil(b.size / b.Ab);
                    return b;
                },
                Oa: function(a, b) {
                    void 0 !== b.mode && (a.mode = b.mode);
                    void 0 !== b.timestamp && (a.timestamp = b.timestamp);
                    void 0 !== b.size && Q.Gb(a, b.size);
                },
                lookup: function() {
                    throw xb[44];
                },
                ab: function(a, b, c, d) {
                    return Q.createNode(a, b, c, d);
                },
                rename: function(a, b, c) {
                    if (16384 === (a.mode & 61440)) {
                        try {
                            var d = yb(b, c);
                        } catch (h) {}
                        if (d) for(var f in d.Ia)throw new P(55);
                    }
                    delete a.parent.Ia[a.name];
                    a.parent.timestamp = Date.now();
                    a.name = c;
                    b.Ia[c] = a;
                    b.timestamp = a.parent.timestamp;
                    a.parent = b;
                },
                unlink: function(a, b) {
                    delete a.Ia[b];
                    a.timestamp = Date.now();
                },
                rmdir: function(a, b) {
                    var c = yb(a, b), d;
                    for(d in c.Ia)throw new P(55);
                    delete a.Ia[b];
                    a.timestamp = Date.now();
                },
                readdir: function(a) {
                    var b = [
                        ".",
                        ".."
                    ], c;
                    for(c in a.Ia)a.Ia.hasOwnProperty(c) && b.push(c);
                    return b;
                },
                symlink: function(a, b, c) {
                    a = Q.createNode(a, b, 41471, 0);
                    a.link = c;
                    return a;
                },
                readlink: function(a) {
                    if (40960 !== (a.mode & 61440)) throw new P(28);
                    return a.link;
                }
            },
            Ha: {
                read: function(a, b, c, d, f) {
                    var h = a.node.Ia;
                    if (f >= a.node.Ma) return 0;
                    a = Math.min(a.node.Ma - f, d);
                    if (8 < a && h.subarray) b.set(h.subarray(f, f + a), c);
                    else for(d = 0; d < a; d++)b[c + d] = h[f + d];
                    return a;
                },
                write: function(a, b, c, d, f, h) {
                    b.buffer === r.buffer && (h = !1);
                    if (!d) return 0;
                    a = a.node;
                    a.timestamp = Date.now();
                    if (b.subarray && (!a.Ia || a.Ia.subarray)) {
                        if (h) return a.Ia = b.subarray(c, c + d), a.Ma = d;
                        if (0 === a.Ma && 0 === f) return a.Ia = b.slice(c, c + d), a.Ma = d;
                        if (f + d <= a.Ma) return a.Ia.set(b.subarray(c, c + d), f), d;
                    }
                    Q.qb(a, f + d);
                    if (a.Ia.subarray && b.subarray) a.Ia.set(b.subarray(c, c + d), f);
                    else for(h = 0; h < d; h++)a.Ia[f + h] = b[c + h];
                    a.Ma = Math.max(a.Ma, f + d);
                    return d;
                },
                Ta: function(a, b, c) {
                    1 === c ? b += a.position : 2 === c && 32768 === (a.node.mode & 61440) && (b += a.node.Ma);
                    if (0 > b) throw new P(28);
                    return b;
                },
                lb: function(a, b, c) {
                    Q.qb(a.node, b + c);
                    a.node.Ma = Math.max(a.node.Ma, b + c);
                },
                bb: function(a, b, c, d, f) {
                    if (32768 !== (a.node.mode & 61440)) throw new P(43);
                    a = a.node.Ia;
                    if (f & 2 || a.buffer !== Na) {
                        if (0 < c || c + b < a.length) a.subarray ? a = a.subarray(c, c + b) : a = Array.prototype.slice.call(a, c, c + b);
                        c = !0;
                        b = 65536 * Math.ceil(b / 65536);
                        (f = zb(65536, b)) ? (u.fill(0, f, f + b), b = f) : b = 0;
                        if (!b) throw new P(48);
                        r.set(a, b);
                    } else c = !1, b = a.byteOffset;
                    return {
                        Fb: b,
                        vb: c
                    };
                },
                cb: function(a, b, c, d, f) {
                    if (32768 !== (a.node.mode & 61440)) throw new P(43);
                    if (f & 2) return 0;
                    Q.Ha.write(a, b, 0, d, c, !1);
                    return 0;
                }
            }
        }, Ab = null, Bb = {}, R = [], Cb = 1, T = null, Db = !0, P = null, xb = {}, U = (a, b = {})=>{
            a = hb("/", a);
            if (!a) return {
                path: "",
                node: null
            };
            b = Object.assign({
                rb: !0,
                kb: 0
            }, b);
            if (8 < b.kb) throw new P(32);
            a = db(a.split("/").filter((k)=>!!k), !1);
            for(var c = Ab, d = "/", f = 0; f < a.length; f++){
                var h = f === a.length - 1;
                if (h && b.parent) break;
                c = yb(c, a[f]);
                d = z(d + "/" + a[f]);
                c.Va && (!h || h && b.rb) && (c = c.Va.root);
                if (!h || b.Sa) {
                    for(h = 0; 40960 === (c.mode & 61440);)if (c = Eb(d), d = hb(eb(d), c), c = U(d, {
                        kb: b.kb + 1
                    }).node, 40 < h++) throw new P(32);
                }
            }
            return {
                path: d,
                node: c
            };
        }, ea = (a)=>{
            for(var b;;){
                if (a === a.parent) return a = a.Ra.ub, b ? "/" !== a[a.length - 1] ? a + "/" + b : a + b : a;
                b = b ? a.name + "/" + b : a.name;
                a = a.parent;
            }
        }, Fb = (a, b)=>{
            for(var c = 0, d = 0; d < b.length; d++)c = (c << 5) - c + b.charCodeAt(d) | 0;
            return (a + c >>> 0) % T.length;
        }, Gb = (a)=>{
            var b = Fb(a.parent.id, a.name);
            if (T[b] === a) T[b] = a.Wa;
            else for(b = T[b]; b;){
                if (b.Wa === a) {
                    b.Wa = a.Wa;
                    break;
                }
                b = b.Wa;
            }
        }, yb = (a, b)=>{
            var c;
            if (c = (c = Hb(a, "x")) ? c : a.Ga.lookup ? 0 : 2) throw new P(c, a);
            for(c = T[Fb(a.id, b)]; c; c = c.Wa){
                var d = c.name;
                if (c.parent.id === a.id && d === b) return c;
            }
            return a.Ga.lookup(a, b);
        }, wb = (a, b, c, d)=>{
            a = new Ib(a, b, c, d);
            b = Fb(a.parent.id, a.name);
            a.Wa = T[b];
            return T[b] = a;
        }, Jb = {
            r: 0,
            "r+": 2,
            w: 577,
            "w+": 578,
            a: 1089,
            "a+": 1090
        }, Kb = (a)=>{
            var b = [
                "r",
                "w",
                "rw"
            ][a & 3];
            a & 512 && (b += "w");
            return b;
        }, Hb = (a, b)=>{
            if (Db) return 0;
            if (!b.includes("r") || a.mode & 292) {
                if (b.includes("w") && !(a.mode & 146) || b.includes("x") && !(a.mode & 73)) return 2;
            } else return 2;
            return 0;
        }, Lb = (a, b)=>{
            try {
                return yb(a, b), 20;
            } catch (c) {}
            return Hb(a, "wx");
        }, Mb = (a, b, c)=>{
            try {
                var d = yb(a, b);
            } catch (f) {
                return f.Ka;
            }
            if (a = Hb(a, "wx")) return a;
            if (c) {
                if (16384 !== (d.mode & 61440)) return 54;
                if (d === d.parent || "/" === ea(d)) return 10;
            } else if (16384 === (d.mode & 61440)) return 31;
            return 0;
        }, Nb = (a = 0)=>{
            for(; 4096 >= a; a++)if (!R[a]) return a;
            throw new P(33);
        }, Pb = (a, b)=>{
            Ob || (Ob = function() {
                this.$a = {};
            }, Ob.prototype = {}, Object.defineProperties(Ob.prototype, {
                object: {
                    get: function() {
                        return this.node;
                    },
                    set: function(c) {
                        this.node = c;
                    }
                },
                flags: {
                    get: function() {
                        return this.$a.flags;
                    },
                    set: function(c) {
                        this.$a.flags = c;
                    }
                },
                position: {
                    get: function() {
                        return this.$a.position;
                    },
                    set: function(c) {
                        this.$a.position = c;
                    }
                }
            }));
            a = Object.assign(new Ob, a);
            b = Nb(b);
            a.fd = b;
            return R[b] = a;
        }, vb = {
            open: (a)=>{
                a.Ha = Bb[a.node.rdev].Ha;
                a.Ha.open && a.Ha.open(a);
            },
            Ta: ()=>{
                throw new P(70);
            }
        }, lb = (a, b)=>{
            Bb[a] = {
                Ha: b
            };
        }, Qb = (a, b)=>{
            var c = "/" === b, d = !b;
            if (c && Ab) throw new P(10);
            if (!c && !d) {
                var f = U(b, {
                    rb: !1
                });
                b = f.path;
                f = f.node;
                if (f.Va) throw new P(10);
                if (16384 !== (f.mode & 61440)) throw new P(54);
            }
            b = {
                type: a,
                Kb: {},
                ub: b,
                Eb: []
            };
            a = a.Ra(b);
            a.Ra = b;
            b.root = a;
            c ? Ab = a : f && (f.Va = b, f.Ra && f.Ra.Eb.push(b));
        }, ha = (a, b, c)=>{
            var d = U(a, {
                parent: !0
            }).node;
            a = fb(a);
            if (!a || "." === a || ".." === a) throw new P(28);
            var f = Lb(d, a);
            if (f) throw new P(f);
            if (!d.Ga.ab) throw new P(63);
            return d.Ga.ab(d, a, b, c);
        }, V = (a, b)=>ha(a, (void 0 !== b ? b : 511) & 1023 | 16384, 0), Rb = (a, b, c)=>{
            "undefined" == typeof c && (c = b, b = 438);
            ha(a, b | 8192, c);
        }, Sb = (a, b)=>{
            if (!hb(a)) throw new P(44);
            var c = U(b, {
                parent: !0
            }).node;
            if (!c) throw new P(44);
            b = fb(b);
            var d = Lb(c, b);
            if (d) throw new P(d);
            if (!c.Ga.symlink) throw new P(63);
            c.Ga.symlink(c, b, a);
        }, Tb = (a)=>{
            var b = U(a, {
                parent: !0
            }).node;
            a = fb(a);
            var c = yb(b, a), d = Mb(b, a, !0);
            if (d) throw new P(d);
            if (!b.Ga.rmdir) throw new P(63);
            if (c.Va) throw new P(10);
            b.Ga.rmdir(b, a);
            Gb(c);
        }, ta = (a)=>{
            var b = U(a, {
                parent: !0
            }).node;
            if (!b) throw new P(44);
            a = fb(a);
            var c = yb(b, a), d = Mb(b, a, !1);
            if (d) throw new P(d);
            if (!b.Ga.unlink) throw new P(63);
            if (c.Va) throw new P(10);
            b.Ga.unlink(b, a);
            Gb(c);
        }, Eb = (a)=>{
            a = U(a).node;
            if (!a) throw new P(44);
            if (!a.Ga.readlink) throw new P(28);
            return hb(ea(a.parent), a.Ga.readlink(a));
        }, Ub = (a, b)=>{
            a = U(a, {
                Sa: !b
            }).node;
            if (!a) throw new P(44);
            if (!a.Ga.Pa) throw new P(63);
            return a.Ga.Pa(a);
        }, Vb = (a)=>Ub(a, !0), ia = (a, b)=>{
            a = "string" == typeof a ? U(a, {
                Sa: !0
            }).node : a;
            if (!a.Ga.Oa) throw new P(63);
            a.Ga.Oa(a, {
                mode: b & 4095 | a.mode & -4096,
                timestamp: Date.now()
            });
        }, Wb = (a, b)=>{
            if (0 > b) throw new P(28);
            a = "string" == typeof a ? U(a, {
                Sa: !0
            }).node : a;
            if (!a.Ga.Oa) throw new P(63);
            if (16384 === (a.mode & 61440)) throw new P(31);
            if (32768 !== (a.mode & 61440)) throw new P(28);
            var c = Hb(a, "w");
            if (c) throw new P(c);
            a.Ga.Oa(a, {
                size: b,
                timestamp: Date.now()
            });
        }, ja = (a, b, c)=>{
            if ("" === a) throw new P(44);
            if ("string" == typeof b) {
                var d = Jb[b];
                if ("undefined" == typeof d) throw Error("Unknown file open mode: " + b);
                b = d;
            }
            c = b & 64 ? ("undefined" == typeof c ? 438 : c) & 4095 | 32768 : 0;
            if ("object" == typeof a) var f = a;
            else {
                a = z(a);
                try {
                    f = U(a, {
                        Sa: !(b & 131072)
                    }).node;
                } catch (h) {}
            }
            d = !1;
            if (b & 64) {
                if (f) {
                    if (b & 128) throw new P(20);
                } else f = ha(a, c, 0), d = !0;
            }
            if (!f) throw new P(44);
            8192 === (f.mode & 61440) && (b &= -513);
            if (b & 65536 && 16384 !== (f.mode & 61440)) throw new P(54);
            if (!d && (c = f ? 40960 === (f.mode & 61440) ? 32 : 16384 === (f.mode & 61440) && ("r" !== Kb(b) || b & 512) ? 31 : Hb(f, Kb(b)) : 44)) throw new P(c);
            b & 512 && !d && Wb(f, 0);
            b &= -131713;
            f = Pb({
                node: f,
                path: ea(f),
                flags: b,
                seekable: !0,
                position: 0,
                Ha: f.Ha,
                Ib: [],
                error: !1
            });
            f.Ha.open && f.Ha.open(f);
            !e.logReadFiles || b & 1 || (Xb || (Xb = {}), a in Xb || (Xb[a] = 1));
            return f;
        }, la = (a)=>{
            if (null === a.fd) throw new P(8);
            a.hb && (a.hb = null);
            try {
                a.Ha.close && a.Ha.close(a);
            } catch (b) {
                throw b;
            } finally{
                R[a.fd] = null;
            }
            a.fd = null;
        }, Yb = (a, b, c)=>{
            if (null === a.fd) throw new P(8);
            if (!a.seekable || !a.Ha.Ta) throw new P(70);
            if (0 != c && 1 != c && 2 != c) throw new P(28);
            a.position = a.Ha.Ta(a, b, c);
            a.Ib = [];
        }, Zb = (a, b, c, d, f)=>{
            if (0 > d || 0 > f) throw new P(28);
            if (null === a.fd) throw new P(8);
            if (1 === (a.flags & 2097155)) throw new P(8);
            if (16384 === (a.node.mode & 61440)) throw new P(31);
            if (!a.Ha.read) throw new P(28);
            var h = "undefined" != typeof f;
            if (!h) f = a.position;
            else if (!a.seekable) throw new P(70);
            b = a.Ha.read(a, b, c, d, f);
            h || (a.position += b);
            return b;
        }, ka = (a, b, c, d, f)=>{
            if (0 > d || 0 > f) throw new P(28);
            if (null === a.fd) throw new P(8);
            if (0 === (a.flags & 2097155)) throw new P(8);
            if (16384 === (a.node.mode & 61440)) throw new P(31);
            if (!a.Ha.write) throw new P(28);
            a.seekable && a.flags & 1024 && Yb(a, 0, 2);
            var h = "undefined" != typeof f;
            if (!h) f = a.position;
            else if (!a.seekable) throw new P(70);
            b = a.Ha.write(a, b, c, d, f, void 0);
            h || (a.position += b);
            return b;
        }, sa = (a)=>{
            var b = "binary";
            if ("utf8" !== b && "binary" !== b) throw Error('Invalid encoding type "' + b + '"');
            var c;
            var d = ja(a, d || 0);
            a = Ub(a).size;
            var f = new Uint8Array(a);
            Zb(d, f, 0, a, 0);
            "utf8" === b ? c = Ma(f, 0) : "binary" === b && (c = f);
            la(d);
            return c;
        }, $b = ()=>{
            P || (P = function(a, b) {
                this.node = b;
                this.Hb = function(c) {
                    this.Ka = c;
                };
                this.Hb(a);
                this.message = "FS error";
            }, P.prototype = Error(), P.prototype.constructor = P, [
                44
            ].forEach((a)=>{
                xb[a] = new P(a);
                xb[a].stack = "<generic error, no stack>";
            }));
        }, ac, fa = (a, b)=>{
            var c = 0;
            a && (c |= 365);
            b && (c |= 146);
            return c;
        }, cc = (a, b, c)=>{
            a = z("/dev/" + a);
            var d = fa(!!b, !!c);
            bc || (bc = 64);
            var f = bc++ << 8 | 0;
            lb(f, {
                open: (h)=>{
                    h.seekable = !1;
                },
                close: ()=>{
                    c && c.buffer && c.buffer.length && c(10);
                },
                read: (h, k, q, x)=>{
                    for(var w = 0, A = 0; A < x; A++){
                        try {
                            var S = b();
                        } catch (nb) {
                            throw new P(29);
                        }
                        if (void 0 === S && 0 === w) throw new P(6);
                        if (null === S || void 0 === S) break;
                        w++;
                        k[q + A] = S;
                    }
                    w && (h.node.timestamp = Date.now());
                    return w;
                },
                write: (h, k, q, x)=>{
                    for(var w = 0; w < x; w++)try {
                        c(k[q + w]);
                    } catch (A) {
                        throw new P(29);
                    }
                    x && (h.node.timestamp = Date.now());
                    return w;
                }
            });
            Rb(a, d, f);
        }, bc, W = {}, Ob, Xb;
        function dc(a, b, c) {
            if ("/" === b.charAt(0)) return b;
            a = -100 === a ? "/" : X(a).path;
            if (0 == b.length) {
                if (!c) throw new P(44);
                return a;
            }
            return z(a + "/" + b);
        }
        function ec(a, b, c) {
            try {
                var d = a(b);
            } catch (f) {
                if (f && f.node && z(b) !== z(ea(f.node))) return -54;
                throw f;
            }
            F[c >> 2] = d.dev;
            F[c + 8 >> 2] = d.ino;
            F[c + 12 >> 2] = d.mode;
            J[c + 16 >> 2] = d.nlink;
            F[c + 20 >> 2] = d.uid;
            F[c + 24 >> 2] = d.gid;
            F[c + 28 >> 2] = d.rdev;
            O = [
                d.size >>> 0,
                (N = d.size, 1 <= +Math.abs(N) ? 0 < N ? (Math.min(+Math.floor(N / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((N - +(~~N >>> 0)) / 4294967296) >>> 0 : 0)
            ];
            F[c + 40 >> 2] = O[0];
            F[c + 44 >> 2] = O[1];
            F[c + 48 >> 2] = 4096;
            F[c + 52 >> 2] = d.blocks;
            O = [
                Math.floor(d.atime.getTime() / 1E3) >>> 0,
                (N = Math.floor(d.atime.getTime() / 1E3), 1 <= +Math.abs(N) ? 0 < N ? (Math.min(+Math.floor(N / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((N - +(~~N >>> 0)) / 4294967296) >>> 0 : 0)
            ];
            F[c + 56 >> 2] = O[0];
            F[c + 60 >> 2] = O[1];
            J[c + 64 >> 2] = 0;
            O = [
                Math.floor(d.mtime.getTime() / 1E3) >>> 0,
                (N = Math.floor(d.mtime.getTime() / 1E3), 1 <= +Math.abs(N) ? 0 < N ? (Math.min(+Math.floor(N / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((N - +(~~N >>> 0)) / 4294967296) >>> 0 : 0)
            ];
            F[c + 72 >> 2] = O[0];
            F[c + 76 >> 2] = O[1];
            J[c + 80 >> 2] = 0;
            O = [
                Math.floor(d.ctime.getTime() / 1E3) >>> 0,
                (N = Math.floor(d.ctime.getTime() / 1E3), 1 <= +Math.abs(N) ? 0 < N ? (Math.min(+Math.floor(N / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((N - +(~~N >>> 0)) / 4294967296) >>> 0 : 0)
            ];
            F[c + 88 >> 2] = O[0];
            F[c + 92 >> 2] = O[1];
            J[c + 96 >> 2] = 0;
            O = [
                d.ino >>> 0,
                (N = d.ino, 1 <= +Math.abs(N) ? 0 < N ? (Math.min(+Math.floor(N / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((N - +(~~N >>> 0)) / 4294967296) >>> 0 : 0)
            ];
            F[c + 104 >> 2] = O[0];
            F[c + 108 >> 2] = O[1];
            return 0;
        }
        var fc = void 0;
        function Hc() {
            fc += 4;
            return F[fc - 4 >> 2];
        }
        function X(a) {
            a = R[a];
            if (!a) throw new P(8);
            return a;
        }
        function Jc(a) {
            return J[a >> 2] + 4294967296 * F[a + 4 >> 2];
        }
        function Kc(a) {
            var b = ca(a) + 1, c = da(b);
            c && t(a, r, c, b);
            return c;
        }
        function Lc(a, b, c) {
            function d(x) {
                return (x = x.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? x[1] : "GMT";
            }
            var f = (new Date).getFullYear(), h = new Date(f, 0, 1), k = new Date(f, 6, 1);
            f = h.getTimezoneOffset();
            var q = k.getTimezoneOffset();
            F[a >> 2] = 60 * Math.max(f, q);
            F[b >> 2] = Number(f != q);
            a = d(h);
            b = d(k);
            a = Kc(a);
            b = Kc(b);
            q < f ? (J[c >> 2] = a, J[c + 4 >> 2] = b) : (J[c >> 2] = b, J[c + 4 >> 2] = a);
        }
        function Mc(a, b, c) {
            Mc.Bb || (Mc.Bb = !0, Lc(a, b, c));
        }
        var Nc;
        Nc = Aa ? ()=>{
            var a = $jx7mO.hrtime();
            return 1E3 * a[0] + a[1] / 1E6;
        } : ()=>performance.now();
        var Oc = {};
        function Pc() {
            if (!Qc) {
                var a = {
                    USER: "web_user",
                    LOGNAME: "web_user",
                    PATH: "/",
                    PWD: "/",
                    HOME: "/home/web_user",
                    LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8",
                    _: wa || "./this.program"
                }, b;
                for(b in Oc)void 0 === Oc[b] ? delete a[b] : a[b] = Oc[b];
                var c = [];
                for(b in a)c.push(b + "=" + a[b]);
                Qc = c;
            }
            return Qc;
        }
        var Qc, Y = void 0, Rc = [];
        function ua(a, b) {
            if (!Y) {
                Y = new WeakMap;
                var c = K.length;
                if (Y) for(var d = 0; d < 0 + c; d++){
                    var f = K.get(d);
                    f && Y.set(f, d);
                }
            }
            if (Y.has(a)) return Y.get(a);
            if (Rc.length) c = Rc.pop();
            else {
                try {
                    K.grow(1);
                } catch (q) {
                    if (!(q instanceof RangeError)) throw q;
                    throw "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";
                }
                c = K.length - 1;
            }
            try {
                K.set(c, a);
            } catch (q) {
                if (!(q instanceof TypeError)) throw q;
                if ("function" == typeof WebAssembly.Function) {
                    d = WebAssembly.Function;
                    f = {
                        i: "i32",
                        j: "i64",
                        f: "f32",
                        d: "f64",
                        p: "i32"
                    };
                    for(var h = {
                        parameters: [],
                        results: "v" == b[0] ? [] : [
                            f[b[0]]
                        ]
                    }, k = 1; k < b.length; ++k)h.parameters.push(f[b[k]]);
                    b = new d(h, a);
                } else {
                    d = [
                        1,
                        96
                    ];
                    f = b.slice(0, 1);
                    b = b.slice(1);
                    h = {
                        i: 127,
                        p: 127,
                        j: 126,
                        f: 125,
                        d: 124
                    };
                    k = b.length;
                    128 > k ? d.push(k) : d.push(k % 128 | 128, k >> 7);
                    for(k = 0; k < b.length; ++k)d.push(h[b[k]]);
                    "v" == f ? d.push(0) : d.push(1, h[f]);
                    b = [
                        0,
                        97,
                        115,
                        109,
                        1,
                        0,
                        0,
                        0,
                        1
                    ];
                    f = d.length;
                    128 > f ? b.push(f) : b.push(f % 128 | 128, f >> 7);
                    b.push.apply(b, d);
                    b.push(2, 7, 1, 1, 101, 1, 102, 0, 0, 7, 5, 1, 1, 102, 0, 0);
                    b = new WebAssembly.Module(new Uint8Array(b));
                    b = new WebAssembly.Instance(b, {
                        e: {
                            f: a
                        }
                    }).exports.f;
                }
                K.set(c, b);
            }
            Y.set(a, c);
            return c;
        }
        function ra(a) {
            Y.delete(K.get(a));
            Rc.push(a);
        }
        var Sc = 0, Tc = 1;
        function aa(a) {
            var b = Sc == Tc ? B(a.length) : da(a.length);
            a.subarray || a.slice || (a = new Uint8Array(a));
            u.set(a, b);
            return b;
        }
        function Uc(a, b, c, d) {
            var f = {
                string: (w)=>{
                    var A = 0;
                    if (null !== w && void 0 !== w && 0 !== w) {
                        var S = (w.length << 2) + 1;
                        A = B(S);
                        t(w, u, A, S);
                    }
                    return A;
                },
                array: (w)=>{
                    var A = B(w.length);
                    r.set(w, A);
                    return A;
                }
            };
            a = e["_" + a];
            var h = [], k = 0;
            if (d) for(var q = 0; q < d.length; q++){
                var x = f[c[q]];
                x ? (0 === k && (k = oa()), h[q] = x(d[q])) : h[q] = d[q];
            }
            c = a.apply(null, h);
            return c = function(w) {
                0 !== k && qa(k);
                return "string" === b ? C(w) : "boolean" === b ? !!w : w;
            }(c);
        }
        function Ib(a, b, c, d) {
            a || (a = this);
            this.parent = a;
            this.Ra = a.Ra;
            this.Va = null;
            this.id = Cb++;
            this.name = b;
            this.mode = c;
            this.Ga = {};
            this.Ha = {};
            this.rdev = d;
        }
        Object.defineProperties(Ib.prototype, {
            read: {
                get: function() {
                    return 365 === (this.mode & 365);
                },
                set: function(a) {
                    a ? this.mode |= 365 : this.mode &= -366;
                }
            },
            write: {
                get: function() {
                    return 146 === (this.mode & 146);
                },
                set: function(a) {
                    a ? this.mode |= 146 : this.mode &= -147;
                }
            }
        });
        $b();
        T = Array(4096);
        Qb(Q, "/");
        V("/tmp");
        V("/home");
        V("/home/web_user");
        (()=>{
            V("/dev");
            lb(259, {
                read: ()=>0,
                write: (b, c, d, f)=>f
            });
            Rb("/dev/null", 259);
            jb(1280, tb);
            jb(1536, ub);
            Rb("/dev/tty", 1280);
            Rb("/dev/tty1", 1536);
            var a = gb();
            cc("random", a);
            cc("urandom", a);
            V("/dev/shm");
            V("/dev/shm/tmp");
        })();
        (()=>{
            V("/proc");
            var a = V("/proc/self");
            V("/proc/self/fd");
            Qb({
                Ra: ()=>{
                    var b = wb(a, "fd", 16895, 73);
                    b.Ga = {
                        lookup: (c, d)=>{
                            var f = R[+d];
                            if (!f) throw new P(8);
                            c = {
                                parent: null,
                                Ra: {
                                    ub: "fake"
                                },
                                Ga: {
                                    readlink: ()=>f.path
                                }
                            };
                            return c.parent = c;
                        }
                    };
                    return b;
                }
            }, "/proc/self/fd");
        })();
        var Wc = {
            a: function(a, b, c, d) {
                E("Assertion failed: " + C(a) + ", at: " + [
                    b ? C(b) : "unknown filename",
                    c,
                    d ? C(d) : "unknown function"
                ]);
            },
            h: function(a, b) {
                try {
                    return a = C(a), ia(a, b), 0;
                } catch (c) {
                    if ("undefined" == typeof W || !(c instanceof P)) throw c;
                    return -c.Ka;
                }
            },
            H: function(a, b, c) {
                try {
                    b = C(b);
                    b = dc(a, b);
                    if (c & -8) return -28;
                    var d = U(b, {
                        Sa: !0
                    }).node;
                    if (!d) return -44;
                    a = "";
                    c & 4 && (a += "r");
                    c & 2 && (a += "w");
                    c & 1 && (a += "x");
                    return a && Hb(d, a) ? -2 : 0;
                } catch (f) {
                    if ("undefined" == typeof W || !(f instanceof P)) throw f;
                    return -f.Ka;
                }
            },
            i: function(a, b) {
                try {
                    var c = R[a];
                    if (!c) throw new P(8);
                    ia(c.node, b);
                    return 0;
                } catch (d) {
                    if ("undefined" == typeof W || !(d instanceof P)) throw d;
                    return -d.Ka;
                }
            },
            g: function(a) {
                try {
                    var b = R[a];
                    if (!b) throw new P(8);
                    var c = b.node;
                    var d = "string" == typeof c ? U(c, {
                        Sa: !0
                    }).node : c;
                    if (!d.Ga.Oa) throw new P(63);
                    d.Ga.Oa(d, {
                        timestamp: Date.now()
                    });
                    return 0;
                } catch (f) {
                    if ("undefined" == typeof W || !(f instanceof P)) throw f;
                    return -f.Ka;
                }
            },
            b: function(a, b, c) {
                fc = c;
                try {
                    var d = X(a);
                    switch(b){
                        case 0:
                            var f = Hc();
                            return 0 > f ? -28 : Pb(d, f).fd;
                        case 1:
                        case 2:
                            return 0;
                        case 3:
                            return d.flags;
                        case 4:
                            return f = Hc(), d.flags |= f, 0;
                        case 5:
                            return f = Hc(), Oa[f + 0 >> 1] = 2, 0;
                        case 6:
                        case 7:
                            return 0;
                        case 16:
                        case 8:
                            return -28;
                        case 9:
                            return F[Vc() >> 2] = 28, -1;
                        default:
                            return -28;
                    }
                } catch (h) {
                    if ("undefined" == typeof W || !(h instanceof P)) throw h;
                    return -h.Ka;
                }
            },
            G: function(a, b) {
                try {
                    var c = X(a);
                    return ec(Ub, c.path, b);
                } catch (d) {
                    if ("undefined" == typeof W || !(d instanceof P)) throw d;
                    return -d.Ka;
                }
            },
            l: function(a, b, c) {
                try {
                    b = c + 2097152 >>> 0 < 4194305 - !!b ? (b >>> 0) + 4294967296 * c : NaN;
                    if (isNaN(b)) return -61;
                    var d = R[a];
                    if (!d) throw new P(8);
                    if (0 === (d.flags & 2097155)) throw new P(28);
                    Wb(d.node, b);
                    return 0;
                } catch (f) {
                    if ("undefined" == typeof W || !(f instanceof P)) throw f;
                    return -f.Ka;
                }
            },
            B: function(a, b) {
                try {
                    if (0 === b) return -28;
                    var c = ca("/") + 1;
                    if (b < c) return -68;
                    t("/", u, a, b);
                    return c;
                } catch (d) {
                    if ("undefined" == typeof W || !(d instanceof P)) throw d;
                    return -d.Ka;
                }
            },
            E: function(a, b) {
                try {
                    return a = C(a), ec(Vb, a, b);
                } catch (c) {
                    if ("undefined" == typeof W || !(c instanceof P)) throw c;
                    return -c.Ka;
                }
            },
            y: function(a, b, c) {
                try {
                    return b = C(b), b = dc(a, b), b = z(b), "/" === b[b.length - 1] && (b = b.substr(0, b.length - 1)), V(b, c), 0;
                } catch (d) {
                    if ("undefined" == typeof W || !(d instanceof P)) throw d;
                    return -d.Ka;
                }
            },
            D: function(a, b, c, d) {
                try {
                    b = C(b);
                    var f = d & 256;
                    b = dc(a, b, d & 4096);
                    return ec(f ? Vb : Ub, b, c);
                } catch (h) {
                    if ("undefined" == typeof W || !(h instanceof P)) throw h;
                    return -h.Ka;
                }
            },
            v: function(a, b, c, d) {
                fc = d;
                try {
                    b = C(b);
                    b = dc(a, b);
                    var f = d ? Hc() : 0;
                    return ja(b, c, f).fd;
                } catch (h) {
                    if ("undefined" == typeof W || !(h instanceof P)) throw h;
                    return -h.Ka;
                }
            },
            t: function(a, b, c, d) {
                try {
                    b = C(b);
                    b = dc(a, b);
                    if (0 >= d) return -28;
                    var f = Eb(b), h = Math.min(d, ca(f)), k = r[c + h];
                    t(f, u, c, d + 1);
                    r[c + h] = k;
                    return h;
                } catch (q) {
                    if ("undefined" == typeof W || !(q instanceof P)) throw q;
                    return -q.Ka;
                }
            },
            s: function(a) {
                try {
                    return a = C(a), Tb(a), 0;
                } catch (b) {
                    if ("undefined" == typeof W || !(b instanceof P)) throw b;
                    return -b.Ka;
                }
            },
            F: function(a, b) {
                try {
                    return a = C(a), ec(Ub, a, b);
                } catch (c) {
                    if ("undefined" == typeof W || !(c instanceof P)) throw c;
                    return -c.Ka;
                }
            },
            p: function(a, b, c) {
                try {
                    return b = C(b), b = dc(a, b), 0 === c ? ta(b) : 512 === c ? Tb(b) : E("Invalid flags passed to unlinkat"), 0;
                } catch (d) {
                    if ("undefined" == typeof W || !(d instanceof P)) throw d;
                    return -d.Ka;
                }
            },
            o: function(a, b, c) {
                try {
                    b = C(b);
                    b = dc(a, b, !0);
                    if (c) {
                        var d = Jc(c), f = F[c + 8 >> 2];
                        h = 1E3 * d + f / 1E6;
                        c += 16;
                        d = Jc(c);
                        f = F[c + 8 >> 2];
                        k = 1E3 * d + f / 1E6;
                    } else var h = Date.now(), k = h;
                    a = h;
                    var q = U(b, {
                        Sa: !0
                    }).node;
                    q.Ga.Oa(q, {
                        timestamp: Math.max(a, k)
                    });
                    return 0;
                } catch (x) {
                    if ("undefined" == typeof W || !(x instanceof P)) throw x;
                    return -x.Ka;
                }
            },
            e: function() {
                return Date.now();
            },
            j: function(a, b) {
                a = new Date(1E3 * Jc(a));
                F[b >> 2] = a.getSeconds();
                F[b + 4 >> 2] = a.getMinutes();
                F[b + 8 >> 2] = a.getHours();
                F[b + 12 >> 2] = a.getDate();
                F[b + 16 >> 2] = a.getMonth();
                F[b + 20 >> 2] = a.getFullYear() - 1900;
                F[b + 24 >> 2] = a.getDay();
                var c = new Date(a.getFullYear(), 0, 1);
                F[b + 28 >> 2] = (a.getTime() - c.getTime()) / 864E5 | 0;
                F[b + 36 >> 2] = -(60 * a.getTimezoneOffset());
                var d = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();
                c = c.getTimezoneOffset();
                F[b + 32 >> 2] = (d != c && a.getTimezoneOffset() == Math.min(c, d)) | 0;
            },
            w: function(a, b, c, d, f, h) {
                try {
                    var k = X(d);
                    if (0 !== (b & 2) && 0 === (c & 2) && 2 !== (k.flags & 2097155)) throw new P(2);
                    if (1 === (k.flags & 2097155)) throw new P(2);
                    if (!k.Ha.bb) throw new P(43);
                    var q = k.Ha.bb(k, a, f, b, c);
                    var x = q.Fb;
                    F[h >> 2] = q.vb;
                    return x;
                } catch (w) {
                    if ("undefined" == typeof W || !(w instanceof P)) throw w;
                    return -w.Ka;
                }
            },
            x: function(a, b, c, d, f, h) {
                try {
                    var k = X(f);
                    if (c & 2) {
                        var q = u.slice(a, a + b);
                        k && k.Ha.cb && k.Ha.cb(k, q, h, b, d);
                    }
                } catch (x) {
                    if ("undefined" == typeof W || !(x instanceof P)) throw x;
                    return -x.Ka;
                }
            },
            n: Mc,
            q: function() {
                return 2147483648;
            },
            d: Nc,
            c: function(a) {
                var b = u.length;
                a >>>= 0;
                if (2147483648 < a) return !1;
                for(var c = 1; 4 >= c; c *= 2){
                    var d = b * (1 + .2 / c);
                    d = Math.min(d, a + 100663296);
                    var f = Math;
                    d = Math.max(a, d);
                    f = f.min.call(f, 2147483648, d + (65536 - d % 65536) % 65536);
                    a: {
                        try {
                            Ja.grow(f - Na.byteLength + 65535 >>> 16);
                            Ra();
                            var h = 1;
                            break a;
                        } catch (k) {}
                        h = void 0;
                    }
                    if (h) return !0;
                }
                return !1;
            },
            z: function(a, b) {
                var c = 0;
                Pc().forEach(function(d, f) {
                    var h = b + c;
                    f = J[a + 4 * f >> 2] = h;
                    for(h = 0; h < d.length; ++h)r[f++ >> 0] = d.charCodeAt(h);
                    r[f >> 0] = 0;
                    c += d.length + 1;
                });
                return 0;
            },
            A: function(a, b) {
                var c = Pc();
                J[a >> 2] = c.length;
                var d = 0;
                c.forEach(function(f) {
                    d += f.length + 1;
                });
                J[b >> 2] = d;
                return 0;
            },
            f: function(a) {
                try {
                    var b = X(a);
                    la(b);
                    return 0;
                } catch (c) {
                    if ("undefined" == typeof W || !(c instanceof P)) throw c;
                    return c.Ka;
                }
            },
            m: function(a, b) {
                try {
                    var c = X(a);
                    r[b >> 0] = c.tty ? 2 : 16384 === (c.mode & 61440) ? 3 : 40960 === (c.mode & 61440) ? 7 : 4;
                    return 0;
                } catch (d) {
                    if ("undefined" == typeof W || !(d instanceof P)) throw d;
                    return d.Ka;
                }
            },
            u: function(a, b, c, d) {
                try {
                    a: {
                        var f = X(a);
                        a = b;
                        for(var h = b = 0; h < c; h++){
                            var k = J[a >> 2], q = J[a + 4 >> 2];
                            a += 8;
                            var x = Zb(f, r, k, q);
                            if (0 > x) {
                                var w = -1;
                                break a;
                            }
                            b += x;
                            if (x < q) break;
                        }
                        w = b;
                    }
                    J[d >> 2] = w;
                    return 0;
                } catch (A) {
                    if ("undefined" == typeof W || !(A instanceof P)) throw A;
                    return A.Ka;
                }
            },
            k: function(a, b, c, d, f) {
                try {
                    b = c + 2097152 >>> 0 < 4194305 - !!b ? (b >>> 0) + 4294967296 * c : NaN;
                    if (isNaN(b)) return 61;
                    var h = X(a);
                    Yb(h, b, d);
                    O = [
                        h.position >>> 0,
                        (N = h.position, 1 <= +Math.abs(N) ? 0 < N ? (Math.min(+Math.floor(N / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((N - +(~~N >>> 0)) / 4294967296) >>> 0 : 0)
                    ];
                    F[f >> 2] = O[0];
                    F[f + 4 >> 2] = O[1];
                    h.hb && 0 === b && 0 === d && (h.hb = null);
                    return 0;
                } catch (k) {
                    if ("undefined" == typeof W || !(k instanceof P)) throw k;
                    return k.Ka;
                }
            },
            C: function(a) {
                try {
                    var b = X(a);
                    return b.Ha && b.Ha.fsync ? b.Ha.fsync(b) : 0;
                } catch (c) {
                    if ("undefined" == typeof W || !(c instanceof P)) throw c;
                    return c.Ka;
                }
            },
            r: function(a, b, c, d) {
                try {
                    a: {
                        var f = X(a);
                        a = b;
                        for(var h = b = 0; h < c; h++){
                            var k = J[a >> 2], q = J[a + 4 >> 2];
                            a += 8;
                            var x = ka(f, r, k, q);
                            if (0 > x) {
                                var w = -1;
                                break a;
                            }
                            b += x;
                        }
                        w = b;
                    }
                    J[d >> 2] = w;
                    return 0;
                } catch (A) {
                    if ("undefined" == typeof W || !(A instanceof P)) throw A;
                    return A.Ka;
                }
            }
        };
        (function() {
            function a(f) {
                e.asm = f.exports;
                Ja = e.asm.I;
                Ra();
                K = e.asm.Aa;
                Ta.unshift(e.asm.J);
                Wa--;
                e.monitorRunDependencies && e.monitorRunDependencies(Wa);
                0 == Wa && (null !== Xa && (clearInterval(Xa), Xa = null), Ya && (f = Ya, Ya = null, f()));
            }
            function b(f) {
                a(f.instance);
            }
            function c(f) {
                return bb().then(function(h) {
                    return WebAssembly.instantiate(h, d);
                }).then(function(h) {
                    return h;
                }).then(f, function(h) {
                    Ha("failed to asynchronously prepare wasm: " + h);
                    E(h);
                });
            }
            var d = {
                a: Wc
            };
            Wa++;
            e.monitorRunDependencies && e.monitorRunDependencies(Wa);
            if (e.instantiateWasm) try {
                return e.instantiateWasm(d, a);
            } catch (f) {
                return Ha("Module.instantiateWasm callback failed with error: " + f), !1;
            }
            (function() {
                return Ia || "function" != typeof WebAssembly.instantiateStreaming || Za() || M.startsWith("file://") || Aa || "function" != typeof fetch ? c(b) : fetch(M, {
                    credentials: "same-origin"
                }).then(function(f) {
                    return WebAssembly.instantiateStreaming(f, d).then(b, function(h) {
                        Ha("wasm streaming compile failed: " + h);
                        Ha("falling back to ArrayBuffer instantiation");
                        return c(b);
                    });
                });
            })();
            return {};
        })();
        e.___wasm_call_ctors = function() {
            return (e.___wasm_call_ctors = e.asm.J).apply(null, arguments);
        };
        e._sqlite3_free = function() {
            return (e._sqlite3_free = e.asm.K).apply(null, arguments);
        };
        e._sqlite3_value_double = function() {
            return (e._sqlite3_value_double = e.asm.L).apply(null, arguments);
        };
        e._sqlite3_value_text = function() {
            return (e._sqlite3_value_text = e.asm.M).apply(null, arguments);
        };
        var Vc = e.___errno_location = function() {
            return (Vc = e.___errno_location = e.asm.N).apply(null, arguments);
        };
        e._sqlite3_prepare_v2 = function() {
            return (e._sqlite3_prepare_v2 = e.asm.O).apply(null, arguments);
        };
        e._sqlite3_step = function() {
            return (e._sqlite3_step = e.asm.P).apply(null, arguments);
        };
        e._sqlite3_finalize = function() {
            return (e._sqlite3_finalize = e.asm.Q).apply(null, arguments);
        };
        e._sqlite3_reset = function() {
            return (e._sqlite3_reset = e.asm.R).apply(null, arguments);
        };
        e._sqlite3_value_int = function() {
            return (e._sqlite3_value_int = e.asm.S).apply(null, arguments);
        };
        e._sqlite3_clear_bindings = function() {
            return (e._sqlite3_clear_bindings = e.asm.T).apply(null, arguments);
        };
        e._sqlite3_value_blob = function() {
            return (e._sqlite3_value_blob = e.asm.U).apply(null, arguments);
        };
        e._sqlite3_value_bytes = function() {
            return (e._sqlite3_value_bytes = e.asm.V).apply(null, arguments);
        };
        e._sqlite3_value_type = function() {
            return (e._sqlite3_value_type = e.asm.W).apply(null, arguments);
        };
        e._sqlite3_result_blob = function() {
            return (e._sqlite3_result_blob = e.asm.X).apply(null, arguments);
        };
        e._sqlite3_result_double = function() {
            return (e._sqlite3_result_double = e.asm.Y).apply(null, arguments);
        };
        e._sqlite3_result_error = function() {
            return (e._sqlite3_result_error = e.asm.Z).apply(null, arguments);
        };
        e._sqlite3_result_int = function() {
            return (e._sqlite3_result_int = e.asm._).apply(null, arguments);
        };
        e._sqlite3_result_int64 = function() {
            return (e._sqlite3_result_int64 = e.asm.$).apply(null, arguments);
        };
        e._sqlite3_result_null = function() {
            return (e._sqlite3_result_null = e.asm.aa).apply(null, arguments);
        };
        e._sqlite3_result_text = function() {
            return (e._sqlite3_result_text = e.asm.ba).apply(null, arguments);
        };
        e._sqlite3_sql = function() {
            return (e._sqlite3_sql = e.asm.ca).apply(null, arguments);
        };
        e._sqlite3_aggregate_context = function() {
            return (e._sqlite3_aggregate_context = e.asm.da).apply(null, arguments);
        };
        e._sqlite3_column_count = function() {
            return (e._sqlite3_column_count = e.asm.ea).apply(null, arguments);
        };
        e._sqlite3_data_count = function() {
            return (e._sqlite3_data_count = e.asm.fa).apply(null, arguments);
        };
        e._sqlite3_column_blob = function() {
            return (e._sqlite3_column_blob = e.asm.ga).apply(null, arguments);
        };
        e._sqlite3_column_bytes = function() {
            return (e._sqlite3_column_bytes = e.asm.ha).apply(null, arguments);
        };
        e._sqlite3_column_double = function() {
            return (e._sqlite3_column_double = e.asm.ia).apply(null, arguments);
        };
        e._sqlite3_column_text = function() {
            return (e._sqlite3_column_text = e.asm.ja).apply(null, arguments);
        };
        e._sqlite3_column_type = function() {
            return (e._sqlite3_column_type = e.asm.ka).apply(null, arguments);
        };
        e._sqlite3_column_name = function() {
            return (e._sqlite3_column_name = e.asm.la).apply(null, arguments);
        };
        e._sqlite3_bind_blob = function() {
            return (e._sqlite3_bind_blob = e.asm.ma).apply(null, arguments);
        };
        e._sqlite3_bind_double = function() {
            return (e._sqlite3_bind_double = e.asm.na).apply(null, arguments);
        };
        e._sqlite3_bind_int = function() {
            return (e._sqlite3_bind_int = e.asm.oa).apply(null, arguments);
        };
        e._sqlite3_bind_text = function() {
            return (e._sqlite3_bind_text = e.asm.pa).apply(null, arguments);
        };
        e._sqlite3_bind_parameter_index = function() {
            return (e._sqlite3_bind_parameter_index = e.asm.qa).apply(null, arguments);
        };
        e._sqlite3_normalized_sql = function() {
            return (e._sqlite3_normalized_sql = e.asm.ra).apply(null, arguments);
        };
        e._sqlite3_errmsg = function() {
            return (e._sqlite3_errmsg = e.asm.sa).apply(null, arguments);
        };
        e._sqlite3_exec = function() {
            return (e._sqlite3_exec = e.asm.ta).apply(null, arguments);
        };
        e._sqlite3_changes = function() {
            return (e._sqlite3_changes = e.asm.ua).apply(null, arguments);
        };
        e._sqlite3_close_v2 = function() {
            return (e._sqlite3_close_v2 = e.asm.va).apply(null, arguments);
        };
        e._sqlite3_create_function_v2 = function() {
            return (e._sqlite3_create_function_v2 = e.asm.wa).apply(null, arguments);
        };
        e._sqlite3_open = function() {
            return (e._sqlite3_open = e.asm.xa).apply(null, arguments);
        };
        var da = e._malloc = function() {
            return (da = e._malloc = e.asm.ya).apply(null, arguments);
        }, ba = e._free = function() {
            return (ba = e._free = e.asm.za).apply(null, arguments);
        };
        e._RegisterExtensionFunctions = function() {
            return (e._RegisterExtensionFunctions = e.asm.Ba).apply(null, arguments);
        };
        var zb = e._emscripten_builtin_memalign = function() {
            return (zb = e._emscripten_builtin_memalign = e.asm.Ca).apply(null, arguments);
        }, oa = e.stackSave = function() {
            return (oa = e.stackSave = e.asm.Da).apply(null, arguments);
        }, qa = e.stackRestore = function() {
            return (qa = e.stackRestore = e.asm.Ea).apply(null, arguments);
        }, B = e.stackAlloc = function() {
            return (B = e.stackAlloc = e.asm.Fa).apply(null, arguments);
        };
        e.UTF8ToString = C;
        e.stackAlloc = B;
        e.stackSave = oa;
        e.stackRestore = qa;
        e.cwrap = function(a, b, c, d) {
            c = c || [];
            var f = c.every((h)=>"number" === h || "boolean" === h);
            return "string" !== b && f && !d ? e["_" + a] : function() {
                return Uc(a, b, c, arguments);
            };
        };
        var Xc;
        Ya = function Yc() {
            Xc || Zc();
            Xc || (Ya = Yc);
        };
        function Zc() {
            function a() {
                if (!Xc && (Xc = !0, e.calledRun = !0, !Ka)) {
                    e.noFSInit || ac || (ac = !0, $b(), e.stdin = e.stdin, e.stdout = e.stdout, e.stderr = e.stderr, e.stdin ? cc("stdin", e.stdin) : Sb("/dev/tty", "/dev/stdin"), e.stdout ? cc("stdout", null, e.stdout) : Sb("/dev/tty", "/dev/stdout"), e.stderr ? cc("stderr", null, e.stderr) : Sb("/dev/tty1", "/dev/stderr"), ja("/dev/stdin", 0), ja("/dev/stdout", 1), ja("/dev/stderr", 1));
                    Db = !1;
                    cb(Ta);
                    if (e.onRuntimeInitialized) e.onRuntimeInitialized();
                    if (e.postRun) for("function" == typeof e.postRun && (e.postRun = [
                        e.postRun
                    ]); e.postRun.length;){
                        var b = e.postRun.shift();
                        Ua.unshift(b);
                    }
                    cb(Ua);
                }
            }
            if (!(0 < Wa)) {
                if (e.preRun) for("function" == typeof e.preRun && (e.preRun = [
                    e.preRun
                ]); e.preRun.length;)Va();
                cb(Sa);
                0 < Wa || (e.setStatus ? (e.setStatus("Running..."), setTimeout(function() {
                    setTimeout(function() {
                        e.setStatus("");
                    }, 1);
                    a();
                }, 1)) : a());
            }
        }
        if (e.preInit) for("function" == typeof e.preInit && (e.preInit = [
            e.preInit
        ]); 0 < e.preInit.length;)e.preInit.pop()();
        Zc();
        // The shell-pre.js and emcc-generated code goes above
        return Module;
    }); // The end of the promise being returned
    return initSqlJsPromise;
} // The end of our initSqlJs function
;
module.exports = initSqlJs;
// This will allow the module to be used in ES6 or CommonJS
module.exports.default = initSqlJs;

});
parcelRequire.register("kgCOo", function(module, exports) {

$parcel$export(module.exports, "randomBytes", () => $ec13687a319a49ff$export$5f828d93ff035aa8, (v) => $ec13687a319a49ff$export$5f828d93ff035aa8 = v);
$parcel$export(module.exports, "rng", () => $ec13687a319a49ff$export$cd94982b18c6332c, (v) => $ec13687a319a49ff$export$cd94982b18c6332c = v);
$parcel$export(module.exports, "pseudoRandomBytes", () => $ec13687a319a49ff$export$1d518568e4f529b0, (v) => $ec13687a319a49ff$export$1d518568e4f529b0 = v);
$parcel$export(module.exports, "prng", () => $ec13687a319a49ff$export$5285b6d41c912b41, (v) => $ec13687a319a49ff$export$5285b6d41c912b41 = v);
$parcel$export(module.exports, "createHash", () => $ec13687a319a49ff$export$2fb37efbf6ae0c0e, (v) => $ec13687a319a49ff$export$2fb37efbf6ae0c0e = v);
$parcel$export(module.exports, "Hash", () => $ec13687a319a49ff$export$ab85ecd77ce6a5cd, (v) => $ec13687a319a49ff$export$ab85ecd77ce6a5cd = v);
$parcel$export(module.exports, "createHmac", () => $ec13687a319a49ff$export$da39cf97e1eb7c91, (v) => $ec13687a319a49ff$export$da39cf97e1eb7c91 = v);
$parcel$export(module.exports, "Hmac", () => $ec13687a319a49ff$export$52a9039d7177394f, (v) => $ec13687a319a49ff$export$52a9039d7177394f = v);
$parcel$export(module.exports, "getHashes", () => $ec13687a319a49ff$export$f7201db400317331, (v) => $ec13687a319a49ff$export$f7201db400317331 = v);
$parcel$export(module.exports, "pbkdf2", () => $ec13687a319a49ff$export$448fa22aedc9dbca, (v) => $ec13687a319a49ff$export$448fa22aedc9dbca = v);
$parcel$export(module.exports, "pbkdf2Sync", () => $ec13687a319a49ff$export$b80c7ba289c8fa56, (v) => $ec13687a319a49ff$export$b80c7ba289c8fa56 = v);
$parcel$export(module.exports, "Cipher", () => $ec13687a319a49ff$export$26e5786e8ac8e530, (v) => $ec13687a319a49ff$export$26e5786e8ac8e530 = v);
$parcel$export(module.exports, "createCipher", () => $ec13687a319a49ff$export$bdd223f16383713e, (v) => $ec13687a319a49ff$export$bdd223f16383713e = v);
$parcel$export(module.exports, "Cipheriv", () => $ec13687a319a49ff$export$20533d26f07f1ee0, (v) => $ec13687a319a49ff$export$20533d26f07f1ee0 = v);
$parcel$export(module.exports, "createCipheriv", () => $ec13687a319a49ff$export$2f64596b8cbf08b4, (v) => $ec13687a319a49ff$export$2f64596b8cbf08b4 = v);
$parcel$export(module.exports, "Decipher", () => $ec13687a319a49ff$export$2ce6d8d0e8b04e1a, (v) => $ec13687a319a49ff$export$2ce6d8d0e8b04e1a = v);
$parcel$export(module.exports, "createDecipher", () => $ec13687a319a49ff$export$12ada9414fbc594c, (v) => $ec13687a319a49ff$export$12ada9414fbc594c = v);
$parcel$export(module.exports, "Decipheriv", () => $ec13687a319a49ff$export$f5e7e39d57cd9700, (v) => $ec13687a319a49ff$export$f5e7e39d57cd9700 = v);
$parcel$export(module.exports, "createDecipheriv", () => $ec13687a319a49ff$export$36b6d6ef312eab39, (v) => $ec13687a319a49ff$export$36b6d6ef312eab39 = v);
$parcel$export(module.exports, "getCiphers", () => $ec13687a319a49ff$export$58a258485f1e49f6, (v) => $ec13687a319a49ff$export$58a258485f1e49f6 = v);
$parcel$export(module.exports, "listCiphers", () => $ec13687a319a49ff$export$dedd8dc3dc62b370, (v) => $ec13687a319a49ff$export$dedd8dc3dc62b370 = v);
$parcel$export(module.exports, "DiffieHellmanGroup", () => $ec13687a319a49ff$export$971862a2fcb1bb40, (v) => $ec13687a319a49ff$export$971862a2fcb1bb40 = v);
$parcel$export(module.exports, "createDiffieHellmanGroup", () => $ec13687a319a49ff$export$c6ff6a88acbeaf40, (v) => $ec13687a319a49ff$export$c6ff6a88acbeaf40 = v);
$parcel$export(module.exports, "getDiffieHellman", () => $ec13687a319a49ff$export$fdc27893e98845cc, (v) => $ec13687a319a49ff$export$fdc27893e98845cc = v);
$parcel$export(module.exports, "createDiffieHellman", () => $ec13687a319a49ff$export$6671fb9a1323bed, (v) => $ec13687a319a49ff$export$6671fb9a1323bed = v);
$parcel$export(module.exports, "DiffieHellman", () => $ec13687a319a49ff$export$d74daf141a551db, (v) => $ec13687a319a49ff$export$d74daf141a551db = v);
$parcel$export(module.exports, "createSign", () => $ec13687a319a49ff$export$45df7cae684751af, (v) => $ec13687a319a49ff$export$45df7cae684751af = v);
$parcel$export(module.exports, "Sign", () => $ec13687a319a49ff$export$1db683ad541682f6, (v) => $ec13687a319a49ff$export$1db683ad541682f6 = v);
$parcel$export(module.exports, "createVerify", () => $ec13687a319a49ff$export$6f65485f87568e37, (v) => $ec13687a319a49ff$export$6f65485f87568e37 = v);
$parcel$export(module.exports, "Verify", () => $ec13687a319a49ff$export$91a8e56769aeb334, (v) => $ec13687a319a49ff$export$91a8e56769aeb334 = v);
$parcel$export(module.exports, "createECDH", () => $ec13687a319a49ff$export$2d4117e99c2179e4, (v) => $ec13687a319a49ff$export$2d4117e99c2179e4 = v);
$parcel$export(module.exports, "publicEncrypt", () => $ec13687a319a49ff$export$512823e338ddb1b7, (v) => $ec13687a319a49ff$export$512823e338ddb1b7 = v);
$parcel$export(module.exports, "privateEncrypt", () => $ec13687a319a49ff$export$9d0e0c0c4a8d30f3, (v) => $ec13687a319a49ff$export$9d0e0c0c4a8d30f3 = v);
$parcel$export(module.exports, "publicDecrypt", () => $ec13687a319a49ff$export$b9d55ff329113abd, (v) => $ec13687a319a49ff$export$b9d55ff329113abd = v);
$parcel$export(module.exports, "privateDecrypt", () => $ec13687a319a49ff$export$7efb24e2fddf99b9, (v) => $ec13687a319a49ff$export$7efb24e2fddf99b9 = v);
$parcel$export(module.exports, "randomFill", () => $ec13687a319a49ff$export$bb1abf2ce84fc7e8, (v) => $ec13687a319a49ff$export$bb1abf2ce84fc7e8 = v);
$parcel$export(module.exports, "randomFillSync", () => $ec13687a319a49ff$export$2f7171e78e524d5e, (v) => $ec13687a319a49ff$export$2f7171e78e524d5e = v);
$parcel$export(module.exports, "createCredentials", () => $ec13687a319a49ff$export$e1d879b482f37d98, (v) => $ec13687a319a49ff$export$e1d879b482f37d98 = v);
$parcel$export(module.exports, "constants", () => $ec13687a319a49ff$export$1a988e7317c65621, (v) => $ec13687a319a49ff$export$1a988e7317c65621 = v);
var $ec13687a319a49ff$export$5f828d93ff035aa8;
var $ec13687a319a49ff$export$cd94982b18c6332c;
var $ec13687a319a49ff$export$1d518568e4f529b0;
var $ec13687a319a49ff$export$5285b6d41c912b41;
var $ec13687a319a49ff$export$2fb37efbf6ae0c0e;
var $ec13687a319a49ff$export$ab85ecd77ce6a5cd;
var $ec13687a319a49ff$export$da39cf97e1eb7c91;
var $ec13687a319a49ff$export$52a9039d7177394f;
var $ec13687a319a49ff$export$f7201db400317331;
var $ec13687a319a49ff$export$448fa22aedc9dbca;
var $ec13687a319a49ff$export$b80c7ba289c8fa56;
var $ec13687a319a49ff$export$26e5786e8ac8e530;
var $ec13687a319a49ff$export$bdd223f16383713e;
var $ec13687a319a49ff$export$20533d26f07f1ee0;
var $ec13687a319a49ff$export$2f64596b8cbf08b4;
var $ec13687a319a49ff$export$2ce6d8d0e8b04e1a;
var $ec13687a319a49ff$export$12ada9414fbc594c;
var $ec13687a319a49ff$export$f5e7e39d57cd9700;
var $ec13687a319a49ff$export$36b6d6ef312eab39;
var $ec13687a319a49ff$export$58a258485f1e49f6;
var $ec13687a319a49ff$export$dedd8dc3dc62b370;
var $ec13687a319a49ff$export$971862a2fcb1bb40;
var $ec13687a319a49ff$export$c6ff6a88acbeaf40;
var $ec13687a319a49ff$export$fdc27893e98845cc;
var $ec13687a319a49ff$export$6671fb9a1323bed;
var $ec13687a319a49ff$export$d74daf141a551db;
var $ec13687a319a49ff$export$45df7cae684751af;
var $ec13687a319a49ff$export$1db683ad541682f6;
var $ec13687a319a49ff$export$6f65485f87568e37;
var $ec13687a319a49ff$export$91a8e56769aeb334;
var $ec13687a319a49ff$export$2d4117e99c2179e4;
var $ec13687a319a49ff$export$512823e338ddb1b7;
var $ec13687a319a49ff$export$9d0e0c0c4a8d30f3;
var $ec13687a319a49ff$export$b9d55ff329113abd;
var $ec13687a319a49ff$export$7efb24e2fddf99b9;
var $ec13687a319a49ff$export$bb1abf2ce84fc7e8;
var $ec13687a319a49ff$export$2f7171e78e524d5e;
var $ec13687a319a49ff$export$e1d879b482f37d98;
var $ec13687a319a49ff$export$1a988e7317c65621;
"use strict";

$ec13687a319a49ff$export$5f828d93ff035aa8 = $ec13687a319a49ff$export$cd94982b18c6332c = $ec13687a319a49ff$export$1d518568e4f529b0 = $ec13687a319a49ff$export$5285b6d41c912b41 = (parcelRequire("kVSZC"));

$ec13687a319a49ff$export$2fb37efbf6ae0c0e = $ec13687a319a49ff$export$ab85ecd77ce6a5cd = (parcelRequire("hIpsB"));

$ec13687a319a49ff$export$da39cf97e1eb7c91 = $ec13687a319a49ff$export$52a9039d7177394f = (parcelRequire("dfWjY"));

var $lSVmB = parcelRequire("lSVmB");
var $ec13687a319a49ff$var$algoKeys = Object.keys($lSVmB);
var $ec13687a319a49ff$var$hashes = [
    "sha1",
    "sha224",
    "sha256",
    "sha384",
    "sha512",
    "md5",
    "rmd160"
].concat($ec13687a319a49ff$var$algoKeys);
$ec13687a319a49ff$export$f7201db400317331 = function() {
    return $ec13687a319a49ff$var$hashes;
};

var $lqJN7 = parcelRequire("lqJN7");
$ec13687a319a49ff$export$448fa22aedc9dbca = $lqJN7.pbkdf2;
$ec13687a319a49ff$export$b80c7ba289c8fa56 = $lqJN7.pbkdf2Sync;

var $7M3Po = parcelRequire("7M3Po");
$ec13687a319a49ff$export$26e5786e8ac8e530 = $7M3Po.Cipher;
$ec13687a319a49ff$export$bdd223f16383713e = $7M3Po.createCipher;
$ec13687a319a49ff$export$20533d26f07f1ee0 = $7M3Po.Cipheriv;
$ec13687a319a49ff$export$2f64596b8cbf08b4 = $7M3Po.createCipheriv;
$ec13687a319a49ff$export$2ce6d8d0e8b04e1a = $7M3Po.Decipher;
$ec13687a319a49ff$export$12ada9414fbc594c = $7M3Po.createDecipher;
$ec13687a319a49ff$export$f5e7e39d57cd9700 = $7M3Po.Decipheriv;
$ec13687a319a49ff$export$36b6d6ef312eab39 = $7M3Po.createDecipheriv;
$ec13687a319a49ff$export$58a258485f1e49f6 = $7M3Po.getCiphers;
$ec13687a319a49ff$export$dedd8dc3dc62b370 = $7M3Po.listCiphers;

var $hMoy5 = parcelRequire("hMoy5");
$ec13687a319a49ff$export$971862a2fcb1bb40 = $hMoy5.DiffieHellmanGroup;
$ec13687a319a49ff$export$c6ff6a88acbeaf40 = $hMoy5.createDiffieHellmanGroup;
$ec13687a319a49ff$export$fdc27893e98845cc = $hMoy5.getDiffieHellman;
$ec13687a319a49ff$export$6671fb9a1323bed = $hMoy5.createDiffieHellman;
$ec13687a319a49ff$export$d74daf141a551db = $hMoy5.DiffieHellman;

var $6DZG1 = parcelRequire("6DZG1");
$ec13687a319a49ff$export$45df7cae684751af = $6DZG1.createSign;
$ec13687a319a49ff$export$1db683ad541682f6 = $6DZG1.Sign;
$ec13687a319a49ff$export$6f65485f87568e37 = $6DZG1.createVerify;
$ec13687a319a49ff$export$91a8e56769aeb334 = $6DZG1.Verify;

$ec13687a319a49ff$export$2d4117e99c2179e4 = (parcelRequire("242Kq"));

var $W4hSj = parcelRequire("W4hSj");
$ec13687a319a49ff$export$512823e338ddb1b7 = $W4hSj.publicEncrypt;
$ec13687a319a49ff$export$9d0e0c0c4a8d30f3 = $W4hSj.privateEncrypt;
$ec13687a319a49ff$export$b9d55ff329113abd = $W4hSj.publicDecrypt;
$ec13687a319a49ff$export$7efb24e2fddf99b9 = $W4hSj.privateDecrypt;

var $kMiAK = parcelRequire("kMiAK");
$ec13687a319a49ff$export$bb1abf2ce84fc7e8 = $kMiAK.randomFill;
$ec13687a319a49ff$export$2f7171e78e524d5e = $kMiAK.randomFillSync;
$ec13687a319a49ff$export$e1d879b482f37d98 = function() {
    throw new Error([
        "sorry, createCredentials is not implemented yet",
        "we accept pull requests",
        "https://github.com/crypto-browserify/crypto-browserify"
    ].join("\n"));
};
$ec13687a319a49ff$export$1a988e7317c65621 = {
    "DH_CHECK_P_NOT_SAFE_PRIME": 2,
    "DH_CHECK_P_NOT_PRIME": 1,
    "DH_UNABLE_TO_CHECK_GENERATOR": 4,
    "DH_NOT_SUITABLE_GENERATOR": 8,
    "NPN_ENABLED": 1,
    "ALPN_ENABLED": 1,
    "RSA_PKCS1_PADDING": 1,
    "RSA_SSLV23_PADDING": 2,
    "RSA_NO_PADDING": 3,
    "RSA_PKCS1_OAEP_PADDING": 4,
    "RSA_X931_PADDING": 5,
    "RSA_PKCS1_PSS_PADDING": 6,
    "POINT_CONVERSION_COMPRESSED": 2,
    "POINT_CONVERSION_UNCOMPRESSED": 4,
    "POINT_CONVERSION_HYBRID": 6
};

});
parcelRequire.register("kVSZC", function(module, exports) {

var $jx7mO = parcelRequire("jx7mO");
"use strict";
// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var $f3d3c9f4b636dd29$var$MAX_BYTES = 65536;
// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var $f3d3c9f4b636dd29$var$MAX_UINT32 = 4294967295;
function $f3d3c9f4b636dd29$var$oldBrowser() {
    throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
}

var $1fMpU = parcelRequire("1fMpU");
var $f3d3c9f4b636dd29$require$Buffer = $1fMpU.Buffer;
var $f3d3c9f4b636dd29$var$crypto = $parcel$global.crypto || $parcel$global.msCrypto;
if ($f3d3c9f4b636dd29$var$crypto && $f3d3c9f4b636dd29$var$crypto.getRandomValues) module.exports = $f3d3c9f4b636dd29$var$randomBytes;
else module.exports = $f3d3c9f4b636dd29$var$oldBrowser;
function $f3d3c9f4b636dd29$var$randomBytes(size, cb) {
    // phantomjs needs to throw
    if (size > $f3d3c9f4b636dd29$var$MAX_UINT32) throw new RangeError("requested too many random bytes");
    var bytes = $f3d3c9f4b636dd29$require$Buffer.allocUnsafe(size);
    if (size > 0) {
        if (size > $f3d3c9f4b636dd29$var$MAX_BYTES) // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
        for(var generated = 0; generated < size; generated += $f3d3c9f4b636dd29$var$MAX_BYTES)// buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        $f3d3c9f4b636dd29$var$crypto.getRandomValues(bytes.slice(generated, generated + $f3d3c9f4b636dd29$var$MAX_BYTES));
        else $f3d3c9f4b636dd29$var$crypto.getRandomValues(bytes);
    }
    if (typeof cb === "function") return $jx7mO.nextTick(function() {
        cb(null, bytes);
    });
    return bytes;
}

});
parcelRequire.register("1fMpU", function(module, exports) {
/* eslint-disable node/no-deprecated-api */ 
var $fLrIr = parcelRequire("fLrIr");
var $0e9cbfc51faddade$var$Buffer = $fLrIr.Buffer;
// alternative to using Object.keys for old browsers
function $0e9cbfc51faddade$var$copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if ($0e9cbfc51faddade$var$Buffer.from && $0e9cbfc51faddade$var$Buffer.alloc && $0e9cbfc51faddade$var$Buffer.allocUnsafe && $0e9cbfc51faddade$var$Buffer.allocUnsafeSlow) module.exports = $fLrIr;
else {
    // Copy properties from require('buffer')
    $0e9cbfc51faddade$var$copyProps($fLrIr, module.exports);
    module.exports.Buffer = $0e9cbfc51faddade$var$SafeBuffer;
}
function $0e9cbfc51faddade$var$SafeBuffer(arg, encodingOrOffset, length) {
    return $0e9cbfc51faddade$var$Buffer(arg, encodingOrOffset, length);
}
// Copy static methods from Buffer
$0e9cbfc51faddade$var$copyProps($0e9cbfc51faddade$var$Buffer, $0e9cbfc51faddade$var$SafeBuffer);
$0e9cbfc51faddade$var$SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") throw new TypeError("Argument must not be a number");
    return $0e9cbfc51faddade$var$Buffer(arg, encodingOrOffset, length);
};
$0e9cbfc51faddade$var$SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    var buf = $0e9cbfc51faddade$var$Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === "string") buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
$0e9cbfc51faddade$var$SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return $0e9cbfc51faddade$var$Buffer(size);
};
$0e9cbfc51faddade$var$SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return $fLrIr.SlowBuffer(size);
};

});


parcelRequire.register("hIpsB", function(module, exports) {
"use strict";

var $6QnvD = parcelRequire("6QnvD");

var $fkYWF = parcelRequire("fkYWF");

var $dMVS8 = parcelRequire("dMVS8");

var $8RgXQ = parcelRequire("8RgXQ");

var $bbKMQ = parcelRequire("bbKMQ");
function $ce5a4ba13ac28065$var$Hash(hash) {
    $bbKMQ.call(this, "digest");
    this._hash = hash;
}
$6QnvD($ce5a4ba13ac28065$var$Hash, $bbKMQ);
$ce5a4ba13ac28065$var$Hash.prototype._update = function(data) {
    this._hash.update(data);
};
$ce5a4ba13ac28065$var$Hash.prototype._final = function() {
    return this._hash.digest();
};
module.exports = function createHash(alg) {
    alg = alg.toLowerCase();
    if (alg === "md5") return new $fkYWF();
    if (alg === "rmd160" || alg === "ripemd160") return new $dMVS8();
    return new $ce5a4ba13ac28065$var$Hash($8RgXQ(alg));
};

});
parcelRequire.register("6QnvD", function(module, exports) {
if (typeof Object.create === "function") // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

});

parcelRequire.register("fkYWF", function(module, exports) {
"use strict";

var $6QnvD = parcelRequire("6QnvD");

var $dLFWx = parcelRequire("dLFWx");

var $1fMpU = parcelRequire("1fMpU");
var $b2a7ffb5d204c56c$require$Buffer = $1fMpU.Buffer;
var $b2a7ffb5d204c56c$var$ARRAY16 = new Array(16);
function $b2a7ffb5d204c56c$var$MD5() {
    $dLFWx.call(this, 64);
    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
}
$6QnvD($b2a7ffb5d204c56c$var$MD5, $dLFWx);
$b2a7ffb5d204c56c$var$MD5.prototype._update = function() {
    var M = $b2a7ffb5d204c56c$var$ARRAY16;
    for(var i = 0; i < 16; ++i)M[i] = this._block.readInt32LE(i * 4);
    var a = this._a;
    var b = this._b;
    var c = this._c;
    var d = this._d;
    a = $b2a7ffb5d204c56c$var$fnF(a, b, c, d, M[0], 0xd76aa478, 7);
    d = $b2a7ffb5d204c56c$var$fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
    c = $b2a7ffb5d204c56c$var$fnF(c, d, a, b, M[2], 0x242070db, 17);
    b = $b2a7ffb5d204c56c$var$fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
    a = $b2a7ffb5d204c56c$var$fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
    d = $b2a7ffb5d204c56c$var$fnF(d, a, b, c, M[5], 0x4787c62a, 12);
    c = $b2a7ffb5d204c56c$var$fnF(c, d, a, b, M[6], 0xa8304613, 17);
    b = $b2a7ffb5d204c56c$var$fnF(b, c, d, a, M[7], 0xfd469501, 22);
    a = $b2a7ffb5d204c56c$var$fnF(a, b, c, d, M[8], 0x698098d8, 7);
    d = $b2a7ffb5d204c56c$var$fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
    c = $b2a7ffb5d204c56c$var$fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
    b = $b2a7ffb5d204c56c$var$fnF(b, c, d, a, M[11], 0x895cd7be, 22);
    a = $b2a7ffb5d204c56c$var$fnF(a, b, c, d, M[12], 0x6b901122, 7);
    d = $b2a7ffb5d204c56c$var$fnF(d, a, b, c, M[13], 0xfd987193, 12);
    c = $b2a7ffb5d204c56c$var$fnF(c, d, a, b, M[14], 0xa679438e, 17);
    b = $b2a7ffb5d204c56c$var$fnF(b, c, d, a, M[15], 0x49b40821, 22);
    a = $b2a7ffb5d204c56c$var$fnG(a, b, c, d, M[1], 0xf61e2562, 5);
    d = $b2a7ffb5d204c56c$var$fnG(d, a, b, c, M[6], 0xc040b340, 9);
    c = $b2a7ffb5d204c56c$var$fnG(c, d, a, b, M[11], 0x265e5a51, 14);
    b = $b2a7ffb5d204c56c$var$fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
    a = $b2a7ffb5d204c56c$var$fnG(a, b, c, d, M[5], 0xd62f105d, 5);
    d = $b2a7ffb5d204c56c$var$fnG(d, a, b, c, M[10], 0x02441453, 9);
    c = $b2a7ffb5d204c56c$var$fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
    b = $b2a7ffb5d204c56c$var$fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
    a = $b2a7ffb5d204c56c$var$fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
    d = $b2a7ffb5d204c56c$var$fnG(d, a, b, c, M[14], 0xc33707d6, 9);
    c = $b2a7ffb5d204c56c$var$fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
    b = $b2a7ffb5d204c56c$var$fnG(b, c, d, a, M[8], 0x455a14ed, 20);
    a = $b2a7ffb5d204c56c$var$fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
    d = $b2a7ffb5d204c56c$var$fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
    c = $b2a7ffb5d204c56c$var$fnG(c, d, a, b, M[7], 0x676f02d9, 14);
    b = $b2a7ffb5d204c56c$var$fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);
    a = $b2a7ffb5d204c56c$var$fnH(a, b, c, d, M[5], 0xfffa3942, 4);
    d = $b2a7ffb5d204c56c$var$fnH(d, a, b, c, M[8], 0x8771f681, 11);
    c = $b2a7ffb5d204c56c$var$fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
    b = $b2a7ffb5d204c56c$var$fnH(b, c, d, a, M[14], 0xfde5380c, 23);
    a = $b2a7ffb5d204c56c$var$fnH(a, b, c, d, M[1], 0xa4beea44, 4);
    d = $b2a7ffb5d204c56c$var$fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
    c = $b2a7ffb5d204c56c$var$fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
    b = $b2a7ffb5d204c56c$var$fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
    a = $b2a7ffb5d204c56c$var$fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
    d = $b2a7ffb5d204c56c$var$fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
    c = $b2a7ffb5d204c56c$var$fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
    b = $b2a7ffb5d204c56c$var$fnH(b, c, d, a, M[6], 0x04881d05, 23);
    a = $b2a7ffb5d204c56c$var$fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
    d = $b2a7ffb5d204c56c$var$fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
    c = $b2a7ffb5d204c56c$var$fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
    b = $b2a7ffb5d204c56c$var$fnH(b, c, d, a, M[2], 0xc4ac5665, 23);
    a = $b2a7ffb5d204c56c$var$fnI(a, b, c, d, M[0], 0xf4292244, 6);
    d = $b2a7ffb5d204c56c$var$fnI(d, a, b, c, M[7], 0x432aff97, 10);
    c = $b2a7ffb5d204c56c$var$fnI(c, d, a, b, M[14], 0xab9423a7, 15);
    b = $b2a7ffb5d204c56c$var$fnI(b, c, d, a, M[5], 0xfc93a039, 21);
    a = $b2a7ffb5d204c56c$var$fnI(a, b, c, d, M[12], 0x655b59c3, 6);
    d = $b2a7ffb5d204c56c$var$fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
    c = $b2a7ffb5d204c56c$var$fnI(c, d, a, b, M[10], 0xffeff47d, 15);
    b = $b2a7ffb5d204c56c$var$fnI(b, c, d, a, M[1], 0x85845dd1, 21);
    a = $b2a7ffb5d204c56c$var$fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
    d = $b2a7ffb5d204c56c$var$fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
    c = $b2a7ffb5d204c56c$var$fnI(c, d, a, b, M[6], 0xa3014314, 15);
    b = $b2a7ffb5d204c56c$var$fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
    a = $b2a7ffb5d204c56c$var$fnI(a, b, c, d, M[4], 0xf7537e82, 6);
    d = $b2a7ffb5d204c56c$var$fnI(d, a, b, c, M[11], 0xbd3af235, 10);
    c = $b2a7ffb5d204c56c$var$fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
    b = $b2a7ffb5d204c56c$var$fnI(b, c, d, a, M[9], 0xeb86d391, 21);
    this._a = this._a + a | 0;
    this._b = this._b + b | 0;
    this._c = this._c + c | 0;
    this._d = this._d + d | 0;
};
$b2a7ffb5d204c56c$var$MD5.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = $b2a7ffb5d204c56c$require$Buffer.allocUnsafe(16);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    return buffer;
};
function $b2a7ffb5d204c56c$var$rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function $b2a7ffb5d204c56c$var$fnF(a, b, c, d, m, k, s) {
    return $b2a7ffb5d204c56c$var$rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
}
function $b2a7ffb5d204c56c$var$fnG(a, b, c, d, m, k, s) {
    return $b2a7ffb5d204c56c$var$rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
}
function $b2a7ffb5d204c56c$var$fnH(a, b, c, d, m, k, s) {
    return $b2a7ffb5d204c56c$var$rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
}
function $b2a7ffb5d204c56c$var$fnI(a, b, c, d, m, k, s) {
    return $b2a7ffb5d204c56c$var$rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
}
module.exports = $b2a7ffb5d204c56c$var$MD5;

});
parcelRequire.register("dLFWx", function(module, exports) {
"use strict";

var $5hHhc = parcelRequire("5hHhc");
var $a0603336490d7b27$require$Buffer = $5hHhc.Buffer;

var $88F3d = parcelRequire("88F3d");
var $a0603336490d7b27$require$Transform = $88F3d.Transform;

var $6QnvD = parcelRequire("6QnvD");
function $a0603336490d7b27$var$throwIfNotStringOrBuffer(val, prefix) {
    if (!$a0603336490d7b27$require$Buffer.isBuffer(val) && typeof val !== "string") throw new TypeError(prefix + " must be a string or a buffer");
}
function $a0603336490d7b27$var$HashBase(blockSize) {
    $a0603336490d7b27$require$Transform.call(this);
    this._block = $a0603336490d7b27$require$Buffer.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [
        0,
        0,
        0,
        0
    ];
    this._finalized = false;
}
$6QnvD($a0603336490d7b27$var$HashBase, $a0603336490d7b27$require$Transform);
$a0603336490d7b27$var$HashBase.prototype._transform = function(chunk, encoding, callback) {
    var error = null;
    try {
        this.update(chunk, encoding);
    } catch (err) {
        error = err;
    }
    callback(error);
};
$a0603336490d7b27$var$HashBase.prototype._flush = function(callback) {
    var error = null;
    try {
        this.push(this.digest());
    } catch (err) {
        error = err;
    }
    callback(error);
};
$a0603336490d7b27$var$HashBase.prototype.update = function(data, encoding) {
    $a0603336490d7b27$var$throwIfNotStringOrBuffer(data, "Data");
    if (this._finalized) throw new Error("Digest already called");
    if (!$a0603336490d7b27$require$Buffer.isBuffer(data)) data = $a0603336490d7b27$require$Buffer.from(data, encoding);
    // consume data
    var block = this._block;
    var offset = 0;
    while(this._blockOffset + data.length - offset >= this._blockSize){
        for(var i = this._blockOffset; i < this._blockSize;)block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
    }
    while(offset < data.length)block[this._blockOffset++] = data[offset++];
    // update length
    for(var j = 0, carry = data.length * 8; carry > 0; ++j){
        this._length[j] += carry;
        carry = this._length[j] / 0x0100000000 | 0;
        if (carry > 0) this._length[j] -= 0x0100000000 * carry;
    }
    return this;
};
$a0603336490d7b27$var$HashBase.prototype._update = function() {
    throw new Error("_update is not implemented");
};
$a0603336490d7b27$var$HashBase.prototype.digest = function(encoding) {
    if (this._finalized) throw new Error("Digest already called");
    this._finalized = true;
    var digest = this._digest();
    if (encoding !== undefined) digest = digest.toString(encoding);
    // reset state
    this._block.fill(0);
    this._blockOffset = 0;
    for(var i = 0; i < 4; ++i)this._length[i] = 0;
    return digest;
};
$a0603336490d7b27$var$HashBase.prototype._digest = function() {
    throw new Error("_digest is not implemented");
};
module.exports = $a0603336490d7b27$var$HashBase;

});
parcelRequire.register("5hHhc", function(module, exports) {
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ 
var $fLrIr = parcelRequire("fLrIr");
var $3d901c17753e20ee$var$Buffer = $fLrIr.Buffer;
// alternative to using Object.keys for old browsers
function $3d901c17753e20ee$var$copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if ($3d901c17753e20ee$var$Buffer.from && $3d901c17753e20ee$var$Buffer.alloc && $3d901c17753e20ee$var$Buffer.allocUnsafe && $3d901c17753e20ee$var$Buffer.allocUnsafeSlow) module.exports = $fLrIr;
else {
    // Copy properties from require('buffer')
    $3d901c17753e20ee$var$copyProps($fLrIr, module.exports);
    module.exports.Buffer = $3d901c17753e20ee$var$SafeBuffer;
}
function $3d901c17753e20ee$var$SafeBuffer(arg, encodingOrOffset, length) {
    return $3d901c17753e20ee$var$Buffer(arg, encodingOrOffset, length);
}
$3d901c17753e20ee$var$SafeBuffer.prototype = Object.create($3d901c17753e20ee$var$Buffer.prototype);
// Copy static methods from Buffer
$3d901c17753e20ee$var$copyProps($3d901c17753e20ee$var$Buffer, $3d901c17753e20ee$var$SafeBuffer);
$3d901c17753e20ee$var$SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") throw new TypeError("Argument must not be a number");
    return $3d901c17753e20ee$var$Buffer(arg, encodingOrOffset, length);
};
$3d901c17753e20ee$var$SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    var buf = $3d901c17753e20ee$var$Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === "string") buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
$3d901c17753e20ee$var$SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return $3d901c17753e20ee$var$Buffer(size);
};
$3d901c17753e20ee$var$SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return $fLrIr.SlowBuffer(size);
};

});

parcelRequire.register("88F3d", function(module, exports) {

exports = module.exports = (parcelRequire("zxAUR"));
exports.Stream = exports;
exports.Readable = exports;

exports.Writable = (parcelRequire("3DR1u"));

exports.Duplex = (parcelRequire("6xT7g"));

exports.Transform = (parcelRequire("aaOvB"));

exports.PassThrough = (parcelRequire("6XUXj"));

exports.finished = (parcelRequire("7S1GK"));

exports.pipeline = (parcelRequire("6CAC7"));

});
parcelRequire.register("zxAUR", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var $jx7mO = parcelRequire("jx7mO");
"use strict";
module.exports = $06ad5426d0ce4413$var$Readable;
/*<replacement>*/ var $06ad5426d0ce4413$var$Duplex;
/*</replacement>*/ $06ad5426d0ce4413$var$Readable.ReadableState = $06ad5426d0ce4413$var$ReadableState;

var $eCV8S = parcelRequire("eCV8S");
var $06ad5426d0ce4413$require$EE = $eCV8S.EventEmitter;
var $06ad5426d0ce4413$var$EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};

var $5yAai = parcelRequire("5yAai");

var $fLrIr = parcelRequire("fLrIr");
var $06ad5426d0ce4413$require$Buffer = $fLrIr.Buffer;
var $06ad5426d0ce4413$var$OurUint8Array = $parcel$global.Uint8Array || function() {};
function $06ad5426d0ce4413$var$_uint8ArrayToBuffer(chunk) {
    return $06ad5426d0ce4413$require$Buffer.from(chunk);
}
function $06ad5426d0ce4413$var$_isUint8Array(obj) {
    return $06ad5426d0ce4413$require$Buffer.isBuffer(obj) || obj instanceof $06ad5426d0ce4413$var$OurUint8Array;
}

var $XDU19 = parcelRequire("XDU19");
var $06ad5426d0ce4413$var$debug;
if ($XDU19 && $XDU19.debuglog) $06ad5426d0ce4413$var$debug = $XDU19.debuglog("stream");
else $06ad5426d0ce4413$var$debug = function debug() {};

var $dcpIU = parcelRequire("dcpIU");

var $780Wv = parcelRequire("780Wv");

var $9W2TY = parcelRequire("9W2TY");
var $06ad5426d0ce4413$var$getHighWaterMark = $9W2TY.getHighWaterMark;

var $fibbC = parcelRequire("fibbC");
var $06ad5426d0ce4413$require$_require$codes = $fibbC.codes;
var $06ad5426d0ce4413$var$ERR_INVALID_ARG_TYPE = $06ad5426d0ce4413$require$_require$codes.ERR_INVALID_ARG_TYPE, $06ad5426d0ce4413$var$ERR_STREAM_PUSH_AFTER_EOF = $06ad5426d0ce4413$require$_require$codes.ERR_STREAM_PUSH_AFTER_EOF, $06ad5426d0ce4413$var$ERR_METHOD_NOT_IMPLEMENTED = $06ad5426d0ce4413$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $06ad5426d0ce4413$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT = $06ad5426d0ce4413$require$_require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
var $06ad5426d0ce4413$var$StringDecoder;
var $06ad5426d0ce4413$var$createReadableStreamAsyncIterator;
var $06ad5426d0ce4413$var$from;

(parcelRequire("6QnvD"))($06ad5426d0ce4413$var$Readable, $5yAai);
var $06ad5426d0ce4413$var$errorOrDestroy = $780Wv.errorOrDestroy;
var $06ad5426d0ce4413$var$kProxyEvents = [
    "error",
    "close",
    "destroy",
    "pause",
    "resume"
];
function $06ad5426d0ce4413$var$prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}


function $06ad5426d0ce4413$var$ReadableState(options, stream, isDuplex) {
    $06ad5426d0ce4413$var$Duplex = $06ad5426d0ce4413$var$Duplex || (parcelRequire("6xT7g"));
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof $06ad5426d0ce4413$var$Duplex; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = $06ad5426d0ce4413$var$getHighWaterMark(this, options, "readableHighWaterMark", isDuplex); // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new $dcpIU();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy; // has it been destroyed
    this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8"; // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!$06ad5426d0ce4413$var$StringDecoder) $06ad5426d0ce4413$var$StringDecoder = (parcelRequire("3ZG4s")).StringDecoder;
        this.decoder = new $06ad5426d0ce4413$var$StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}

function $06ad5426d0ce4413$var$Readable(options) {
    $06ad5426d0ce4413$var$Duplex = $06ad5426d0ce4413$var$Duplex || (parcelRequire("6xT7g"));
    if (!(this instanceof $06ad5426d0ce4413$var$Readable)) return new $06ad5426d0ce4413$var$Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $06ad5426d0ce4413$var$Duplex;
    this._readableState = new $06ad5426d0ce4413$var$ReadableState(options, this, isDuplex); // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
    }
    $5yAai.call(this);
}
Object.defineProperty($06ad5426d0ce4413$var$Readable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
$06ad5426d0ce4413$var$Readable.prototype.destroy = $780Wv.destroy;
$06ad5426d0ce4413$var$Readable.prototype._undestroy = $780Wv.undestroy;
$06ad5426d0ce4413$var$Readable.prototype._destroy = function(err, cb) {
    cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
$06ad5426d0ce4413$var$Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = $06ad5426d0ce4413$require$Buffer.from(chunk, encoding);
                encoding = "";
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return $06ad5426d0ce4413$var$readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()
$06ad5426d0ce4413$var$Readable.prototype.unshift = function(chunk) {
    return $06ad5426d0ce4413$var$readableAddChunk(this, chunk, null, true, false);
};
function $06ad5426d0ce4413$var$readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    $06ad5426d0ce4413$var$debug("readableAddChunk", chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        $06ad5426d0ce4413$var$onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = $06ad5426d0ce4413$var$chunkInvalid(state, chunk);
        if (er) $06ad5426d0ce4413$var$errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== $06ad5426d0ce4413$require$Buffer.prototype) chunk = $06ad5426d0ce4413$var$_uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) $06ad5426d0ce4413$var$errorOrDestroy(stream, new $06ad5426d0ce4413$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else $06ad5426d0ce4413$var$addChunk(stream, state, chunk, true);
            } else if (state.ended) $06ad5426d0ce4413$var$errorOrDestroy(stream, new $06ad5426d0ce4413$var$ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) $06ad5426d0ce4413$var$addChunk(stream, state, chunk, false);
                    else $06ad5426d0ce4413$var$maybeReadMore(stream, state);
                } else $06ad5426d0ce4413$var$addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            $06ad5426d0ce4413$var$maybeReadMore(stream, state);
        }
    } // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function $06ad5426d0ce4413$var$addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) $06ad5426d0ce4413$var$emitReadable(stream);
    }
    $06ad5426d0ce4413$var$maybeReadMore(stream, state);
}
function $06ad5426d0ce4413$var$chunkInvalid(state, chunk) {
    var er;
    if (!$06ad5426d0ce4413$var$_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) er = new $06ad5426d0ce4413$var$ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer",
        "Uint8Array"
    ], chunk);
    return er;
}
$06ad5426d0ce4413$var$Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
}; // backwards compatibility.

$06ad5426d0ce4413$var$Readable.prototype.setEncoding = function(enc) {
    if (!$06ad5426d0ce4413$var$StringDecoder) $06ad5426d0ce4413$var$StringDecoder = (parcelRequire("3ZG4s")).StringDecoder;
    var decoder = new $06ad5426d0ce4413$var$StringDecoder(enc);
    this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = "";
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== "") this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
}; // Don't raise the hwm > 1GB
var $06ad5426d0ce4413$var$MAX_HWM = 0x40000000;
function $06ad5426d0ce4413$var$computeNewHighWaterMark(n) {
    if (n >= $06ad5426d0ce4413$var$MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = $06ad5426d0ce4413$var$MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $06ad5426d0ce4413$var$howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = $06ad5426d0ce4413$var$computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
} // you can override either this method, or the async _read(n) below.
$06ad5426d0ce4413$var$Readable.prototype.read = function(n) {
    $06ad5426d0ce4413$var$debug("read", n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        $06ad5426d0ce4413$var$debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) $06ad5426d0ce4413$var$endReadable(this);
        else $06ad5426d0ce4413$var$emitReadable(this);
        return null;
    }
    n = $06ad5426d0ce4413$var$howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) $06ad5426d0ce4413$var$endReadable(this);
        return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    $06ad5426d0ce4413$var$debug("need readable", doRead); // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        $06ad5426d0ce4413$var$debug("length less than watermark", doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        $06ad5426d0ce4413$var$debug("reading or ended", doRead);
    } else if (doRead) {
        $06ad5426d0ce4413$var$debug("do read");
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true; // call internal read method
        this._read(state.highWaterMark);
        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = $06ad5426d0ce4413$var$howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = $06ad5426d0ce4413$var$fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) $06ad5426d0ce4413$var$endReadable(this);
    }
    if (ret !== null) this.emit("data", ret);
    return ret;
};
function $06ad5426d0ce4413$var$onEofChunk(stream, state) {
    $06ad5426d0ce4413$var$debug("onEofChunk");
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    $06ad5426d0ce4413$var$emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            $06ad5426d0ce4413$var$emitReadable_(stream);
        }
    }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function $06ad5426d0ce4413$var$emitReadable(stream) {
    var state = stream._readableState;
    $06ad5426d0ce4413$var$debug("emitReadable", state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        $06ad5426d0ce4413$var$debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        $jx7mO.nextTick($06ad5426d0ce4413$var$emitReadable_, stream);
    }
}
function $06ad5426d0ce4413$var$emitReadable_(stream) {
    var state = stream._readableState;
    $06ad5426d0ce4413$var$debug("emitReadable_", state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
    } // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    $06ad5426d0ce4413$var$flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function $06ad5426d0ce4413$var$maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        $jx7mO.nextTick($06ad5426d0ce4413$var$maybeReadMore_, stream, state);
    }
}
function $06ad5426d0ce4413$var$maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        $06ad5426d0ce4413$var$debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
$06ad5426d0ce4413$var$Readable.prototype._read = function(n) {
    $06ad5426d0ce4413$var$errorOrDestroy(this, new $06ad5426d0ce4413$var$ERR_METHOD_NOT_IMPLEMENTED("_read()"));
};
$06ad5426d0ce4413$var$Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    $06ad5426d0ce4413$var$debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== $jx7mO.stdout && dest !== $jx7mO.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) $jx7mO.nextTick(endFn);
    else src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
        $06ad5426d0ce4413$var$debug("onunpipe");
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        $06ad5426d0ce4413$var$debug("onend");
        dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = $06ad5426d0ce4413$var$pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
        $06ad5426d0ce4413$var$debug("cleanup"); // cleanup event handlers once the pipe is broken
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on("data", ondata);
    function ondata(chunk) {
        $06ad5426d0ce4413$var$debug("ondata");
        var ret = dest.write(chunk);
        $06ad5426d0ce4413$var$debug("dest.write", ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && $06ad5426d0ce4413$var$indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                $06ad5426d0ce4413$var$debug("false write response, pause", state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        $06ad5426d0ce4413$var$debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if ($06ad5426d0ce4413$var$EElistenerCount(dest, "error") === 0) $06ad5426d0ce4413$var$errorOrDestroy(dest, er);
    } // Make sure our error handler is attached before userland ones.
    $06ad5426d0ce4413$var$prependListener(dest, "error", onerror); // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
        $06ad5426d0ce4413$var$debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
        $06ad5426d0ce4413$var$debug("unpipe");
        src.unpipe(dest);
    } // tell the dest that it's being piped to
    dest.emit("pipe", src); // start the flow if it hasn't been started already.
    if (!state.flowing) {
        $06ad5426d0ce4413$var$debug("pipe resume");
        src.resume();
    }
    return dest;
};
function $06ad5426d0ce4413$var$pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        $06ad5426d0ce4413$var$debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && $06ad5426d0ce4413$var$EElistenerCount(src, "data")) {
            state.flowing = true;
            $06ad5426d0ce4413$var$flow(src);
        }
    };
}
$06ad5426d0ce4413$var$Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    }; // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this; // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
    } // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit("unpipe", this, {
            hasUnpiped: false
        });
        return this;
    } // try to find the right one.
    var index = $06ad5426d0ce4413$var$indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something
$06ad5426d0ce4413$var$Readable.prototype.on = function(ev, fn) {
    var res = $5yAai.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === "data") {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount("readable") > 0; // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            $06ad5426d0ce4413$var$debug("on readable", state.length, state.reading);
            if (state.length) $06ad5426d0ce4413$var$emitReadable(this);
            else if (!state.reading) $jx7mO.nextTick($06ad5426d0ce4413$var$nReadingNextTick, this);
        }
    }
    return res;
};
$06ad5426d0ce4413$var$Readable.prototype.addListener = $06ad5426d0ce4413$var$Readable.prototype.on;
$06ad5426d0ce4413$var$Readable.prototype.removeListener = function(ev, fn) {
    var res = $5yAai.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $jx7mO.nextTick($06ad5426d0ce4413$var$updateReadableListening, this);
    return res;
};
$06ad5426d0ce4413$var$Readable.prototype.removeAllListeners = function(ev) {
    var res = $5yAai.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $jx7mO.nextTick($06ad5426d0ce4413$var$updateReadableListening, this);
    return res;
};
function $06ad5426d0ce4413$var$updateReadableListening(self) {
    var state = self._readableState;
    state.readableListening = self.listenerCount("readable") > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
    else if (self.listenerCount("data") > 0) self.resume();
}
function $06ad5426d0ce4413$var$nReadingNextTick(self) {
    $06ad5426d0ce4413$var$debug("readable nexttick read 0");
    self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
$06ad5426d0ce4413$var$Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        $06ad5426d0ce4413$var$debug("resume"); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        $06ad5426d0ce4413$var$resume(this, state);
    }
    state.paused = false;
    return this;
};
function $06ad5426d0ce4413$var$resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        $jx7mO.nextTick($06ad5426d0ce4413$var$resume_, stream, state);
    }
}
function $06ad5426d0ce4413$var$resume_(stream, state) {
    $06ad5426d0ce4413$var$debug("resume", state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit("resume");
    $06ad5426d0ce4413$var$flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
$06ad5426d0ce4413$var$Readable.prototype.pause = function() {
    $06ad5426d0ce4413$var$debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        $06ad5426d0ce4413$var$debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
};
function $06ad5426d0ce4413$var$flow(stream) {
    var state = stream._readableState;
    $06ad5426d0ce4413$var$debug("flow", state.flowing);
    while(state.flowing && stream.read() !== null);
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
$06ad5426d0ce4413$var$Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on("end", function() {
        $06ad5426d0ce4413$var$debug("wrapped end");
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on("data", function(chunk) {
        $06ad5426d0ce4413$var$debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === "function") this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
     // proxy certain important events.
    for(var n = 0; n < $06ad5426d0ce4413$var$kProxyEvents.length; n++)stream.on($06ad5426d0ce4413$var$kProxyEvents[n], this.emit.bind(this, $06ad5426d0ce4413$var$kProxyEvents[n]));
     // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        $06ad5426d0ce4413$var$debug("wrapped _read", n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};

if (typeof Symbol === "function") $06ad5426d0ce4413$var$Readable.prototype[Symbol.asyncIterator] = function() {
    if ($06ad5426d0ce4413$var$createReadableStreamAsyncIterator === undefined) $06ad5426d0ce4413$var$createReadableStreamAsyncIterator = (parcelRequire("eIH2v"));
    return $06ad5426d0ce4413$var$createReadableStreamAsyncIterator(this);
};
Object.defineProperty($06ad5426d0ce4413$var$Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty($06ad5426d0ce4413$var$Readable.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty($06ad5426d0ce4413$var$Readable.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
}); // exposed for testing purposes only.
$06ad5426d0ce4413$var$Readable._fromList = $06ad5426d0ce4413$var$fromList;
Object.defineProperty($06ad5426d0ce4413$var$Readable.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $06ad5426d0ce4413$var$fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function $06ad5426d0ce4413$var$endReadable(stream) {
    var state = stream._readableState;
    $06ad5426d0ce4413$var$debug("endReadable", state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        $jx7mO.nextTick($06ad5426d0ce4413$var$endReadableNT, state, stream);
    }
}
function $06ad5426d0ce4413$var$endReadableNT(state, stream) {
    $06ad5426d0ce4413$var$debug("endReadableNT", state.endEmitted, state.length); // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}

if (typeof Symbol === "function") $06ad5426d0ce4413$var$Readable.from = function(iterable, opts) {
    if ($06ad5426d0ce4413$var$from === undefined) $06ad5426d0ce4413$var$from = (parcelRequire("kUoFE"));
    return $06ad5426d0ce4413$var$from($06ad5426d0ce4413$var$Readable, iterable, opts);
};
function $06ad5426d0ce4413$var$indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

});
parcelRequire.register("5yAai", function(module, exports) {

module.exports = (parcelRequire("eCV8S")).EventEmitter;

});

parcelRequire.register("dcpIU", function(module, exports) {
"use strict";
function $99c05976f060a0c9$var$ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function $99c05976f060a0c9$var$_objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) $99c05976f060a0c9$var$ownKeys(Object(source), true).forEach(function(key) {
            $99c05976f060a0c9$var$_defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else $99c05976f060a0c9$var$ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function $99c05976f060a0c9$var$_defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $99c05976f060a0c9$var$_classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function $99c05976f060a0c9$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function $99c05976f060a0c9$var$_createClass(Constructor, protoProps, staticProps) {
    if (protoProps) $99c05976f060a0c9$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $99c05976f060a0c9$var$_defineProperties(Constructor, staticProps);
    return Constructor;
}

var $fLrIr = parcelRequire("fLrIr");
var $99c05976f060a0c9$var$Buffer = $fLrIr.Buffer;

var $XDU19 = parcelRequire("XDU19");
var $99c05976f060a0c9$var$inspect = $XDU19.inspect;
var $99c05976f060a0c9$var$custom = $99c05976f060a0c9$var$inspect && $99c05976f060a0c9$var$inspect.custom || "inspect";
function $99c05976f060a0c9$var$copyBuffer(src, target, offset) {
    $99c05976f060a0c9$var$Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ function() {
    function BufferList() {
        $99c05976f060a0c9$var$_classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    $99c05976f060a0c9$var$_createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return "";
                var p = this.head;
                var ret = "" + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return $99c05976f060a0c9$var$Buffer.alloc(0);
                var ret = $99c05976f060a0c9$var$Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    $99c05976f060a0c9$var$copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            } // Consumes a specified amount of bytes or characters from the buffered data.
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            } // Consumes a specified amount of characters from the buffered data.
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Consumes a specified amount of bytes from the buffered data.
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = $99c05976f060a0c9$var$Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Make sure the linked list only shows the minimal necessary information.
        },
        {
            key: $99c05976f060a0c9$var$custom,
            value: function value(_, options) {
                return $99c05976f060a0c9$var$inspect(this, $99c05976f060a0c9$var$_objectSpread({}, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
}();

});

parcelRequire.register("780Wv", function(module, exports) {

var $jx7mO = parcelRequire("jx7mO");
"use strict"; // undocumented cb() API, needed for core, not for public API
function $530a02f54c40757d$var$destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err);
        else if (err) {
            if (!this._writableState) $jx7mO.nextTick($530a02f54c40757d$var$emitErrorNT, this, err);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                $jx7mO.nextTick($530a02f54c40757d$var$emitErrorNT, this, err);
            }
        }
        return this;
    } // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
     // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) $jx7mO.nextTick($530a02f54c40757d$var$emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                $jx7mO.nextTick($530a02f54c40757d$var$emitErrorAndCloseNT, _this, err);
            } else $jx7mO.nextTick($530a02f54c40757d$var$emitCloseNT, _this);
        } else if (cb) {
            $jx7mO.nextTick($530a02f54c40757d$var$emitCloseNT, _this);
            cb(err);
        } else $jx7mO.nextTick($530a02f54c40757d$var$emitCloseNT, _this);
    });
    return this;
}
function $530a02f54c40757d$var$emitErrorAndCloseNT(self, err) {
    $530a02f54c40757d$var$emitErrorNT(self, err);
    $530a02f54c40757d$var$emitCloseNT(self);
}
function $530a02f54c40757d$var$emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit("close");
}
function $530a02f54c40757d$var$undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function $530a02f54c40757d$var$emitErrorNT(self, err) {
    self.emit("error", err);
}
function $530a02f54c40757d$var$errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit("error", err);
}
module.exports = {
    destroy: $530a02f54c40757d$var$destroy,
    undestroy: $530a02f54c40757d$var$undestroy,
    errorOrDestroy: $530a02f54c40757d$var$errorOrDestroy
};

});

parcelRequire.register("9W2TY", function(module, exports) {
"use strict";

var $fibbC = parcelRequire("fibbC");
var $73bbc8147ae7acbb$var$ERR_INVALID_OPT_VALUE = $fibbC.codes.ERR_INVALID_OPT_VALUE;
function $73bbc8147ae7acbb$var$highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function $73bbc8147ae7acbb$var$getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = $73bbc8147ae7acbb$var$highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark";
            throw new $73bbc8147ae7acbb$var$ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    } // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: $73bbc8147ae7acbb$var$getHighWaterMark
};

});
parcelRequire.register("fibbC", function(module, exports) {

$parcel$export(module.exports, "codes", () => $b22136d489ce47e7$export$e45cb6485273080e, (v) => $b22136d489ce47e7$export$e45cb6485273080e = v);
var $b22136d489ce47e7$export$e45cb6485273080e;
"use strict";
function $b22136d489ce47e7$var$_inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var $b22136d489ce47e7$var$codes = {};
function $b22136d489ce47e7$var$createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError = /*#__PURE__*/ function(_Base) {
        $b22136d489ce47e7$var$_inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code;
    $b22136d489ce47e7$var$codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function $b22136d489ce47e7$var$oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function $b22136d489ce47e7$var$startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function $b22136d489ce47e7$var$endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function $b22136d489ce47e7$var$includes(str, search, start) {
    if (typeof start !== "number") start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
$b22136d489ce47e7$var$createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
$b22136d489ce47e7$var$createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === "string" && $b22136d489ce47e7$var$startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
    } else determiner = "must be";
    var msg;
    if ($b22136d489ce47e7$var$endsWith(name, " argument")) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat($b22136d489ce47e7$var$oneOf(expected, "type"));
    else {
        var type = $b22136d489ce47e7$var$includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat($b22136d489ce47e7$var$oneOf(expected, "type"));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
$b22136d489ce47e7$var$createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
$b22136d489ce47e7$var$createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
    return "The " + name + " method is not implemented";
});
$b22136d489ce47e7$var$createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
$b22136d489ce47e7$var$createErrorType("ERR_STREAM_DESTROYED", function(name) {
    return "Cannot call " + name + " after a stream was destroyed";
});
$b22136d489ce47e7$var$createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
$b22136d489ce47e7$var$createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
$b22136d489ce47e7$var$createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
$b22136d489ce47e7$var$createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
$b22136d489ce47e7$var$createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
}, TypeError);
$b22136d489ce47e7$var$createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
$b22136d489ce47e7$export$e45cb6485273080e = $b22136d489ce47e7$var$codes;

});


parcelRequire.register("6xT7g", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

var $jx7mO = parcelRequire("jx7mO");
"use strict";
/*<replacement>*/ var $4c4094134c3daad6$var$objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = $4c4094134c3daad6$var$Duplex;

var $zxAUR = parcelRequire("zxAUR");

var $3DR1u = parcelRequire("3DR1u");

(parcelRequire("6QnvD"))($4c4094134c3daad6$var$Duplex, $zxAUR);
// Allow the keys array to be GC'ed.
var $4c4094134c3daad6$var$keys = $4c4094134c3daad6$var$objectKeys($3DR1u.prototype);
for(var $4c4094134c3daad6$var$v = 0; $4c4094134c3daad6$var$v < $4c4094134c3daad6$var$keys.length; $4c4094134c3daad6$var$v++){
    var $4c4094134c3daad6$var$method = $4c4094134c3daad6$var$keys[$4c4094134c3daad6$var$v];
    if (!$4c4094134c3daad6$var$Duplex.prototype[$4c4094134c3daad6$var$method]) $4c4094134c3daad6$var$Duplex.prototype[$4c4094134c3daad6$var$method] = $3DR1u.prototype[$4c4094134c3daad6$var$method];
}
function $4c4094134c3daad6$var$Duplex(options) {
    if (!(this instanceof $4c4094134c3daad6$var$Duplex)) return new $4c4094134c3daad6$var$Duplex(options);
    $zxAUR.call(this, options);
    $3DR1u.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", $4c4094134c3daad6$var$onend);
        }
    }
}
Object.defineProperty($4c4094134c3daad6$var$Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty($4c4094134c3daad6$var$Duplex.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty($4c4094134c3daad6$var$Duplex.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
}); // the no-half-open enforcer
function $4c4094134c3daad6$var$onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.
    $jx7mO.nextTick($4c4094134c3daad6$var$onEndNT, this);
}
function $4c4094134c3daad6$var$onEndNT(self) {
    self.end();
}
Object.defineProperty($4c4094134c3daad6$var$Duplex.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

});
parcelRequire.register("3DR1u", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

var $jx7mO = parcelRequire("jx7mO");
"use strict";
module.exports = $2a6e24e2bed8a7f0$var$Writable;
/* <replacement> */ function $2a6e24e2bed8a7f0$var$WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream
function $2a6e24e2bed8a7f0$var$CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        $2a6e24e2bed8a7f0$var$onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var $2a6e24e2bed8a7f0$var$Duplex;
/*</replacement>*/ $2a6e24e2bed8a7f0$var$Writable.WritableState = $2a6e24e2bed8a7f0$var$WritableState;

/*<replacement>*/ var $2a6e24e2bed8a7f0$var$internalUtil = {
    deprecate: (parcelRequire("e1ZXC"))
};

var $5yAai = parcelRequire("5yAai");

var $fLrIr = parcelRequire("fLrIr");
var $2a6e24e2bed8a7f0$require$Buffer = $fLrIr.Buffer;
var $2a6e24e2bed8a7f0$var$OurUint8Array = $parcel$global.Uint8Array || function() {};
function $2a6e24e2bed8a7f0$var$_uint8ArrayToBuffer(chunk) {
    return $2a6e24e2bed8a7f0$require$Buffer.from(chunk);
}
function $2a6e24e2bed8a7f0$var$_isUint8Array(obj) {
    return $2a6e24e2bed8a7f0$require$Buffer.isBuffer(obj) || obj instanceof $2a6e24e2bed8a7f0$var$OurUint8Array;
}

var $780Wv = parcelRequire("780Wv");

var $9W2TY = parcelRequire("9W2TY");
var $2a6e24e2bed8a7f0$var$getHighWaterMark = $9W2TY.getHighWaterMark;

var $fibbC = parcelRequire("fibbC");
var $2a6e24e2bed8a7f0$require$_require$codes = $fibbC.codes;
var $2a6e24e2bed8a7f0$var$ERR_INVALID_ARG_TYPE = $2a6e24e2bed8a7f0$require$_require$codes.ERR_INVALID_ARG_TYPE, $2a6e24e2bed8a7f0$var$ERR_METHOD_NOT_IMPLEMENTED = $2a6e24e2bed8a7f0$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $2a6e24e2bed8a7f0$var$ERR_MULTIPLE_CALLBACK = $2a6e24e2bed8a7f0$require$_require$codes.ERR_MULTIPLE_CALLBACK, $2a6e24e2bed8a7f0$var$ERR_STREAM_CANNOT_PIPE = $2a6e24e2bed8a7f0$require$_require$codes.ERR_STREAM_CANNOT_PIPE, $2a6e24e2bed8a7f0$var$ERR_STREAM_DESTROYED = $2a6e24e2bed8a7f0$require$_require$codes.ERR_STREAM_DESTROYED, $2a6e24e2bed8a7f0$var$ERR_STREAM_NULL_VALUES = $2a6e24e2bed8a7f0$require$_require$codes.ERR_STREAM_NULL_VALUES, $2a6e24e2bed8a7f0$var$ERR_STREAM_WRITE_AFTER_END = $2a6e24e2bed8a7f0$require$_require$codes.ERR_STREAM_WRITE_AFTER_END, $2a6e24e2bed8a7f0$var$ERR_UNKNOWN_ENCODING = $2a6e24e2bed8a7f0$require$_require$codes.ERR_UNKNOWN_ENCODING;
var $2a6e24e2bed8a7f0$var$errorOrDestroy = $780Wv.errorOrDestroy;

(parcelRequire("6QnvD"))($2a6e24e2bed8a7f0$var$Writable, $5yAai);
function $2a6e24e2bed8a7f0$var$nop() {}

function $2a6e24e2bed8a7f0$var$WritableState(options, stream, isDuplex) {
    $2a6e24e2bed8a7f0$var$Duplex = $2a6e24e2bed8a7f0$var$Duplex || (parcelRequire("6xT7g"));
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof $2a6e24e2bed8a7f0$var$Duplex; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = $2a6e24e2bed8a7f0$var$getHighWaterMark(this, options, "writableHighWaterMark", isDuplex); // if _final has been called
    this.finalCalled = false; // drain event flag.
    this.needDrain = false; // at the start of calling end()
    this.ending = false; // when end() has been called, and returned
    this.ended = false; // when 'finish' is emitted
    this.finished = false; // has it been destroyed
    this.destroyed = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8"; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0; // a flag to see when we're in the middle of a write.
    this.writing = false; // when true all writes will be buffered until .uncork() call
    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        $2a6e24e2bed8a7f0$var$onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null; // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false; // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy; // count buffered requests
    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new $2a6e24e2bed8a7f0$var$CorkedRequest(this);
}
$2a6e24e2bed8a7f0$var$WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty($2a6e24e2bed8a7f0$var$WritableState.prototype, "buffer", {
            get: $2a6e24e2bed8a7f0$var$internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
    } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var $2a6e24e2bed8a7f0$var$realHasInstance;
if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    $2a6e24e2bed8a7f0$var$realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty($2a6e24e2bed8a7f0$var$Writable, Symbol.hasInstance, {
        value: function value(object) {
            if ($2a6e24e2bed8a7f0$var$realHasInstance.call(this, object)) return true;
            if (this !== $2a6e24e2bed8a7f0$var$Writable) return false;
            return object && object._writableState instanceof $2a6e24e2bed8a7f0$var$WritableState;
        }
    });
} else $2a6e24e2bed8a7f0$var$realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};

function $2a6e24e2bed8a7f0$var$Writable(options) {
    $2a6e24e2bed8a7f0$var$Duplex = $2a6e24e2bed8a7f0$var$Duplex || (parcelRequire("6xT7g")); // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $2a6e24e2bed8a7f0$var$Duplex;
    if (!isDuplex && !$2a6e24e2bed8a7f0$var$realHasInstance.call($2a6e24e2bed8a7f0$var$Writable, this)) return new $2a6e24e2bed8a7f0$var$Writable(options);
    this._writableState = new $2a6e24e2bed8a7f0$var$WritableState(options, this, isDuplex); // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options.final === "function") this._final = options.final;
    }
    $5yAai.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.
$2a6e24e2bed8a7f0$var$Writable.prototype.pipe = function() {
    $2a6e24e2bed8a7f0$var$errorOrDestroy(this, new $2a6e24e2bed8a7f0$var$ERR_STREAM_CANNOT_PIPE());
};
function $2a6e24e2bed8a7f0$var$writeAfterEnd(stream, cb) {
    var er = new $2a6e24e2bed8a7f0$var$ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
    $2a6e24e2bed8a7f0$var$errorOrDestroy(stream, er);
    $jx7mO.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function $2a6e24e2bed8a7f0$var$validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new $2a6e24e2bed8a7f0$var$ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== "string" && !state.objectMode) er = new $2a6e24e2bed8a7f0$var$ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer"
    ], chunk);
    if (er) {
        $2a6e24e2bed8a7f0$var$errorOrDestroy(stream, er);
        $jx7mO.nextTick(cb, er);
        return false;
    }
    return true;
}
$2a6e24e2bed8a7f0$var$Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && $2a6e24e2bed8a7f0$var$_isUint8Array(chunk);
    if (isBuf && !$2a6e24e2bed8a7f0$require$Buffer.isBuffer(chunk)) chunk = $2a6e24e2bed8a7f0$var$_uint8ArrayToBuffer(chunk);
    if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = "buffer";
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== "function") cb = $2a6e24e2bed8a7f0$var$nop;
    if (state.ending) $2a6e24e2bed8a7f0$var$writeAfterEnd(this, cb);
    else if (isBuf || $2a6e24e2bed8a7f0$var$validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = $2a6e24e2bed8a7f0$var$writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
$2a6e24e2bed8a7f0$var$Writable.prototype.cork = function() {
    this._writableState.corked++;
};
$2a6e24e2bed8a7f0$var$Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) $2a6e24e2bed8a7f0$var$clearBuffer(this, state);
    }
};
$2a6e24e2bed8a7f0$var$Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === "string") encoding = encoding.toLowerCase();
    if (!([
        "hex",
        "utf8",
        "utf-8",
        "ascii",
        "binary",
        "base64",
        "ucs2",
        "ucs-2",
        "utf16le",
        "utf-16le",
        "raw"
    ].indexOf((encoding + "").toLowerCase()) > -1)) throw new $2a6e24e2bed8a7f0$var$ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty($2a6e24e2bed8a7f0$var$Writable.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function $2a6e24e2bed8a7f0$var$decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") chunk = $2a6e24e2bed8a7f0$require$Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty($2a6e24e2bed8a7f0$var$Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function $2a6e24e2bed8a7f0$var$writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = $2a6e24e2bed8a7f0$var$decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else $2a6e24e2bed8a7f0$var$doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function $2a6e24e2bed8a7f0$var$doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new $2a6e24e2bed8a7f0$var$ERR_STREAM_DESTROYED("write"));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function $2a6e24e2bed8a7f0$var$onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        $jx7mO.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error
        $jx7mO.nextTick($2a6e24e2bed8a7f0$var$finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        $2a6e24e2bed8a7f0$var$errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        $2a6e24e2bed8a7f0$var$errorOrDestroy(stream, er); // this can emit finish, but finish must
        // always follow error
        $2a6e24e2bed8a7f0$var$finishMaybe(stream, state);
    }
}
function $2a6e24e2bed8a7f0$var$onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function $2a6e24e2bed8a7f0$var$onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== "function") throw new $2a6e24e2bed8a7f0$var$ERR_MULTIPLE_CALLBACK();
    $2a6e24e2bed8a7f0$var$onwriteStateUpdate(state);
    if (er) $2a6e24e2bed8a7f0$var$onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = $2a6e24e2bed8a7f0$var$needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) $2a6e24e2bed8a7f0$var$clearBuffer(stream, state);
        if (sync) $jx7mO.nextTick($2a6e24e2bed8a7f0$var$afterWrite, stream, state, finished, cb);
        else $2a6e24e2bed8a7f0$var$afterWrite(stream, state, finished, cb);
    }
}
function $2a6e24e2bed8a7f0$var$afterWrite(stream, state, finished, cb) {
    if (!finished) $2a6e24e2bed8a7f0$var$onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    $2a6e24e2bed8a7f0$var$finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function $2a6e24e2bed8a7f0$var$onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
    }
} // if there's something in the buffer waiting, then process it
function $2a6e24e2bed8a7f0$var$clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        $2a6e24e2bed8a7f0$var$doWrite(stream, state, true, state.length, buffer, "", holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new $2a6e24e2bed8a7f0$var$CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            $2a6e24e2bed8a7f0$var$doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
$2a6e24e2bed8a7f0$var$Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new $2a6e24e2bed8a7f0$var$ERR_METHOD_NOT_IMPLEMENTED("_write()"));
};
$2a6e24e2bed8a7f0$var$Writable.prototype._writev = null;
$2a6e24e2bed8a7f0$var$Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    } // ignore unnecessary end() calls.
    if (!state.ending) $2a6e24e2bed8a7f0$var$endWritable(this, state, cb);
    return this;
};
Object.defineProperty($2a6e24e2bed8a7f0$var$Writable.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function $2a6e24e2bed8a7f0$var$needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function $2a6e24e2bed8a7f0$var$callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) $2a6e24e2bed8a7f0$var$errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit("prefinish");
        $2a6e24e2bed8a7f0$var$finishMaybe(stream, state);
    });
}
function $2a6e24e2bed8a7f0$var$prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            $jx7mO.nextTick($2a6e24e2bed8a7f0$var$callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit("prefinish");
        }
    }
}
function $2a6e24e2bed8a7f0$var$finishMaybe(stream, state) {
    var need = $2a6e24e2bed8a7f0$var$needFinish(state);
    if (need) {
        $2a6e24e2bed8a7f0$var$prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function $2a6e24e2bed8a7f0$var$endWritable(stream, state, cb) {
    state.ending = true;
    $2a6e24e2bed8a7f0$var$finishMaybe(stream, state);
    if (cb) {
        if (state.finished) $jx7mO.nextTick(cb);
        else stream.once("finish", cb);
    }
    state.ended = true;
    stream.writable = false;
}
function $2a6e24e2bed8a7f0$var$onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    } // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty($2a6e24e2bed8a7f0$var$Writable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
$2a6e24e2bed8a7f0$var$Writable.prototype.destroy = $780Wv.destroy;
$2a6e24e2bed8a7f0$var$Writable.prototype._undestroy = $780Wv.undestroy;
$2a6e24e2bed8a7f0$var$Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

});
parcelRequire.register("e1ZXC", function(module, exports) {
/**
 * Module exports.
 */ module.exports = $a37138c97200e7ce$var$deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */ function $a37138c97200e7ce$var$deprecate(fn, msg) {
    if ($a37138c97200e7ce$var$config("noDeprecation")) return fn;
    var warned = false;
    function deprecated() {
        if (!warned) {
            if ($a37138c97200e7ce$var$config("throwDeprecation")) throw new Error(msg);
            else if ($a37138c97200e7ce$var$config("traceDeprecation")) console.trace(msg);
            else console.warn(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */ function $a37138c97200e7ce$var$config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
        if (!$parcel$global.localStorage) return false;
    } catch (_) {
        return false;
    }
    var val = $parcel$global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === "true";
}

});



parcelRequire.register("3ZG4s", function(module, exports) {

$parcel$export(module.exports, "StringDecoder", () => $2e87b40625ec3b10$export$63a7aa211a91ed69, (v) => $2e87b40625ec3b10$export$63a7aa211a91ed69 = v);
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
var $2e87b40625ec3b10$export$63a7aa211a91ed69;
"use strict";

var $4bAgt = parcelRequire("4bAgt");
var $2e87b40625ec3b10$require$Buffer = $4bAgt.Buffer;
/*</replacement>*/ var $2e87b40625ec3b10$var$isEncoding = $2e87b40625ec3b10$require$Buffer.isEncoding || function(encoding) {
    encoding = "" + encoding;
    switch(encoding && encoding.toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
            return true;
        default:
            return false;
    }
};
function $2e87b40625ec3b10$var$_normalizeEncoding(enc) {
    if (!enc) return "utf8";
    var retried;
    while(true)switch(enc){
        case "utf8":
        case "utf-8":
            return "utf8";
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return "utf16le";
        case "latin1":
        case "binary":
            return "latin1";
        case "base64":
        case "ascii":
        case "hex":
            return enc;
        default:
            if (retried) return; // undefined
            enc = ("" + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function $2e87b40625ec3b10$var$normalizeEncoding(enc) {
    var nenc = $2e87b40625ec3b10$var$_normalizeEncoding(enc);
    if (typeof nenc !== "string" && ($2e87b40625ec3b10$require$Buffer.isEncoding === $2e87b40625ec3b10$var$isEncoding || !$2e87b40625ec3b10$var$isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
    return nenc || enc;
}
$2e87b40625ec3b10$export$63a7aa211a91ed69 = $2e87b40625ec3b10$var$StringDecoder;
function $2e87b40625ec3b10$var$StringDecoder(encoding) {
    this.encoding = $2e87b40625ec3b10$var$normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case "utf16le":
            this.text = $2e87b40625ec3b10$var$utf16Text;
            this.end = $2e87b40625ec3b10$var$utf16End;
            nb = 4;
            break;
        case "utf8":
            this.fillLast = $2e87b40625ec3b10$var$utf8FillLast;
            nb = 4;
            break;
        case "base64":
            this.text = $2e87b40625ec3b10$var$base64Text;
            this.end = $2e87b40625ec3b10$var$base64End;
            nb = 3;
            break;
        default:
            this.write = $2e87b40625ec3b10$var$simpleWrite;
            this.end = $2e87b40625ec3b10$var$simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = $2e87b40625ec3b10$require$Buffer.allocUnsafe(nb);
}
$2e87b40625ec3b10$var$StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return "";
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return "";
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || "";
};
$2e87b40625ec3b10$var$StringDecoder.prototype.end = $2e87b40625ec3b10$var$utf8End;
// Returns only complete characters in a Buffer
$2e87b40625ec3b10$var$StringDecoder.prototype.text = $2e87b40625ec3b10$var$utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
$2e87b40625ec3b10$var$StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function $2e87b40625ec3b10$var$utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;
    else if (byte >> 5 === 0x06) return 2;
    else if (byte >> 4 === 0x0E) return 3;
    else if (byte >> 3 === 0x1E) return 4;
    return byte >> 6 === 0x02 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function $2e87b40625ec3b10$var$utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = $2e87b40625ec3b10$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = $2e87b40625ec3b10$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = $2e87b40625ec3b10$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function $2e87b40625ec3b10$var$utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return "�";
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
            self.lastNeed = 1;
            return "�";
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 0xC0) !== 0x80) {
                self.lastNeed = 2;
                return "�";
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function $2e87b40625ec3b10$var$utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = $2e87b40625ec3b10$var$utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function $2e87b40625ec3b10$var$utf8Text(buf, i) {
    var total = $2e87b40625ec3b10$var$utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString("utf8", i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString("utf8", i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function $2e87b40625ec3b10$var$utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + "�";
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function $2e87b40625ec3b10$var$utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 0xD800 && c <= 0xDBFF) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString("utf16le", i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function $2e87b40625ec3b10$var$utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
    }
    return r;
}
function $2e87b40625ec3b10$var$base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString("base64", i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString("base64", i, buf.length - n);
}
function $2e87b40625ec3b10$var$base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function $2e87b40625ec3b10$var$simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function $2e87b40625ec3b10$var$simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : "";
}

});
parcelRequire.register("4bAgt", function(module, exports) {
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ 
var $fLrIr = parcelRequire("fLrIr");
var $30c451e8d3c9ea7b$var$Buffer = $fLrIr.Buffer;
// alternative to using Object.keys for old browsers
function $30c451e8d3c9ea7b$var$copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if ($30c451e8d3c9ea7b$var$Buffer.from && $30c451e8d3c9ea7b$var$Buffer.alloc && $30c451e8d3c9ea7b$var$Buffer.allocUnsafe && $30c451e8d3c9ea7b$var$Buffer.allocUnsafeSlow) module.exports = $fLrIr;
else {
    // Copy properties from require('buffer')
    $30c451e8d3c9ea7b$var$copyProps($fLrIr, module.exports);
    module.exports.Buffer = $30c451e8d3c9ea7b$var$SafeBuffer;
}
function $30c451e8d3c9ea7b$var$SafeBuffer(arg, encodingOrOffset, length) {
    return $30c451e8d3c9ea7b$var$Buffer(arg, encodingOrOffset, length);
}
$30c451e8d3c9ea7b$var$SafeBuffer.prototype = Object.create($30c451e8d3c9ea7b$var$Buffer.prototype);
// Copy static methods from Buffer
$30c451e8d3c9ea7b$var$copyProps($30c451e8d3c9ea7b$var$Buffer, $30c451e8d3c9ea7b$var$SafeBuffer);
$30c451e8d3c9ea7b$var$SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") throw new TypeError("Argument must not be a number");
    return $30c451e8d3c9ea7b$var$Buffer(arg, encodingOrOffset, length);
};
$30c451e8d3c9ea7b$var$SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    var buf = $30c451e8d3c9ea7b$var$Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === "string") buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
$30c451e8d3c9ea7b$var$SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return $30c451e8d3c9ea7b$var$Buffer(size);
};
$30c451e8d3c9ea7b$var$SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return $fLrIr.SlowBuffer(size);
};

});


parcelRequire.register("eIH2v", function(module, exports) {

var $jx7mO = parcelRequire("jx7mO");
"use strict";
var $ab768f818c93fb7b$var$_Object$setPrototypeO;
function $ab768f818c93fb7b$var$_defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}

var $7S1GK = parcelRequire("7S1GK");
var $ab768f818c93fb7b$var$kLastResolve = Symbol("lastResolve");
var $ab768f818c93fb7b$var$kLastReject = Symbol("lastReject");
var $ab768f818c93fb7b$var$kError = Symbol("error");
var $ab768f818c93fb7b$var$kEnded = Symbol("ended");
var $ab768f818c93fb7b$var$kLastPromise = Symbol("lastPromise");
var $ab768f818c93fb7b$var$kHandlePromise = Symbol("handlePromise");
var $ab768f818c93fb7b$var$kStream = Symbol("stream");
function $ab768f818c93fb7b$var$createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function $ab768f818c93fb7b$var$readAndResolve(iter) {
    var resolve = iter[$ab768f818c93fb7b$var$kLastResolve];
    if (resolve !== null) {
        var data = iter[$ab768f818c93fb7b$var$kStream].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[$ab768f818c93fb7b$var$kLastPromise] = null;
            iter[$ab768f818c93fb7b$var$kLastResolve] = null;
            iter[$ab768f818c93fb7b$var$kLastReject] = null;
            resolve($ab768f818c93fb7b$var$createIterResult(data, false));
        }
    }
}
function $ab768f818c93fb7b$var$onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    $jx7mO.nextTick($ab768f818c93fb7b$var$readAndResolve, iter);
}
function $ab768f818c93fb7b$var$wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[$ab768f818c93fb7b$var$kEnded]) {
                resolve($ab768f818c93fb7b$var$createIterResult(undefined, true));
                return;
            }
            iter[$ab768f818c93fb7b$var$kHandlePromise](resolve, reject);
        }, reject);
    };
}
var $ab768f818c93fb7b$var$AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
var $ab768f818c93fb7b$var$ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf(($ab768f818c93fb7b$var$_Object$setPrototypeO = {
    get stream () {
        return this[$ab768f818c93fb7b$var$kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[$ab768f818c93fb7b$var$kError];
        if (error !== null) return Promise.reject(error);
        if (this[$ab768f818c93fb7b$var$kEnded]) return Promise.resolve($ab768f818c93fb7b$var$createIterResult(undefined, true));
        if (this[$ab768f818c93fb7b$var$kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            $jx7mO.nextTick(function() {
                if (_this[$ab768f818c93fb7b$var$kError]) reject(_this[$ab768f818c93fb7b$var$kError]);
                else resolve($ab768f818c93fb7b$var$createIterResult(undefined, true));
            });
        });
         // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[$ab768f818c93fb7b$var$kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise($ab768f818c93fb7b$var$wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[$ab768f818c93fb7b$var$kStream].read();
            if (data !== null) return Promise.resolve($ab768f818c93fb7b$var$createIterResult(data, false));
            promise = new Promise(this[$ab768f818c93fb7b$var$kHandlePromise]);
        }
        this[$ab768f818c93fb7b$var$kLastPromise] = promise;
        return promise;
    }
}, $ab768f818c93fb7b$var$_defineProperty($ab768f818c93fb7b$var$_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), $ab768f818c93fb7b$var$_defineProperty($ab768f818c93fb7b$var$_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[$ab768f818c93fb7b$var$kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve($ab768f818c93fb7b$var$createIterResult(undefined, true));
        });
    });
}), $ab768f818c93fb7b$var$_Object$setPrototypeO), $ab768f818c93fb7b$var$AsyncIteratorPrototype);
var $ab768f818c93fb7b$var$createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create($ab768f818c93fb7b$var$ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, $ab768f818c93fb7b$var$_defineProperty(_Object$create, $ab768f818c93fb7b$var$kStream, {
        value: stream,
        writable: true
    }), $ab768f818c93fb7b$var$_defineProperty(_Object$create, $ab768f818c93fb7b$var$kLastResolve, {
        value: null,
        writable: true
    }), $ab768f818c93fb7b$var$_defineProperty(_Object$create, $ab768f818c93fb7b$var$kLastReject, {
        value: null,
        writable: true
    }), $ab768f818c93fb7b$var$_defineProperty(_Object$create, $ab768f818c93fb7b$var$kError, {
        value: null,
        writable: true
    }), $ab768f818c93fb7b$var$_defineProperty(_Object$create, $ab768f818c93fb7b$var$kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), $ab768f818c93fb7b$var$_defineProperty(_Object$create, $ab768f818c93fb7b$var$kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[$ab768f818c93fb7b$var$kStream].read();
            if (data) {
                iterator[$ab768f818c93fb7b$var$kLastPromise] = null;
                iterator[$ab768f818c93fb7b$var$kLastResolve] = null;
                iterator[$ab768f818c93fb7b$var$kLastReject] = null;
                resolve($ab768f818c93fb7b$var$createIterResult(data, false));
            } else {
                iterator[$ab768f818c93fb7b$var$kLastResolve] = resolve;
                iterator[$ab768f818c93fb7b$var$kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[$ab768f818c93fb7b$var$kLastPromise] = null;
    $7S1GK(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[$ab768f818c93fb7b$var$kLastReject]; // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[$ab768f818c93fb7b$var$kLastPromise] = null;
                iterator[$ab768f818c93fb7b$var$kLastResolve] = null;
                iterator[$ab768f818c93fb7b$var$kLastReject] = null;
                reject(err);
            }
            iterator[$ab768f818c93fb7b$var$kError] = err;
            return;
        }
        var resolve = iterator[$ab768f818c93fb7b$var$kLastResolve];
        if (resolve !== null) {
            iterator[$ab768f818c93fb7b$var$kLastPromise] = null;
            iterator[$ab768f818c93fb7b$var$kLastResolve] = null;
            iterator[$ab768f818c93fb7b$var$kLastReject] = null;
            resolve($ab768f818c93fb7b$var$createIterResult(undefined, true));
        }
        iterator[$ab768f818c93fb7b$var$kEnded] = true;
    });
    stream.on("readable", $ab768f818c93fb7b$var$onReadable.bind(null, iterator));
    return iterator;
};
module.exports = $ab768f818c93fb7b$var$createReadableStreamAsyncIterator;

});
parcelRequire.register("7S1GK", function(module, exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";

var $fibbC = parcelRequire("fibbC");
var $5baee2d652b0dd94$var$ERR_STREAM_PREMATURE_CLOSE = $fibbC.codes.ERR_STREAM_PREMATURE_CLOSE;
function $5baee2d652b0dd94$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function $5baee2d652b0dd94$var$noop() {}
function $5baee2d652b0dd94$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function $5baee2d652b0dd94$var$eos(stream, opts, callback) {
    if (typeof opts === "function") return $5baee2d652b0dd94$var$eos(stream, null, opts);
    if (!opts) opts = {};
    callback = $5baee2d652b0dd94$var$once(callback || $5baee2d652b0dd94$var$noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new $5baee2d652b0dd94$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new $5baee2d652b0dd94$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on("finish", onfinish);
    };
    if ($5baee2d652b0dd94$var$isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req) onrequest();
        else stream.on("request", onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
    }
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false) stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req) stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
    };
}
module.exports = $5baee2d652b0dd94$var$eos;

});


parcelRequire.register("kUoFE", function(module, exports) {
module.exports = function() {
    throw new Error("Readable.from is not available in the browser");
};

});


parcelRequire.register("aaOvB", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
"use strict";
module.exports = $76820484b86bdf47$var$Transform;

var $fibbC = parcelRequire("fibbC");
var $76820484b86bdf47$require$_require$codes = $fibbC.codes;
var $76820484b86bdf47$var$ERR_METHOD_NOT_IMPLEMENTED = $76820484b86bdf47$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $76820484b86bdf47$var$ERR_MULTIPLE_CALLBACK = $76820484b86bdf47$require$_require$codes.ERR_MULTIPLE_CALLBACK, $76820484b86bdf47$var$ERR_TRANSFORM_ALREADY_TRANSFORMING = $76820484b86bdf47$require$_require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, $76820484b86bdf47$var$ERR_TRANSFORM_WITH_LENGTH_0 = $76820484b86bdf47$require$_require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var $6xT7g = parcelRequire("6xT7g");

(parcelRequire("6QnvD"))($76820484b86bdf47$var$Transform, $6xT7g);
function $76820484b86bdf47$var$afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit("error", new $76820484b86bdf47$var$ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function $76820484b86bdf47$var$Transform(options) {
    if (!(this instanceof $76820484b86bdf47$var$Transform)) return new $76820484b86bdf47$var$Transform(options);
    $6xT7g.call(this, options);
    this._transformState = {
        afterTransform: $76820484b86bdf47$var$afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    }; // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
    } // When the writable side finishes, then flush out anything remaining.
    this.on("prefinish", $76820484b86bdf47$var$prefinish);
}
function $76820484b86bdf47$var$prefinish() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) this._flush(function(er, data) {
        $76820484b86bdf47$var$done(_this, er, data);
    });
    else $76820484b86bdf47$var$done(this, null, null);
}
$76820484b86bdf47$var$Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return $6xT7g.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
$76820484b86bdf47$var$Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new $76820484b86bdf47$var$ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
};
$76820484b86bdf47$var$Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
$76820484b86bdf47$var$Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
$76820484b86bdf47$var$Transform.prototype._destroy = function(err, cb) {
    $6xT7g.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function $76820484b86bdf47$var$done(stream, er, data) {
    if (er) return stream.emit("error", er);
    if (data != null) stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new $76820484b86bdf47$var$ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new $76820484b86bdf47$var$ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

});

parcelRequire.register("6XUXj", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
"use strict";
module.exports = $51246ef47609367b$var$PassThrough;

var $aaOvB = parcelRequire("aaOvB");

(parcelRequire("6QnvD"))($51246ef47609367b$var$PassThrough, $aaOvB);
function $51246ef47609367b$var$PassThrough(options) {
    if (!(this instanceof $51246ef47609367b$var$PassThrough)) return new $51246ef47609367b$var$PassThrough(options);
    $aaOvB.call(this, options);
}
$51246ef47609367b$var$PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

});

parcelRequire.register("6CAC7", function(module, exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var $4d22b171ae59d8de$var$eos;
function $4d22b171ae59d8de$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}

var $fibbC = parcelRequire("fibbC");
var $4d22b171ae59d8de$require$_require$codes = $fibbC.codes;
var $4d22b171ae59d8de$var$ERR_MISSING_ARGS = $4d22b171ae59d8de$require$_require$codes.ERR_MISSING_ARGS, $4d22b171ae59d8de$var$ERR_STREAM_DESTROYED = $4d22b171ae59d8de$require$_require$codes.ERR_STREAM_DESTROYED;
function $4d22b171ae59d8de$var$noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function $4d22b171ae59d8de$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}

function $4d22b171ae59d8de$var$destroyer(stream, reading, writing, callback) {
    callback = $4d22b171ae59d8de$var$once(callback);
    var closed = false;
    stream.on("close", function() {
        closed = true;
    });
    if ($4d22b171ae59d8de$var$eos === undefined) $4d22b171ae59d8de$var$eos = (parcelRequire("7S1GK"));
    $4d22b171ae59d8de$var$eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want
        if ($4d22b171ae59d8de$var$isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === "function") return stream.destroy();
        callback(err || new $4d22b171ae59d8de$var$ERR_STREAM_DESTROYED("pipe"));
    };
}
function $4d22b171ae59d8de$var$call(fn) {
    fn();
}
function $4d22b171ae59d8de$var$pipe(from, to) {
    return from.pipe(to);
}
function $4d22b171ae59d8de$var$popCallback(streams) {
    if (!streams.length) return $4d22b171ae59d8de$var$noop;
    if (typeof streams[streams.length - 1] !== "function") return $4d22b171ae59d8de$var$noop;
    return streams.pop();
}
function $4d22b171ae59d8de$var$pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = $4d22b171ae59d8de$var$popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new $4d22b171ae59d8de$var$ERR_MISSING_ARGS("streams");
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return $4d22b171ae59d8de$var$destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach($4d22b171ae59d8de$var$call);
            if (reading) return;
            destroys.forEach($4d22b171ae59d8de$var$call);
            callback(error);
        });
    });
    return streams.reduce($4d22b171ae59d8de$var$pipe);
}
module.exports = $4d22b171ae59d8de$var$pipeline;

});




parcelRequire.register("dMVS8", function(module, exports) {
"use strict";

var $fLrIr = parcelRequire("fLrIr");
var $a09ca63f51ac9dac$require$Buffer = $fLrIr.Buffer;

var $6QnvD = parcelRequire("6QnvD");

var $dLFWx = parcelRequire("dLFWx");
var $a09ca63f51ac9dac$var$ARRAY16 = new Array(16);
var $a09ca63f51ac9dac$var$zl = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var $a09ca63f51ac9dac$var$zr = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var $a09ca63f51ac9dac$var$sl = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var $a09ca63f51ac9dac$var$sr = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];
var $a09ca63f51ac9dac$var$hl = [
    0x00000000,
    0x5a827999,
    0x6ed9eba1,
    0x8f1bbcdc,
    0xa953fd4e
];
var $a09ca63f51ac9dac$var$hr = [
    0x50a28be6,
    0x5c4dd124,
    0x6d703ef3,
    0x7a6d76e9,
    0x00000000
];
function $a09ca63f51ac9dac$var$RIPEMD160() {
    $dLFWx.call(this, 64);
    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
}
$6QnvD($a09ca63f51ac9dac$var$RIPEMD160, $dLFWx);
$a09ca63f51ac9dac$var$RIPEMD160.prototype._update = function() {
    var words = $a09ca63f51ac9dac$var$ARRAY16;
    for(var j = 0; j < 16; ++j)words[j] = this._block.readInt32LE(j * 4);
    var al = this._a | 0;
    var bl = this._b | 0;
    var cl = this._c | 0;
    var dl = this._d | 0;
    var el = this._e | 0;
    var ar = this._a | 0;
    var br = this._b | 0;
    var cr = this._c | 0;
    var dr = this._d | 0;
    var er = this._e | 0;
    // computation
    for(var i = 0; i < 80; i += 1){
        var tl;
        var tr;
        if (i < 16) {
            tl = $a09ca63f51ac9dac$var$fn1(al, bl, cl, dl, el, words[$a09ca63f51ac9dac$var$zl[i]], $a09ca63f51ac9dac$var$hl[0], $a09ca63f51ac9dac$var$sl[i]);
            tr = $a09ca63f51ac9dac$var$fn5(ar, br, cr, dr, er, words[$a09ca63f51ac9dac$var$zr[i]], $a09ca63f51ac9dac$var$hr[0], $a09ca63f51ac9dac$var$sr[i]);
        } else if (i < 32) {
            tl = $a09ca63f51ac9dac$var$fn2(al, bl, cl, dl, el, words[$a09ca63f51ac9dac$var$zl[i]], $a09ca63f51ac9dac$var$hl[1], $a09ca63f51ac9dac$var$sl[i]);
            tr = $a09ca63f51ac9dac$var$fn4(ar, br, cr, dr, er, words[$a09ca63f51ac9dac$var$zr[i]], $a09ca63f51ac9dac$var$hr[1], $a09ca63f51ac9dac$var$sr[i]);
        } else if (i < 48) {
            tl = $a09ca63f51ac9dac$var$fn3(al, bl, cl, dl, el, words[$a09ca63f51ac9dac$var$zl[i]], $a09ca63f51ac9dac$var$hl[2], $a09ca63f51ac9dac$var$sl[i]);
            tr = $a09ca63f51ac9dac$var$fn3(ar, br, cr, dr, er, words[$a09ca63f51ac9dac$var$zr[i]], $a09ca63f51ac9dac$var$hr[2], $a09ca63f51ac9dac$var$sr[i]);
        } else if (i < 64) {
            tl = $a09ca63f51ac9dac$var$fn4(al, bl, cl, dl, el, words[$a09ca63f51ac9dac$var$zl[i]], $a09ca63f51ac9dac$var$hl[3], $a09ca63f51ac9dac$var$sl[i]);
            tr = $a09ca63f51ac9dac$var$fn2(ar, br, cr, dr, er, words[$a09ca63f51ac9dac$var$zr[i]], $a09ca63f51ac9dac$var$hr[3], $a09ca63f51ac9dac$var$sr[i]);
        } else {
            tl = $a09ca63f51ac9dac$var$fn5(al, bl, cl, dl, el, words[$a09ca63f51ac9dac$var$zl[i]], $a09ca63f51ac9dac$var$hl[4], $a09ca63f51ac9dac$var$sl[i]);
            tr = $a09ca63f51ac9dac$var$fn1(ar, br, cr, dr, er, words[$a09ca63f51ac9dac$var$zr[i]], $a09ca63f51ac9dac$var$hr[4], $a09ca63f51ac9dac$var$sr[i]);
        }
        al = el;
        el = dl;
        dl = $a09ca63f51ac9dac$var$rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = $a09ca63f51ac9dac$var$rotl(cr, 10);
        cr = br;
        br = tr;
    }
    // update state
    var t = this._b + cl + dr | 0;
    this._b = this._c + dl + er | 0;
    this._c = this._d + el + ar | 0;
    this._d = this._e + al + br | 0;
    this._e = this._a + bl + cr | 0;
    this._a = t;
};
$a09ca63f51ac9dac$var$RIPEMD160.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = $a09ca63f51ac9dac$require$Buffer.alloc ? $a09ca63f51ac9dac$require$Buffer.alloc(20) : new $a09ca63f51ac9dac$require$Buffer(20);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    buffer.writeInt32LE(this._e, 16);
    return buffer;
};
function $a09ca63f51ac9dac$var$rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function $a09ca63f51ac9dac$var$fn1(a, b, c, d, e, m, k, s) {
    return $a09ca63f51ac9dac$var$rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
}
function $a09ca63f51ac9dac$var$fn2(a, b, c, d, e, m, k, s) {
    return $a09ca63f51ac9dac$var$rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
}
function $a09ca63f51ac9dac$var$fn3(a, b, c, d, e, m, k, s) {
    return $a09ca63f51ac9dac$var$rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
}
function $a09ca63f51ac9dac$var$fn4(a, b, c, d, e, m, k, s) {
    return $a09ca63f51ac9dac$var$rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
}
function $a09ca63f51ac9dac$var$fn5(a, b, c, d, e, m, k, s) {
    return $a09ca63f51ac9dac$var$rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
}
module.exports = $a09ca63f51ac9dac$var$RIPEMD160;

});

parcelRequire.register("8RgXQ", function(module, exports) {
var $67306ebb01a74548$var$exports = module.exports = function SHA(algorithm) {
    algorithm = algorithm.toLowerCase();
    var Algorithm = $67306ebb01a74548$var$exports[algorithm];
    if (!Algorithm) throw new Error(algorithm + " is not supported (we accept pull requests)");
    return new Algorithm();
};

$67306ebb01a74548$var$exports.sha = (parcelRequire("5HX8o"));

$67306ebb01a74548$var$exports.sha1 = (parcelRequire("8230e"));

$67306ebb01a74548$var$exports.sha224 = (parcelRequire("4n5nJ"));

$67306ebb01a74548$var$exports.sha256 = (parcelRequire("4eKnb"));

$67306ebb01a74548$var$exports.sha384 = (parcelRequire("9LzZL"));

$67306ebb01a74548$var$exports.sha512 = (parcelRequire("lG7uC"));

});
parcelRequire.register("5HX8o", function(module, exports) {
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */ 
var $6QnvD = parcelRequire("6QnvD");

var $7PaTV = parcelRequire("7PaTV");

var $1fMpU = parcelRequire("1fMpU");
var $427ed6c4d4a92d96$require$Buffer = $1fMpU.Buffer;
var $427ed6c4d4a92d96$var$K = [
    0x5a827999,
    0x6ed9eba1,
    -1894007588,
    -899497514
];
var $427ed6c4d4a92d96$var$W = new Array(80);
function $427ed6c4d4a92d96$var$Sha() {
    this.init();
    this._w = $427ed6c4d4a92d96$var$W;
    $7PaTV.call(this, 64, 56);
}
$6QnvD($427ed6c4d4a92d96$var$Sha, $7PaTV);
$427ed6c4d4a92d96$var$Sha.prototype.init = function() {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
    return this;
};
function $427ed6c4d4a92d96$var$rotl5(num) {
    return num << 5 | num >>> 27;
}
function $427ed6c4d4a92d96$var$rotl30(num) {
    return num << 30 | num >>> 2;
}
function $427ed6c4d4a92d96$var$ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
$427ed6c4d4a92d96$var$Sha.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = $427ed6c4d4a92d96$var$rotl5(a) + $427ed6c4d4a92d96$var$ft(s, b, c, d) + e + W[j] + $427ed6c4d4a92d96$var$K[s] | 0;
        e = d;
        d = c;
        c = $427ed6c4d4a92d96$var$rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
$427ed6c4d4a92d96$var$Sha.prototype._hash = function() {
    var H = $427ed6c4d4a92d96$require$Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = $427ed6c4d4a92d96$var$Sha;

});
parcelRequire.register("7PaTV", function(module, exports) {

var $1fMpU = parcelRequire("1fMpU");
var $5b25c08625e44546$require$Buffer = $1fMpU.Buffer;
// prototype class for hash functions
function $5b25c08625e44546$var$Hash(blockSize, finalSize) {
    this._block = $5b25c08625e44546$require$Buffer.alloc(blockSize);
    this._finalSize = finalSize;
    this._blockSize = blockSize;
    this._len = 0;
}
$5b25c08625e44546$var$Hash.prototype.update = function(data, enc) {
    if (typeof data === "string") {
        enc = enc || "utf8";
        data = $5b25c08625e44546$require$Buffer.from(data, enc);
    }
    var block = this._block;
    var blockSize = this._blockSize;
    var length = data.length;
    var accum = this._len;
    for(var offset = 0; offset < length;){
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);
        for(var i = 0; i < remainder; i++)block[assigned + i] = data[offset + i];
        accum += remainder;
        offset += remainder;
        if (accum % blockSize === 0) this._update(block);
    }
    this._len += length;
    return this;
};
$5b25c08625e44546$var$Hash.prototype.digest = function(enc) {
    var rem = this._len % this._blockSize;
    this._block[rem] = 0x80;
    // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
    this._block.fill(0, rem + 1);
    if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
    }
    var bits = this._len * 8;
    // uint32
    if (bits <= 0xffffffff) this._block.writeUInt32BE(bits, this._blockSize - 4);
    else {
        var lowBits = (bits & 0xffffffff) >>> 0;
        var highBits = (bits - lowBits) / 0x100000000;
        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
    }
    this._update(this._block);
    var hash = this._hash();
    return enc ? hash.toString(enc) : hash;
};
$5b25c08625e44546$var$Hash.prototype._update = function() {
    throw new Error("_update must be implemented by subclass");
};
module.exports = $5b25c08625e44546$var$Hash;

});


parcelRequire.register("8230e", function(module, exports) {
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */ 
var $6QnvD = parcelRequire("6QnvD");

var $7PaTV = parcelRequire("7PaTV");

var $1fMpU = parcelRequire("1fMpU");
var $5d90d6e7f4cfe0bd$require$Buffer = $1fMpU.Buffer;
var $5d90d6e7f4cfe0bd$var$K = [
    0x5a827999,
    0x6ed9eba1,
    -1894007588,
    -899497514
];
var $5d90d6e7f4cfe0bd$var$W = new Array(80);
function $5d90d6e7f4cfe0bd$var$Sha1() {
    this.init();
    this._w = $5d90d6e7f4cfe0bd$var$W;
    $7PaTV.call(this, 64, 56);
}
$6QnvD($5d90d6e7f4cfe0bd$var$Sha1, $7PaTV);
$5d90d6e7f4cfe0bd$var$Sha1.prototype.init = function() {
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
    this._e = 0xc3d2e1f0;
    return this;
};
function $5d90d6e7f4cfe0bd$var$rotl1(num) {
    return num << 1 | num >>> 31;
}
function $5d90d6e7f4cfe0bd$var$rotl5(num) {
    return num << 5 | num >>> 27;
}
function $5d90d6e7f4cfe0bd$var$rotl30(num) {
    return num << 30 | num >>> 2;
}
function $5d90d6e7f4cfe0bd$var$ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
$5d90d6e7f4cfe0bd$var$Sha1.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W[i] = $5d90d6e7f4cfe0bd$var$rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = $5d90d6e7f4cfe0bd$var$rotl5(a) + $5d90d6e7f4cfe0bd$var$ft(s, b, c, d) + e + W[j] + $5d90d6e7f4cfe0bd$var$K[s] | 0;
        e = d;
        d = c;
        c = $5d90d6e7f4cfe0bd$var$rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
$5d90d6e7f4cfe0bd$var$Sha1.prototype._hash = function() {
    var H = $5d90d6e7f4cfe0bd$require$Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = $5d90d6e7f4cfe0bd$var$Sha1;

});

parcelRequire.register("4n5nJ", function(module, exports) {
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */ 
var $6QnvD = parcelRequire("6QnvD");

var $4eKnb = parcelRequire("4eKnb");

var $7PaTV = parcelRequire("7PaTV");

var $1fMpU = parcelRequire("1fMpU");
var $32ed7c1f5ffe99cd$require$Buffer = $1fMpU.Buffer;
var $32ed7c1f5ffe99cd$var$W = new Array(64);
function $32ed7c1f5ffe99cd$var$Sha224() {
    this.init();
    this._w = $32ed7c1f5ffe99cd$var$W // new Array(64)
    ;
    $7PaTV.call(this, 64, 56);
}
$6QnvD($32ed7c1f5ffe99cd$var$Sha224, $4eKnb);
$32ed7c1f5ffe99cd$var$Sha224.prototype.init = function() {
    this._a = 0xc1059ed8;
    this._b = 0x367cd507;
    this._c = 0x3070dd17;
    this._d = 0xf70e5939;
    this._e = 0xffc00b31;
    this._f = 0x68581511;
    this._g = 0x64f98fa7;
    this._h = 0xbefa4fa4;
    return this;
};
$32ed7c1f5ffe99cd$var$Sha224.prototype._hash = function() {
    var H = $32ed7c1f5ffe99cd$require$Buffer.allocUnsafe(28);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    return H;
};
module.exports = $32ed7c1f5ffe99cd$var$Sha224;

});
parcelRequire.register("4eKnb", function(module, exports) {
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */ 
var $6QnvD = parcelRequire("6QnvD");

var $7PaTV = parcelRequire("7PaTV");

var $1fMpU = parcelRequire("1fMpU");
var $315c70f0ccae6bef$require$Buffer = $1fMpU.Buffer;
var $315c70f0ccae6bef$var$K = [
    0x428A2F98,
    0x71374491,
    0xB5C0FBCF,
    0xE9B5DBA5,
    0x3956C25B,
    0x59F111F1,
    0x923F82A4,
    0xAB1C5ED5,
    0xD807AA98,
    0x12835B01,
    0x243185BE,
    0x550C7DC3,
    0x72BE5D74,
    0x80DEB1FE,
    0x9BDC06A7,
    0xC19BF174,
    0xE49B69C1,
    0xEFBE4786,
    0x0FC19DC6,
    0x240CA1CC,
    0x2DE92C6F,
    0x4A7484AA,
    0x5CB0A9DC,
    0x76F988DA,
    0x983E5152,
    0xA831C66D,
    0xB00327C8,
    0xBF597FC7,
    0xC6E00BF3,
    0xD5A79147,
    0x06CA6351,
    0x14292967,
    0x27B70A85,
    0x2E1B2138,
    0x4D2C6DFC,
    0x53380D13,
    0x650A7354,
    0x766A0ABB,
    0x81C2C92E,
    0x92722C85,
    0xA2BFE8A1,
    0xA81A664B,
    0xC24B8B70,
    0xC76C51A3,
    0xD192E819,
    0xD6990624,
    0xF40E3585,
    0x106AA070,
    0x19A4C116,
    0x1E376C08,
    0x2748774C,
    0x34B0BCB5,
    0x391C0CB3,
    0x4ED8AA4A,
    0x5B9CCA4F,
    0x682E6FF3,
    0x748F82EE,
    0x78A5636F,
    0x84C87814,
    0x8CC70208,
    0x90BEFFFA,
    0xA4506CEB,
    0xBEF9A3F7,
    0xC67178F2
];
var $315c70f0ccae6bef$var$W = new Array(64);
function $315c70f0ccae6bef$var$Sha256() {
    this.init();
    this._w = $315c70f0ccae6bef$var$W // new Array(64)
    ;
    $7PaTV.call(this, 64, 56);
}
$6QnvD($315c70f0ccae6bef$var$Sha256, $7PaTV);
$315c70f0ccae6bef$var$Sha256.prototype.init = function() {
    this._a = 0x6a09e667;
    this._b = 0xbb67ae85;
    this._c = 0x3c6ef372;
    this._d = 0xa54ff53a;
    this._e = 0x510e527f;
    this._f = 0x9b05688c;
    this._g = 0x1f83d9ab;
    this._h = 0x5be0cd19;
    return this;
};
function $315c70f0ccae6bef$var$ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function $315c70f0ccae6bef$var$maj(x, y, z) {
    return x & y | z & (x | y);
}
function $315c70f0ccae6bef$var$sigma0(x) {
    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}
function $315c70f0ccae6bef$var$sigma1(x) {
    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}
function $315c70f0ccae6bef$var$gamma0(x) {
    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
}
function $315c70f0ccae6bef$var$gamma1(x) {
    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
}
$315c70f0ccae6bef$var$Sha256.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    var f = this._f | 0;
    var g = this._g | 0;
    var h = this._h | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 64; ++i)W[i] = $315c70f0ccae6bef$var$gamma1(W[i - 2]) + W[i - 7] + $315c70f0ccae6bef$var$gamma0(W[i - 15]) + W[i - 16] | 0;
    for(var j = 0; j < 64; ++j){
        var T1 = h + $315c70f0ccae6bef$var$sigma1(e) + $315c70f0ccae6bef$var$ch(e, f, g) + $315c70f0ccae6bef$var$K[j] + W[j] | 0;
        var T2 = $315c70f0ccae6bef$var$sigma0(a) + $315c70f0ccae6bef$var$maj(a, b, c) | 0;
        h = g;
        g = f;
        f = e;
        e = d + T1 | 0;
        d = c;
        c = b;
        b = a;
        a = T1 + T2 | 0;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
    this._f = f + this._f | 0;
    this._g = g + this._g | 0;
    this._h = h + this._h | 0;
};
$315c70f0ccae6bef$var$Sha256.prototype._hash = function() {
    var H = $315c70f0ccae6bef$require$Buffer.allocUnsafe(32);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    H.writeInt32BE(this._h, 28);
    return H;
};
module.exports = $315c70f0ccae6bef$var$Sha256;

});


parcelRequire.register("9LzZL", function(module, exports) {

var $6QnvD = parcelRequire("6QnvD");

var $lG7uC = parcelRequire("lG7uC");

var $7PaTV = parcelRequire("7PaTV");

var $1fMpU = parcelRequire("1fMpU");
var $71c46cc0410678b8$require$Buffer = $1fMpU.Buffer;
var $71c46cc0410678b8$var$W = new Array(160);
function $71c46cc0410678b8$var$Sha384() {
    this.init();
    this._w = $71c46cc0410678b8$var$W;
    $7PaTV.call(this, 128, 112);
}
$6QnvD($71c46cc0410678b8$var$Sha384, $lG7uC);
$71c46cc0410678b8$var$Sha384.prototype.init = function() {
    this._ah = 0xcbbb9d5d;
    this._bh = 0x629a292a;
    this._ch = 0x9159015a;
    this._dh = 0x152fecd8;
    this._eh = 0x67332667;
    this._fh = 0x8eb44a87;
    this._gh = 0xdb0c2e0d;
    this._hh = 0x47b5481d;
    this._al = 0xc1059ed8;
    this._bl = 0x367cd507;
    this._cl = 0x3070dd17;
    this._dl = 0xf70e5939;
    this._el = 0xffc00b31;
    this._fl = 0x68581511;
    this._gl = 0x64f98fa7;
    this._hl = 0xbefa4fa4;
    return this;
};
$71c46cc0410678b8$var$Sha384.prototype._hash = function() {
    var H = $71c46cc0410678b8$require$Buffer.allocUnsafe(48);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    return H;
};
module.exports = $71c46cc0410678b8$var$Sha384;

});
parcelRequire.register("lG7uC", function(module, exports) {

var $6QnvD = parcelRequire("6QnvD");

var $7PaTV = parcelRequire("7PaTV");

var $1fMpU = parcelRequire("1fMpU");
var $fc83552403df791f$require$Buffer = $1fMpU.Buffer;
var $fc83552403df791f$var$K = [
    0x428a2f98,
    0xd728ae22,
    0x71374491,
    0x23ef65cd,
    0xb5c0fbcf,
    0xec4d3b2f,
    0xe9b5dba5,
    0x8189dbbc,
    0x3956c25b,
    0xf348b538,
    0x59f111f1,
    0xb605d019,
    0x923f82a4,
    0xaf194f9b,
    0xab1c5ed5,
    0xda6d8118,
    0xd807aa98,
    0xa3030242,
    0x12835b01,
    0x45706fbe,
    0x243185be,
    0x4ee4b28c,
    0x550c7dc3,
    0xd5ffb4e2,
    0x72be5d74,
    0xf27b896f,
    0x80deb1fe,
    0x3b1696b1,
    0x9bdc06a7,
    0x25c71235,
    0xc19bf174,
    0xcf692694,
    0xe49b69c1,
    0x9ef14ad2,
    0xefbe4786,
    0x384f25e3,
    0x0fc19dc6,
    0x8b8cd5b5,
    0x240ca1cc,
    0x77ac9c65,
    0x2de92c6f,
    0x592b0275,
    0x4a7484aa,
    0x6ea6e483,
    0x5cb0a9dc,
    0xbd41fbd4,
    0x76f988da,
    0x831153b5,
    0x983e5152,
    0xee66dfab,
    0xa831c66d,
    0x2db43210,
    0xb00327c8,
    0x98fb213f,
    0xbf597fc7,
    0xbeef0ee4,
    0xc6e00bf3,
    0x3da88fc2,
    0xd5a79147,
    0x930aa725,
    0x06ca6351,
    0xe003826f,
    0x14292967,
    0x0a0e6e70,
    0x27b70a85,
    0x46d22ffc,
    0x2e1b2138,
    0x5c26c926,
    0x4d2c6dfc,
    0x5ac42aed,
    0x53380d13,
    0x9d95b3df,
    0x650a7354,
    0x8baf63de,
    0x766a0abb,
    0x3c77b2a8,
    0x81c2c92e,
    0x47edaee6,
    0x92722c85,
    0x1482353b,
    0xa2bfe8a1,
    0x4cf10364,
    0xa81a664b,
    0xbc423001,
    0xc24b8b70,
    0xd0f89791,
    0xc76c51a3,
    0x0654be30,
    0xd192e819,
    0xd6ef5218,
    0xd6990624,
    0x5565a910,
    0xf40e3585,
    0x5771202a,
    0x106aa070,
    0x32bbd1b8,
    0x19a4c116,
    0xb8d2d0c8,
    0x1e376c08,
    0x5141ab53,
    0x2748774c,
    0xdf8eeb99,
    0x34b0bcb5,
    0xe19b48a8,
    0x391c0cb3,
    0xc5c95a63,
    0x4ed8aa4a,
    0xe3418acb,
    0x5b9cca4f,
    0x7763e373,
    0x682e6ff3,
    0xd6b2b8a3,
    0x748f82ee,
    0x5defb2fc,
    0x78a5636f,
    0x43172f60,
    0x84c87814,
    0xa1f0ab72,
    0x8cc70208,
    0x1a6439ec,
    0x90befffa,
    0x23631e28,
    0xa4506ceb,
    0xde82bde9,
    0xbef9a3f7,
    0xb2c67915,
    0xc67178f2,
    0xe372532b,
    0xca273ece,
    0xea26619c,
    0xd186b8c7,
    0x21c0c207,
    0xeada7dd6,
    0xcde0eb1e,
    0xf57d4f7f,
    0xee6ed178,
    0x06f067aa,
    0x72176fba,
    0x0a637dc5,
    0xa2c898a6,
    0x113f9804,
    0xbef90dae,
    0x1b710b35,
    0x131c471b,
    0x28db77f5,
    0x23047d84,
    0x32caab7b,
    0x40c72493,
    0x3c9ebe0a,
    0x15c9bebc,
    0x431d67c4,
    0x9c100d4c,
    0x4cc5d4be,
    0xcb3e42b6,
    0x597f299c,
    0xfc657e2a,
    0x5fcb6fab,
    0x3ad6faec,
    0x6c44198c,
    0x4a475817
];
var $fc83552403df791f$var$W = new Array(160);
function $fc83552403df791f$var$Sha512() {
    this.init();
    this._w = $fc83552403df791f$var$W;
    $7PaTV.call(this, 128, 112);
}
$6QnvD($fc83552403df791f$var$Sha512, $7PaTV);
$fc83552403df791f$var$Sha512.prototype.init = function() {
    this._ah = 0x6a09e667;
    this._bh = 0xbb67ae85;
    this._ch = 0x3c6ef372;
    this._dh = 0xa54ff53a;
    this._eh = 0x510e527f;
    this._fh = 0x9b05688c;
    this._gh = 0x1f83d9ab;
    this._hh = 0x5be0cd19;
    this._al = 0xf3bcc908;
    this._bl = 0x84caa73b;
    this._cl = 0xfe94f82b;
    this._dl = 0x5f1d36f1;
    this._el = 0xade682d1;
    this._fl = 0x2b3e6c1f;
    this._gl = 0xfb41bd6b;
    this._hl = 0x137e2179;
    return this;
};
function $fc83552403df791f$var$Ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function $fc83552403df791f$var$maj(x, y, z) {
    return x & y | z & (x | y);
}
function $fc83552403df791f$var$sigma0(x, xl) {
    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
}
function $fc83552403df791f$var$sigma1(x, xl) {
    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
}
function $fc83552403df791f$var$Gamma0(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
}
function $fc83552403df791f$var$Gamma0l(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
}
function $fc83552403df791f$var$Gamma1(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
}
function $fc83552403df791f$var$Gamma1l(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
}
function $fc83552403df791f$var$getCarry(a, b) {
    return a >>> 0 < b >>> 0 ? 1 : 0;
}
$fc83552403df791f$var$Sha512.prototype._update = function(M) {
    var W = this._w;
    var ah = this._ah | 0;
    var bh = this._bh | 0;
    var ch = this._ch | 0;
    var dh = this._dh | 0;
    var eh = this._eh | 0;
    var fh = this._fh | 0;
    var gh = this._gh | 0;
    var hh = this._hh | 0;
    var al = this._al | 0;
    var bl = this._bl | 0;
    var cl = this._cl | 0;
    var dl = this._dl | 0;
    var el = this._el | 0;
    var fl = this._fl | 0;
    var gl = this._gl | 0;
    var hl = this._hl | 0;
    for(var i = 0; i < 32; i += 2){
        W[i] = M.readInt32BE(i * 4);
        W[i + 1] = M.readInt32BE(i * 4 + 4);
    }
    for(; i < 160; i += 2){
        var xh = W[i - 30];
        var xl = W[i - 30 + 1];
        var gamma0 = $fc83552403df791f$var$Gamma0(xh, xl);
        var gamma0l = $fc83552403df791f$var$Gamma0l(xl, xh);
        xh = W[i - 4];
        xl = W[i - 4 + 1];
        var gamma1 = $fc83552403df791f$var$Gamma1(xh, xl);
        var gamma1l = $fc83552403df791f$var$Gamma1l(xl, xh);
        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
        var Wi7h = W[i - 14];
        var Wi7l = W[i - 14 + 1];
        var Wi16h = W[i - 32];
        var Wi16l = W[i - 32 + 1];
        var Wil = gamma0l + Wi7l | 0;
        var Wih = gamma0 + Wi7h + $fc83552403df791f$var$getCarry(Wil, gamma0l) | 0;
        Wil = Wil + gamma1l | 0;
        Wih = Wih + gamma1 + $fc83552403df791f$var$getCarry(Wil, gamma1l) | 0;
        Wil = Wil + Wi16l | 0;
        Wih = Wih + Wi16h + $fc83552403df791f$var$getCarry(Wil, Wi16l) | 0;
        W[i] = Wih;
        W[i + 1] = Wil;
    }
    for(var j = 0; j < 160; j += 2){
        Wih = W[j];
        Wil = W[j + 1];
        var majh = $fc83552403df791f$var$maj(ah, bh, ch);
        var majl = $fc83552403df791f$var$maj(al, bl, cl);
        var sigma0h = $fc83552403df791f$var$sigma0(ah, al);
        var sigma0l = $fc83552403df791f$var$sigma0(al, ah);
        var sigma1h = $fc83552403df791f$var$sigma1(eh, el);
        var sigma1l = $fc83552403df791f$var$sigma1(el, eh);
        // t1 = h + sigma1 + ch + K[j] + W[j]
        var Kih = $fc83552403df791f$var$K[j];
        var Kil = $fc83552403df791f$var$K[j + 1];
        var chh = $fc83552403df791f$var$Ch(eh, fh, gh);
        var chl = $fc83552403df791f$var$Ch(el, fl, gl);
        var t1l = hl + sigma1l | 0;
        var t1h = hh + sigma1h + $fc83552403df791f$var$getCarry(t1l, hl) | 0;
        t1l = t1l + chl | 0;
        t1h = t1h + chh + $fc83552403df791f$var$getCarry(t1l, chl) | 0;
        t1l = t1l + Kil | 0;
        t1h = t1h + Kih + $fc83552403df791f$var$getCarry(t1l, Kil) | 0;
        t1l = t1l + Wil | 0;
        t1h = t1h + Wih + $fc83552403df791f$var$getCarry(t1l, Wil) | 0;
        // t2 = sigma0 + maj
        var t2l = sigma0l + majl | 0;
        var t2h = sigma0h + majh + $fc83552403df791f$var$getCarry(t2l, sigma0l) | 0;
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = dl + t1l | 0;
        eh = dh + t1h + $fc83552403df791f$var$getCarry(el, dl) | 0;
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = t1l + t2l | 0;
        ah = t1h + t2h + $fc83552403df791f$var$getCarry(al, t1l) | 0;
    }
    this._al = this._al + al | 0;
    this._bl = this._bl + bl | 0;
    this._cl = this._cl + cl | 0;
    this._dl = this._dl + dl | 0;
    this._el = this._el + el | 0;
    this._fl = this._fl + fl | 0;
    this._gl = this._gl + gl | 0;
    this._hl = this._hl + hl | 0;
    this._ah = this._ah + ah + $fc83552403df791f$var$getCarry(this._al, al) | 0;
    this._bh = this._bh + bh + $fc83552403df791f$var$getCarry(this._bl, bl) | 0;
    this._ch = this._ch + ch + $fc83552403df791f$var$getCarry(this._cl, cl) | 0;
    this._dh = this._dh + dh + $fc83552403df791f$var$getCarry(this._dl, dl) | 0;
    this._eh = this._eh + eh + $fc83552403df791f$var$getCarry(this._el, el) | 0;
    this._fh = this._fh + fh + $fc83552403df791f$var$getCarry(this._fl, fl) | 0;
    this._gh = this._gh + gh + $fc83552403df791f$var$getCarry(this._gl, gl) | 0;
    this._hh = this._hh + hh + $fc83552403df791f$var$getCarry(this._hl, hl) | 0;
};
$fc83552403df791f$var$Sha512.prototype._hash = function() {
    var H = $fc83552403df791f$require$Buffer.allocUnsafe(64);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    writeInt64BE(this._gh, this._gl, 48);
    writeInt64BE(this._hh, this._hl, 56);
    return H;
};
module.exports = $fc83552403df791f$var$Sha512;

});



parcelRequire.register("bbKMQ", function(module, exports) {

var $1fMpU = parcelRequire("1fMpU");
var $825503adde213f2f$require$Buffer = $1fMpU.Buffer;

var $l1Tex = parcelRequire("l1Tex");
var $825503adde213f2f$require$Transform = $l1Tex.Transform;

var $3ZG4s = parcelRequire("3ZG4s");
var $825503adde213f2f$require$StringDecoder = $3ZG4s.StringDecoder;

var $6QnvD = parcelRequire("6QnvD");
function $825503adde213f2f$var$CipherBase(hashMode) {
    $825503adde213f2f$require$Transform.call(this);
    this.hashMode = typeof hashMode === "string";
    if (this.hashMode) this[hashMode] = this._finalOrDigest;
    else this.final = this._finalOrDigest;
    if (this._final) {
        this.__final = this._final;
        this._final = null;
    }
    this._decoder = null;
    this._encoding = null;
}
$6QnvD($825503adde213f2f$var$CipherBase, $825503adde213f2f$require$Transform);
$825503adde213f2f$var$CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
    if (typeof data === "string") data = $825503adde213f2f$require$Buffer.from(data, inputEnc);
    var outData = this._update(data);
    if (this.hashMode) return this;
    if (outputEnc) outData = this._toString(outData, outputEnc);
    return outData;
};
$825503adde213f2f$var$CipherBase.prototype.setAutoPadding = function() {};
$825503adde213f2f$var$CipherBase.prototype.getAuthTag = function() {
    throw new Error("trying to get auth tag in unsupported state");
};
$825503adde213f2f$var$CipherBase.prototype.setAuthTag = function() {
    throw new Error("trying to set auth tag in unsupported state");
};
$825503adde213f2f$var$CipherBase.prototype.setAAD = function() {
    throw new Error("trying to set aad in unsupported state");
};
$825503adde213f2f$var$CipherBase.prototype._transform = function(data, _, next) {
    var err;
    try {
        if (this.hashMode) this._update(data);
        else this.push(this._update(data));
    } catch (e) {
        err = e;
    } finally{
        next(err);
    }
};
$825503adde213f2f$var$CipherBase.prototype._flush = function(done) {
    var err;
    try {
        this.push(this.__final());
    } catch (e) {
        err = e;
    }
    done(err);
};
$825503adde213f2f$var$CipherBase.prototype._finalOrDigest = function(outputEnc) {
    var outData = this.__final() || $825503adde213f2f$require$Buffer.alloc(0);
    if (outputEnc) outData = this._toString(outData, outputEnc, true);
    return outData;
};
$825503adde213f2f$var$CipherBase.prototype._toString = function(value, enc, fin) {
    if (!this._decoder) {
        this._decoder = new $825503adde213f2f$require$StringDecoder(enc);
        this._encoding = enc;
    }
    if (this._encoding !== enc) throw new Error("can't switch encodings");
    var out = this._decoder.write(value);
    if (fin) out += this._decoder.end();
    return out;
};
module.exports = $825503adde213f2f$var$CipherBase;

});
parcelRequire.register("l1Tex", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
module.exports = $f4f4892da2ba9ac5$var$Stream;

var $eCV8S = parcelRequire("eCV8S");
var $f4f4892da2ba9ac5$require$EE = $eCV8S.EventEmitter;

var $6QnvD = parcelRequire("6QnvD");
$6QnvD($f4f4892da2ba9ac5$var$Stream, $f4f4892da2ba9ac5$require$EE);

$f4f4892da2ba9ac5$var$Stream.Readable = (parcelRequire("gumRT"));

$f4f4892da2ba9ac5$var$Stream.Writable = (parcelRequire("1rInS"));

$f4f4892da2ba9ac5$var$Stream.Duplex = (parcelRequire("6dlRc"));

$f4f4892da2ba9ac5$var$Stream.Transform = (parcelRequire("1YIF6"));

$f4f4892da2ba9ac5$var$Stream.PassThrough = (parcelRequire("jdFPr"));

$f4f4892da2ba9ac5$var$Stream.finished = (parcelRequire("bJNCD"));

$f4f4892da2ba9ac5$var$Stream.pipeline = (parcelRequire("as08D"));
// Backwards-compat with node 0.4.x
$f4f4892da2ba9ac5$var$Stream.Stream = $f4f4892da2ba9ac5$var$Stream;
// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.
function $f4f4892da2ba9ac5$var$Stream() {
    $f4f4892da2ba9ac5$require$EE.call(this);
}
$f4f4892da2ba9ac5$var$Stream.prototype.pipe = function(dest, options) {
    var source = this;
    function ondata(chunk) {
        if (dest.writable) {
            if (false === dest.write(chunk) && source.pause) source.pause();
        }
    }
    source.on("data", ondata);
    function ondrain() {
        if (source.readable && source.resume) source.resume();
    }
    dest.on("drain", ondrain);
    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
        source.on("end", onend);
        source.on("close", onclose);
    }
    var didOnEnd = false;
    function onend() {
        if (didOnEnd) return;
        didOnEnd = true;
        dest.end();
    }
    function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;
        if (typeof dest.destroy === "function") dest.destroy();
    }
    // don't leave dangling pipes when there are errors.
    function onerror(er) {
        cleanup();
        if ($f4f4892da2ba9ac5$require$EE.listenerCount(this, "error") === 0) throw er; // Unhandled stream error in pipe.
    }
    source.on("error", onerror);
    dest.on("error", onerror);
    // remove all the event listeners that were added.
    function cleanup() {
        source.removeListener("data", ondata);
        dest.removeListener("drain", ondrain);
        source.removeListener("end", onend);
        source.removeListener("close", onclose);
        source.removeListener("error", onerror);
        dest.removeListener("error", onerror);
        source.removeListener("end", cleanup);
        source.removeListener("close", cleanup);
        dest.removeListener("close", cleanup);
    }
    source.on("end", cleanup);
    source.on("close", cleanup);
    dest.on("close", cleanup);
    dest.emit("pipe", source);
    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
};

});
parcelRequire.register("gumRT", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var $jx7mO = parcelRequire("jx7mO");
"use strict";
module.exports = $c0112fd138de8ccc$var$Readable;
/*<replacement>*/ var $c0112fd138de8ccc$var$Duplex;
/*</replacement>*/ $c0112fd138de8ccc$var$Readable.ReadableState = $c0112fd138de8ccc$var$ReadableState;

var $eCV8S = parcelRequire("eCV8S");
var $c0112fd138de8ccc$require$EE = $eCV8S.EventEmitter;
var $c0112fd138de8ccc$var$EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};

var $goqE7 = parcelRequire("goqE7");

var $fLrIr = parcelRequire("fLrIr");
var $c0112fd138de8ccc$require$Buffer = $fLrIr.Buffer;
const $c0112fd138de8ccc$var$OurUint8Array = (typeof $parcel$global !== "undefined" ? $parcel$global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
function $c0112fd138de8ccc$var$_uint8ArrayToBuffer(chunk) {
    return $c0112fd138de8ccc$require$Buffer.from(chunk);
}
function $c0112fd138de8ccc$var$_isUint8Array(obj) {
    return $c0112fd138de8ccc$require$Buffer.isBuffer(obj) || obj instanceof $c0112fd138de8ccc$var$OurUint8Array;
}

var $XDU19 = parcelRequire("XDU19");
let $c0112fd138de8ccc$var$debug;
if ($XDU19 && $XDU19.debuglog) $c0112fd138de8ccc$var$debug = $XDU19.debuglog("stream");
else $c0112fd138de8ccc$var$debug = function debug() {};

var $46d0h = parcelRequire("46d0h");

var $hpewg = parcelRequire("hpewg");

var $7WeAy = parcelRequire("7WeAy");
const $c0112fd138de8ccc$var$getHighWaterMark = $7WeAy.getHighWaterMark;

var $k84mj = parcelRequire("k84mj");
var $c0112fd138de8ccc$require$_require$codes = $k84mj.codes;
const $c0112fd138de8ccc$var$ERR_INVALID_ARG_TYPE = $c0112fd138de8ccc$require$_require$codes.ERR_INVALID_ARG_TYPE, $c0112fd138de8ccc$var$ERR_STREAM_PUSH_AFTER_EOF = $c0112fd138de8ccc$require$_require$codes.ERR_STREAM_PUSH_AFTER_EOF, $c0112fd138de8ccc$var$ERR_METHOD_NOT_IMPLEMENTED = $c0112fd138de8ccc$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $c0112fd138de8ccc$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT = $c0112fd138de8ccc$require$_require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
// Lazy loaded to improve the startup performance.
let $c0112fd138de8ccc$var$StringDecoder;
let $c0112fd138de8ccc$var$createReadableStreamAsyncIterator;
let $c0112fd138de8ccc$var$from;

(parcelRequire("6QnvD"))($c0112fd138de8ccc$var$Readable, $goqE7);
const $c0112fd138de8ccc$var$errorOrDestroy = $hpewg.errorOrDestroy;
const $c0112fd138de8ccc$var$kProxyEvents = [
    "error",
    "close",
    "destroy",
    "pause",
    "resume"
];
function $c0112fd138de8ccc$var$prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}


function $c0112fd138de8ccc$var$ReadableState(options, stream, isDuplex) {
    $c0112fd138de8ccc$var$Duplex = $c0112fd138de8ccc$var$Duplex || (parcelRequire("6dlRc"));
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof $c0112fd138de8ccc$var$Duplex;
    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = $c0112fd138de8ccc$var$getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new $46d0h();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true;
    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy;
    // has it been destroyed
    this.destroyed = false;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;
    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!$c0112fd138de8ccc$var$StringDecoder) $c0112fd138de8ccc$var$StringDecoder = (parcelRequire("3ZG4s")).StringDecoder;
        this.decoder = new $c0112fd138de8ccc$var$StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}

function $c0112fd138de8ccc$var$Readable(options) {
    $c0112fd138de8ccc$var$Duplex = $c0112fd138de8ccc$var$Duplex || (parcelRequire("6dlRc"));
    if (!(this instanceof $c0112fd138de8ccc$var$Readable)) return new $c0112fd138de8ccc$var$Readable(options);
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    const isDuplex = this instanceof $c0112fd138de8ccc$var$Duplex;
    this._readableState = new $c0112fd138de8ccc$var$ReadableState(options, this, isDuplex);
    // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
    }
    $goqE7.call(this);
}
Object.defineProperty($c0112fd138de8ccc$var$Readable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get () {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set (value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
$c0112fd138de8ccc$var$Readable.prototype.destroy = $hpewg.destroy;
$c0112fd138de8ccc$var$Readable.prototype._undestroy = $hpewg.undestroy;
$c0112fd138de8ccc$var$Readable.prototype._destroy = function(err, cb) {
    cb(err);
};
// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
$c0112fd138de8ccc$var$Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = $c0112fd138de8ccc$require$Buffer.from(chunk, encoding);
                encoding = "";
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return $c0112fd138de8ccc$var$readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};
// Unshift should *always* be something directly out of read()
$c0112fd138de8ccc$var$Readable.prototype.unshift = function(chunk) {
    return $c0112fd138de8ccc$var$readableAddChunk(this, chunk, null, true, false);
};
function $c0112fd138de8ccc$var$readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    $c0112fd138de8ccc$var$debug("readableAddChunk", chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        $c0112fd138de8ccc$var$onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = $c0112fd138de8ccc$var$chunkInvalid(state, chunk);
        if (er) $c0112fd138de8ccc$var$errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== $c0112fd138de8ccc$require$Buffer.prototype) chunk = $c0112fd138de8ccc$var$_uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) $c0112fd138de8ccc$var$errorOrDestroy(stream, new $c0112fd138de8ccc$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else $c0112fd138de8ccc$var$addChunk(stream, state, chunk, true);
            } else if (state.ended) $c0112fd138de8ccc$var$errorOrDestroy(stream, new $c0112fd138de8ccc$var$ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) $c0112fd138de8ccc$var$addChunk(stream, state, chunk, false);
                    else $c0112fd138de8ccc$var$maybeReadMore(stream, state);
                } else $c0112fd138de8ccc$var$addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            $c0112fd138de8ccc$var$maybeReadMore(stream, state);
        }
    }
    // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function $c0112fd138de8ccc$var$addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) $c0112fd138de8ccc$var$emitReadable(stream);
    }
    $c0112fd138de8ccc$var$maybeReadMore(stream, state);
}
function $c0112fd138de8ccc$var$chunkInvalid(state, chunk) {
    var er;
    if (!$c0112fd138de8ccc$var$_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) er = new $c0112fd138de8ccc$var$ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer",
        "Uint8Array"
    ], chunk);
    return er;
}
$c0112fd138de8ccc$var$Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
};

// backwards compatibility.
$c0112fd138de8ccc$var$Readable.prototype.setEncoding = function(enc) {
    if (!$c0112fd138de8ccc$var$StringDecoder) $c0112fd138de8ccc$var$StringDecoder = (parcelRequire("3ZG4s")).StringDecoder;
    const decoder = new $c0112fd138de8ccc$var$StringDecoder(enc);
    this._readableState.decoder = decoder;
    // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding;
    // Iterate over current buffer to convert already stored Buffers:
    let p = this._readableState.buffer.head;
    let content = "";
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== "") this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
};
// Don't raise the hwm > 1GB
const $c0112fd138de8ccc$var$MAX_HWM = 0x40000000;
function $c0112fd138de8ccc$var$computeNewHighWaterMark(n) {
    if (n >= $c0112fd138de8ccc$var$MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = $c0112fd138de8ccc$var$MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
}
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $c0112fd138de8ccc$var$howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = $c0112fd138de8ccc$var$computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
}
// you can override either this method, or the async _read(n) below.
$c0112fd138de8ccc$var$Readable.prototype.read = function(n) {
    $c0112fd138de8ccc$var$debug("read", n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false;
    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        $c0112fd138de8ccc$var$debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) $c0112fd138de8ccc$var$endReadable(this);
        else $c0112fd138de8ccc$var$emitReadable(this);
        return null;
    }
    n = $c0112fd138de8ccc$var$howMuchToRead(n, state);
    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) $c0112fd138de8ccc$var$endReadable(this);
        return null;
    }
    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    $c0112fd138de8ccc$var$debug("need readable", doRead);
    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        $c0112fd138de8ccc$var$debug("length less than watermark", doRead);
    }
    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        $c0112fd138de8ccc$var$debug("reading or ended", doRead);
    } else if (doRead) {
        $c0112fd138de8ccc$var$debug("do read");
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = $c0112fd138de8ccc$var$howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = $c0112fd138de8ccc$var$fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;
        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) $c0112fd138de8ccc$var$endReadable(this);
    }
    if (ret !== null) this.emit("data", ret);
    return ret;
};
function $c0112fd138de8ccc$var$onEofChunk(stream, state) {
    $c0112fd138de8ccc$var$debug("onEofChunk");
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    $c0112fd138de8ccc$var$emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            $c0112fd138de8ccc$var$emitReadable_(stream);
        }
    }
}
// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function $c0112fd138de8ccc$var$emitReadable(stream) {
    var state = stream._readableState;
    $c0112fd138de8ccc$var$debug("emitReadable", state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        $c0112fd138de8ccc$var$debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        $jx7mO.nextTick($c0112fd138de8ccc$var$emitReadable_, stream);
    }
}
function $c0112fd138de8ccc$var$emitReadable_(stream) {
    var state = stream._readableState;
    $c0112fd138de8ccc$var$debug("emitReadable_", state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
    }
    // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    $c0112fd138de8ccc$var$flow(stream);
}
// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function $c0112fd138de8ccc$var$maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        $jx7mO.nextTick($c0112fd138de8ccc$var$maybeReadMore_, stream, state);
    }
}
function $c0112fd138de8ccc$var$maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        const len = state.length;
        $c0112fd138de8ccc$var$debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
}
// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
$c0112fd138de8ccc$var$Readable.prototype._read = function(n) {
    $c0112fd138de8ccc$var$errorOrDestroy(this, new $c0112fd138de8ccc$var$ERR_METHOD_NOT_IMPLEMENTED("_read()"));
};
$c0112fd138de8ccc$var$Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    $c0112fd138de8ccc$var$debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== $jx7mO.stdout && dest !== $jx7mO.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) $jx7mO.nextTick(endFn);
    else src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
        $c0112fd138de8ccc$var$debug("onunpipe");
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        $c0112fd138de8ccc$var$debug("onend");
        dest.end();
    }
    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = $c0112fd138de8ccc$var$pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
        $c0112fd138de8ccc$var$debug("cleanup");
        // cleanup event handlers once the pipe is broken
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on("data", ondata);
    function ondata(chunk) {
        $c0112fd138de8ccc$var$debug("ondata");
        var ret = dest.write(chunk);
        $c0112fd138de8ccc$var$debug("dest.write", ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && $c0112fd138de8ccc$var$indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                $c0112fd138de8ccc$var$debug("false write response, pause", state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    }
    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        $c0112fd138de8ccc$var$debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if ($c0112fd138de8ccc$var$EElistenerCount(dest, "error") === 0) $c0112fd138de8ccc$var$errorOrDestroy(dest, er);
    }
    // Make sure our error handler is attached before userland ones.
    $c0112fd138de8ccc$var$prependListener(dest, "error", onerror);
    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
        $c0112fd138de8ccc$var$debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
        $c0112fd138de8ccc$var$debug("unpipe");
        src.unpipe(dest);
    }
    // tell the dest that it's being piped to
    dest.emit("pipe", src);
    // start the flow if it hasn't been started already.
    if (!state.flowing) {
        $c0112fd138de8ccc$var$debug("pipe resume");
        src.resume();
    }
    return dest;
};
function $c0112fd138de8ccc$var$pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        $c0112fd138de8ccc$var$debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && $c0112fd138de8ccc$var$EElistenerCount(src, "data")) {
            state.flowing = true;
            $c0112fd138de8ccc$var$flow(src);
        }
    };
}
$c0112fd138de8ccc$var$Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    };
    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this;
    // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes;
        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
    }
    // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit("unpipe", this, {
            hasUnpiped: false
        });
        return this;
    }
    // try to find the right one.
    var index = $c0112fd138de8ccc$var$indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
};
// set up data events if they are asked for
// Ensure readable listeners eventually get something
$c0112fd138de8ccc$var$Readable.prototype.on = function(ev, fn) {
    const res = $goqE7.prototype.on.call(this, ev, fn);
    const state = this._readableState;
    if (ev === "data") {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount("readable") > 0;
        // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            $c0112fd138de8ccc$var$debug("on readable", state.length, state.reading);
            if (state.length) $c0112fd138de8ccc$var$emitReadable(this);
            else if (!state.reading) $jx7mO.nextTick($c0112fd138de8ccc$var$nReadingNextTick, this);
        }
    }
    return res;
};
$c0112fd138de8ccc$var$Readable.prototype.addListener = $c0112fd138de8ccc$var$Readable.prototype.on;
$c0112fd138de8ccc$var$Readable.prototype.removeListener = function(ev, fn) {
    const res = $goqE7.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $jx7mO.nextTick($c0112fd138de8ccc$var$updateReadableListening, this);
    return res;
};
$c0112fd138de8ccc$var$Readable.prototype.removeAllListeners = function(ev) {
    const res = $goqE7.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $jx7mO.nextTick($c0112fd138de8ccc$var$updateReadableListening, this);
    return res;
};
function $c0112fd138de8ccc$var$updateReadableListening(self1) {
    const state = self1._readableState;
    state.readableListening = self1.listenerCount("readable") > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true;
    else if (self1.listenerCount("data") > 0) self1.resume();
}
function $c0112fd138de8ccc$var$nReadingNextTick(self1) {
    $c0112fd138de8ccc$var$debug("readable nexttick read 0");
    self1.read(0);
}
// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
$c0112fd138de8ccc$var$Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        $c0112fd138de8ccc$var$debug("resume");
        // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        $c0112fd138de8ccc$var$resume(this, state);
    }
    state.paused = false;
    return this;
};
function $c0112fd138de8ccc$var$resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        $jx7mO.nextTick($c0112fd138de8ccc$var$resume_, stream, state);
    }
}
function $c0112fd138de8ccc$var$resume_(stream, state) {
    $c0112fd138de8ccc$var$debug("resume", state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit("resume");
    $c0112fd138de8ccc$var$flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
$c0112fd138de8ccc$var$Readable.prototype.pause = function() {
    $c0112fd138de8ccc$var$debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        $c0112fd138de8ccc$var$debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
};
function $c0112fd138de8ccc$var$flow(stream) {
    const state = stream._readableState;
    $c0112fd138de8ccc$var$debug("flow", state.flowing);
    while(state.flowing && stream.read() !== null);
}
// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
$c0112fd138de8ccc$var$Readable.prototype.wrap = function(stream) {
    var state = this._readableState;
    var paused = false;
    stream.on("end", ()=>{
        $c0112fd138de8ccc$var$debug("wrapped end");
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) this.push(chunk);
        }
        this.push(null);
    });
    stream.on("data", (chunk)=>{
        $c0112fd138de8ccc$var$debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk);
        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    });
    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === "function") this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
    // proxy certain important events.
    for(var n = 0; n < $c0112fd138de8ccc$var$kProxyEvents.length; n++)stream.on($c0112fd138de8ccc$var$kProxyEvents[n], this.emit.bind(this, $c0112fd138de8ccc$var$kProxyEvents[n]));
    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = (n)=>{
        $c0112fd138de8ccc$var$debug("wrapped _read", n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};

if (typeof Symbol === "function") $c0112fd138de8ccc$var$Readable.prototype[Symbol.asyncIterator] = function() {
    if ($c0112fd138de8ccc$var$createReadableStreamAsyncIterator === undefined) $c0112fd138de8ccc$var$createReadableStreamAsyncIterator = (parcelRequire("5lzEk"));
    return $c0112fd138de8ccc$var$createReadableStreamAsyncIterator(this);
};
Object.defineProperty($c0112fd138de8ccc$var$Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty($c0112fd138de8ccc$var$Readable.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty($c0112fd138de8ccc$var$Readable.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
});
// exposed for testing purposes only.
$c0112fd138de8ccc$var$Readable._fromList = $c0112fd138de8ccc$var$fromList;
Object.defineProperty($c0112fd138de8ccc$var$Readable.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get () {
        return this._readableState.length;
    }
});
// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $c0112fd138de8ccc$var$fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function $c0112fd138de8ccc$var$endReadable(stream) {
    var state = stream._readableState;
    $c0112fd138de8ccc$var$debug("endReadable", state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        $jx7mO.nextTick($c0112fd138de8ccc$var$endReadableNT, state, stream);
    }
}
function $c0112fd138de8ccc$var$endReadableNT(state, stream) {
    $c0112fd138de8ccc$var$debug("endReadableNT", state.endEmitted, state.length);
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            const wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}

if (typeof Symbol === "function") $c0112fd138de8ccc$var$Readable.from = function(iterable, opts) {
    if ($c0112fd138de8ccc$var$from === undefined) $c0112fd138de8ccc$var$from = (parcelRequire("luTeT"));
    return $c0112fd138de8ccc$var$from($c0112fd138de8ccc$var$Readable, iterable, opts);
};
function $c0112fd138de8ccc$var$indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

});
parcelRequire.register("goqE7", function(module, exports) {

module.exports = (parcelRequire("eCV8S")).EventEmitter;

});

parcelRequire.register("46d0h", function(module, exports) {
"use strict";
function $2fc1cf2d2aa88f45$var$ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function $2fc1cf2d2aa88f45$var$_objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? $2fc1cf2d2aa88f45$var$ownKeys(Object(source), !0).forEach(function(key) {
            $2fc1cf2d2aa88f45$var$_defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : $2fc1cf2d2aa88f45$var$ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function $2fc1cf2d2aa88f45$var$_defineProperty(obj, key, value) {
    key = $2fc1cf2d2aa88f45$var$_toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $2fc1cf2d2aa88f45$var$_toPropertyKey(arg) {
    var key = $2fc1cf2d2aa88f45$var$_toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
}
function $2fc1cf2d2aa88f45$var$_toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}

var $fLrIr = parcelRequire("fLrIr");
const $2fc1cf2d2aa88f45$var$Buffer = $fLrIr.Buffer;

var $XDU19 = parcelRequire("XDU19");
const $2fc1cf2d2aa88f45$var$inspect = $XDU19.inspect;
const $2fc1cf2d2aa88f45$var$custom = $2fc1cf2d2aa88f45$var$inspect && $2fc1cf2d2aa88f45$var$inspect.custom || "inspect";
function $2fc1cf2d2aa88f45$var$copyBuffer(src, target, offset) {
    $2fc1cf2d2aa88f45$var$Buffer.prototype.copy.call(src, target, offset);
}
module.exports = class BufferList {
    constructor(){
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    push(v) {
        const entry = {
            data: v,
            next: null
        };
        if (this.length > 0) this.tail.next = entry;
        else this.head = entry;
        this.tail = entry;
        ++this.length;
    }
    unshift(v) {
        const entry = {
            data: v,
            next: this.head
        };
        if (this.length === 0) this.tail = entry;
        this.head = entry;
        ++this.length;
    }
    shift() {
        if (this.length === 0) return;
        const ret = this.head.data;
        if (this.length === 1) this.head = this.tail = null;
        else this.head = this.head.next;
        --this.length;
        return ret;
    }
    clear() {
        this.head = this.tail = null;
        this.length = 0;
    }
    join(s) {
        if (this.length === 0) return "";
        var p = this.head;
        var ret = "" + p.data;
        while(p = p.next)ret += s + p.data;
        return ret;
    }
    concat(n) {
        if (this.length === 0) return $2fc1cf2d2aa88f45$var$Buffer.alloc(0);
        const ret = $2fc1cf2d2aa88f45$var$Buffer.allocUnsafe(n >>> 0);
        var p = this.head;
        var i = 0;
        while(p){
            $2fc1cf2d2aa88f45$var$copyBuffer(p.data, ret, i);
            i += p.data.length;
            p = p.next;
        }
        return ret;
    }
    // Consumes a specified amount of bytes or characters from the buffered data.
    consume(n, hasStrings) {
        var ret;
        if (n < this.head.data.length) {
            // `slice` is the same for buffers and strings.
            ret = this.head.data.slice(0, n);
            this.head.data = this.head.data.slice(n);
        } else if (n === this.head.data.length) // First chunk is a perfect match.
        ret = this.shift();
        else // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
        return ret;
    }
    first() {
        return this.head.data;
    }
    // Consumes a specified amount of characters from the buffered data.
    _getString(n) {
        var p = this.head;
        var c = 1;
        var ret = p.data;
        n -= ret.length;
        while(p = p.next){
            const str = p.data;
            const nb = n > str.length ? str.length : n;
            if (nb === str.length) ret += str;
            else ret += str.slice(0, n);
            n -= nb;
            if (n === 0) {
                if (nb === str.length) {
                    ++c;
                    if (p.next) this.head = p.next;
                    else this.head = this.tail = null;
                } else {
                    this.head = p;
                    p.data = str.slice(nb);
                }
                break;
            }
            ++c;
        }
        this.length -= c;
        return ret;
    }
    // Consumes a specified amount of bytes from the buffered data.
    _getBuffer(n) {
        const ret = $2fc1cf2d2aa88f45$var$Buffer.allocUnsafe(n);
        var p = this.head;
        var c = 1;
        p.data.copy(ret);
        n -= p.data.length;
        while(p = p.next){
            const buf = p.data;
            const nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;
            if (n === 0) {
                if (nb === buf.length) {
                    ++c;
                    if (p.next) this.head = p.next;
                    else this.head = this.tail = null;
                } else {
                    this.head = p;
                    p.data = buf.slice(nb);
                }
                break;
            }
            ++c;
        }
        this.length -= c;
        return ret;
    }
    // Make sure the linked list only shows the minimal necessary information.
    [$2fc1cf2d2aa88f45$var$custom](_, options) {
        return $2fc1cf2d2aa88f45$var$inspect(this, $2fc1cf2d2aa88f45$var$_objectSpread($2fc1cf2d2aa88f45$var$_objectSpread({}, options), {}, {
            // Only inspect one level.
            depth: 0,
            // It should not recurse.
            customInspect: false
        }));
    }
};

});

parcelRequire.register("hpewg", function(module, exports) {

var $jx7mO = parcelRequire("jx7mO");
"use strict";
// undocumented cb() API, needed for core, not for public API
function $cac008bd4d9b937e$var$destroy(err, cb) {
    const readableDestroyed = this._readableState && this._readableState.destroyed;
    const writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err);
        else if (err) {
            if (!this._writableState) $jx7mO.nextTick($cac008bd4d9b937e$var$emitErrorNT, this, err);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                $jx7mO.nextTick($cac008bd4d9b937e$var$emitErrorNT, this, err);
            }
        }
        return this;
    }
    // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
    // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err || null, (err)=>{
        if (!cb && err) {
            if (!this._writableState) $jx7mO.nextTick($cac008bd4d9b937e$var$emitErrorAndCloseNT, this, err);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                $jx7mO.nextTick($cac008bd4d9b937e$var$emitErrorAndCloseNT, this, err);
            } else $jx7mO.nextTick($cac008bd4d9b937e$var$emitCloseNT, this);
        } else if (cb) {
            $jx7mO.nextTick($cac008bd4d9b937e$var$emitCloseNT, this);
            cb(err);
        } else $jx7mO.nextTick($cac008bd4d9b937e$var$emitCloseNT, this);
    });
    return this;
}
function $cac008bd4d9b937e$var$emitErrorAndCloseNT(self, err) {
    $cac008bd4d9b937e$var$emitErrorNT(self, err);
    $cac008bd4d9b937e$var$emitCloseNT(self);
}
function $cac008bd4d9b937e$var$emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit("close");
}
function $cac008bd4d9b937e$var$undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function $cac008bd4d9b937e$var$emitErrorNT(self, err) {
    self.emit("error", err);
}
function $cac008bd4d9b937e$var$errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    const rState = stream._readableState;
    const wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit("error", err);
}
module.exports = {
    destroy: $cac008bd4d9b937e$var$destroy,
    undestroy: $cac008bd4d9b937e$var$undestroy,
    errorOrDestroy: $cac008bd4d9b937e$var$errorOrDestroy
};

});

parcelRequire.register("7WeAy", function(module, exports) {
"use strict";

var $k84mj = parcelRequire("k84mj");
const $5c79442ec4bbe207$var$ERR_INVALID_OPT_VALUE = $k84mj.codes.ERR_INVALID_OPT_VALUE;
function $5c79442ec4bbe207$var$highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function $5c79442ec4bbe207$var$getHighWaterMark(state, options, duplexKey, isDuplex) {
    const hwm = $5c79442ec4bbe207$var$highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            const name = isDuplex ? duplexKey : "highWaterMark";
            throw new $5c79442ec4bbe207$var$ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    }
    // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: $5c79442ec4bbe207$var$getHighWaterMark
};

});
parcelRequire.register("k84mj", function(module, exports) {

$parcel$export(module.exports, "codes", () => $ea77ef9237a1cc1d$export$e45cb6485273080e, (v) => $ea77ef9237a1cc1d$export$e45cb6485273080e = v);
var $ea77ef9237a1cc1d$export$e45cb6485273080e;
"use strict";
function $ea77ef9237a1cc1d$var$_inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var $ea77ef9237a1cc1d$var$codes = {};
function $ea77ef9237a1cc1d$var$createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError = /*#__PURE__*/ function(_Base) {
        $ea77ef9237a1cc1d$var$_inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code;
    $ea77ef9237a1cc1d$var$codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function $ea77ef9237a1cc1d$var$oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function $ea77ef9237a1cc1d$var$startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function $ea77ef9237a1cc1d$var$endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function $ea77ef9237a1cc1d$var$includes(str, search, start) {
    if (typeof start !== "number") start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
$ea77ef9237a1cc1d$var$createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
$ea77ef9237a1cc1d$var$createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === "string" && $ea77ef9237a1cc1d$var$startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
    } else determiner = "must be";
    var msg;
    if ($ea77ef9237a1cc1d$var$endsWith(name, " argument")) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat($ea77ef9237a1cc1d$var$oneOf(expected, "type"));
    else {
        var type = $ea77ef9237a1cc1d$var$includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat($ea77ef9237a1cc1d$var$oneOf(expected, "type"));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
$ea77ef9237a1cc1d$var$createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
$ea77ef9237a1cc1d$var$createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
    return "The " + name + " method is not implemented";
});
$ea77ef9237a1cc1d$var$createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
$ea77ef9237a1cc1d$var$createErrorType("ERR_STREAM_DESTROYED", function(name) {
    return "Cannot call " + name + " after a stream was destroyed";
});
$ea77ef9237a1cc1d$var$createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
$ea77ef9237a1cc1d$var$createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
$ea77ef9237a1cc1d$var$createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
$ea77ef9237a1cc1d$var$createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
$ea77ef9237a1cc1d$var$createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
}, TypeError);
$ea77ef9237a1cc1d$var$createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
$ea77ef9237a1cc1d$export$e45cb6485273080e = $ea77ef9237a1cc1d$var$codes;

});


parcelRequire.register("6dlRc", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

var $jx7mO = parcelRequire("jx7mO");
"use strict";
/*<replacement>*/ var $4864e95010ada599$var$objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = $4864e95010ada599$var$Duplex;

var $gumRT = parcelRequire("gumRT");

var $1rInS = parcelRequire("1rInS");

(parcelRequire("6QnvD"))($4864e95010ada599$var$Duplex, $gumRT);
{
    // Allow the keys array to be GC'ed.
    const keys = $4864e95010ada599$var$objectKeys($1rInS.prototype);
    for(var $4864e95010ada599$var$v = 0; $4864e95010ada599$var$v < keys.length; $4864e95010ada599$var$v++){
        const method = keys[$4864e95010ada599$var$v];
        if (!$4864e95010ada599$var$Duplex.prototype[method]) $4864e95010ada599$var$Duplex.prototype[method] = $1rInS.prototype[method];
    }
}function $4864e95010ada599$var$Duplex(options) {
    if (!(this instanceof $4864e95010ada599$var$Duplex)) return new $4864e95010ada599$var$Duplex(options);
    $gumRT.call(this, options);
    $1rInS.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", $4864e95010ada599$var$onend);
        }
    }
}
Object.defineProperty($4864e95010ada599$var$Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get () {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty($4864e95010ada599$var$Duplex.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty($4864e95010ada599$var$Duplex.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get () {
        return this._writableState.length;
    }
});
// the no-half-open enforcer
function $4864e95010ada599$var$onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return;
    // no more data can be written.
    // But allow more writes to happen in this tick.
    $jx7mO.nextTick($4864e95010ada599$var$onEndNT, this);
}
function $4864e95010ada599$var$onEndNT(self) {
    self.end();
}
Object.defineProperty($4864e95010ada599$var$Duplex.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get () {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set (value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

});
parcelRequire.register("1rInS", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

var $jx7mO = parcelRequire("jx7mO");
"use strict";
module.exports = $10dabdd788463c71$var$Writable;
/* <replacement> */ function $10dabdd788463c71$var$WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
}
// It seems a linked list but it is not
// there will be only 2 of these for each stream
function $10dabdd788463c71$var$CorkedRequest(state) {
    this.next = null;
    this.entry = null;
    this.finish = ()=>{
        $10dabdd788463c71$var$onCorkedFinish(this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var $10dabdd788463c71$var$Duplex;
/*</replacement>*/ $10dabdd788463c71$var$Writable.WritableState = $10dabdd788463c71$var$WritableState;

/*<replacement>*/ const $10dabdd788463c71$var$internalUtil = {
    deprecate: (parcelRequire("e1ZXC"))
};

var $goqE7 = parcelRequire("goqE7");

var $fLrIr = parcelRequire("fLrIr");
var $10dabdd788463c71$require$Buffer = $fLrIr.Buffer;
const $10dabdd788463c71$var$OurUint8Array = (typeof $parcel$global !== "undefined" ? $parcel$global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
function $10dabdd788463c71$var$_uint8ArrayToBuffer(chunk) {
    return $10dabdd788463c71$require$Buffer.from(chunk);
}
function $10dabdd788463c71$var$_isUint8Array(obj) {
    return $10dabdd788463c71$require$Buffer.isBuffer(obj) || obj instanceof $10dabdd788463c71$var$OurUint8Array;
}

var $hpewg = parcelRequire("hpewg");

var $7WeAy = parcelRequire("7WeAy");
const $10dabdd788463c71$var$getHighWaterMark = $7WeAy.getHighWaterMark;

var $k84mj = parcelRequire("k84mj");
var $10dabdd788463c71$require$_require$codes = $k84mj.codes;
const $10dabdd788463c71$var$ERR_INVALID_ARG_TYPE = $10dabdd788463c71$require$_require$codes.ERR_INVALID_ARG_TYPE, $10dabdd788463c71$var$ERR_METHOD_NOT_IMPLEMENTED = $10dabdd788463c71$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $10dabdd788463c71$var$ERR_MULTIPLE_CALLBACK = $10dabdd788463c71$require$_require$codes.ERR_MULTIPLE_CALLBACK, $10dabdd788463c71$var$ERR_STREAM_CANNOT_PIPE = $10dabdd788463c71$require$_require$codes.ERR_STREAM_CANNOT_PIPE, $10dabdd788463c71$var$ERR_STREAM_DESTROYED = $10dabdd788463c71$require$_require$codes.ERR_STREAM_DESTROYED, $10dabdd788463c71$var$ERR_STREAM_NULL_VALUES = $10dabdd788463c71$require$_require$codes.ERR_STREAM_NULL_VALUES, $10dabdd788463c71$var$ERR_STREAM_WRITE_AFTER_END = $10dabdd788463c71$require$_require$codes.ERR_STREAM_WRITE_AFTER_END, $10dabdd788463c71$var$ERR_UNKNOWN_ENCODING = $10dabdd788463c71$require$_require$codes.ERR_UNKNOWN_ENCODING;
const $10dabdd788463c71$var$errorOrDestroy = $hpewg.errorOrDestroy;

(parcelRequire("6QnvD"))($10dabdd788463c71$var$Writable, $goqE7);
function $10dabdd788463c71$var$nop() {}

function $10dabdd788463c71$var$WritableState(options, stream, isDuplex) {
    $10dabdd788463c71$var$Duplex = $10dabdd788463c71$var$Duplex || (parcelRequire("6dlRc"));
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof $10dabdd788463c71$var$Duplex;
    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = $10dabdd788463c71$var$getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
    // if _final has been called
    this.finalCalled = false;
    // drain event flag.
    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;
    // has it been destroyed
    this.destroyed = false;
    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;
    // a flag to see when we're in the middle of a write.
    this.writing = false;
    // when true all writes will be buffered until .uncork() call
    this.corked = 0;
    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;
    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;
    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        $10dabdd788463c71$var$onwrite(stream, er);
    };
    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;
    // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;
    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;
    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy;
    // count buffered requests
    this.bufferedRequestCount = 0;
    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new $10dabdd788463c71$var$CorkedRequest(this);
}
$10dabdd788463c71$var$WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty($10dabdd788463c71$var$WritableState.prototype, "buffer", {
            get: $10dabdd788463c71$var$internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
    } catch (_) {}
})();
// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var $10dabdd788463c71$var$realHasInstance;
if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    $10dabdd788463c71$var$realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty($10dabdd788463c71$var$Writable, Symbol.hasInstance, {
        value: function value(object) {
            if ($10dabdd788463c71$var$realHasInstance.call(this, object)) return true;
            if (this !== $10dabdd788463c71$var$Writable) return false;
            return object && object._writableState instanceof $10dabdd788463c71$var$WritableState;
        }
    });
} else $10dabdd788463c71$var$realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};

function $10dabdd788463c71$var$Writable(options) {
    $10dabdd788463c71$var$Duplex = $10dabdd788463c71$var$Duplex || (parcelRequire("6dlRc"));
    // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    const isDuplex = this instanceof $10dabdd788463c71$var$Duplex;
    if (!isDuplex && !$10dabdd788463c71$var$realHasInstance.call($10dabdd788463c71$var$Writable, this)) return new $10dabdd788463c71$var$Writable(options);
    this._writableState = new $10dabdd788463c71$var$WritableState(options, this, isDuplex);
    // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options.final === "function") this._final = options.final;
    }
    $goqE7.call(this);
}
// Otherwise people can pipe Writable streams, which is just wrong.
$10dabdd788463c71$var$Writable.prototype.pipe = function() {
    $10dabdd788463c71$var$errorOrDestroy(this, new $10dabdd788463c71$var$ERR_STREAM_CANNOT_PIPE());
};
function $10dabdd788463c71$var$writeAfterEnd(stream, cb) {
    var er = new $10dabdd788463c71$var$ERR_STREAM_WRITE_AFTER_END();
    // TODO: defer error events consistently everywhere, not just the cb
    $10dabdd788463c71$var$errorOrDestroy(stream, er);
    $jx7mO.nextTick(cb, er);
}
// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function $10dabdd788463c71$var$validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new $10dabdd788463c71$var$ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== "string" && !state.objectMode) er = new $10dabdd788463c71$var$ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer"
    ], chunk);
    if (er) {
        $10dabdd788463c71$var$errorOrDestroy(stream, er);
        $jx7mO.nextTick(cb, er);
        return false;
    }
    return true;
}
$10dabdd788463c71$var$Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && $10dabdd788463c71$var$_isUint8Array(chunk);
    if (isBuf && !$10dabdd788463c71$require$Buffer.isBuffer(chunk)) chunk = $10dabdd788463c71$var$_uint8ArrayToBuffer(chunk);
    if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = "buffer";
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== "function") cb = $10dabdd788463c71$var$nop;
    if (state.ending) $10dabdd788463c71$var$writeAfterEnd(this, cb);
    else if (isBuf || $10dabdd788463c71$var$validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = $10dabdd788463c71$var$writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
$10dabdd788463c71$var$Writable.prototype.cork = function() {
    this._writableState.corked++;
};
$10dabdd788463c71$var$Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) $10dabdd788463c71$var$clearBuffer(this, state);
    }
};
$10dabdd788463c71$var$Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === "string") encoding = encoding.toLowerCase();
    if (!([
        "hex",
        "utf8",
        "utf-8",
        "ascii",
        "binary",
        "base64",
        "ucs2",
        "ucs-2",
        "utf16le",
        "utf-16le",
        "raw"
    ].indexOf((encoding + "").toLowerCase()) > -1)) throw new $10dabdd788463c71$var$ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty($10dabdd788463c71$var$Writable.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function $10dabdd788463c71$var$decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") chunk = $10dabdd788463c71$require$Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty($10dabdd788463c71$var$Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function $10dabdd788463c71$var$writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = $10dabdd788463c71$var$decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else $10dabdd788463c71$var$doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function $10dabdd788463c71$var$doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new $10dabdd788463c71$var$ERR_STREAM_DESTROYED("write"));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function $10dabdd788463c71$var$onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        $jx7mO.nextTick(cb, er);
        // this can emit finish, and it will always happen
        // after error
        $jx7mO.nextTick($10dabdd788463c71$var$finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        $10dabdd788463c71$var$errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        $10dabdd788463c71$var$errorOrDestroy(stream, er);
        // this can emit finish, but finish must
        // always follow error
        $10dabdd788463c71$var$finishMaybe(stream, state);
    }
}
function $10dabdd788463c71$var$onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function $10dabdd788463c71$var$onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== "function") throw new $10dabdd788463c71$var$ERR_MULTIPLE_CALLBACK();
    $10dabdd788463c71$var$onwriteStateUpdate(state);
    if (er) $10dabdd788463c71$var$onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = $10dabdd788463c71$var$needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) $10dabdd788463c71$var$clearBuffer(stream, state);
        if (sync) $jx7mO.nextTick($10dabdd788463c71$var$afterWrite, stream, state, finished, cb);
        else $10dabdd788463c71$var$afterWrite(stream, state, finished, cb);
    }
}
function $10dabdd788463c71$var$afterWrite(stream, state, finished, cb) {
    if (!finished) $10dabdd788463c71$var$onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    $10dabdd788463c71$var$finishMaybe(stream, state);
}
// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function $10dabdd788463c71$var$onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
    }
}
// if there's something in the buffer waiting, then process it
function $10dabdd788463c71$var$clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        $10dabdd788463c71$var$doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new $10dabdd788463c71$var$CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            $10dabdd788463c71$var$doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
$10dabdd788463c71$var$Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new $10dabdd788463c71$var$ERR_METHOD_NOT_IMPLEMENTED("_write()"));
};
$10dabdd788463c71$var$Writable.prototype._writev = null;
$10dabdd788463c71$var$Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
    // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    }
    // ignore unnecessary end() calls.
    if (!state.ending) $10dabdd788463c71$var$endWritable(this, state, cb);
    return this;
};
Object.defineProperty($10dabdd788463c71$var$Writable.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get () {
        return this._writableState.length;
    }
});
function $10dabdd788463c71$var$needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function $10dabdd788463c71$var$callFinal(stream, state) {
    stream._final((err)=>{
        state.pendingcb--;
        if (err) $10dabdd788463c71$var$errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit("prefinish");
        $10dabdd788463c71$var$finishMaybe(stream, state);
    });
}
function $10dabdd788463c71$var$prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            $jx7mO.nextTick($10dabdd788463c71$var$callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit("prefinish");
        }
    }
}
function $10dabdd788463c71$var$finishMaybe(stream, state) {
    var need = $10dabdd788463c71$var$needFinish(state);
    if (need) {
        $10dabdd788463c71$var$prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                const rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function $10dabdd788463c71$var$endWritable(stream, state, cb) {
    state.ending = true;
    $10dabdd788463c71$var$finishMaybe(stream, state);
    if (cb) {
        if (state.finished) $jx7mO.nextTick(cb);
        else stream.once("finish", cb);
    }
    state.ended = true;
    stream.writable = false;
}
function $10dabdd788463c71$var$onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    }
    // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty($10dabdd788463c71$var$Writable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get () {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set (value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
$10dabdd788463c71$var$Writable.prototype.destroy = $hpewg.destroy;
$10dabdd788463c71$var$Writable.prototype._undestroy = $hpewg.undestroy;
$10dabdd788463c71$var$Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

});


parcelRequire.register("5lzEk", function(module, exports) {

var $jx7mO = parcelRequire("jx7mO");
"use strict";

var $bJNCD = parcelRequire("bJNCD");
const $3e4a912e04a1063d$var$kLastResolve = Symbol("lastResolve");
const $3e4a912e04a1063d$var$kLastReject = Symbol("lastReject");
const $3e4a912e04a1063d$var$kError = Symbol("error");
const $3e4a912e04a1063d$var$kEnded = Symbol("ended");
const $3e4a912e04a1063d$var$kLastPromise = Symbol("lastPromise");
const $3e4a912e04a1063d$var$kHandlePromise = Symbol("handlePromise");
const $3e4a912e04a1063d$var$kStream = Symbol("stream");
function $3e4a912e04a1063d$var$createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function $3e4a912e04a1063d$var$readAndResolve(iter) {
    const resolve = iter[$3e4a912e04a1063d$var$kLastResolve];
    if (resolve !== null) {
        const data = iter[$3e4a912e04a1063d$var$kStream].read();
        // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[$3e4a912e04a1063d$var$kLastPromise] = null;
            iter[$3e4a912e04a1063d$var$kLastResolve] = null;
            iter[$3e4a912e04a1063d$var$kLastReject] = null;
            resolve($3e4a912e04a1063d$var$createIterResult(data, false));
        }
    }
}
function $3e4a912e04a1063d$var$onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    $jx7mO.nextTick($3e4a912e04a1063d$var$readAndResolve, iter);
}
function $3e4a912e04a1063d$var$wrapForNext(lastPromise, iter) {
    return (resolve, reject)=>{
        lastPromise.then(()=>{
            if (iter[$3e4a912e04a1063d$var$kEnded]) {
                resolve($3e4a912e04a1063d$var$createIterResult(undefined, true));
                return;
            }
            iter[$3e4a912e04a1063d$var$kHandlePromise](resolve, reject);
        }, reject);
    };
}
const $3e4a912e04a1063d$var$AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
const $3e4a912e04a1063d$var$ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf({
    get stream () {
        return this[$3e4a912e04a1063d$var$kStream];
    },
    next () {
        // if we have detected an error in the meanwhile
        // reject straight away
        const error = this[$3e4a912e04a1063d$var$kError];
        if (error !== null) return Promise.reject(error);
        if (this[$3e4a912e04a1063d$var$kEnded]) return Promise.resolve($3e4a912e04a1063d$var$createIterResult(undefined, true));
        if (this[$3e4a912e04a1063d$var$kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise((resolve, reject)=>{
            $jx7mO.nextTick(()=>{
                if (this[$3e4a912e04a1063d$var$kError]) reject(this[$3e4a912e04a1063d$var$kError]);
                else resolve($3e4a912e04a1063d$var$createIterResult(undefined, true));
            });
        });
        // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        const lastPromise = this[$3e4a912e04a1063d$var$kLastPromise];
        let promise;
        if (lastPromise) promise = new Promise($3e4a912e04a1063d$var$wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            const data = this[$3e4a912e04a1063d$var$kStream].read();
            if (data !== null) return Promise.resolve($3e4a912e04a1063d$var$createIterResult(data, false));
            promise = new Promise(this[$3e4a912e04a1063d$var$kHandlePromise]);
        }
        this[$3e4a912e04a1063d$var$kLastPromise] = promise;
        return promise;
    },
    [Symbol.asyncIterator] () {
        return this;
    },
    return () {
        // destroy(err, cb) is a private API
        // we can guarantee we have that here, because we control the
        // Readable class this is attached to
        return new Promise((resolve, reject)=>{
            this[$3e4a912e04a1063d$var$kStream].destroy(null, (err)=>{
                if (err) {
                    reject(err);
                    return;
                }
                resolve($3e4a912e04a1063d$var$createIterResult(undefined, true));
            });
        });
    }
}, $3e4a912e04a1063d$var$AsyncIteratorPrototype);
const $3e4a912e04a1063d$var$createReadableStreamAsyncIterator = (stream)=>{
    const iterator = Object.create($3e4a912e04a1063d$var$ReadableStreamAsyncIteratorPrototype, {
        [$3e4a912e04a1063d$var$kStream]: {
            value: stream,
            writable: true
        },
        [$3e4a912e04a1063d$var$kLastResolve]: {
            value: null,
            writable: true
        },
        [$3e4a912e04a1063d$var$kLastReject]: {
            value: null,
            writable: true
        },
        [$3e4a912e04a1063d$var$kError]: {
            value: null,
            writable: true
        },
        [$3e4a912e04a1063d$var$kEnded]: {
            value: stream._readableState.endEmitted,
            writable: true
        },
        // the function passed to new Promise
        // is cached so we avoid allocating a new
        // closure at every run
        [$3e4a912e04a1063d$var$kHandlePromise]: {
            value: (resolve, reject)=>{
                const data = iterator[$3e4a912e04a1063d$var$kStream].read();
                if (data) {
                    iterator[$3e4a912e04a1063d$var$kLastPromise] = null;
                    iterator[$3e4a912e04a1063d$var$kLastResolve] = null;
                    iterator[$3e4a912e04a1063d$var$kLastReject] = null;
                    resolve($3e4a912e04a1063d$var$createIterResult(data, false));
                } else {
                    iterator[$3e4a912e04a1063d$var$kLastResolve] = resolve;
                    iterator[$3e4a912e04a1063d$var$kLastReject] = reject;
                }
            },
            writable: true
        }
    });
    iterator[$3e4a912e04a1063d$var$kLastPromise] = null;
    $bJNCD(stream, (err)=>{
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            const reject = iterator[$3e4a912e04a1063d$var$kLastReject];
            // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[$3e4a912e04a1063d$var$kLastPromise] = null;
                iterator[$3e4a912e04a1063d$var$kLastResolve] = null;
                iterator[$3e4a912e04a1063d$var$kLastReject] = null;
                reject(err);
            }
            iterator[$3e4a912e04a1063d$var$kError] = err;
            return;
        }
        const resolve = iterator[$3e4a912e04a1063d$var$kLastResolve];
        if (resolve !== null) {
            iterator[$3e4a912e04a1063d$var$kLastPromise] = null;
            iterator[$3e4a912e04a1063d$var$kLastResolve] = null;
            iterator[$3e4a912e04a1063d$var$kLastReject] = null;
            resolve($3e4a912e04a1063d$var$createIterResult(undefined, true));
        }
        iterator[$3e4a912e04a1063d$var$kEnded] = true;
    });
    stream.on("readable", $3e4a912e04a1063d$var$onReadable.bind(null, iterator));
    return iterator;
};
module.exports = $3e4a912e04a1063d$var$createReadableStreamAsyncIterator;

});
parcelRequire.register("bJNCD", function(module, exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";

var $k84mj = parcelRequire("k84mj");
const $88ba6394baffd7b8$var$ERR_STREAM_PREMATURE_CLOSE = $k84mj.codes.ERR_STREAM_PREMATURE_CLOSE;
function $88ba6394baffd7b8$var$once(callback) {
    let called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function $88ba6394baffd7b8$var$noop() {}
function $88ba6394baffd7b8$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function $88ba6394baffd7b8$var$eos(stream, opts, callback) {
    if (typeof opts === "function") return $88ba6394baffd7b8$var$eos(stream, null, opts);
    if (!opts) opts = {};
    callback = $88ba6394baffd7b8$var$once(callback || $88ba6394baffd7b8$var$noop);
    let readable = opts.readable || opts.readable !== false && stream.readable;
    let writable = opts.writable || opts.writable !== false && stream.writable;
    const onlegacyfinish = ()=>{
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    const onfinish = ()=>{
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    const onend = ()=>{
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    const onerror = (err)=>{
        callback.call(stream, err);
    };
    const onclose = ()=>{
        let err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new $88ba6394baffd7b8$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new $88ba6394baffd7b8$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    const onrequest = ()=>{
        stream.req.on("finish", onfinish);
    };
    if ($88ba6394baffd7b8$var$isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req) onrequest();
        else stream.on("request", onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
    }
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false) stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req) stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
    };
}
module.exports = $88ba6394baffd7b8$var$eos;

});


parcelRequire.register("luTeT", function(module, exports) {
module.exports = function() {
    throw new Error("Readable.from is not available in the browser");
};

});


parcelRequire.register("1YIF6", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
"use strict";
module.exports = $170e09f50d78e0d4$var$Transform;

var $k84mj = parcelRequire("k84mj");
var $170e09f50d78e0d4$require$_require$codes = $k84mj.codes;
const $170e09f50d78e0d4$var$ERR_METHOD_NOT_IMPLEMENTED = $170e09f50d78e0d4$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $170e09f50d78e0d4$var$ERR_MULTIPLE_CALLBACK = $170e09f50d78e0d4$require$_require$codes.ERR_MULTIPLE_CALLBACK, $170e09f50d78e0d4$var$ERR_TRANSFORM_ALREADY_TRANSFORMING = $170e09f50d78e0d4$require$_require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, $170e09f50d78e0d4$var$ERR_TRANSFORM_WITH_LENGTH_0 = $170e09f50d78e0d4$require$_require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var $6dlRc = parcelRequire("6dlRc");

(parcelRequire("6QnvD"))($170e09f50d78e0d4$var$Transform, $6dlRc);
function $170e09f50d78e0d4$var$afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit("error", new $170e09f50d78e0d4$var$ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function $170e09f50d78e0d4$var$Transform(options) {
    if (!(this instanceof $170e09f50d78e0d4$var$Transform)) return new $170e09f50d78e0d4$var$Transform(options);
    $6dlRc.call(this, options);
    this._transformState = {
        afterTransform: $170e09f50d78e0d4$var$afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    };
    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;
    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
    }
    // When the writable side finishes, then flush out anything remaining.
    this.on("prefinish", $170e09f50d78e0d4$var$prefinish);
}
function $170e09f50d78e0d4$var$prefinish() {
    if (typeof this._flush === "function" && !this._readableState.destroyed) this._flush((er, data)=>{
        $170e09f50d78e0d4$var$done(this, er, data);
    });
    else $170e09f50d78e0d4$var$done(this, null, null);
}
$170e09f50d78e0d4$var$Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return $6dlRc.prototype.push.call(this, chunk, encoding);
};
// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
$170e09f50d78e0d4$var$Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new $170e09f50d78e0d4$var$ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
};
$170e09f50d78e0d4$var$Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
};
// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
$170e09f50d78e0d4$var$Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
$170e09f50d78e0d4$var$Transform.prototype._destroy = function(err, cb) {
    $6dlRc.prototype._destroy.call(this, err, (err2)=>{
        cb(err2);
    });
};
function $170e09f50d78e0d4$var$done(stream, er, data) {
    if (er) return stream.emit("error", er);
    if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);
    // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new $170e09f50d78e0d4$var$ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new $170e09f50d78e0d4$var$ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

});

parcelRequire.register("jdFPr", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
"use strict";
module.exports = $dfdfad882241bcfa$var$PassThrough;

var $1YIF6 = parcelRequire("1YIF6");

(parcelRequire("6QnvD"))($dfdfad882241bcfa$var$PassThrough, $1YIF6);
function $dfdfad882241bcfa$var$PassThrough(options) {
    if (!(this instanceof $dfdfad882241bcfa$var$PassThrough)) return new $dfdfad882241bcfa$var$PassThrough(options);
    $1YIF6.call(this, options);
}
$dfdfad882241bcfa$var$PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

});

parcelRequire.register("as08D", function(module, exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
let $79bca059b2d899a9$var$eos;
function $79bca059b2d899a9$var$once(callback) {
    let called = false;
    return function() {
        if (called) return;
        called = true;
        callback(...arguments);
    };
}

var $k84mj = parcelRequire("k84mj");
var $79bca059b2d899a9$require$_require$codes = $k84mj.codes;
const $79bca059b2d899a9$var$ERR_MISSING_ARGS = $79bca059b2d899a9$require$_require$codes.ERR_MISSING_ARGS, $79bca059b2d899a9$var$ERR_STREAM_DESTROYED = $79bca059b2d899a9$require$_require$codes.ERR_STREAM_DESTROYED;
function $79bca059b2d899a9$var$noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function $79bca059b2d899a9$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}

function $79bca059b2d899a9$var$destroyer(stream, reading, writing, callback) {
    callback = $79bca059b2d899a9$var$once(callback);
    let closed = false;
    stream.on("close", ()=>{
        closed = true;
    });
    if ($79bca059b2d899a9$var$eos === undefined) $79bca059b2d899a9$var$eos = (parcelRequire("bJNCD"));
    $79bca059b2d899a9$var$eos(stream, {
        readable: reading,
        writable: writing
    }, (err)=>{
        if (err) return callback(err);
        closed = true;
        callback();
    });
    let destroyed = false;
    return (err)=>{
        if (closed) return;
        if (destroyed) return;
        destroyed = true;
        // request.destroy just do .end - .abort is what we want
        if ($79bca059b2d899a9$var$isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === "function") return stream.destroy();
        callback(err || new $79bca059b2d899a9$var$ERR_STREAM_DESTROYED("pipe"));
    };
}
function $79bca059b2d899a9$var$call(fn) {
    fn();
}
function $79bca059b2d899a9$var$pipe(from, to) {
    return from.pipe(to);
}
function $79bca059b2d899a9$var$popCallback(streams) {
    if (!streams.length) return $79bca059b2d899a9$var$noop;
    if (typeof streams[streams.length - 1] !== "function") return $79bca059b2d899a9$var$noop;
    return streams.pop();
}
function $79bca059b2d899a9$var$pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    const callback = $79bca059b2d899a9$var$popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new $79bca059b2d899a9$var$ERR_MISSING_ARGS("streams");
    let error;
    const destroys = streams.map(function(stream, i) {
        const reading = i < streams.length - 1;
        const writing = i > 0;
        return $79bca059b2d899a9$var$destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach($79bca059b2d899a9$var$call);
            if (reading) return;
            destroys.forEach($79bca059b2d899a9$var$call);
            callback(error);
        });
    });
    return streams.reduce($79bca059b2d899a9$var$pipe);
}
module.exports = $79bca059b2d899a9$var$pipeline;

});




parcelRequire.register("dfWjY", function(module, exports) {
"use strict";

var $6QnvD = parcelRequire("6QnvD");

var $acATN = parcelRequire("acATN");

var $bbKMQ = parcelRequire("bbKMQ");

var $1fMpU = parcelRequire("1fMpU");
var $9a69ea6cf748b8c9$require$Buffer = $1fMpU.Buffer;

var $bxMcV = parcelRequire("bxMcV");

var $dMVS8 = parcelRequire("dMVS8");

var $8RgXQ = parcelRequire("8RgXQ");
var $9a69ea6cf748b8c9$var$ZEROS = $9a69ea6cf748b8c9$require$Buffer.alloc(128);
function $9a69ea6cf748b8c9$var$Hmac(alg, key) {
    $bbKMQ.call(this, "digest");
    if (typeof key === "string") key = $9a69ea6cf748b8c9$require$Buffer.from(key);
    var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) {
        var hash = alg === "rmd160" ? new $dMVS8() : $8RgXQ(alg);
        key = hash.update(key).digest();
    } else if (key.length < blocksize) key = $9a69ea6cf748b8c9$require$Buffer.concat([
        key,
        $9a69ea6cf748b8c9$var$ZEROS
    ], blocksize);
    var ipad = this._ipad = $9a69ea6cf748b8c9$require$Buffer.allocUnsafe(blocksize);
    var opad = this._opad = $9a69ea6cf748b8c9$require$Buffer.allocUnsafe(blocksize);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    this._hash = alg === "rmd160" ? new $dMVS8() : $8RgXQ(alg);
    this._hash.update(ipad);
}
$6QnvD($9a69ea6cf748b8c9$var$Hmac, $bbKMQ);
$9a69ea6cf748b8c9$var$Hmac.prototype._update = function(data) {
    this._hash.update(data);
};
$9a69ea6cf748b8c9$var$Hmac.prototype._final = function() {
    var h = this._hash.digest();
    var hash = this._alg === "rmd160" ? new $dMVS8() : $8RgXQ(this._alg);
    return hash.update(this._opad).update(h).digest();
};
module.exports = function createHmac(alg, key) {
    alg = alg.toLowerCase();
    if (alg === "rmd160" || alg === "ripemd160") return new $9a69ea6cf748b8c9$var$Hmac("rmd160", key);
    if (alg === "md5") return new $acATN($bxMcV, key);
    return new $9a69ea6cf748b8c9$var$Hmac(alg, key);
};

});
parcelRequire.register("acATN", function(module, exports) {
"use strict";

var $6QnvD = parcelRequire("6QnvD");

var $1fMpU = parcelRequire("1fMpU");
var $76d7a5b913929751$require$Buffer = $1fMpU.Buffer;

var $bbKMQ = parcelRequire("bbKMQ");
var $76d7a5b913929751$var$ZEROS = $76d7a5b913929751$require$Buffer.alloc(128);
var $76d7a5b913929751$var$blocksize = 64;
function $76d7a5b913929751$var$Hmac(alg, key) {
    $bbKMQ.call(this, "digest");
    if (typeof key === "string") key = $76d7a5b913929751$require$Buffer.from(key);
    this._alg = alg;
    this._key = key;
    if (key.length > $76d7a5b913929751$var$blocksize) key = alg(key);
    else if (key.length < $76d7a5b913929751$var$blocksize) key = $76d7a5b913929751$require$Buffer.concat([
        key,
        $76d7a5b913929751$var$ZEROS
    ], $76d7a5b913929751$var$blocksize);
    var ipad = this._ipad = $76d7a5b913929751$require$Buffer.allocUnsafe($76d7a5b913929751$var$blocksize);
    var opad = this._opad = $76d7a5b913929751$require$Buffer.allocUnsafe($76d7a5b913929751$var$blocksize);
    for(var i = 0; i < $76d7a5b913929751$var$blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    this._hash = [
        ipad
    ];
}
$6QnvD($76d7a5b913929751$var$Hmac, $bbKMQ);
$76d7a5b913929751$var$Hmac.prototype._update = function(data) {
    this._hash.push(data);
};
$76d7a5b913929751$var$Hmac.prototype._final = function() {
    var h = this._alg($76d7a5b913929751$require$Buffer.concat(this._hash));
    return this._alg($76d7a5b913929751$require$Buffer.concat([
        this._opad,
        h
    ]));
};
module.exports = $76d7a5b913929751$var$Hmac;

});

parcelRequire.register("bxMcV", function(module, exports) {

var $fkYWF = parcelRequire("fkYWF");
module.exports = function(buffer) {
    return new $fkYWF().update(buffer).digest();
};

});


parcelRequire.register("lSVmB", function(module, exports) {

module.exports = (parcelRequire("6dfmN"));

});
parcelRequire.register("6dfmN", function(module, exports) {
module.exports = JSON.parse('{"sha224WithRSAEncryption":{"sign":"rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"RSA-SHA224":{"sign":"ecdsa/rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"sha256WithRSAEncryption":{"sign":"rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"RSA-SHA256":{"sign":"ecdsa/rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"sha384WithRSAEncryption":{"sign":"rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"RSA-SHA384":{"sign":"ecdsa/rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"sha512WithRSAEncryption":{"sign":"rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA512":{"sign":"ecdsa/rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA1":{"sign":"rsa","hash":"sha1","id":"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{"sign":"ecdsa","hash":"sha1","id":""},"sha256":{"sign":"ecdsa","hash":"sha256","id":""},"sha224":{"sign":"ecdsa","hash":"sha224","id":""},"sha384":{"sign":"ecdsa","hash":"sha384","id":""},"sha512":{"sign":"ecdsa","hash":"sha512","id":""},"DSA-SHA":{"sign":"dsa","hash":"sha1","id":""},"DSA-SHA1":{"sign":"dsa","hash":"sha1","id":""},"DSA":{"sign":"dsa","hash":"sha1","id":""},"DSA-WITH-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-WITH-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-WITH-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-WITH-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-RIPEMD160":{"sign":"dsa","hash":"rmd160","id":""},"ripemd160WithRSA":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"RSA-RIPEMD160":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"md5WithRSAEncryption":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"},"RSA-MD5":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"}}');

});


parcelRequire.register("lqJN7", function(module, exports) {

$parcel$export(module.exports, "pbkdf2", () => $f99f8be05d922f6d$export$448fa22aedc9dbca, (v) => $f99f8be05d922f6d$export$448fa22aedc9dbca = v);
$parcel$export(module.exports, "pbkdf2Sync", () => $f99f8be05d922f6d$export$b80c7ba289c8fa56, (v) => $f99f8be05d922f6d$export$b80c7ba289c8fa56 = v);
var $f99f8be05d922f6d$export$448fa22aedc9dbca;
var $f99f8be05d922f6d$export$b80c7ba289c8fa56;

$f99f8be05d922f6d$export$448fa22aedc9dbca = (parcelRequire("kWYr0"));

$f99f8be05d922f6d$export$b80c7ba289c8fa56 = (parcelRequire("aArvk"));

});
parcelRequire.register("kWYr0", function(module, exports) {

var $1fMpU = parcelRequire("1fMpU");
var $f4081a7d1a7f5540$require$Buffer = $1fMpU.Buffer;

var $kLBah = parcelRequire("kLBah");

var $kPw59 = parcelRequire("kPw59");

var $aArvk = parcelRequire("aArvk");

var $iEKYI = parcelRequire("iEKYI");
var $f4081a7d1a7f5540$var$ZERO_BUF;
var $f4081a7d1a7f5540$var$subtle = $parcel$global.crypto && $parcel$global.crypto.subtle;
var $f4081a7d1a7f5540$var$toBrowser = {
    sha: "SHA-1",
    "sha-1": "SHA-1",
    sha1: "SHA-1",
    sha256: "SHA-256",
    "sha-256": "SHA-256",
    sha384: "SHA-384",
    "sha-384": "SHA-384",
    "sha-512": "SHA-512",
    sha512: "SHA-512"
};
var $f4081a7d1a7f5540$var$checks = [];
function $f4081a7d1a7f5540$var$checkNative(algo) {
    if ($parcel$global.process && !$parcel$global.process.browser) return Promise.resolve(false);
    if (!$f4081a7d1a7f5540$var$subtle || !$f4081a7d1a7f5540$var$subtle.importKey || !$f4081a7d1a7f5540$var$subtle.deriveBits) return Promise.resolve(false);
    if ($f4081a7d1a7f5540$var$checks[algo] !== undefined) return $f4081a7d1a7f5540$var$checks[algo];
    $f4081a7d1a7f5540$var$ZERO_BUF = $f4081a7d1a7f5540$var$ZERO_BUF || $f4081a7d1a7f5540$require$Buffer.alloc(8);
    var prom = $f4081a7d1a7f5540$var$browserPbkdf2($f4081a7d1a7f5540$var$ZERO_BUF, $f4081a7d1a7f5540$var$ZERO_BUF, 10, 128, algo).then(function() {
        return true;
    }).catch(function() {
        return false;
    });
    $f4081a7d1a7f5540$var$checks[algo] = prom;
    return prom;
}
var $f4081a7d1a7f5540$var$nextTick;
function $f4081a7d1a7f5540$var$getNextTick() {
    if ($f4081a7d1a7f5540$var$nextTick) return $f4081a7d1a7f5540$var$nextTick;
    if ($parcel$global.process && $parcel$global.process.nextTick) $f4081a7d1a7f5540$var$nextTick = $parcel$global.process.nextTick;
    else if ($parcel$global.queueMicrotask) $f4081a7d1a7f5540$var$nextTick = $parcel$global.queueMicrotask;
    else if ($parcel$global.setImmediate) $f4081a7d1a7f5540$var$nextTick = $parcel$global.setImmediate;
    else $f4081a7d1a7f5540$var$nextTick = $parcel$global.setTimeout;
    return $f4081a7d1a7f5540$var$nextTick;
}
function $f4081a7d1a7f5540$var$browserPbkdf2(password, salt, iterations, length, algo) {
    return $f4081a7d1a7f5540$var$subtle.importKey("raw", password, {
        name: "PBKDF2"
    }, false, [
        "deriveBits"
    ]).then(function(key) {
        return $f4081a7d1a7f5540$var$subtle.deriveBits({
            name: "PBKDF2",
            salt: salt,
            iterations: iterations,
            hash: {
                name: algo
            }
        }, key, length << 3);
    }).then(function(res) {
        return $f4081a7d1a7f5540$require$Buffer.from(res);
    });
}
function $f4081a7d1a7f5540$var$resolvePromise(promise, callback) {
    promise.then(function(out) {
        $f4081a7d1a7f5540$var$getNextTick()(function() {
            callback(null, out);
        });
    }, function(e) {
        $f4081a7d1a7f5540$var$getNextTick()(function() {
            callback(e);
        });
    });
}
module.exports = function(password, salt, iterations, keylen, digest, callback) {
    if (typeof digest === "function") {
        callback = digest;
        digest = undefined;
    }
    digest = digest || "sha1";
    var algo = $f4081a7d1a7f5540$var$toBrowser[digest.toLowerCase()];
    if (!algo || typeof $parcel$global.Promise !== "function") {
        $f4081a7d1a7f5540$var$getNextTick()(function() {
            var out;
            try {
                out = $aArvk(password, salt, iterations, keylen, digest);
            } catch (e) {
                return callback(e);
            }
            callback(null, out);
        });
        return;
    }
    $kLBah(iterations, keylen);
    password = $iEKYI(password, $kPw59, "Password");
    salt = $iEKYI(salt, $kPw59, "Salt");
    if (typeof callback !== "function") throw new Error("No callback provided to pbkdf2");
    $f4081a7d1a7f5540$var$resolvePromise($f4081a7d1a7f5540$var$checkNative(algo).then(function(resp) {
        if (resp) return $f4081a7d1a7f5540$var$browserPbkdf2(password, salt, iterations, keylen, algo);
        return $aArvk(password, salt, iterations, keylen, digest);
    }), callback);
};

});
parcelRequire.register("kLBah", function(module, exports) {
var $f1e5069d2deb6d7a$var$MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs
;
module.exports = function(iterations, keylen) {
    if (typeof iterations !== "number") throw new TypeError("Iterations not a number");
    if (iterations < 0) throw new TypeError("Bad iterations");
    if (typeof keylen !== "number") throw new TypeError("Key length not a number");
    if (keylen < 0 || keylen > $f1e5069d2deb6d7a$var$MAX_ALLOC || keylen !== keylen) throw new TypeError("Bad key length");
};

});

parcelRequire.register("kPw59", function(module, exports) {

var $jx7mO = parcelRequire("jx7mO");
var $f2a174e8490ccc10$var$defaultEncoding;
/* istanbul ignore next */ if ($parcel$global.process && $parcel$global.process.browser) $f2a174e8490ccc10$var$defaultEncoding = "utf-8";
else if ($parcel$global.process && $parcel$global.process.version) {
    var $f2a174e8490ccc10$var$pVersionMajor = parseInt($jx7mO.version.split(".")[0].slice(1), 10);
    $f2a174e8490ccc10$var$defaultEncoding = $f2a174e8490ccc10$var$pVersionMajor >= 6 ? "utf-8" : "binary";
} else $f2a174e8490ccc10$var$defaultEncoding = "utf-8";
module.exports = $f2a174e8490ccc10$var$defaultEncoding;

});

parcelRequire.register("aArvk", function(module, exports) {

var $bxMcV = parcelRequire("bxMcV");

var $dMVS8 = parcelRequire("dMVS8");

var $8RgXQ = parcelRequire("8RgXQ");

var $1fMpU = parcelRequire("1fMpU");
var $7b5299f6513bb597$require$Buffer = $1fMpU.Buffer;

var $kLBah = parcelRequire("kLBah");

var $kPw59 = parcelRequire("kPw59");

var $iEKYI = parcelRequire("iEKYI");
var $7b5299f6513bb597$var$ZEROS = $7b5299f6513bb597$require$Buffer.alloc(128);
var $7b5299f6513bb597$var$sizes = {
    md5: 16,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64,
    rmd160: 20,
    ripemd160: 20
};
function $7b5299f6513bb597$var$Hmac(alg, key, saltLen) {
    var hash = $7b5299f6513bb597$var$getDigest(alg);
    var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
    if (key.length > blocksize) key = hash(key);
    else if (key.length < blocksize) key = $7b5299f6513bb597$require$Buffer.concat([
        key,
        $7b5299f6513bb597$var$ZEROS
    ], blocksize);
    var ipad = $7b5299f6513bb597$require$Buffer.allocUnsafe(blocksize + $7b5299f6513bb597$var$sizes[alg]);
    var opad = $7b5299f6513bb597$require$Buffer.allocUnsafe(blocksize + $7b5299f6513bb597$var$sizes[alg]);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 0x36;
        opad[i] = key[i] ^ 0x5C;
    }
    var ipad1 = $7b5299f6513bb597$require$Buffer.allocUnsafe(blocksize + saltLen + 4);
    ipad.copy(ipad1, 0, 0, blocksize);
    this.ipad1 = ipad1;
    this.ipad2 = ipad;
    this.opad = opad;
    this.alg = alg;
    this.blocksize = blocksize;
    this.hash = hash;
    this.size = $7b5299f6513bb597$var$sizes[alg];
}
$7b5299f6513bb597$var$Hmac.prototype.run = function(data, ipad) {
    data.copy(ipad, this.blocksize);
    var h = this.hash(ipad);
    h.copy(this.opad, this.blocksize);
    return this.hash(this.opad);
};
function $7b5299f6513bb597$var$getDigest(alg) {
    function shaFunc(data) {
        return $8RgXQ(alg).update(data).digest();
    }
    function rmd160Func(data) {
        return new $dMVS8().update(data).digest();
    }
    if (alg === "rmd160" || alg === "ripemd160") return rmd160Func;
    if (alg === "md5") return $bxMcV;
    return shaFunc;
}
function $7b5299f6513bb597$var$pbkdf2(password, salt, iterations, keylen, digest) {
    $kLBah(iterations, keylen);
    password = $iEKYI(password, $kPw59, "Password");
    salt = $iEKYI(salt, $kPw59, "Salt");
    digest = digest || "sha1";
    var hmac = new $7b5299f6513bb597$var$Hmac(digest, password, salt.length);
    var DK = $7b5299f6513bb597$require$Buffer.allocUnsafe(keylen);
    var block1 = $7b5299f6513bb597$require$Buffer.allocUnsafe(salt.length + 4);
    salt.copy(block1, 0, 0, salt.length);
    var destPos = 0;
    var hLen = $7b5299f6513bb597$var$sizes[digest];
    var l = Math.ceil(keylen / hLen);
    for(var i = 1; i <= l; i++){
        block1.writeUInt32BE(i, salt.length);
        var T = hmac.run(block1, hmac.ipad1);
        var U = T;
        for(var j = 1; j < iterations; j++){
            U = hmac.run(U, hmac.ipad2);
            for(var k = 0; k < hLen; k++)T[k] ^= U[k];
        }
        T.copy(DK, destPos);
        destPos += hLen;
    }
    return DK;
}
module.exports = $7b5299f6513bb597$var$pbkdf2;

});
parcelRequire.register("iEKYI", function(module, exports) {

var $1fMpU = parcelRequire("1fMpU");
var $d9506757a121adfb$require$Buffer = $1fMpU.Buffer;
module.exports = function(thing, encoding, name) {
    if ($d9506757a121adfb$require$Buffer.isBuffer(thing)) return thing;
    else if (typeof thing === "string") return $d9506757a121adfb$require$Buffer.from(thing, encoding);
    else if (ArrayBuffer.isView(thing)) return $d9506757a121adfb$require$Buffer.from(thing.buffer);
    else throw new TypeError(name + " must be a string, a Buffer, a typed array or a DataView");
};

});




parcelRequire.register("7M3Po", function(module, exports) {

$parcel$export(module.exports, "createCipher", () => $5a8ffc3febee71b0$export$bdd223f16383713e, (v) => $5a8ffc3febee71b0$export$bdd223f16383713e = v);
$parcel$export(module.exports, "Cipher", () => $5a8ffc3febee71b0$export$26e5786e8ac8e530, (v) => $5a8ffc3febee71b0$export$26e5786e8ac8e530 = v);
$parcel$export(module.exports, "createCipheriv", () => $5a8ffc3febee71b0$export$2f64596b8cbf08b4, (v) => $5a8ffc3febee71b0$export$2f64596b8cbf08b4 = v);
$parcel$export(module.exports, "Cipheriv", () => $5a8ffc3febee71b0$export$20533d26f07f1ee0, (v) => $5a8ffc3febee71b0$export$20533d26f07f1ee0 = v);
$parcel$export(module.exports, "createDecipher", () => $5a8ffc3febee71b0$export$12ada9414fbc594c, (v) => $5a8ffc3febee71b0$export$12ada9414fbc594c = v);
$parcel$export(module.exports, "Decipher", () => $5a8ffc3febee71b0$export$2ce6d8d0e8b04e1a, (v) => $5a8ffc3febee71b0$export$2ce6d8d0e8b04e1a = v);
$parcel$export(module.exports, "createDecipheriv", () => $5a8ffc3febee71b0$export$36b6d6ef312eab39, (v) => $5a8ffc3febee71b0$export$36b6d6ef312eab39 = v);
$parcel$export(module.exports, "Decipheriv", () => $5a8ffc3febee71b0$export$f5e7e39d57cd9700, (v) => $5a8ffc3febee71b0$export$f5e7e39d57cd9700 = v);
$parcel$export(module.exports, "listCiphers", () => $5a8ffc3febee71b0$export$dedd8dc3dc62b370, (v) => $5a8ffc3febee71b0$export$dedd8dc3dc62b370 = v);
$parcel$export(module.exports, "getCiphers", () => $5a8ffc3febee71b0$export$58a258485f1e49f6, (v) => $5a8ffc3febee71b0$export$58a258485f1e49f6 = v);
var $5a8ffc3febee71b0$export$bdd223f16383713e;
var $5a8ffc3febee71b0$export$26e5786e8ac8e530;
var $5a8ffc3febee71b0$export$2f64596b8cbf08b4;
var $5a8ffc3febee71b0$export$20533d26f07f1ee0;
var $5a8ffc3febee71b0$export$12ada9414fbc594c;
var $5a8ffc3febee71b0$export$2ce6d8d0e8b04e1a;
var $5a8ffc3febee71b0$export$36b6d6ef312eab39;
var $5a8ffc3febee71b0$export$f5e7e39d57cd9700;
var $5a8ffc3febee71b0$export$dedd8dc3dc62b370;
var $5a8ffc3febee71b0$export$58a258485f1e49f6;

var $Oo7IK = parcelRequire("Oo7IK");

var $kQEw6 = parcelRequire("kQEw6");

var $aIF7h = parcelRequire("aIF7h");

var $8mAew = parcelRequire("8mAew");

var $2yXJt = parcelRequire("2yXJt");
function $5a8ffc3febee71b0$var$createCipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if ($aIF7h[suite]) {
        keyLen = $aIF7h[suite].key;
        ivLen = $aIF7h[suite].iv;
    } else if ($8mAew[suite]) {
        keyLen = $8mAew[suite].key * 8;
        ivLen = $8mAew[suite].iv;
    } else throw new TypeError("invalid suite type");
    var keys = $2yXJt(password, false, keyLen, ivLen);
    return $5a8ffc3febee71b0$var$createCipheriv(suite, keys.key, keys.iv);
}
function $5a8ffc3febee71b0$var$createDecipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if ($aIF7h[suite]) {
        keyLen = $aIF7h[suite].key;
        ivLen = $aIF7h[suite].iv;
    } else if ($8mAew[suite]) {
        keyLen = $8mAew[suite].key * 8;
        ivLen = $8mAew[suite].iv;
    } else throw new TypeError("invalid suite type");
    var keys = $2yXJt(password, false, keyLen, ivLen);
    return $5a8ffc3febee71b0$var$createDecipheriv(suite, keys.key, keys.iv);
}
function $5a8ffc3febee71b0$var$createCipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if ($aIF7h[suite]) return $kQEw6.createCipheriv(suite, key, iv);
    if ($8mAew[suite]) return new $Oo7IK({
        key: key,
        iv: iv,
        mode: suite
    });
    throw new TypeError("invalid suite type");
}
function $5a8ffc3febee71b0$var$createDecipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if ($aIF7h[suite]) return $kQEw6.createDecipheriv(suite, key, iv);
    if ($8mAew[suite]) return new $Oo7IK({
        key: key,
        iv: iv,
        mode: suite,
        decrypt: true
    });
    throw new TypeError("invalid suite type");
}
function $5a8ffc3febee71b0$var$getCiphers() {
    return Object.keys($8mAew).concat($kQEw6.getCiphers());
}
$5a8ffc3febee71b0$export$bdd223f16383713e = $5a8ffc3febee71b0$export$26e5786e8ac8e530 = $5a8ffc3febee71b0$var$createCipher;
$5a8ffc3febee71b0$export$2f64596b8cbf08b4 = $5a8ffc3febee71b0$export$20533d26f07f1ee0 = $5a8ffc3febee71b0$var$createCipheriv;
$5a8ffc3febee71b0$export$12ada9414fbc594c = $5a8ffc3febee71b0$export$2ce6d8d0e8b04e1a = $5a8ffc3febee71b0$var$createDecipher;
$5a8ffc3febee71b0$export$36b6d6ef312eab39 = $5a8ffc3febee71b0$export$f5e7e39d57cd9700 = $5a8ffc3febee71b0$var$createDecipheriv;
$5a8ffc3febee71b0$export$dedd8dc3dc62b370 = $5a8ffc3febee71b0$export$58a258485f1e49f6 = $5a8ffc3febee71b0$var$getCiphers;

});
parcelRequire.register("Oo7IK", function(module, exports) {

var $bbKMQ = parcelRequire("bbKMQ");

var $6iAb7 = parcelRequire("6iAb7");

var $6QnvD = parcelRequire("6QnvD");

var $1fMpU = parcelRequire("1fMpU");
var $0977620e8d581c64$require$Buffer = $1fMpU.Buffer;
var $0977620e8d581c64$var$modes = {
    "des-ede3-cbc": $6iAb7.CBC.instantiate($6iAb7.EDE),
    "des-ede3": $6iAb7.EDE,
    "des-ede-cbc": $6iAb7.CBC.instantiate($6iAb7.EDE),
    "des-ede": $6iAb7.EDE,
    "des-cbc": $6iAb7.CBC.instantiate($6iAb7.DES),
    "des-ecb": $6iAb7.DES
};
$0977620e8d581c64$var$modes.des = $0977620e8d581c64$var$modes["des-cbc"];
$0977620e8d581c64$var$modes.des3 = $0977620e8d581c64$var$modes["des-ede3-cbc"];
module.exports = $0977620e8d581c64$var$DES;
$6QnvD($0977620e8d581c64$var$DES, $bbKMQ);
function $0977620e8d581c64$var$DES(opts) {
    $bbKMQ.call(this);
    var modeName = opts.mode.toLowerCase();
    var mode = $0977620e8d581c64$var$modes[modeName];
    var type;
    if (opts.decrypt) type = "decrypt";
    else type = "encrypt";
    var key = opts.key;
    if (!$0977620e8d581c64$require$Buffer.isBuffer(key)) key = $0977620e8d581c64$require$Buffer.from(key);
    if (modeName === "des-ede" || modeName === "des-ede-cbc") key = $0977620e8d581c64$require$Buffer.concat([
        key,
        key.slice(0, 8)
    ]);
    var iv = opts.iv;
    if (!$0977620e8d581c64$require$Buffer.isBuffer(iv)) iv = $0977620e8d581c64$require$Buffer.from(iv);
    this._des = mode.create({
        key: key,
        iv: iv,
        type: type
    });
}
$0977620e8d581c64$var$DES.prototype._update = function(data) {
    return $0977620e8d581c64$require$Buffer.from(this._des.update(data));
};
$0977620e8d581c64$var$DES.prototype._final = function() {
    return $0977620e8d581c64$require$Buffer.from(this._des.final());
};

});
parcelRequire.register("6iAb7", function(module, exports) {

$parcel$export(module.exports, "DES", () => $49607ccabd540cdd$export$cc8859615686b300, (v) => $49607ccabd540cdd$export$cc8859615686b300 = v);
$parcel$export(module.exports, "CBC", () => $49607ccabd540cdd$export$8ad3f227af08fcc5, (v) => $49607ccabd540cdd$export$8ad3f227af08fcc5 = v);
$parcel$export(module.exports, "EDE", () => $49607ccabd540cdd$export$947646e34766044f, (v) => $49607ccabd540cdd$export$947646e34766044f = v);
var $49607ccabd540cdd$export$eab97d15b1788b8d;
var $49607ccabd540cdd$export$26e5786e8ac8e530;
var $49607ccabd540cdd$export$cc8859615686b300;
var $49607ccabd540cdd$export$8ad3f227af08fcc5;
var $49607ccabd540cdd$export$947646e34766044f;
"use strict";

$49607ccabd540cdd$export$eab97d15b1788b8d = (parcelRequire("4nQgv"));

$49607ccabd540cdd$export$26e5786e8ac8e530 = (parcelRequire("1FKdo"));

$49607ccabd540cdd$export$cc8859615686b300 = (parcelRequire("fmVaP"));

$49607ccabd540cdd$export$8ad3f227af08fcc5 = (parcelRequire("ekenU"));

$49607ccabd540cdd$export$947646e34766044f = (parcelRequire("gLjBs"));

});
parcelRequire.register("4nQgv", function(module, exports) {

$parcel$export(module.exports, "readUInt32BE", () => $3311da30822ef52b$export$cfaef8ed399428b0, (v) => $3311da30822ef52b$export$cfaef8ed399428b0 = v);
$parcel$export(module.exports, "writeUInt32BE", () => $3311da30822ef52b$export$a80c7deaea7cbd80, (v) => $3311da30822ef52b$export$a80c7deaea7cbd80 = v);
$parcel$export(module.exports, "ip", () => $3311da30822ef52b$export$ed7577ae6e1cd0ef, (v) => $3311da30822ef52b$export$ed7577ae6e1cd0ef = v);
$parcel$export(module.exports, "rip", () => $3311da30822ef52b$export$5dcbef3aa594f567, (v) => $3311da30822ef52b$export$5dcbef3aa594f567 = v);
$parcel$export(module.exports, "pc1", () => $3311da30822ef52b$export$5bc8001ca71ed9c5, (v) => $3311da30822ef52b$export$5bc8001ca71ed9c5 = v);
$parcel$export(module.exports, "r28shl", () => $3311da30822ef52b$export$3e714e2c5d5d8cb2, (v) => $3311da30822ef52b$export$3e714e2c5d5d8cb2 = v);
$parcel$export(module.exports, "pc2", () => $3311da30822ef52b$export$94c3e544fd062b7f, (v) => $3311da30822ef52b$export$94c3e544fd062b7f = v);
$parcel$export(module.exports, "expand", () => $3311da30822ef52b$export$9f77e0932fb78f72, (v) => $3311da30822ef52b$export$9f77e0932fb78f72 = v);
$parcel$export(module.exports, "substitute", () => $3311da30822ef52b$export$d865ce2836f5927f, (v) => $3311da30822ef52b$export$d865ce2836f5927f = v);
$parcel$export(module.exports, "permute", () => $3311da30822ef52b$export$95e62ad65da8b7d2, (v) => $3311da30822ef52b$export$95e62ad65da8b7d2 = v);
$parcel$export(module.exports, "padSplit", () => $3311da30822ef52b$export$209139ff098c441a, (v) => $3311da30822ef52b$export$209139ff098c441a = v);
var $3311da30822ef52b$export$cfaef8ed399428b0;
var $3311da30822ef52b$export$a80c7deaea7cbd80;
var $3311da30822ef52b$export$ed7577ae6e1cd0ef;
var $3311da30822ef52b$export$5dcbef3aa594f567;
var $3311da30822ef52b$export$5bc8001ca71ed9c5;
var $3311da30822ef52b$export$3e714e2c5d5d8cb2;
var $3311da30822ef52b$export$94c3e544fd062b7f;
var $3311da30822ef52b$export$9f77e0932fb78f72;
var $3311da30822ef52b$export$d865ce2836f5927f;
var $3311da30822ef52b$export$95e62ad65da8b7d2;
var $3311da30822ef52b$export$209139ff098c441a;
"use strict";
$3311da30822ef52b$export$cfaef8ed399428b0 = function readUInt32BE(bytes, off) {
    var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
    return res >>> 0;
};
$3311da30822ef52b$export$a80c7deaea7cbd80 = function writeUInt32BE(bytes, value, off) {
    bytes[0 + off] = value >>> 24;
    bytes[1 + off] = value >>> 16 & 0xff;
    bytes[2 + off] = value >>> 8 & 0xff;
    bytes[3 + off] = value & 0xff;
};
$3311da30822ef52b$export$ed7577ae6e1cd0ef = function ip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >>> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >>> j + i & 1;
        }
    }
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inR >>> j + i & 1;
        }
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inL >>> j + i & 1;
        }
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$3311da30822ef52b$export$5dcbef3aa594f567 = function rip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 0; i < 4; i++)for(var j = 24; j >= 0; j -= 8){
        outL <<= 1;
        outL |= inR >>> j + i & 1;
        outL <<= 1;
        outL |= inL >>> j + i & 1;
    }
    for(var i = 4; i < 8; i++)for(var j = 24; j >= 0; j -= 8){
        outR <<= 1;
        outR |= inR >>> j + i & 1;
        outR <<= 1;
        outR |= inL >>> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$3311da30822ef52b$export$5bc8001ca71ed9c5 = function pc1(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    // 7, 15, 23, 31, 39, 47, 55, 63
    // 6, 14, 22, 30, 39, 47, 55, 63
    // 5, 13, 21, 29, 39, 47, 55, 63
    // 4, 12, 20, 28
    for(var i = 7; i >= 5; i--){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outL <<= 1;
        outL |= inR >> j + i & 1;
    }
    // 1, 9, 17, 25, 33, 41, 49, 57
    // 2, 10, 18, 26, 34, 42, 50, 58
    // 3, 11, 19, 27, 35, 43, 51, 59
    // 36, 44, 52, 60
    for(var i = 1; i <= 3; i++){
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outR <<= 1;
        outR |= inL >> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$3311da30822ef52b$export$3e714e2c5d5d8cb2 = function r28shl(num, shift) {
    return num << shift & 0xfffffff | num >>> 28 - shift;
};
var $3311da30822ef52b$var$pc2table = [
    // inL => outL
    14,
    11,
    17,
    4,
    27,
    23,
    25,
    0,
    13,
    22,
    7,
    18,
    5,
    9,
    16,
    24,
    2,
    20,
    12,
    21,
    1,
    8,
    15,
    26,
    // inR => outR
    15,
    4,
    25,
    19,
    9,
    1,
    26,
    16,
    5,
    11,
    23,
    8,
    12,
    7,
    17,
    0,
    22,
    3,
    10,
    14,
    6,
    20,
    27,
    24
];
$3311da30822ef52b$export$94c3e544fd062b7f = function pc2(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    var len = $3311da30822ef52b$var$pc2table.length >>> 1;
    for(var i = 0; i < len; i++){
        outL <<= 1;
        outL |= inL >>> $3311da30822ef52b$var$pc2table[i] & 0x1;
    }
    for(var i = len; i < $3311da30822ef52b$var$pc2table.length; i++){
        outR <<= 1;
        outR |= inR >>> $3311da30822ef52b$var$pc2table[i] & 0x1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$3311da30822ef52b$export$9f77e0932fb78f72 = function expand(r, out, off) {
    var outL = 0;
    var outR = 0;
    outL = (r & 1) << 5 | r >>> 27;
    for(var i = 23; i >= 15; i -= 4){
        outL <<= 6;
        outL |= r >>> i & 0x3f;
    }
    for(var i = 11; i >= 3; i -= 4){
        outR |= r >>> i & 0x3f;
        outR <<= 6;
    }
    outR |= (r & 0x1f) << 1 | r >>> 31;
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
var $3311da30822ef52b$var$sTable = [
    14,
    0,
    4,
    15,
    13,
    7,
    1,
    4,
    2,
    14,
    15,
    2,
    11,
    13,
    8,
    1,
    3,
    10,
    10,
    6,
    6,
    12,
    12,
    11,
    5,
    9,
    9,
    5,
    0,
    3,
    7,
    8,
    4,
    15,
    1,
    12,
    14,
    8,
    8,
    2,
    13,
    4,
    6,
    9,
    2,
    1,
    11,
    7,
    15,
    5,
    12,
    11,
    9,
    3,
    7,
    14,
    3,
    10,
    10,
    0,
    5,
    6,
    0,
    13,
    15,
    3,
    1,
    13,
    8,
    4,
    14,
    7,
    6,
    15,
    11,
    2,
    3,
    8,
    4,
    14,
    9,
    12,
    7,
    0,
    2,
    1,
    13,
    10,
    12,
    6,
    0,
    9,
    5,
    11,
    10,
    5,
    0,
    13,
    14,
    8,
    7,
    10,
    11,
    1,
    10,
    3,
    4,
    15,
    13,
    4,
    1,
    2,
    5,
    11,
    8,
    6,
    12,
    7,
    6,
    12,
    9,
    0,
    3,
    5,
    2,
    14,
    15,
    9,
    10,
    13,
    0,
    7,
    9,
    0,
    14,
    9,
    6,
    3,
    3,
    4,
    15,
    6,
    5,
    10,
    1,
    2,
    13,
    8,
    12,
    5,
    7,
    14,
    11,
    12,
    4,
    11,
    2,
    15,
    8,
    1,
    13,
    1,
    6,
    10,
    4,
    13,
    9,
    0,
    8,
    6,
    15,
    9,
    3,
    8,
    0,
    7,
    11,
    4,
    1,
    15,
    2,
    14,
    12,
    3,
    5,
    11,
    10,
    5,
    14,
    2,
    7,
    12,
    7,
    13,
    13,
    8,
    14,
    11,
    3,
    5,
    0,
    6,
    6,
    15,
    9,
    0,
    10,
    3,
    1,
    4,
    2,
    7,
    8,
    2,
    5,
    12,
    11,
    1,
    12,
    10,
    4,
    14,
    15,
    9,
    10,
    3,
    6,
    15,
    9,
    0,
    0,
    6,
    12,
    10,
    11,
    1,
    7,
    13,
    13,
    8,
    15,
    9,
    1,
    4,
    3,
    5,
    14,
    11,
    5,
    12,
    2,
    7,
    8,
    2,
    4,
    14,
    2,
    14,
    12,
    11,
    4,
    2,
    1,
    12,
    7,
    4,
    10,
    7,
    11,
    13,
    6,
    1,
    8,
    5,
    5,
    0,
    3,
    15,
    15,
    10,
    13,
    3,
    0,
    9,
    14,
    8,
    9,
    6,
    4,
    11,
    2,
    8,
    1,
    12,
    11,
    7,
    10,
    1,
    13,
    14,
    7,
    2,
    8,
    13,
    15,
    6,
    9,
    15,
    12,
    0,
    5,
    9,
    6,
    10,
    3,
    4,
    0,
    5,
    14,
    3,
    12,
    10,
    1,
    15,
    10,
    4,
    15,
    2,
    9,
    7,
    2,
    12,
    6,
    9,
    8,
    5,
    0,
    6,
    13,
    1,
    3,
    13,
    4,
    14,
    14,
    0,
    7,
    11,
    5,
    3,
    11,
    8,
    9,
    4,
    14,
    3,
    15,
    2,
    5,
    12,
    2,
    9,
    8,
    5,
    12,
    15,
    3,
    10,
    7,
    11,
    0,
    14,
    4,
    1,
    10,
    7,
    1,
    6,
    13,
    0,
    11,
    8,
    6,
    13,
    4,
    13,
    11,
    0,
    2,
    11,
    14,
    7,
    15,
    4,
    0,
    9,
    8,
    1,
    13,
    10,
    3,
    14,
    12,
    3,
    9,
    5,
    7,
    12,
    5,
    2,
    10,
    15,
    6,
    8,
    1,
    6,
    1,
    6,
    4,
    11,
    11,
    13,
    13,
    8,
    12,
    1,
    3,
    4,
    7,
    10,
    14,
    7,
    10,
    9,
    15,
    5,
    6,
    0,
    8,
    15,
    0,
    14,
    5,
    2,
    9,
    3,
    2,
    12,
    13,
    1,
    2,
    15,
    8,
    13,
    4,
    8,
    6,
    10,
    15,
    3,
    11,
    7,
    1,
    4,
    10,
    12,
    9,
    5,
    3,
    6,
    14,
    11,
    5,
    0,
    0,
    14,
    12,
    9,
    7,
    2,
    7,
    2,
    11,
    1,
    4,
    14,
    1,
    7,
    9,
    4,
    12,
    10,
    14,
    8,
    2,
    13,
    0,
    15,
    6,
    12,
    10,
    9,
    13,
    0,
    15,
    3,
    3,
    5,
    5,
    6,
    8,
    11
];
$3311da30822ef52b$export$d865ce2836f5927f = function substitute(inL, inR) {
    var out = 0;
    for(var i = 0; i < 4; i++){
        var b = inL >>> 18 - i * 6 & 0x3f;
        var sb = $3311da30822ef52b$var$sTable[i * 0x40 + b];
        out <<= 4;
        out |= sb;
    }
    for(var i = 0; i < 4; i++){
        var b = inR >>> 18 - i * 6 & 0x3f;
        var sb = $3311da30822ef52b$var$sTable[256 + i * 0x40 + b];
        out <<= 4;
        out |= sb;
    }
    return out >>> 0;
};
var $3311da30822ef52b$var$permuteTable = [
    16,
    25,
    12,
    11,
    3,
    20,
    4,
    15,
    31,
    17,
    9,
    6,
    27,
    14,
    1,
    22,
    30,
    24,
    8,
    18,
    0,
    5,
    29,
    23,
    13,
    19,
    2,
    26,
    10,
    21,
    28,
    7
];
$3311da30822ef52b$export$95e62ad65da8b7d2 = function permute(num) {
    var out = 0;
    for(var i = 0; i < $3311da30822ef52b$var$permuteTable.length; i++){
        out <<= 1;
        out |= num >>> $3311da30822ef52b$var$permuteTable[i] & 0x1;
    }
    return out >>> 0;
};
$3311da30822ef52b$export$209139ff098c441a = function padSplit(num, size, group) {
    var str = num.toString(2);
    while(str.length < size)str = "0" + str;
    var out = [];
    for(var i = 0; i < size; i += group)out.push(str.slice(i, i + group));
    return out.join(" ");
};

});

parcelRequire.register("1FKdo", function(module, exports) {
"use strict";

var $eHrxZ = parcelRequire("eHrxZ");
function $137d7824aa0a7835$var$Cipher(options) {
    this.options = options;
    this.type = this.options.type;
    this.blockSize = 8;
    this._init();
    this.buffer = new Array(this.blockSize);
    this.bufferOff = 0;
}
module.exports = $137d7824aa0a7835$var$Cipher;
$137d7824aa0a7835$var$Cipher.prototype._init = function _init() {
// Might be overrided
};
$137d7824aa0a7835$var$Cipher.prototype.update = function update(data) {
    if (data.length === 0) return [];
    if (this.type === "decrypt") return this._updateDecrypt(data);
    else return this._updateEncrypt(data);
};
$137d7824aa0a7835$var$Cipher.prototype._buffer = function _buffer(data, off) {
    // Append data to buffer
    var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
    for(var i = 0; i < min; i++)this.buffer[this.bufferOff + i] = data[off + i];
    this.bufferOff += min;
    // Shift next
    return min;
};
$137d7824aa0a7835$var$Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
    this._update(this.buffer, 0, out, off);
    this.bufferOff = 0;
    return this.blockSize;
};
$137d7824aa0a7835$var$Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = (this.bufferOff + data.length) / this.blockSize | 0;
    var out = new Array(count * this.blockSize);
    if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);
        if (this.bufferOff === this.buffer.length) outputOff += this._flushBuffer(out, outputOff);
    }
    // Write blocks
    var max = data.length - (data.length - inputOff) % this.blockSize;
    for(; inputOff < max; inputOff += this.blockSize){
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
    }
    // Queue rest
    for(; inputOff < data.length; inputOff++, this.bufferOff++)this.buffer[this.bufferOff] = data[inputOff];
    return out;
};
$137d7824aa0a7835$var$Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
    var out = new Array(count * this.blockSize);
    // TODO(indutny): optimize it, this is far from optimal
    for(; count > 0; count--){
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
    }
    // Buffer rest of the input
    inputOff += this._buffer(data, inputOff);
    return out;
};
$137d7824aa0a7835$var$Cipher.prototype.final = function final(buffer) {
    var first;
    if (buffer) first = this.update(buffer);
    var last;
    if (this.type === "encrypt") last = this._finalEncrypt();
    else last = this._finalDecrypt();
    if (first) return first.concat(last);
    else return last;
};
$137d7824aa0a7835$var$Cipher.prototype._pad = function _pad(buffer, off) {
    if (off === 0) return false;
    while(off < buffer.length)buffer[off++] = 0;
    return true;
};
$137d7824aa0a7835$var$Cipher.prototype._finalEncrypt = function _finalEncrypt() {
    if (!this._pad(this.buffer, this.bufferOff)) return [];
    var out = new Array(this.blockSize);
    this._update(this.buffer, 0, out, 0);
    return out;
};
$137d7824aa0a7835$var$Cipher.prototype._unpad = function _unpad(buffer) {
    return buffer;
};
$137d7824aa0a7835$var$Cipher.prototype._finalDecrypt = function _finalDecrypt() {
    $eHrxZ.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
    var out = new Array(this.blockSize);
    this._flushBuffer(out, 0);
    return this._unpad(out);
};

});
parcelRequire.register("eHrxZ", function(module, exports) {
module.exports = $ab3a7325e1add7a2$var$assert;
function $ab3a7325e1add7a2$var$assert(val, msg) {
    if (!val) throw new Error(msg || "Assertion failed");
}
$ab3a7325e1add7a2$var$assert.equal = function assertEqual(l, r, msg) {
    if (l != r) throw new Error(msg || "Assertion failed: " + l + " != " + r);
};

});


parcelRequire.register("fmVaP", function(module, exports) {
"use strict";

var $eHrxZ = parcelRequire("eHrxZ");

var $6QnvD = parcelRequire("6QnvD");

var $4nQgv = parcelRequire("4nQgv");

var $1FKdo = parcelRequire("1FKdo");
function $b305429c43c0faf6$var$DESState() {
    this.tmp = new Array(2);
    this.keys = null;
}
function $b305429c43c0faf6$var$DES(options) {
    $1FKdo.call(this, options);
    var state = new $b305429c43c0faf6$var$DESState();
    this._desState = state;
    this.deriveKeys(state, options.key);
}
$6QnvD($b305429c43c0faf6$var$DES, $1FKdo);
module.exports = $b305429c43c0faf6$var$DES;
$b305429c43c0faf6$var$DES.create = function create(options) {
    return new $b305429c43c0faf6$var$DES(options);
};
var $b305429c43c0faf6$var$shiftTable = [
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1
];
$b305429c43c0faf6$var$DES.prototype.deriveKeys = function deriveKeys(state, key) {
    state.keys = new Array(32);
    $eHrxZ.equal(key.length, this.blockSize, "Invalid key length");
    var kL = $4nQgv.readUInt32BE(key, 0);
    var kR = $4nQgv.readUInt32BE(key, 4);
    $4nQgv.pc1(kL, kR, state.tmp, 0);
    kL = state.tmp[0];
    kR = state.tmp[1];
    for(var i = 0; i < state.keys.length; i += 2){
        var shift = $b305429c43c0faf6$var$shiftTable[i >>> 1];
        kL = $4nQgv.r28shl(kL, shift);
        kR = $4nQgv.r28shl(kR, shift);
        $4nQgv.pc2(kL, kR, state.keys, i);
    }
};
$b305429c43c0faf6$var$DES.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._desState;
    var l = $4nQgv.readUInt32BE(inp, inOff);
    var r = $4nQgv.readUInt32BE(inp, inOff + 4);
    // Initial Permutation
    $4nQgv.ip(l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    if (this.type === "encrypt") this._encrypt(state, l, r, state.tmp, 0);
    else this._decrypt(state, l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    $4nQgv.writeUInt32BE(out, l, outOff);
    $4nQgv.writeUInt32BE(out, r, outOff + 4);
};
$b305429c43c0faf6$var$DES.prototype._pad = function _pad(buffer, off) {
    var value = buffer.length - off;
    for(var i = off; i < buffer.length; i++)buffer[i] = value;
    return true;
};
$b305429c43c0faf6$var$DES.prototype._unpad = function _unpad(buffer) {
    var pad = buffer[buffer.length - 1];
    for(var i = buffer.length - pad; i < buffer.length; i++)$eHrxZ.equal(buffer[i], pad);
    return buffer.slice(0, buffer.length - pad);
};
$b305429c43c0faf6$var$DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
    var l = lStart;
    var r = rStart;
    // Apply f() x16 times
    for(var i = 0; i < state.keys.length; i += 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        $4nQgv.expand(r, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = $4nQgv.substitute(keyL, keyR);
        var f = $4nQgv.permute(s);
        var t = r;
        r = (l ^ f) >>> 0;
        l = t;
    }
    // Reverse Initial Permutation
    $4nQgv.rip(r, l, out, off);
};
$b305429c43c0faf6$var$DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
    var l = rStart;
    var r = lStart;
    // Apply f() x16 times
    for(var i = state.keys.length - 2; i >= 0; i -= 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        $4nQgv.expand(l, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = $4nQgv.substitute(keyL, keyR);
        var f = $4nQgv.permute(s);
        var t = l;
        l = (r ^ f) >>> 0;
        r = t;
    }
    // Reverse Initial Permutation
    $4nQgv.rip(l, r, out, off);
};

});

parcelRequire.register("ekenU", function(module, exports) {

$parcel$export(module.exports, "instantiate", () => $a6de1772212b37a2$export$f9bb8d20ccc7477a, (v) => $a6de1772212b37a2$export$f9bb8d20ccc7477a = v);
var $a6de1772212b37a2$export$f9bb8d20ccc7477a;
"use strict";

var $eHrxZ = parcelRequire("eHrxZ");

var $6QnvD = parcelRequire("6QnvD");
var $a6de1772212b37a2$var$proto = {};
function $a6de1772212b37a2$var$CBCState(iv) {
    $eHrxZ.equal(iv.length, 8, "Invalid IV length");
    this.iv = new Array(8);
    for(var i = 0; i < this.iv.length; i++)this.iv[i] = iv[i];
}
function $a6de1772212b37a2$var$instantiate(Base) {
    function CBC(options) {
        Base.call(this, options);
        this._cbcInit();
    }
    $6QnvD(CBC, Base);
    var keys = Object.keys($a6de1772212b37a2$var$proto);
    for(var i = 0; i < keys.length; i++){
        var key = keys[i];
        CBC.prototype[key] = $a6de1772212b37a2$var$proto[key];
    }
    CBC.create = function create(options) {
        return new CBC(options);
    };
    return CBC;
}
$a6de1772212b37a2$export$f9bb8d20ccc7477a = $a6de1772212b37a2$var$instantiate;
$a6de1772212b37a2$var$proto._cbcInit = function _cbcInit() {
    var state = new $a6de1772212b37a2$var$CBCState(this.options.iv);
    this._cbcState = state;
};
$a6de1772212b37a2$var$proto._update = function _update(inp, inOff, out, outOff) {
    var state = this._cbcState;
    var superProto = this.constructor.super_.prototype;
    var iv = state.iv;
    if (this.type === "encrypt") {
        for(var i = 0; i < this.blockSize; i++)iv[i] ^= inp[inOff + i];
        superProto._update.call(this, iv, 0, out, outOff);
        for(var i = 0; i < this.blockSize; i++)iv[i] = out[outOff + i];
    } else {
        superProto._update.call(this, inp, inOff, out, outOff);
        for(var i = 0; i < this.blockSize; i++)out[outOff + i] ^= iv[i];
        for(var i = 0; i < this.blockSize; i++)iv[i] = inp[inOff + i];
    }
};

});

parcelRequire.register("gLjBs", function(module, exports) {
"use strict";

var $eHrxZ = parcelRequire("eHrxZ");

var $6QnvD = parcelRequire("6QnvD");

var $1FKdo = parcelRequire("1FKdo");

var $fmVaP = parcelRequire("fmVaP");
function $c3403de9f0e8e196$var$EDEState(type, key) {
    $eHrxZ.equal(key.length, 24, "Invalid key length");
    var k1 = key.slice(0, 8);
    var k2 = key.slice(8, 16);
    var k3 = key.slice(16, 24);
    if (type === "encrypt") this.ciphers = [
        $fmVaP.create({
            type: "encrypt",
            key: k1
        }),
        $fmVaP.create({
            type: "decrypt",
            key: k2
        }),
        $fmVaP.create({
            type: "encrypt",
            key: k3
        })
    ];
    else this.ciphers = [
        $fmVaP.create({
            type: "decrypt",
            key: k3
        }),
        $fmVaP.create({
            type: "encrypt",
            key: k2
        }),
        $fmVaP.create({
            type: "decrypt",
            key: k1
        })
    ];
}
function $c3403de9f0e8e196$var$EDE(options) {
    $1FKdo.call(this, options);
    var state = new $c3403de9f0e8e196$var$EDEState(this.type, this.options.key);
    this._edeState = state;
}
$6QnvD($c3403de9f0e8e196$var$EDE, $1FKdo);
module.exports = $c3403de9f0e8e196$var$EDE;
$c3403de9f0e8e196$var$EDE.create = function create(options) {
    return new $c3403de9f0e8e196$var$EDE(options);
};
$c3403de9f0e8e196$var$EDE.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._edeState;
    state.ciphers[0]._update(inp, inOff, out, outOff);
    state.ciphers[1]._update(out, outOff, out, outOff);
    state.ciphers[2]._update(out, outOff, out, outOff);
};
$c3403de9f0e8e196$var$EDE.prototype._pad = $fmVaP.prototype._pad;
$c3403de9f0e8e196$var$EDE.prototype._unpad = $fmVaP.prototype._unpad;

});



parcelRequire.register("kQEw6", function(module, exports) {

$parcel$export(module.exports, "createCipheriv", () => $f2d817c856166226$export$2f64596b8cbf08b4, (v) => $f2d817c856166226$export$2f64596b8cbf08b4 = v);
$parcel$export(module.exports, "createDecipheriv", () => $f2d817c856166226$export$36b6d6ef312eab39, (v) => $f2d817c856166226$export$36b6d6ef312eab39 = v);
$parcel$export(module.exports, "getCiphers", () => $f2d817c856166226$export$58a258485f1e49f6, (v) => $f2d817c856166226$export$58a258485f1e49f6 = v);
var $f2d817c856166226$export$bdd223f16383713e;
var $f2d817c856166226$export$26e5786e8ac8e530;
var $f2d817c856166226$export$2f64596b8cbf08b4;
var $f2d817c856166226$export$20533d26f07f1ee0;
var $f2d817c856166226$export$12ada9414fbc594c;
var $f2d817c856166226$export$2ce6d8d0e8b04e1a;
var $f2d817c856166226$export$36b6d6ef312eab39;
var $f2d817c856166226$export$f5e7e39d57cd9700;
var $f2d817c856166226$export$dedd8dc3dc62b370;
var $f2d817c856166226$export$58a258485f1e49f6;

var $l4otE = parcelRequire("l4otE");

var $3vDHM = parcelRequire("3vDHM");

var $kkWi6 = parcelRequire("kkWi6");
function $f2d817c856166226$var$getCiphers() {
    return Object.keys($kkWi6);
}
$f2d817c856166226$export$bdd223f16383713e = $f2d817c856166226$export$26e5786e8ac8e530 = $l4otE.createCipher;
$f2d817c856166226$export$2f64596b8cbf08b4 = $f2d817c856166226$export$20533d26f07f1ee0 = $l4otE.createCipheriv;
$f2d817c856166226$export$12ada9414fbc594c = $f2d817c856166226$export$2ce6d8d0e8b04e1a = $3vDHM.createDecipher;
$f2d817c856166226$export$36b6d6ef312eab39 = $f2d817c856166226$export$f5e7e39d57cd9700 = $3vDHM.createDecipheriv;
$f2d817c856166226$export$dedd8dc3dc62b370 = $f2d817c856166226$export$58a258485f1e49f6 = $f2d817c856166226$var$getCiphers;

});
parcelRequire.register("l4otE", function(module, exports) {

$parcel$export(module.exports, "createCipheriv", () => $f56cf55c5f51e1ad$export$2f64596b8cbf08b4, (v) => $f56cf55c5f51e1ad$export$2f64596b8cbf08b4 = v);
$parcel$export(module.exports, "createCipher", () => $f56cf55c5f51e1ad$export$bdd223f16383713e, (v) => $f56cf55c5f51e1ad$export$bdd223f16383713e = v);
var $f56cf55c5f51e1ad$export$2f64596b8cbf08b4;
var $f56cf55c5f51e1ad$export$bdd223f16383713e;

var $aIF7h = parcelRequire("aIF7h");

var $cGYmt = parcelRequire("cGYmt");

var $1fMpU = parcelRequire("1fMpU");
var $f56cf55c5f51e1ad$require$Buffer = $1fMpU.Buffer;

var $kWOII = parcelRequire("kWOII");

var $bbKMQ = parcelRequire("bbKMQ");

var $jtU2t = parcelRequire("jtU2t");

var $2yXJt = parcelRequire("2yXJt");

var $6QnvD = parcelRequire("6QnvD");
function $f56cf55c5f51e1ad$var$Cipher(mode, key, iv) {
    $bbKMQ.call(this);
    this._cache = new $f56cf55c5f51e1ad$var$Splitter();
    this._cipher = new $jtU2t.AES(key);
    this._prev = $f56cf55c5f51e1ad$require$Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
$6QnvD($f56cf55c5f51e1ad$var$Cipher, $bbKMQ);
$f56cf55c5f51e1ad$var$Cipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get()){
        thing = this._mode.encrypt(this, chunk);
        out.push(thing);
    }
    return $f56cf55c5f51e1ad$require$Buffer.concat(out);
};
var $f56cf55c5f51e1ad$var$PADDING = $f56cf55c5f51e1ad$require$Buffer.alloc(16, 0x10);
$f56cf55c5f51e1ad$var$Cipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk);
        this._cipher.scrub();
        return chunk;
    }
    if (!chunk.equals($f56cf55c5f51e1ad$var$PADDING)) {
        this._cipher.scrub();
        throw new Error("data not multiple of block length");
    }
};
$f56cf55c5f51e1ad$var$Cipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function $f56cf55c5f51e1ad$var$Splitter() {
    this.cache = $f56cf55c5f51e1ad$require$Buffer.allocUnsafe(0);
}
$f56cf55c5f51e1ad$var$Splitter.prototype.add = function(data) {
    this.cache = $f56cf55c5f51e1ad$require$Buffer.concat([
        this.cache,
        data
    ]);
};
$f56cf55c5f51e1ad$var$Splitter.prototype.get = function() {
    if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
$f56cf55c5f51e1ad$var$Splitter.prototype.flush = function() {
    var len = 16 - this.cache.length;
    var padBuff = $f56cf55c5f51e1ad$require$Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)padBuff.writeUInt8(len, i);
    return $f56cf55c5f51e1ad$require$Buffer.concat([
        this.cache,
        padBuff
    ]);
};
function $f56cf55c5f51e1ad$var$createCipheriv(suite, password, iv) {
    var config = $aIF7h[suite.toLowerCase()];
    if (!config) throw new TypeError("invalid suite type");
    if (typeof password === "string") password = $f56cf55c5f51e1ad$require$Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError("invalid key length " + password.length);
    if (typeof iv === "string") iv = $f56cf55c5f51e1ad$require$Buffer.from(iv);
    if (config.mode !== "GCM" && iv.length !== config.iv) throw new TypeError("invalid iv length " + iv.length);
    if (config.type === "stream") return new $kWOII(config.module, password, iv);
    else if (config.type === "auth") return new $cGYmt(config.module, password, iv);
    return new $f56cf55c5f51e1ad$var$Cipher(config.module, password, iv);
}
function $f56cf55c5f51e1ad$var$createCipher(suite, password) {
    var config = $aIF7h[suite.toLowerCase()];
    if (!config) throw new TypeError("invalid suite type");
    var keys = $2yXJt(password, false, config.key, config.iv);
    return $f56cf55c5f51e1ad$var$createCipheriv(suite, keys.key, keys.iv);
}
$f56cf55c5f51e1ad$export$2f64596b8cbf08b4 = $f56cf55c5f51e1ad$var$createCipheriv;
$f56cf55c5f51e1ad$export$bdd223f16383713e = $f56cf55c5f51e1ad$var$createCipher;

});
parcelRequire.register("aIF7h", function(module, exports) {








var $7cdde84a50cc478c$var$modeModules = {
    ECB: (parcelRequire("adEPz")),
    CBC: (parcelRequire("cleiB")),
    CFB: (parcelRequire("cCAU4")),
    CFB8: (parcelRequire("x3r5n")),
    CFB1: (parcelRequire("jifNU")),
    OFB: (parcelRequire("cKU3Z")),
    CTR: (parcelRequire("iVgtX")),
    GCM: (parcelRequire("iVgtX"))
};

var $kkWi6 = parcelRequire("kkWi6");
for(var $7cdde84a50cc478c$var$key in $kkWi6)$kkWi6[$7cdde84a50cc478c$var$key].module = $7cdde84a50cc478c$var$modeModules[$kkWi6[$7cdde84a50cc478c$var$key].mode];
module.exports = $kkWi6;

});
parcelRequire.register("adEPz", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $770aca6936b191a4$export$5b0f6292f11d1d18, (v) => $770aca6936b191a4$export$5b0f6292f11d1d18 = v);
$parcel$export(module.exports, "decrypt", () => $770aca6936b191a4$export$e85a0c9a1067c5d3, (v) => $770aca6936b191a4$export$e85a0c9a1067c5d3 = v);
var $770aca6936b191a4$export$5b0f6292f11d1d18;
var $770aca6936b191a4$export$e85a0c9a1067c5d3;
$770aca6936b191a4$export$5b0f6292f11d1d18 = function(self, block) {
    return self._cipher.encryptBlock(block);
};
$770aca6936b191a4$export$e85a0c9a1067c5d3 = function(self, block) {
    return self._cipher.decryptBlock(block);
};

});

parcelRequire.register("cleiB", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $8fc289b7fb37c5a4$export$5b0f6292f11d1d18, (v) => $8fc289b7fb37c5a4$export$5b0f6292f11d1d18 = v);
$parcel$export(module.exports, "decrypt", () => $8fc289b7fb37c5a4$export$e85a0c9a1067c5d3, (v) => $8fc289b7fb37c5a4$export$e85a0c9a1067c5d3 = v);
var $8fc289b7fb37c5a4$export$5b0f6292f11d1d18;
var $8fc289b7fb37c5a4$export$e85a0c9a1067c5d3;

var $3qIre = parcelRequire("3qIre");
$8fc289b7fb37c5a4$export$5b0f6292f11d1d18 = function(self, block) {
    var data = $3qIre(block, self._prev);
    self._prev = self._cipher.encryptBlock(data);
    return self._prev;
};
$8fc289b7fb37c5a4$export$e85a0c9a1067c5d3 = function(self, block) {
    var pad = self._prev;
    self._prev = block;
    var out = self._cipher.decryptBlock(block);
    return $3qIre(out, pad);
};

});
parcelRequire.register("3qIre", function(module, exports) {

var $fLrIr = parcelRequire("fLrIr");
var $27f645518f328978$require$Buffer = $fLrIr.Buffer;
module.exports = function xor(a, b) {
    var length = Math.min(a.length, b.length);
    var buffer = new $27f645518f328978$require$Buffer(length);
    for(var i = 0; i < length; ++i)buffer[i] = a[i] ^ b[i];
    return buffer;
};

});


parcelRequire.register("cCAU4", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $9305a8e616b542ae$export$5b0f6292f11d1d18, (v) => $9305a8e616b542ae$export$5b0f6292f11d1d18 = v);
var $9305a8e616b542ae$export$5b0f6292f11d1d18;

var $1fMpU = parcelRequire("1fMpU");
var $9305a8e616b542ae$require$Buffer = $1fMpU.Buffer;

var $3qIre = parcelRequire("3qIre");
function $9305a8e616b542ae$var$encryptStart(self, data, decrypt) {
    var len = data.length;
    var out = $3qIre(data, self._cache);
    self._cache = self._cache.slice(len);
    self._prev = $9305a8e616b542ae$require$Buffer.concat([
        self._prev,
        decrypt ? data : out
    ]);
    return out;
}
$9305a8e616b542ae$export$5b0f6292f11d1d18 = function(self, data, decrypt) {
    var out = $9305a8e616b542ae$require$Buffer.allocUnsafe(0);
    var len;
    while(data.length){
        if (self._cache.length === 0) {
            self._cache = self._cipher.encryptBlock(self._prev);
            self._prev = $9305a8e616b542ae$require$Buffer.allocUnsafe(0);
        }
        if (self._cache.length <= data.length) {
            len = self._cache.length;
            out = $9305a8e616b542ae$require$Buffer.concat([
                out,
                $9305a8e616b542ae$var$encryptStart(self, data.slice(0, len), decrypt)
            ]);
            data = data.slice(len);
        } else {
            out = $9305a8e616b542ae$require$Buffer.concat([
                out,
                $9305a8e616b542ae$var$encryptStart(self, data, decrypt)
            ]);
            break;
        }
    }
    return out;
};

});

parcelRequire.register("x3r5n", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $0635bf79327dd995$export$5b0f6292f11d1d18, (v) => $0635bf79327dd995$export$5b0f6292f11d1d18 = v);
var $0635bf79327dd995$export$5b0f6292f11d1d18;

var $1fMpU = parcelRequire("1fMpU");
var $0635bf79327dd995$require$Buffer = $1fMpU.Buffer;
function $0635bf79327dd995$var$encryptByte(self, byteParam, decrypt) {
    var pad = self._cipher.encryptBlock(self._prev);
    var out = pad[0] ^ byteParam;
    self._prev = $0635bf79327dd995$require$Buffer.concat([
        self._prev.slice(1),
        $0635bf79327dd995$require$Buffer.from([
            decrypt ? byteParam : out
        ])
    ]);
    return out;
}
$0635bf79327dd995$export$5b0f6292f11d1d18 = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = $0635bf79327dd995$require$Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)out[i] = $0635bf79327dd995$var$encryptByte(self, chunk[i], decrypt);
    return out;
};

});

parcelRequire.register("jifNU", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $e0bbf520c04a3ca0$export$5b0f6292f11d1d18, (v) => $e0bbf520c04a3ca0$export$5b0f6292f11d1d18 = v);
var $e0bbf520c04a3ca0$export$5b0f6292f11d1d18;

var $1fMpU = parcelRequire("1fMpU");
var $e0bbf520c04a3ca0$require$Buffer = $1fMpU.Buffer;
function $e0bbf520c04a3ca0$var$encryptByte(self, byteParam, decrypt) {
    var pad;
    var i = -1;
    var len = 8;
    var out = 0;
    var bit, value;
    while(++i < len){
        pad = self._cipher.encryptBlock(self._prev);
        bit = byteParam & 1 << 7 - i ? 0x80 : 0;
        value = pad[0] ^ bit;
        out += (value & 0x80) >> i % 8;
        self._prev = $e0bbf520c04a3ca0$var$shiftIn(self._prev, decrypt ? bit : value);
    }
    return out;
}
function $e0bbf520c04a3ca0$var$shiftIn(buffer, value) {
    var len = buffer.length;
    var i = -1;
    var out = $e0bbf520c04a3ca0$require$Buffer.allocUnsafe(buffer.length);
    buffer = $e0bbf520c04a3ca0$require$Buffer.concat([
        buffer,
        $e0bbf520c04a3ca0$require$Buffer.from([
            value
        ])
    ]);
    while(++i < len)out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
    return out;
}
$e0bbf520c04a3ca0$export$5b0f6292f11d1d18 = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = $e0bbf520c04a3ca0$require$Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)out[i] = $e0bbf520c04a3ca0$var$encryptByte(self, chunk[i], decrypt);
    return out;
};

});

parcelRequire.register("cKU3Z", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $949544efa7ecdb81$export$5b0f6292f11d1d18, (v) => $949544efa7ecdb81$export$5b0f6292f11d1d18 = v);
var $949544efa7ecdb81$export$5b0f6292f11d1d18;

var $fLrIr = parcelRequire("fLrIr");
var $949544efa7ecdb81$require$Buffer = $fLrIr.Buffer;

var $3qIre = parcelRequire("3qIre");
function $949544efa7ecdb81$var$getBlock(self) {
    self._prev = self._cipher.encryptBlock(self._prev);
    return self._prev;
}
$949544efa7ecdb81$export$5b0f6292f11d1d18 = function(self, chunk) {
    while(self._cache.length < chunk.length)self._cache = $949544efa7ecdb81$require$Buffer.concat([
        self._cache,
        $949544efa7ecdb81$var$getBlock(self)
    ]);
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return $3qIre(chunk, pad);
};

});

parcelRequire.register("iVgtX", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $dc6a55e7d42986c0$export$5b0f6292f11d1d18, (v) => $dc6a55e7d42986c0$export$5b0f6292f11d1d18 = v);
var $dc6a55e7d42986c0$export$5b0f6292f11d1d18;

var $3qIre = parcelRequire("3qIre");

var $1fMpU = parcelRequire("1fMpU");
var $dc6a55e7d42986c0$require$Buffer = $1fMpU.Buffer;

var $1uZaV = parcelRequire("1uZaV");
function $dc6a55e7d42986c0$var$getBlock(self) {
    var out = self._cipher.encryptBlockRaw(self._prev);
    $1uZaV(self._prev);
    return out;
}
var $dc6a55e7d42986c0$var$blockSize = 16;
$dc6a55e7d42986c0$export$5b0f6292f11d1d18 = function(self, chunk) {
    var chunkNum = Math.ceil(chunk.length / $dc6a55e7d42986c0$var$blockSize);
    var start = self._cache.length;
    self._cache = $dc6a55e7d42986c0$require$Buffer.concat([
        self._cache,
        $dc6a55e7d42986c0$require$Buffer.allocUnsafe(chunkNum * $dc6a55e7d42986c0$var$blockSize)
    ]);
    for(var i = 0; i < chunkNum; i++){
        var out = $dc6a55e7d42986c0$var$getBlock(self);
        var offset = start + i * $dc6a55e7d42986c0$var$blockSize;
        self._cache.writeUInt32BE(out[0], offset + 0);
        self._cache.writeUInt32BE(out[1], offset + 4);
        self._cache.writeUInt32BE(out[2], offset + 8);
        self._cache.writeUInt32BE(out[3], offset + 12);
    }
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return $3qIre(chunk, pad);
};

});
parcelRequire.register("1uZaV", function(module, exports) {
function $11780bebc0558a20$var$incr32(iv) {
    var len = iv.length;
    var item;
    while(len--){
        item = iv.readUInt8(len);
        if (item === 255) iv.writeUInt8(0, len);
        else {
            item++;
            iv.writeUInt8(item, len);
            break;
        }
    }
}
module.exports = $11780bebc0558a20$var$incr32;

});


parcelRequire.register("kkWi6", function(module, exports) {
module.exports = JSON.parse('{"aes-128-ecb":{"cipher":"AES","key":128,"iv":0,"mode":"ECB","type":"block"},"aes-192-ecb":{"cipher":"AES","key":192,"iv":0,"mode":"ECB","type":"block"},"aes-256-ecb":{"cipher":"AES","key":256,"iv":0,"mode":"ECB","type":"block"},"aes-128-cbc":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes-192-cbc":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes-256-cbc":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes128":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes192":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes256":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes-128-cfb":{"cipher":"AES","key":128,"iv":16,"mode":"CFB","type":"stream"},"aes-192-cfb":{"cipher":"AES","key":192,"iv":16,"mode":"CFB","type":"stream"},"aes-256-cfb":{"cipher":"AES","key":256,"iv":16,"mode":"CFB","type":"stream"},"aes-128-cfb8":{"cipher":"AES","key":128,"iv":16,"mode":"CFB8","type":"stream"},"aes-192-cfb8":{"cipher":"AES","key":192,"iv":16,"mode":"CFB8","type":"stream"},"aes-256-cfb8":{"cipher":"AES","key":256,"iv":16,"mode":"CFB8","type":"stream"},"aes-128-cfb1":{"cipher":"AES","key":128,"iv":16,"mode":"CFB1","type":"stream"},"aes-192-cfb1":{"cipher":"AES","key":192,"iv":16,"mode":"CFB1","type":"stream"},"aes-256-cfb1":{"cipher":"AES","key":256,"iv":16,"mode":"CFB1","type":"stream"},"aes-128-ofb":{"cipher":"AES","key":128,"iv":16,"mode":"OFB","type":"stream"},"aes-192-ofb":{"cipher":"AES","key":192,"iv":16,"mode":"OFB","type":"stream"},"aes-256-ofb":{"cipher":"AES","key":256,"iv":16,"mode":"OFB","type":"stream"},"aes-128-ctr":{"cipher":"AES","key":128,"iv":16,"mode":"CTR","type":"stream"},"aes-192-ctr":{"cipher":"AES","key":192,"iv":16,"mode":"CTR","type":"stream"},"aes-256-ctr":{"cipher":"AES","key":256,"iv":16,"mode":"CTR","type":"stream"},"aes-128-gcm":{"cipher":"AES","key":128,"iv":12,"mode":"GCM","type":"auth"},"aes-192-gcm":{"cipher":"AES","key":192,"iv":12,"mode":"GCM","type":"auth"},"aes-256-gcm":{"cipher":"AES","key":256,"iv":12,"mode":"GCM","type":"auth"}}');

});


parcelRequire.register("cGYmt", function(module, exports) {

var $jtU2t = parcelRequire("jtU2t");

var $1fMpU = parcelRequire("1fMpU");
var $93d83ace2003ea0c$require$Buffer = $1fMpU.Buffer;

var $bbKMQ = parcelRequire("bbKMQ");

var $6QnvD = parcelRequire("6QnvD");

var $dYAFa = parcelRequire("dYAFa");

var $3qIre = parcelRequire("3qIre");

var $1uZaV = parcelRequire("1uZaV");
function $93d83ace2003ea0c$var$xorTest(a, b) {
    var out = 0;
    if (a.length !== b.length) out++;
    var len = Math.min(a.length, b.length);
    for(var i = 0; i < len; ++i)out += a[i] ^ b[i];
    return out;
}
function $93d83ace2003ea0c$var$calcIv(self, iv, ck) {
    if (iv.length === 12) {
        self._finID = $93d83ace2003ea0c$require$Buffer.concat([
            iv,
            $93d83ace2003ea0c$require$Buffer.from([
                0,
                0,
                0,
                1
            ])
        ]);
        return $93d83ace2003ea0c$require$Buffer.concat([
            iv,
            $93d83ace2003ea0c$require$Buffer.from([
                0,
                0,
                0,
                2
            ])
        ]);
    }
    var ghash = new $dYAFa(ck);
    var len = iv.length;
    var toPad = len % 16;
    ghash.update(iv);
    if (toPad) {
        toPad = 16 - toPad;
        ghash.update($93d83ace2003ea0c$require$Buffer.alloc(toPad, 0));
    }
    ghash.update($93d83ace2003ea0c$require$Buffer.alloc(8, 0));
    var ivBits = len * 8;
    var tail = $93d83ace2003ea0c$require$Buffer.alloc(8);
    tail.writeUIntBE(ivBits, 0, 8);
    ghash.update(tail);
    self._finID = ghash.state;
    var out = $93d83ace2003ea0c$require$Buffer.from(self._finID);
    $1uZaV(out);
    return out;
}
function $93d83ace2003ea0c$var$StreamCipher(mode, key, iv, decrypt) {
    $bbKMQ.call(this);
    var h = $93d83ace2003ea0c$require$Buffer.alloc(4, 0);
    this._cipher = new $jtU2t.AES(key);
    var ck = this._cipher.encryptBlock(h);
    this._ghash = new $dYAFa(ck);
    iv = $93d83ace2003ea0c$var$calcIv(this, iv, ck);
    this._prev = $93d83ace2003ea0c$require$Buffer.from(iv);
    this._cache = $93d83ace2003ea0c$require$Buffer.allocUnsafe(0);
    this._secCache = $93d83ace2003ea0c$require$Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._alen = 0;
    this._len = 0;
    this._mode = mode;
    this._authTag = null;
    this._called = false;
}
$6QnvD($93d83ace2003ea0c$var$StreamCipher, $bbKMQ);
$93d83ace2003ea0c$var$StreamCipher.prototype._update = function(chunk) {
    if (!this._called && this._alen) {
        var rump = 16 - this._alen % 16;
        if (rump < 16) {
            rump = $93d83ace2003ea0c$require$Buffer.alloc(rump, 0);
            this._ghash.update(rump);
        }
    }
    this._called = true;
    var out = this._mode.encrypt(this, chunk);
    if (this._decrypt) this._ghash.update(chunk);
    else this._ghash.update(out);
    this._len += chunk.length;
    return out;
};
$93d83ace2003ea0c$var$StreamCipher.prototype._final = function() {
    if (this._decrypt && !this._authTag) throw new Error("Unsupported state or unable to authenticate data");
    var tag = $3qIre(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
    if (this._decrypt && $93d83ace2003ea0c$var$xorTest(tag, this._authTag)) throw new Error("Unsupported state or unable to authenticate data");
    this._authTag = tag;
    this._cipher.scrub();
};
$93d83ace2003ea0c$var$StreamCipher.prototype.getAuthTag = function getAuthTag() {
    if (this._decrypt || !$93d83ace2003ea0c$require$Buffer.isBuffer(this._authTag)) throw new Error("Attempting to get auth tag in unsupported state");
    return this._authTag;
};
$93d83ace2003ea0c$var$StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
    if (!this._decrypt) throw new Error("Attempting to set auth tag in unsupported state");
    this._authTag = tag;
};
$93d83ace2003ea0c$var$StreamCipher.prototype.setAAD = function setAAD(buf) {
    if (this._called) throw new Error("Attempting to set AAD in unsupported state");
    this._ghash.update(buf);
    this._alen += buf.length;
};
module.exports = $93d83ace2003ea0c$var$StreamCipher;

});
parcelRequire.register("jtU2t", function(module, exports) {

$parcel$export(module.exports, "AES", () => $e2ec31e8b8018a16$export$b80fbe1c3a2b92b5, (v) => $e2ec31e8b8018a16$export$b80fbe1c3a2b92b5 = v);
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/
var $e2ec31e8b8018a16$export$b80fbe1c3a2b92b5;

var $1fMpU = parcelRequire("1fMpU");
var $e2ec31e8b8018a16$require$Buffer = $1fMpU.Buffer;
function $e2ec31e8b8018a16$var$asUInt32Array(buf) {
    if (!$e2ec31e8b8018a16$require$Buffer.isBuffer(buf)) buf = $e2ec31e8b8018a16$require$Buffer.from(buf);
    var len = buf.length / 4 | 0;
    var out = new Array(len);
    for(var i = 0; i < len; i++)out[i] = buf.readUInt32BE(i * 4);
    return out;
}
function $e2ec31e8b8018a16$var$scrubVec(v) {
    for(var i = 0; i < v.length; v++)v[i] = 0;
}
function $e2ec31e8b8018a16$var$cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
    var SUB_MIX0 = SUB_MIX[0];
    var SUB_MIX1 = SUB_MIX[1];
    var SUB_MIX2 = SUB_MIX[2];
    var SUB_MIX3 = SUB_MIX[3];
    var s0 = M[0] ^ keySchedule[0];
    var s1 = M[1] ^ keySchedule[1];
    var s2 = M[2] ^ keySchedule[2];
    var s3 = M[3] ^ keySchedule[3];
    var t0, t1, t2, t3;
    var ksRow = 4;
    for(var round = 1; round < nRounds; round++){
        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 0xff] ^ SUB_MIX2[s2 >>> 8 & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++];
        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 0xff] ^ SUB_MIX2[s3 >>> 8 & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++];
        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 0xff] ^ SUB_MIX2[s0 >>> 8 & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++];
        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 0xff] ^ SUB_MIX2[s1 >>> 8 & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++];
        s0 = t0;
        s1 = t1;
        s2 = t2;
        s3 = t3;
    }
    t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
    t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
    t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
    t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
    t0 = t0 >>> 0;
    t1 = t1 >>> 0;
    t2 = t2 >>> 0;
    t3 = t3 >>> 0;
    return [
        t0,
        t1,
        t2,
        t3
    ];
}
// AES constants
var $e2ec31e8b8018a16$var$RCON = [
    0x00,
    0x01,
    0x02,
    0x04,
    0x08,
    0x10,
    0x20,
    0x40,
    0x80,
    0x1b,
    0x36
];
var $e2ec31e8b8018a16$var$G = function() {
    // Compute double table
    var d = new Array(256);
    for(var j = 0; j < 256; j++)if (j < 128) d[j] = j << 1;
    else d[j] = j << 1 ^ 0x11b;
    var SBOX = [];
    var INV_SBOX = [];
    var SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    var INV_SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    // Walk GF(2^8)
    var x = 0;
    var xi = 0;
    for(var i = 0; i < 256; ++i){
        // Compute sbox
        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
        sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
        SBOX[x] = sx;
        INV_SBOX[sx] = x;
        // Compute multiplication
        var x2 = d[x];
        var x4 = d[x2];
        var x8 = d[x4];
        // Compute sub bytes, mix columns tables
        var t = d[sx] * 0x101 ^ sx * 0x1010100;
        SUB_MIX[0][x] = t << 24 | t >>> 8;
        SUB_MIX[1][x] = t << 16 | t >>> 16;
        SUB_MIX[2][x] = t << 8 | t >>> 24;
        SUB_MIX[3][x] = t;
        // Compute inv sub bytes, inv mix columns tables
        t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
        INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
        INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
        INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
        INV_SUB_MIX[3][sx] = t;
        if (x === 0) x = xi = 1;
        else {
            x = x2 ^ d[d[d[x8 ^ x2]]];
            xi ^= d[d[xi]];
        }
    }
    return {
        SBOX: SBOX,
        INV_SBOX: INV_SBOX,
        SUB_MIX: SUB_MIX,
        INV_SUB_MIX: INV_SUB_MIX
    };
}();
function $e2ec31e8b8018a16$var$AES(key) {
    this._key = $e2ec31e8b8018a16$var$asUInt32Array(key);
    this._reset();
}
$e2ec31e8b8018a16$var$AES.blockSize = 16;
$e2ec31e8b8018a16$var$AES.keySize = 32;
$e2ec31e8b8018a16$var$AES.prototype.blockSize = $e2ec31e8b8018a16$var$AES.blockSize;
$e2ec31e8b8018a16$var$AES.prototype.keySize = $e2ec31e8b8018a16$var$AES.keySize;
$e2ec31e8b8018a16$var$AES.prototype._reset = function() {
    var keyWords = this._key;
    var keySize = keyWords.length;
    var nRounds = keySize + 6;
    var ksRows = (nRounds + 1) * 4;
    var keySchedule = [];
    for(var k = 0; k < keySize; k++)keySchedule[k] = keyWords[k];
    for(k = keySize; k < ksRows; k++){
        var t = keySchedule[k - 1];
        if (k % keySize === 0) {
            t = t << 8 | t >>> 24;
            t = $e2ec31e8b8018a16$var$G.SBOX[t >>> 24] << 24 | $e2ec31e8b8018a16$var$G.SBOX[t >>> 16 & 0xff] << 16 | $e2ec31e8b8018a16$var$G.SBOX[t >>> 8 & 0xff] << 8 | $e2ec31e8b8018a16$var$G.SBOX[t & 0xff];
            t ^= $e2ec31e8b8018a16$var$RCON[k / keySize | 0] << 24;
        } else if (keySize > 6 && k % keySize === 4) t = $e2ec31e8b8018a16$var$G.SBOX[t >>> 24] << 24 | $e2ec31e8b8018a16$var$G.SBOX[t >>> 16 & 0xff] << 16 | $e2ec31e8b8018a16$var$G.SBOX[t >>> 8 & 0xff] << 8 | $e2ec31e8b8018a16$var$G.SBOX[t & 0xff];
        keySchedule[k] = keySchedule[k - keySize] ^ t;
    }
    var invKeySchedule = [];
    for(var ik = 0; ik < ksRows; ik++){
        var ksR = ksRows - ik;
        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];
        if (ik < 4 || ksR <= 4) invKeySchedule[ik] = tt;
        else invKeySchedule[ik] = $e2ec31e8b8018a16$var$G.INV_SUB_MIX[0][$e2ec31e8b8018a16$var$G.SBOX[tt >>> 24]] ^ $e2ec31e8b8018a16$var$G.INV_SUB_MIX[1][$e2ec31e8b8018a16$var$G.SBOX[tt >>> 16 & 0xff]] ^ $e2ec31e8b8018a16$var$G.INV_SUB_MIX[2][$e2ec31e8b8018a16$var$G.SBOX[tt >>> 8 & 0xff]] ^ $e2ec31e8b8018a16$var$G.INV_SUB_MIX[3][$e2ec31e8b8018a16$var$G.SBOX[tt & 0xff]];
    }
    this._nRounds = nRounds;
    this._keySchedule = keySchedule;
    this._invKeySchedule = invKeySchedule;
};
$e2ec31e8b8018a16$var$AES.prototype.encryptBlockRaw = function(M) {
    M = $e2ec31e8b8018a16$var$asUInt32Array(M);
    return $e2ec31e8b8018a16$var$cryptBlock(M, this._keySchedule, $e2ec31e8b8018a16$var$G.SUB_MIX, $e2ec31e8b8018a16$var$G.SBOX, this._nRounds);
};
$e2ec31e8b8018a16$var$AES.prototype.encryptBlock = function(M) {
    var out = this.encryptBlockRaw(M);
    var buf = $e2ec31e8b8018a16$require$Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[1], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[3], 12);
    return buf;
};
$e2ec31e8b8018a16$var$AES.prototype.decryptBlock = function(M) {
    M = $e2ec31e8b8018a16$var$asUInt32Array(M);
    // swap
    var m1 = M[1];
    M[1] = M[3];
    M[3] = m1;
    var out = $e2ec31e8b8018a16$var$cryptBlock(M, this._invKeySchedule, $e2ec31e8b8018a16$var$G.INV_SUB_MIX, $e2ec31e8b8018a16$var$G.INV_SBOX, this._nRounds);
    var buf = $e2ec31e8b8018a16$require$Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[3], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[1], 12);
    return buf;
};
$e2ec31e8b8018a16$var$AES.prototype.scrub = function() {
    $e2ec31e8b8018a16$var$scrubVec(this._keySchedule);
    $e2ec31e8b8018a16$var$scrubVec(this._invKeySchedule);
    $e2ec31e8b8018a16$var$scrubVec(this._key);
};
$e2ec31e8b8018a16$export$b80fbe1c3a2b92b5 = $e2ec31e8b8018a16$var$AES;

});

parcelRequire.register("dYAFa", function(module, exports) {

var $1fMpU = parcelRequire("1fMpU");
var $a2cd517d191b0f37$require$Buffer = $1fMpU.Buffer;
var $a2cd517d191b0f37$var$ZEROES = $a2cd517d191b0f37$require$Buffer.alloc(16, 0);
function $a2cd517d191b0f37$var$toArray(buf) {
    return [
        buf.readUInt32BE(0),
        buf.readUInt32BE(4),
        buf.readUInt32BE(8),
        buf.readUInt32BE(12)
    ];
}
function $a2cd517d191b0f37$var$fromArray(out) {
    var buf = $a2cd517d191b0f37$require$Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0] >>> 0, 0);
    buf.writeUInt32BE(out[1] >>> 0, 4);
    buf.writeUInt32BE(out[2] >>> 0, 8);
    buf.writeUInt32BE(out[3] >>> 0, 12);
    return buf;
}
function $a2cd517d191b0f37$var$GHASH(key) {
    this.h = key;
    this.state = $a2cd517d191b0f37$require$Buffer.alloc(16, 0);
    this.cache = $a2cd517d191b0f37$require$Buffer.allocUnsafe(0);
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
$a2cd517d191b0f37$var$GHASH.prototype.ghash = function(block) {
    var i = -1;
    while(++i < block.length)this.state[i] ^= block[i];
    this._multiply();
};
$a2cd517d191b0f37$var$GHASH.prototype._multiply = function() {
    var Vi = $a2cd517d191b0f37$var$toArray(this.h);
    var Zi = [
        0,
        0,
        0,
        0
    ];
    var j, xi, lsbVi;
    var i = -1;
    while(++i < 128){
        xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;
        if (xi) {
            // Z_i+1 = Z_i ^ V_i
            Zi[0] ^= Vi[0];
            Zi[1] ^= Vi[1];
            Zi[2] ^= Vi[2];
            Zi[3] ^= Vi[3];
        }
        // Store the value of LSB(V_i)
        lsbVi = (Vi[3] & 1) !== 0;
        // V_i+1 = V_i >> 1
        for(j = 3; j > 0; j--)Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
        Vi[0] = Vi[0] >>> 1;
        // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
        if (lsbVi) Vi[0] = Vi[0] ^ -520093696;
    }
    this.state = $a2cd517d191b0f37$var$fromArray(Zi);
};
$a2cd517d191b0f37$var$GHASH.prototype.update = function(buf) {
    this.cache = $a2cd517d191b0f37$require$Buffer.concat([
        this.cache,
        buf
    ]);
    var chunk;
    while(this.cache.length >= 16){
        chunk = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        this.ghash(chunk);
    }
};
$a2cd517d191b0f37$var$GHASH.prototype.final = function(abl, bl) {
    if (this.cache.length) this.ghash($a2cd517d191b0f37$require$Buffer.concat([
        this.cache,
        $a2cd517d191b0f37$var$ZEROES
    ], 16));
    this.ghash($a2cd517d191b0f37$var$fromArray([
        0,
        abl,
        0,
        bl
    ]));
    return this.state;
};
module.exports = $a2cd517d191b0f37$var$GHASH;

});


parcelRequire.register("kWOII", function(module, exports) {

var $jtU2t = parcelRequire("jtU2t");

var $1fMpU = parcelRequire("1fMpU");
var $f4009167886e809a$require$Buffer = $1fMpU.Buffer;

var $bbKMQ = parcelRequire("bbKMQ");

var $6QnvD = parcelRequire("6QnvD");
function $f4009167886e809a$var$StreamCipher(mode, key, iv, decrypt) {
    $bbKMQ.call(this);
    this._cipher = new $jtU2t.AES(key);
    this._prev = $f4009167886e809a$require$Buffer.from(iv);
    this._cache = $f4009167886e809a$require$Buffer.allocUnsafe(0);
    this._secCache = $f4009167886e809a$require$Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._mode = mode;
}
$6QnvD($f4009167886e809a$var$StreamCipher, $bbKMQ);
$f4009167886e809a$var$StreamCipher.prototype._update = function(chunk) {
    return this._mode.encrypt(this, chunk, this._decrypt);
};
$f4009167886e809a$var$StreamCipher.prototype._final = function() {
    this._cipher.scrub();
};
module.exports = $f4009167886e809a$var$StreamCipher;

});

parcelRequire.register("2yXJt", function(module, exports) {

var $1fMpU = parcelRequire("1fMpU");
var $1ddd175f6f1e952e$require$Buffer = $1fMpU.Buffer;

var $fkYWF = parcelRequire("fkYWF");
/* eslint-disable camelcase */ function $1ddd175f6f1e952e$var$EVP_BytesToKey(password, salt, keyBits, ivLen) {
    if (!$1ddd175f6f1e952e$require$Buffer.isBuffer(password)) password = $1ddd175f6f1e952e$require$Buffer.from(password, "binary");
    if (salt) {
        if (!$1ddd175f6f1e952e$require$Buffer.isBuffer(salt)) salt = $1ddd175f6f1e952e$require$Buffer.from(salt, "binary");
        if (salt.length !== 8) throw new RangeError("salt should be Buffer with 8 byte length");
    }
    var keyLen = keyBits / 8;
    var key = $1ddd175f6f1e952e$require$Buffer.alloc(keyLen);
    var iv = $1ddd175f6f1e952e$require$Buffer.alloc(ivLen || 0);
    var tmp = $1ddd175f6f1e952e$require$Buffer.alloc(0);
    while(keyLen > 0 || ivLen > 0){
        var hash = new $fkYWF();
        hash.update(tmp);
        hash.update(password);
        if (salt) hash.update(salt);
        tmp = hash.digest();
        var used = 0;
        if (keyLen > 0) {
            var keyStart = key.length - keyLen;
            used = Math.min(keyLen, tmp.length);
            tmp.copy(key, keyStart, 0, used);
            keyLen -= used;
        }
        if (used < tmp.length && ivLen > 0) {
            var ivStart = iv.length - ivLen;
            var length = Math.min(ivLen, tmp.length - used);
            tmp.copy(iv, ivStart, used, used + length);
            ivLen -= length;
        }
    }
    tmp.fill(0);
    return {
        key: key,
        iv: iv
    };
}
module.exports = $1ddd175f6f1e952e$var$EVP_BytesToKey;

});


parcelRequire.register("3vDHM", function(module, exports) {

$parcel$export(module.exports, "createDecipher", () => $28e310f4f4520e20$export$12ada9414fbc594c, (v) => $28e310f4f4520e20$export$12ada9414fbc594c = v);
$parcel$export(module.exports, "createDecipheriv", () => $28e310f4f4520e20$export$36b6d6ef312eab39, (v) => $28e310f4f4520e20$export$36b6d6ef312eab39 = v);
var $28e310f4f4520e20$export$12ada9414fbc594c;
var $28e310f4f4520e20$export$36b6d6ef312eab39;

var $cGYmt = parcelRequire("cGYmt");

var $1fMpU = parcelRequire("1fMpU");
var $28e310f4f4520e20$require$Buffer = $1fMpU.Buffer;

var $aIF7h = parcelRequire("aIF7h");

var $kWOII = parcelRequire("kWOII");

var $bbKMQ = parcelRequire("bbKMQ");

var $jtU2t = parcelRequire("jtU2t");

var $2yXJt = parcelRequire("2yXJt");

var $6QnvD = parcelRequire("6QnvD");
function $28e310f4f4520e20$var$Decipher(mode, key, iv) {
    $bbKMQ.call(this);
    this._cache = new $28e310f4f4520e20$var$Splitter();
    this._last = void 0;
    this._cipher = new $jtU2t.AES(key);
    this._prev = $28e310f4f4520e20$require$Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
$6QnvD($28e310f4f4520e20$var$Decipher, $bbKMQ);
$28e310f4f4520e20$var$Decipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get(this._autopadding)){
        thing = this._mode.decrypt(this, chunk);
        out.push(thing);
    }
    return $28e310f4f4520e20$require$Buffer.concat(out);
};
$28e310f4f4520e20$var$Decipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) return $28e310f4f4520e20$var$unpad(this._mode.decrypt(this, chunk));
    else if (chunk) throw new Error("data not multiple of block length");
};
$28e310f4f4520e20$var$Decipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function $28e310f4f4520e20$var$Splitter() {
    this.cache = $28e310f4f4520e20$require$Buffer.allocUnsafe(0);
}
$28e310f4f4520e20$var$Splitter.prototype.add = function(data) {
    this.cache = $28e310f4f4520e20$require$Buffer.concat([
        this.cache,
        data
    ]);
};
$28e310f4f4520e20$var$Splitter.prototype.get = function(autoPadding) {
    var out;
    if (autoPadding) {
        if (this.cache.length > 16) {
            out = this.cache.slice(0, 16);
            this.cache = this.cache.slice(16);
            return out;
        }
    } else if (this.cache.length >= 16) {
        out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
$28e310f4f4520e20$var$Splitter.prototype.flush = function() {
    if (this.cache.length) return this.cache;
};
function $28e310f4f4520e20$var$unpad(last) {
    var padded = last[15];
    if (padded < 1 || padded > 16) throw new Error("unable to decrypt data");
    var i = -1;
    while(++i < padded){
        if (last[i + (16 - padded)] !== padded) throw new Error("unable to decrypt data");
    }
    if (padded === 16) return;
    return last.slice(0, 16 - padded);
}
function $28e310f4f4520e20$var$createDecipheriv(suite, password, iv) {
    var config = $aIF7h[suite.toLowerCase()];
    if (!config) throw new TypeError("invalid suite type");
    if (typeof iv === "string") iv = $28e310f4f4520e20$require$Buffer.from(iv);
    if (config.mode !== "GCM" && iv.length !== config.iv) throw new TypeError("invalid iv length " + iv.length);
    if (typeof password === "string") password = $28e310f4f4520e20$require$Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError("invalid key length " + password.length);
    if (config.type === "stream") return new $kWOII(config.module, password, iv, true);
    else if (config.type === "auth") return new $cGYmt(config.module, password, iv, true);
    return new $28e310f4f4520e20$var$Decipher(config.module, password, iv);
}
function $28e310f4f4520e20$var$createDecipher(suite, password) {
    var config = $aIF7h[suite.toLowerCase()];
    if (!config) throw new TypeError("invalid suite type");
    var keys = $2yXJt(password, false, config.key, config.iv);
    return $28e310f4f4520e20$var$createDecipheriv(suite, keys.key, keys.iv);
}
$28e310f4f4520e20$export$12ada9414fbc594c = $28e310f4f4520e20$var$createDecipher;
$28e310f4f4520e20$export$36b6d6ef312eab39 = $28e310f4f4520e20$var$createDecipheriv;

});


parcelRequire.register("8mAew", function(module, exports) {

$parcel$export(module.exports, "des-ecb", () => $616c7bf60e62e2a2$export$116f8a5cee447347, (v) => $616c7bf60e62e2a2$export$116f8a5cee447347 = v);
$parcel$export(module.exports, "des-cbc", () => $616c7bf60e62e2a2$export$7483c4066bfb7ae9, (v) => $616c7bf60e62e2a2$export$7483c4066bfb7ae9 = v);
$parcel$export(module.exports, "des", () => $616c7bf60e62e2a2$export$e7a565d2e588bb06, (v) => $616c7bf60e62e2a2$export$e7a565d2e588bb06 = v);
$parcel$export(module.exports, "des-ede3-cbc", () => $616c7bf60e62e2a2$export$aaa2f54a426f3eb8, (v) => $616c7bf60e62e2a2$export$aaa2f54a426f3eb8 = v);
$parcel$export(module.exports, "des3", () => $616c7bf60e62e2a2$export$eba20568dde4ada, (v) => $616c7bf60e62e2a2$export$eba20568dde4ada = v);
$parcel$export(module.exports, "des-ede3", () => $616c7bf60e62e2a2$export$d3b5e5996938f5ae, (v) => $616c7bf60e62e2a2$export$d3b5e5996938f5ae = v);
$parcel$export(module.exports, "des-ede-cbc", () => $616c7bf60e62e2a2$export$57c08356130bc99b, (v) => $616c7bf60e62e2a2$export$57c08356130bc99b = v);
$parcel$export(module.exports, "des-ede", () => $616c7bf60e62e2a2$export$c7169791d5c1e65d, (v) => $616c7bf60e62e2a2$export$c7169791d5c1e65d = v);
var $616c7bf60e62e2a2$export$116f8a5cee447347;
var $616c7bf60e62e2a2$export$7483c4066bfb7ae9;
var $616c7bf60e62e2a2$export$e7a565d2e588bb06;
var $616c7bf60e62e2a2$export$aaa2f54a426f3eb8;
var $616c7bf60e62e2a2$export$eba20568dde4ada;
var $616c7bf60e62e2a2$export$d3b5e5996938f5ae;
var $616c7bf60e62e2a2$export$57c08356130bc99b;
var $616c7bf60e62e2a2$export$c7169791d5c1e65d;
$616c7bf60e62e2a2$export$116f8a5cee447347 = {
    key: 8,
    iv: 0
};
$616c7bf60e62e2a2$export$7483c4066bfb7ae9 = $616c7bf60e62e2a2$export$e7a565d2e588bb06 = {
    key: 8,
    iv: 8
};
$616c7bf60e62e2a2$export$aaa2f54a426f3eb8 = $616c7bf60e62e2a2$export$eba20568dde4ada = {
    key: 24,
    iv: 8
};
$616c7bf60e62e2a2$export$d3b5e5996938f5ae = {
    key: 24,
    iv: 0
};
$616c7bf60e62e2a2$export$57c08356130bc99b = {
    key: 16,
    iv: 8
};
$616c7bf60e62e2a2$export$c7169791d5c1e65d = {
    key: 16,
    iv: 0
};

});


parcelRequire.register("hMoy5", function(module, exports) {

$parcel$export(module.exports, "DiffieHellmanGroup", () => $cf19f63dc85f0127$export$971862a2fcb1bb40, (v) => $cf19f63dc85f0127$export$971862a2fcb1bb40 = v);
$parcel$export(module.exports, "createDiffieHellmanGroup", () => $cf19f63dc85f0127$export$c6ff6a88acbeaf40, (v) => $cf19f63dc85f0127$export$c6ff6a88acbeaf40 = v);
$parcel$export(module.exports, "getDiffieHellman", () => $cf19f63dc85f0127$export$fdc27893e98845cc, (v) => $cf19f63dc85f0127$export$fdc27893e98845cc = v);
$parcel$export(module.exports, "createDiffieHellman", () => $cf19f63dc85f0127$export$6671fb9a1323bed, (v) => $cf19f63dc85f0127$export$6671fb9a1323bed = v);
$parcel$export(module.exports, "DiffieHellman", () => $cf19f63dc85f0127$export$d74daf141a551db, (v) => $cf19f63dc85f0127$export$d74daf141a551db = v);
var $cf19f63dc85f0127$export$971862a2fcb1bb40;
var $cf19f63dc85f0127$export$c6ff6a88acbeaf40;
var $cf19f63dc85f0127$export$fdc27893e98845cc;
var $cf19f63dc85f0127$export$6671fb9a1323bed;
var $cf19f63dc85f0127$export$d74daf141a551db;

var $fLrIr = parcelRequire("fLrIr");
var $cf19f63dc85f0127$require$Buffer = $fLrIr.Buffer;

var $dPe5p = parcelRequire("dPe5p");

var $hMkyT = parcelRequire("hMkyT");

var $4uGEJ = parcelRequire("4uGEJ");
function $cf19f63dc85f0127$var$getDiffieHellman(mod) {
    var prime = new $cf19f63dc85f0127$require$Buffer($hMkyT[mod].prime, "hex");
    var gen = new $cf19f63dc85f0127$require$Buffer($hMkyT[mod].gen, "hex");
    return new $4uGEJ(prime, gen);
}
var $cf19f63dc85f0127$var$ENCODINGS = {
    "binary": true,
    "hex": true,
    "base64": true
};
function $cf19f63dc85f0127$var$createDiffieHellman(prime, enc, generator, genc) {
    if ($cf19f63dc85f0127$require$Buffer.isBuffer(enc) || $cf19f63dc85f0127$var$ENCODINGS[enc] === undefined) return $cf19f63dc85f0127$var$createDiffieHellman(prime, "binary", enc, generator);
    enc = enc || "binary";
    genc = genc || "binary";
    generator = generator || new $cf19f63dc85f0127$require$Buffer([
        2
    ]);
    if (!$cf19f63dc85f0127$require$Buffer.isBuffer(generator)) generator = new $cf19f63dc85f0127$require$Buffer(generator, genc);
    if (typeof prime === "number") return new $4uGEJ($dPe5p(prime, generator), generator, true);
    if (!$cf19f63dc85f0127$require$Buffer.isBuffer(prime)) prime = new $cf19f63dc85f0127$require$Buffer(prime, enc);
    return new $4uGEJ(prime, generator, true);
}
$cf19f63dc85f0127$export$971862a2fcb1bb40 = $cf19f63dc85f0127$export$c6ff6a88acbeaf40 = $cf19f63dc85f0127$export$fdc27893e98845cc = $cf19f63dc85f0127$var$getDiffieHellman;
$cf19f63dc85f0127$export$6671fb9a1323bed = $cf19f63dc85f0127$export$d74daf141a551db = $cf19f63dc85f0127$var$createDiffieHellman;

});
parcelRequire.register("dPe5p", function(module, exports) {

var $kVSZC = parcelRequire("kVSZC");
module.exports = $a10af70759bdf49e$var$findPrime;
$a10af70759bdf49e$var$findPrime.simpleSieve = $a10af70759bdf49e$var$simpleSieve;
$a10af70759bdf49e$var$findPrime.fermatTest = $a10af70759bdf49e$var$fermatTest;

var $7Pgyi = parcelRequire("7Pgyi");
var $a10af70759bdf49e$var$TWENTYFOUR = new $7Pgyi(24);

var $ct14P = parcelRequire("ct14P");
var $a10af70759bdf49e$var$millerRabin = new $ct14P();
var $a10af70759bdf49e$var$ONE = new $7Pgyi(1);
var $a10af70759bdf49e$var$TWO = new $7Pgyi(2);
var $a10af70759bdf49e$var$FIVE = new $7Pgyi(5);
var $a10af70759bdf49e$var$SIXTEEN = new $7Pgyi(16);
var $a10af70759bdf49e$var$EIGHT = new $7Pgyi(8);
var $a10af70759bdf49e$var$TEN = new $7Pgyi(10);
var $a10af70759bdf49e$var$THREE = new $7Pgyi(3);
var $a10af70759bdf49e$var$SEVEN = new $7Pgyi(7);
var $a10af70759bdf49e$var$ELEVEN = new $7Pgyi(11);
var $a10af70759bdf49e$var$FOUR = new $7Pgyi(4);
var $a10af70759bdf49e$var$TWELVE = new $7Pgyi(12);
var $a10af70759bdf49e$var$primes = null;
function $a10af70759bdf49e$var$_getPrimes() {
    if ($a10af70759bdf49e$var$primes !== null) return $a10af70759bdf49e$var$primes;
    var limit = 0x100000;
    var res = [];
    res[0] = 2;
    for(var i = 1, k = 3; k < limit; k += 2){
        var sqrt = Math.ceil(Math.sqrt(k));
        for(var j = 0; j < i && res[j] <= sqrt; j++)if (k % res[j] === 0) break;
        if (i !== j && res[j] <= sqrt) continue;
        res[i++] = k;
    }
    $a10af70759bdf49e$var$primes = res;
    return res;
}
function $a10af70759bdf49e$var$simpleSieve(p) {
    var primes = $a10af70759bdf49e$var$_getPrimes();
    for(var i = 0; i < primes.length; i++)if (p.modn(primes[i]) === 0) {
        if (p.cmpn(primes[i]) === 0) return true;
        else return false;
    }
    return true;
}
function $a10af70759bdf49e$var$fermatTest(p) {
    var red = $7Pgyi.mont(p);
    return $a10af70759bdf49e$var$TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}
function $a10af70759bdf49e$var$findPrime(bits, gen) {
    if (bits < 16) {
        // this is what openssl does
        if (gen === 2 || gen === 5) return new $7Pgyi([
            0x8c,
            0x7b
        ]);
        else return new $7Pgyi([
            0x8c,
            0x27
        ]);
    }
    gen = new $7Pgyi(gen);
    var num, n2;
    while(true){
        num = new $7Pgyi($kVSZC(Math.ceil(bits / 8)));
        while(num.bitLength() > bits)num.ishrn(1);
        if (num.isEven()) num.iadd($a10af70759bdf49e$var$ONE);
        if (!num.testn(1)) num.iadd($a10af70759bdf49e$var$TWO);
        if (!gen.cmp($a10af70759bdf49e$var$TWO)) while(num.mod($a10af70759bdf49e$var$TWENTYFOUR).cmp($a10af70759bdf49e$var$ELEVEN))num.iadd($a10af70759bdf49e$var$FOUR);
        else if (!gen.cmp($a10af70759bdf49e$var$FIVE)) while(num.mod($a10af70759bdf49e$var$TEN).cmp($a10af70759bdf49e$var$THREE))num.iadd($a10af70759bdf49e$var$FOUR);
        n2 = num.shrn(1);
        if ($a10af70759bdf49e$var$simpleSieve(n2) && $a10af70759bdf49e$var$simpleSieve(num) && $a10af70759bdf49e$var$fermatTest(n2) && $a10af70759bdf49e$var$fermatTest(num) && $a10af70759bdf49e$var$millerRabin.test(n2) && $a10af70759bdf49e$var$millerRabin.test(num)) return num;
    }
}

});
parcelRequire.register("7Pgyi", function(module, exports) {

(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = (parcelRequire("XDU19")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});

parcelRequire.register("ct14P", function(module, exports) {

var $9PA76 = parcelRequire("9PA76");

var $eexYx = parcelRequire("eexYx");
function $91390754db667b09$var$MillerRabin(rand) {
    this.rand = rand || new $eexYx.Rand();
}
module.exports = $91390754db667b09$var$MillerRabin;
$91390754db667b09$var$MillerRabin.create = function create(rand) {
    return new $91390754db667b09$var$MillerRabin(rand);
};
$91390754db667b09$var$MillerRabin.prototype._randbelow = function _randbelow(n) {
    var len = n.bitLength();
    var min_bytes = Math.ceil(len / 8);
    // Generage random bytes until a number less than n is found.
    // This ensures that 0..n-1 have an equal probability of being selected.
    do var a = new $9PA76(this.rand.generate(min_bytes));
    while (a.cmp(n) >= 0);
    return a;
};
$91390754db667b09$var$MillerRabin.prototype._randrange = function _randrange(start, stop) {
    // Generate a random number greater than or equal to start and less than stop.
    var size = stop.sub(start);
    return start.add(this._randbelow(size));
};
$91390754db667b09$var$MillerRabin.prototype.test = function test(n, k, cb) {
    var len = n.bitLength();
    var red = $9PA76.mont(n);
    var rone = new $9PA76(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    var prime = true;
    for(; k > 0; k--){
        var a = this._randrange(new $9PA76(2), n1);
        if (cb) cb(a);
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return false;
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) return false;
    }
    return prime;
};
$91390754db667b09$var$MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
    var len = n.bitLength();
    var red = $9PA76.mont(n);
    var rone = new $9PA76(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    for(; k > 0; k--){
        var a = this._randrange(new $9PA76(2), n1);
        var g = n.gcd(a);
        if (g.cmpn(1) !== 0) return g;
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return x.fromRed().subn(1).gcd(n);
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) {
            x = x.redSqr();
            return x.fromRed().subn(1).gcd(n);
        }
    }
    return false;
};

});
parcelRequire.register("9PA76", function(module, exports) {

(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = (parcelRequire("XDU19")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});

parcelRequire.register("eexYx", function(module, exports) {
var $a5ccba4bfe6d7f17$var$r;
module.exports = function rand(len) {
    if (!$a5ccba4bfe6d7f17$var$r) $a5ccba4bfe6d7f17$var$r = new $a5ccba4bfe6d7f17$var$Rand(null);
    return $a5ccba4bfe6d7f17$var$r.generate(len);
};
function $a5ccba4bfe6d7f17$var$Rand(rand) {
    this.rand = rand;
}
module.exports.Rand = $a5ccba4bfe6d7f17$var$Rand;
$a5ccba4bfe6d7f17$var$Rand.prototype.generate = function generate(len) {
    return this._rand(len);
};
// Emulate crypto API using randy
$a5ccba4bfe6d7f17$var$Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes) return this.rand.getBytes(n);
    var res = new Uint8Array(n);
    for(var i = 0; i < res.length; i++)res[i] = this.rand.getByte();
    return res;
};

if (typeof self === "object") {
    if (self.crypto && self.crypto.getRandomValues) // Modern browsers
    $a5ccba4bfe6d7f17$var$Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.crypto.getRandomValues(arr);
        return arr;
    };
    else if (self.msCrypto && self.msCrypto.getRandomValues) // IE
    $a5ccba4bfe6d7f17$var$Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.msCrypto.getRandomValues(arr);
        return arr;
    };
    else if (typeof window === "object") // Old junk
    $a5ccba4bfe6d7f17$var$Rand.prototype._rand = function() {
        throw new Error("Not implemented yet");
    };
} else // Node.js or Web worker with no crypto support
try {
    var $a5ccba4bfe6d7f17$var$crypto = (parcelRequire("XDU19"));
    if (typeof $a5ccba4bfe6d7f17$var$crypto.randomBytes !== "function") throw new Error("Not supported");
    $a5ccba4bfe6d7f17$var$Rand.prototype._rand = function _rand(n) {
        return $a5ccba4bfe6d7f17$var$crypto.randomBytes(n);
    };
} catch (e) {}

});



parcelRequire.register("hMkyT", function(module, exports) {
module.exports = JSON.parse('{"modp1":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},"modp2":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},"modp5":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},"modp14":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},"modp15":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},"modp16":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},"modp17":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},"modp18":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}}');

});

parcelRequire.register("4uGEJ", function(module, exports) {

var $fLrIr = parcelRequire("fLrIr");
var $345b0d5b26ab54aa$require$Buffer = $fLrIr.Buffer;

var $7Pgyi = parcelRequire("7Pgyi");

var $ct14P = parcelRequire("ct14P");
var $345b0d5b26ab54aa$var$millerRabin = new $ct14P();
var $345b0d5b26ab54aa$var$TWENTYFOUR = new $7Pgyi(24);
var $345b0d5b26ab54aa$var$ELEVEN = new $7Pgyi(11);
var $345b0d5b26ab54aa$var$TEN = new $7Pgyi(10);
var $345b0d5b26ab54aa$var$THREE = new $7Pgyi(3);
var $345b0d5b26ab54aa$var$SEVEN = new $7Pgyi(7);

var $dPe5p = parcelRequire("dPe5p");

var $kVSZC = parcelRequire("kVSZC");
module.exports = $345b0d5b26ab54aa$var$DH;
function $345b0d5b26ab54aa$var$setPublicKey(pub, enc) {
    enc = enc || "utf8";
    if (!$345b0d5b26ab54aa$require$Buffer.isBuffer(pub)) pub = new $345b0d5b26ab54aa$require$Buffer(pub, enc);
    this._pub = new $7Pgyi(pub);
    return this;
}
function $345b0d5b26ab54aa$var$setPrivateKey(priv, enc) {
    enc = enc || "utf8";
    if (!$345b0d5b26ab54aa$require$Buffer.isBuffer(priv)) priv = new $345b0d5b26ab54aa$require$Buffer(priv, enc);
    this._priv = new $7Pgyi(priv);
    return this;
}
var $345b0d5b26ab54aa$var$primeCache = {};
function $345b0d5b26ab54aa$var$checkPrime(prime, generator) {
    var gen = generator.toString("hex");
    var hex = [
        gen,
        prime.toString(16)
    ].join("_");
    if (hex in $345b0d5b26ab54aa$var$primeCache) return $345b0d5b26ab54aa$var$primeCache[hex];
    var error = 0;
    if (prime.isEven() || !$dPe5p.simpleSieve || !$dPe5p.fermatTest(prime) || !$345b0d5b26ab54aa$var$millerRabin.test(prime)) {
        //not a prime so +1
        error += 1;
        if (gen === "02" || gen === "05") // we'd be able to check the generator
        // it would fail so +8
        error += 8;
        else //we wouldn't be able to test the generator
        // so +4
        error += 4;
        $345b0d5b26ab54aa$var$primeCache[hex] = error;
        return error;
    }
    if (!$345b0d5b26ab54aa$var$millerRabin.test(prime.shrn(1))) //not a safe prime
    error += 2;
    var rem;
    switch(gen){
        case "02":
            if (prime.mod($345b0d5b26ab54aa$var$TWENTYFOUR).cmp($345b0d5b26ab54aa$var$ELEVEN)) // unsuidable generator
            error += 8;
            break;
        case "05":
            rem = prime.mod($345b0d5b26ab54aa$var$TEN);
            if (rem.cmp($345b0d5b26ab54aa$var$THREE) && rem.cmp($345b0d5b26ab54aa$var$SEVEN)) // prime mod 10 needs to equal 3 or 7
            error += 8;
            break;
        default:
            error += 4;
    }
    $345b0d5b26ab54aa$var$primeCache[hex] = error;
    return error;
}
function $345b0d5b26ab54aa$var$DH(prime, generator, malleable) {
    this.setGenerator(generator);
    this.__prime = new $7Pgyi(prime);
    this._prime = $7Pgyi.mont(this.__prime);
    this._primeLen = prime.length;
    this._pub = undefined;
    this._priv = undefined;
    this._primeCode = undefined;
    if (malleable) {
        this.setPublicKey = $345b0d5b26ab54aa$var$setPublicKey;
        this.setPrivateKey = $345b0d5b26ab54aa$var$setPrivateKey;
    } else this._primeCode = 8;
}
Object.defineProperty($345b0d5b26ab54aa$var$DH.prototype, "verifyError", {
    enumerable: true,
    get: function() {
        if (typeof this._primeCode !== "number") this._primeCode = $345b0d5b26ab54aa$var$checkPrime(this.__prime, this.__gen);
        return this._primeCode;
    }
});
$345b0d5b26ab54aa$var$DH.prototype.generateKeys = function() {
    if (!this._priv) this._priv = new $7Pgyi($kVSZC(this._primeLen));
    this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
    return this.getPublicKey();
};
$345b0d5b26ab54aa$var$DH.prototype.computeSecret = function(other) {
    other = new $7Pgyi(other);
    other = other.toRed(this._prime);
    var secret = other.redPow(this._priv).fromRed();
    var out = new $345b0d5b26ab54aa$require$Buffer(secret.toArray());
    var prime = this.getPrime();
    if (out.length < prime.length) {
        var front = new $345b0d5b26ab54aa$require$Buffer(prime.length - out.length);
        front.fill(0);
        out = $345b0d5b26ab54aa$require$Buffer.concat([
            front,
            out
        ]);
    }
    return out;
};
$345b0d5b26ab54aa$var$DH.prototype.getPublicKey = function getPublicKey(enc) {
    return $345b0d5b26ab54aa$var$formatReturnValue(this._pub, enc);
};
$345b0d5b26ab54aa$var$DH.prototype.getPrivateKey = function getPrivateKey(enc) {
    return $345b0d5b26ab54aa$var$formatReturnValue(this._priv, enc);
};
$345b0d5b26ab54aa$var$DH.prototype.getPrime = function(enc) {
    return $345b0d5b26ab54aa$var$formatReturnValue(this.__prime, enc);
};
$345b0d5b26ab54aa$var$DH.prototype.getGenerator = function(enc) {
    return $345b0d5b26ab54aa$var$formatReturnValue(this._gen, enc);
};
$345b0d5b26ab54aa$var$DH.prototype.setGenerator = function(gen, enc) {
    enc = enc || "utf8";
    if (!$345b0d5b26ab54aa$require$Buffer.isBuffer(gen)) gen = new $345b0d5b26ab54aa$require$Buffer(gen, enc);
    this.__gen = gen;
    this._gen = new $7Pgyi(gen);
    return this;
};
function $345b0d5b26ab54aa$var$formatReturnValue(bn, enc) {
    var buf = new $345b0d5b26ab54aa$require$Buffer(bn.toArray());
    if (!enc) return buf;
    else return buf.toString(enc);
}

});


parcelRequire.register("6DZG1", function(module, exports) {

var $1O4xH = parcelRequire("1O4xH");
var $4d663a520e73aa72$require$Buffer = $1O4xH.Buffer;

var $hIpsB = parcelRequire("hIpsB");

var $apNwQ = parcelRequire("apNwQ");

var $6QnvD = parcelRequire("6QnvD");

var $aF4zP = parcelRequire("aF4zP");

var $iu2SR = parcelRequire("iu2SR");

var $6dfmN = parcelRequire("6dfmN");
Object.keys($6dfmN).forEach(function(key) {
    $6dfmN[key].id = $4d663a520e73aa72$require$Buffer.from($6dfmN[key].id, "hex");
    $6dfmN[key.toLowerCase()] = $6dfmN[key];
});
function $4d663a520e73aa72$var$Sign(algorithm) {
    $apNwQ.Writable.call(this);
    var data = $6dfmN[algorithm];
    if (!data) throw new Error("Unknown message digest");
    this._hashType = data.hash;
    this._hash = $hIpsB(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
$6QnvD($4d663a520e73aa72$var$Sign, $apNwQ.Writable);
$4d663a520e73aa72$var$Sign.prototype._write = function _write(data, _, done) {
    this._hash.update(data);
    done();
};
$4d663a520e73aa72$var$Sign.prototype.update = function update(data, enc) {
    if (typeof data === "string") data = $4d663a520e73aa72$require$Buffer.from(data, enc);
    this._hash.update(data);
    return this;
};
$4d663a520e73aa72$var$Sign.prototype.sign = function signMethod(key, enc) {
    this.end();
    var hash = this._hash.digest();
    var sig = $aF4zP(hash, key, this._hashType, this._signType, this._tag);
    return enc ? sig.toString(enc) : sig;
};
function $4d663a520e73aa72$var$Verify(algorithm) {
    $apNwQ.Writable.call(this);
    var data = $6dfmN[algorithm];
    if (!data) throw new Error("Unknown message digest");
    this._hash = $hIpsB(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
$6QnvD($4d663a520e73aa72$var$Verify, $apNwQ.Writable);
$4d663a520e73aa72$var$Verify.prototype._write = function _write(data, _, done) {
    this._hash.update(data);
    done();
};
$4d663a520e73aa72$var$Verify.prototype.update = function update(data, enc) {
    if (typeof data === "string") data = $4d663a520e73aa72$require$Buffer.from(data, enc);
    this._hash.update(data);
    return this;
};
$4d663a520e73aa72$var$Verify.prototype.verify = function verifyMethod(key, sig, enc) {
    if (typeof sig === "string") sig = $4d663a520e73aa72$require$Buffer.from(sig, enc);
    this.end();
    var hash = this._hash.digest();
    return $iu2SR(sig, hash, key, this._signType, this._tag);
};
function $4d663a520e73aa72$var$createSign(algorithm) {
    return new $4d663a520e73aa72$var$Sign(algorithm);
}
function $4d663a520e73aa72$var$createVerify(algorithm) {
    return new $4d663a520e73aa72$var$Verify(algorithm);
}
module.exports = {
    Sign: $4d663a520e73aa72$var$createSign,
    Verify: $4d663a520e73aa72$var$createVerify,
    createSign: $4d663a520e73aa72$var$createSign,
    createVerify: $4d663a520e73aa72$var$createVerify
};

});
parcelRequire.register("1O4xH", function(module, exports) {
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ 
var $fLrIr = parcelRequire("fLrIr");
var $150dfbfd2f18d51f$var$Buffer = $fLrIr.Buffer;
// alternative to using Object.keys for old browsers
function $150dfbfd2f18d51f$var$copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if ($150dfbfd2f18d51f$var$Buffer.from && $150dfbfd2f18d51f$var$Buffer.alloc && $150dfbfd2f18d51f$var$Buffer.allocUnsafe && $150dfbfd2f18d51f$var$Buffer.allocUnsafeSlow) module.exports = $fLrIr;
else {
    // Copy properties from require('buffer')
    $150dfbfd2f18d51f$var$copyProps($fLrIr, module.exports);
    module.exports.Buffer = $150dfbfd2f18d51f$var$SafeBuffer;
}
function $150dfbfd2f18d51f$var$SafeBuffer(arg, encodingOrOffset, length) {
    return $150dfbfd2f18d51f$var$Buffer(arg, encodingOrOffset, length);
}
$150dfbfd2f18d51f$var$SafeBuffer.prototype = Object.create($150dfbfd2f18d51f$var$Buffer.prototype);
// Copy static methods from Buffer
$150dfbfd2f18d51f$var$copyProps($150dfbfd2f18d51f$var$Buffer, $150dfbfd2f18d51f$var$SafeBuffer);
$150dfbfd2f18d51f$var$SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") throw new TypeError("Argument must not be a number");
    return $150dfbfd2f18d51f$var$Buffer(arg, encodingOrOffset, length);
};
$150dfbfd2f18d51f$var$SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    var buf = $150dfbfd2f18d51f$var$Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === "string") buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
$150dfbfd2f18d51f$var$SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return $150dfbfd2f18d51f$var$Buffer(size);
};
$150dfbfd2f18d51f$var$SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return $fLrIr.SlowBuffer(size);
};

});

parcelRequire.register("apNwQ", function(module, exports) {

exports = module.exports = (parcelRequire("eyOXC"));
exports.Stream = exports;
exports.Readable = exports;

exports.Writable = (parcelRequire("fnshQ"));

exports.Duplex = (parcelRequire("3NnaL"));

exports.Transform = (parcelRequire("20Yx4"));

exports.PassThrough = (parcelRequire("7qPs8"));

exports.finished = (parcelRequire("96MRH"));

exports.pipeline = (parcelRequire("6vBfV"));

});
parcelRequire.register("eyOXC", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var $jx7mO = parcelRequire("jx7mO");
"use strict";
module.exports = $a99bc5638ada29d6$var$Readable;
/*<replacement>*/ var $a99bc5638ada29d6$var$Duplex;
/*</replacement>*/ $a99bc5638ada29d6$var$Readable.ReadableState = $a99bc5638ada29d6$var$ReadableState;

var $eCV8S = parcelRequire("eCV8S");
var $a99bc5638ada29d6$require$EE = $eCV8S.EventEmitter;
var $a99bc5638ada29d6$var$EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};

var $4o5k1 = parcelRequire("4o5k1");

var $fLrIr = parcelRequire("fLrIr");
var $a99bc5638ada29d6$require$Buffer = $fLrIr.Buffer;
var $a99bc5638ada29d6$var$OurUint8Array = $parcel$global.Uint8Array || function() {};
function $a99bc5638ada29d6$var$_uint8ArrayToBuffer(chunk) {
    return $a99bc5638ada29d6$require$Buffer.from(chunk);
}
function $a99bc5638ada29d6$var$_isUint8Array(obj) {
    return $a99bc5638ada29d6$require$Buffer.isBuffer(obj) || obj instanceof $a99bc5638ada29d6$var$OurUint8Array;
}

var $XDU19 = parcelRequire("XDU19");
var $a99bc5638ada29d6$var$debug;
if ($XDU19 && $XDU19.debuglog) $a99bc5638ada29d6$var$debug = $XDU19.debuglog("stream");
else $a99bc5638ada29d6$var$debug = function debug() {};

var $kryBt = parcelRequire("kryBt");

var $fIrpF = parcelRequire("fIrpF");

var $gIi9O = parcelRequire("gIi9O");
var $a99bc5638ada29d6$var$getHighWaterMark = $gIi9O.getHighWaterMark;

var $jNp9Q = parcelRequire("jNp9Q");
var $a99bc5638ada29d6$require$_require$codes = $jNp9Q.codes;
var $a99bc5638ada29d6$var$ERR_INVALID_ARG_TYPE = $a99bc5638ada29d6$require$_require$codes.ERR_INVALID_ARG_TYPE, $a99bc5638ada29d6$var$ERR_STREAM_PUSH_AFTER_EOF = $a99bc5638ada29d6$require$_require$codes.ERR_STREAM_PUSH_AFTER_EOF, $a99bc5638ada29d6$var$ERR_METHOD_NOT_IMPLEMENTED = $a99bc5638ada29d6$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $a99bc5638ada29d6$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT = $a99bc5638ada29d6$require$_require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
var $a99bc5638ada29d6$var$StringDecoder;
var $a99bc5638ada29d6$var$createReadableStreamAsyncIterator;
var $a99bc5638ada29d6$var$from;

(parcelRequire("6QnvD"))($a99bc5638ada29d6$var$Readable, $4o5k1);
var $a99bc5638ada29d6$var$errorOrDestroy = $fIrpF.errorOrDestroy;
var $a99bc5638ada29d6$var$kProxyEvents = [
    "error",
    "close",
    "destroy",
    "pause",
    "resume"
];
function $a99bc5638ada29d6$var$prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}


function $a99bc5638ada29d6$var$ReadableState(options, stream, isDuplex) {
    $a99bc5638ada29d6$var$Duplex = $a99bc5638ada29d6$var$Duplex || (parcelRequire("3NnaL"));
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof $a99bc5638ada29d6$var$Duplex; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = $a99bc5638ada29d6$var$getHighWaterMark(this, options, "readableHighWaterMark", isDuplex); // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new $kryBt();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy; // has it been destroyed
    this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8"; // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!$a99bc5638ada29d6$var$StringDecoder) $a99bc5638ada29d6$var$StringDecoder = (parcelRequire("3ZG4s")).StringDecoder;
        this.decoder = new $a99bc5638ada29d6$var$StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}

function $a99bc5638ada29d6$var$Readable(options) {
    $a99bc5638ada29d6$var$Duplex = $a99bc5638ada29d6$var$Duplex || (parcelRequire("3NnaL"));
    if (!(this instanceof $a99bc5638ada29d6$var$Readable)) return new $a99bc5638ada29d6$var$Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $a99bc5638ada29d6$var$Duplex;
    this._readableState = new $a99bc5638ada29d6$var$ReadableState(options, this, isDuplex); // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
    }
    $4o5k1.call(this);
}
Object.defineProperty($a99bc5638ada29d6$var$Readable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
$a99bc5638ada29d6$var$Readable.prototype.destroy = $fIrpF.destroy;
$a99bc5638ada29d6$var$Readable.prototype._undestroy = $fIrpF.undestroy;
$a99bc5638ada29d6$var$Readable.prototype._destroy = function(err, cb) {
    cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
$a99bc5638ada29d6$var$Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = $a99bc5638ada29d6$require$Buffer.from(chunk, encoding);
                encoding = "";
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return $a99bc5638ada29d6$var$readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()
$a99bc5638ada29d6$var$Readable.prototype.unshift = function(chunk) {
    return $a99bc5638ada29d6$var$readableAddChunk(this, chunk, null, true, false);
};
function $a99bc5638ada29d6$var$readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    $a99bc5638ada29d6$var$debug("readableAddChunk", chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        $a99bc5638ada29d6$var$onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = $a99bc5638ada29d6$var$chunkInvalid(state, chunk);
        if (er) $a99bc5638ada29d6$var$errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== $a99bc5638ada29d6$require$Buffer.prototype) chunk = $a99bc5638ada29d6$var$_uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) $a99bc5638ada29d6$var$errorOrDestroy(stream, new $a99bc5638ada29d6$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else $a99bc5638ada29d6$var$addChunk(stream, state, chunk, true);
            } else if (state.ended) $a99bc5638ada29d6$var$errorOrDestroy(stream, new $a99bc5638ada29d6$var$ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) $a99bc5638ada29d6$var$addChunk(stream, state, chunk, false);
                    else $a99bc5638ada29d6$var$maybeReadMore(stream, state);
                } else $a99bc5638ada29d6$var$addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            $a99bc5638ada29d6$var$maybeReadMore(stream, state);
        }
    } // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function $a99bc5638ada29d6$var$addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) $a99bc5638ada29d6$var$emitReadable(stream);
    }
    $a99bc5638ada29d6$var$maybeReadMore(stream, state);
}
function $a99bc5638ada29d6$var$chunkInvalid(state, chunk) {
    var er;
    if (!$a99bc5638ada29d6$var$_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) er = new $a99bc5638ada29d6$var$ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer",
        "Uint8Array"
    ], chunk);
    return er;
}
$a99bc5638ada29d6$var$Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
}; // backwards compatibility.

$a99bc5638ada29d6$var$Readable.prototype.setEncoding = function(enc) {
    if (!$a99bc5638ada29d6$var$StringDecoder) $a99bc5638ada29d6$var$StringDecoder = (parcelRequire("3ZG4s")).StringDecoder;
    var decoder = new $a99bc5638ada29d6$var$StringDecoder(enc);
    this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = "";
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== "") this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
}; // Don't raise the hwm > 1GB
var $a99bc5638ada29d6$var$MAX_HWM = 0x40000000;
function $a99bc5638ada29d6$var$computeNewHighWaterMark(n) {
    if (n >= $a99bc5638ada29d6$var$MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = $a99bc5638ada29d6$var$MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $a99bc5638ada29d6$var$howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = $a99bc5638ada29d6$var$computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
} // you can override either this method, or the async _read(n) below.
$a99bc5638ada29d6$var$Readable.prototype.read = function(n) {
    $a99bc5638ada29d6$var$debug("read", n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        $a99bc5638ada29d6$var$debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) $a99bc5638ada29d6$var$endReadable(this);
        else $a99bc5638ada29d6$var$emitReadable(this);
        return null;
    }
    n = $a99bc5638ada29d6$var$howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) $a99bc5638ada29d6$var$endReadable(this);
        return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    $a99bc5638ada29d6$var$debug("need readable", doRead); // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        $a99bc5638ada29d6$var$debug("length less than watermark", doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        $a99bc5638ada29d6$var$debug("reading or ended", doRead);
    } else if (doRead) {
        $a99bc5638ada29d6$var$debug("do read");
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true; // call internal read method
        this._read(state.highWaterMark);
        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = $a99bc5638ada29d6$var$howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = $a99bc5638ada29d6$var$fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) $a99bc5638ada29d6$var$endReadable(this);
    }
    if (ret !== null) this.emit("data", ret);
    return ret;
};
function $a99bc5638ada29d6$var$onEofChunk(stream, state) {
    $a99bc5638ada29d6$var$debug("onEofChunk");
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    $a99bc5638ada29d6$var$emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            $a99bc5638ada29d6$var$emitReadable_(stream);
        }
    }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function $a99bc5638ada29d6$var$emitReadable(stream) {
    var state = stream._readableState;
    $a99bc5638ada29d6$var$debug("emitReadable", state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        $a99bc5638ada29d6$var$debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        $jx7mO.nextTick($a99bc5638ada29d6$var$emitReadable_, stream);
    }
}
function $a99bc5638ada29d6$var$emitReadable_(stream) {
    var state = stream._readableState;
    $a99bc5638ada29d6$var$debug("emitReadable_", state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
    } // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    $a99bc5638ada29d6$var$flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function $a99bc5638ada29d6$var$maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        $jx7mO.nextTick($a99bc5638ada29d6$var$maybeReadMore_, stream, state);
    }
}
function $a99bc5638ada29d6$var$maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        $a99bc5638ada29d6$var$debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
$a99bc5638ada29d6$var$Readable.prototype._read = function(n) {
    $a99bc5638ada29d6$var$errorOrDestroy(this, new $a99bc5638ada29d6$var$ERR_METHOD_NOT_IMPLEMENTED("_read()"));
};
$a99bc5638ada29d6$var$Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    $a99bc5638ada29d6$var$debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== $jx7mO.stdout && dest !== $jx7mO.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) $jx7mO.nextTick(endFn);
    else src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
        $a99bc5638ada29d6$var$debug("onunpipe");
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        $a99bc5638ada29d6$var$debug("onend");
        dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = $a99bc5638ada29d6$var$pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
        $a99bc5638ada29d6$var$debug("cleanup"); // cleanup event handlers once the pipe is broken
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on("data", ondata);
    function ondata(chunk) {
        $a99bc5638ada29d6$var$debug("ondata");
        var ret = dest.write(chunk);
        $a99bc5638ada29d6$var$debug("dest.write", ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && $a99bc5638ada29d6$var$indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                $a99bc5638ada29d6$var$debug("false write response, pause", state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        $a99bc5638ada29d6$var$debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if ($a99bc5638ada29d6$var$EElistenerCount(dest, "error") === 0) $a99bc5638ada29d6$var$errorOrDestroy(dest, er);
    } // Make sure our error handler is attached before userland ones.
    $a99bc5638ada29d6$var$prependListener(dest, "error", onerror); // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
        $a99bc5638ada29d6$var$debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
        $a99bc5638ada29d6$var$debug("unpipe");
        src.unpipe(dest);
    } // tell the dest that it's being piped to
    dest.emit("pipe", src); // start the flow if it hasn't been started already.
    if (!state.flowing) {
        $a99bc5638ada29d6$var$debug("pipe resume");
        src.resume();
    }
    return dest;
};
function $a99bc5638ada29d6$var$pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        $a99bc5638ada29d6$var$debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && $a99bc5638ada29d6$var$EElistenerCount(src, "data")) {
            state.flowing = true;
            $a99bc5638ada29d6$var$flow(src);
        }
    };
}
$a99bc5638ada29d6$var$Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    }; // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this; // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
    } // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit("unpipe", this, {
            hasUnpiped: false
        });
        return this;
    } // try to find the right one.
    var index = $a99bc5638ada29d6$var$indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something
$a99bc5638ada29d6$var$Readable.prototype.on = function(ev, fn) {
    var res = $4o5k1.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === "data") {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount("readable") > 0; // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            $a99bc5638ada29d6$var$debug("on readable", state.length, state.reading);
            if (state.length) $a99bc5638ada29d6$var$emitReadable(this);
            else if (!state.reading) $jx7mO.nextTick($a99bc5638ada29d6$var$nReadingNextTick, this);
        }
    }
    return res;
};
$a99bc5638ada29d6$var$Readable.prototype.addListener = $a99bc5638ada29d6$var$Readable.prototype.on;
$a99bc5638ada29d6$var$Readable.prototype.removeListener = function(ev, fn) {
    var res = $4o5k1.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $jx7mO.nextTick($a99bc5638ada29d6$var$updateReadableListening, this);
    return res;
};
$a99bc5638ada29d6$var$Readable.prototype.removeAllListeners = function(ev) {
    var res = $4o5k1.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $jx7mO.nextTick($a99bc5638ada29d6$var$updateReadableListening, this);
    return res;
};
function $a99bc5638ada29d6$var$updateReadableListening(self) {
    var state = self._readableState;
    state.readableListening = self.listenerCount("readable") > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
    else if (self.listenerCount("data") > 0) self.resume();
}
function $a99bc5638ada29d6$var$nReadingNextTick(self) {
    $a99bc5638ada29d6$var$debug("readable nexttick read 0");
    self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
$a99bc5638ada29d6$var$Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        $a99bc5638ada29d6$var$debug("resume"); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        $a99bc5638ada29d6$var$resume(this, state);
    }
    state.paused = false;
    return this;
};
function $a99bc5638ada29d6$var$resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        $jx7mO.nextTick($a99bc5638ada29d6$var$resume_, stream, state);
    }
}
function $a99bc5638ada29d6$var$resume_(stream, state) {
    $a99bc5638ada29d6$var$debug("resume", state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit("resume");
    $a99bc5638ada29d6$var$flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
$a99bc5638ada29d6$var$Readable.prototype.pause = function() {
    $a99bc5638ada29d6$var$debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        $a99bc5638ada29d6$var$debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
};
function $a99bc5638ada29d6$var$flow(stream) {
    var state = stream._readableState;
    $a99bc5638ada29d6$var$debug("flow", state.flowing);
    while(state.flowing && stream.read() !== null);
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
$a99bc5638ada29d6$var$Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on("end", function() {
        $a99bc5638ada29d6$var$debug("wrapped end");
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on("data", function(chunk) {
        $a99bc5638ada29d6$var$debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === "function") this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
     // proxy certain important events.
    for(var n = 0; n < $a99bc5638ada29d6$var$kProxyEvents.length; n++)stream.on($a99bc5638ada29d6$var$kProxyEvents[n], this.emit.bind(this, $a99bc5638ada29d6$var$kProxyEvents[n]));
     // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        $a99bc5638ada29d6$var$debug("wrapped _read", n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};

if (typeof Symbol === "function") $a99bc5638ada29d6$var$Readable.prototype[Symbol.asyncIterator] = function() {
    if ($a99bc5638ada29d6$var$createReadableStreamAsyncIterator === undefined) $a99bc5638ada29d6$var$createReadableStreamAsyncIterator = (parcelRequire("lyxmS"));
    return $a99bc5638ada29d6$var$createReadableStreamAsyncIterator(this);
};
Object.defineProperty($a99bc5638ada29d6$var$Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty($a99bc5638ada29d6$var$Readable.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty($a99bc5638ada29d6$var$Readable.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
}); // exposed for testing purposes only.
$a99bc5638ada29d6$var$Readable._fromList = $a99bc5638ada29d6$var$fromList;
Object.defineProperty($a99bc5638ada29d6$var$Readable.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $a99bc5638ada29d6$var$fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function $a99bc5638ada29d6$var$endReadable(stream) {
    var state = stream._readableState;
    $a99bc5638ada29d6$var$debug("endReadable", state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        $jx7mO.nextTick($a99bc5638ada29d6$var$endReadableNT, state, stream);
    }
}
function $a99bc5638ada29d6$var$endReadableNT(state, stream) {
    $a99bc5638ada29d6$var$debug("endReadableNT", state.endEmitted, state.length); // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}

if (typeof Symbol === "function") $a99bc5638ada29d6$var$Readable.from = function(iterable, opts) {
    if ($a99bc5638ada29d6$var$from === undefined) $a99bc5638ada29d6$var$from = (parcelRequire("get4M"));
    return $a99bc5638ada29d6$var$from($a99bc5638ada29d6$var$Readable, iterable, opts);
};
function $a99bc5638ada29d6$var$indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

});
parcelRequire.register("4o5k1", function(module, exports) {

module.exports = (parcelRequire("eCV8S")).EventEmitter;

});

parcelRequire.register("kryBt", function(module, exports) {
"use strict";
function $ee212bcdb8bebda1$var$ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function $ee212bcdb8bebda1$var$_objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) $ee212bcdb8bebda1$var$ownKeys(Object(source), true).forEach(function(key) {
            $ee212bcdb8bebda1$var$_defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else $ee212bcdb8bebda1$var$ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function $ee212bcdb8bebda1$var$_defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $ee212bcdb8bebda1$var$_classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function $ee212bcdb8bebda1$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function $ee212bcdb8bebda1$var$_createClass(Constructor, protoProps, staticProps) {
    if (protoProps) $ee212bcdb8bebda1$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $ee212bcdb8bebda1$var$_defineProperties(Constructor, staticProps);
    return Constructor;
}

var $fLrIr = parcelRequire("fLrIr");
var $ee212bcdb8bebda1$var$Buffer = $fLrIr.Buffer;

var $XDU19 = parcelRequire("XDU19");
var $ee212bcdb8bebda1$var$inspect = $XDU19.inspect;
var $ee212bcdb8bebda1$var$custom = $ee212bcdb8bebda1$var$inspect && $ee212bcdb8bebda1$var$inspect.custom || "inspect";
function $ee212bcdb8bebda1$var$copyBuffer(src, target, offset) {
    $ee212bcdb8bebda1$var$Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ function() {
    function BufferList() {
        $ee212bcdb8bebda1$var$_classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    $ee212bcdb8bebda1$var$_createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return "";
                var p = this.head;
                var ret = "" + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return $ee212bcdb8bebda1$var$Buffer.alloc(0);
                var ret = $ee212bcdb8bebda1$var$Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    $ee212bcdb8bebda1$var$copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            } // Consumes a specified amount of bytes or characters from the buffered data.
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            } // Consumes a specified amount of characters from the buffered data.
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Consumes a specified amount of bytes from the buffered data.
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = $ee212bcdb8bebda1$var$Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Make sure the linked list only shows the minimal necessary information.
        },
        {
            key: $ee212bcdb8bebda1$var$custom,
            value: function value(_, options) {
                return $ee212bcdb8bebda1$var$inspect(this, $ee212bcdb8bebda1$var$_objectSpread({}, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
}();

});

parcelRequire.register("fIrpF", function(module, exports) {

var $jx7mO = parcelRequire("jx7mO");
"use strict"; // undocumented cb() API, needed for core, not for public API
function $b7103abb11781a25$var$destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err);
        else if (err) {
            if (!this._writableState) $jx7mO.nextTick($b7103abb11781a25$var$emitErrorNT, this, err);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                $jx7mO.nextTick($b7103abb11781a25$var$emitErrorNT, this, err);
            }
        }
        return this;
    } // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
     // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) $jx7mO.nextTick($b7103abb11781a25$var$emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                $jx7mO.nextTick($b7103abb11781a25$var$emitErrorAndCloseNT, _this, err);
            } else $jx7mO.nextTick($b7103abb11781a25$var$emitCloseNT, _this);
        } else if (cb) {
            $jx7mO.nextTick($b7103abb11781a25$var$emitCloseNT, _this);
            cb(err);
        } else $jx7mO.nextTick($b7103abb11781a25$var$emitCloseNT, _this);
    });
    return this;
}
function $b7103abb11781a25$var$emitErrorAndCloseNT(self, err) {
    $b7103abb11781a25$var$emitErrorNT(self, err);
    $b7103abb11781a25$var$emitCloseNT(self);
}
function $b7103abb11781a25$var$emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit("close");
}
function $b7103abb11781a25$var$undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function $b7103abb11781a25$var$emitErrorNT(self, err) {
    self.emit("error", err);
}
function $b7103abb11781a25$var$errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit("error", err);
}
module.exports = {
    destroy: $b7103abb11781a25$var$destroy,
    undestroy: $b7103abb11781a25$var$undestroy,
    errorOrDestroy: $b7103abb11781a25$var$errorOrDestroy
};

});

parcelRequire.register("gIi9O", function(module, exports) {
"use strict";

var $jNp9Q = parcelRequire("jNp9Q");
var $c2aed710c01473b4$var$ERR_INVALID_OPT_VALUE = $jNp9Q.codes.ERR_INVALID_OPT_VALUE;
function $c2aed710c01473b4$var$highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function $c2aed710c01473b4$var$getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = $c2aed710c01473b4$var$highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark";
            throw new $c2aed710c01473b4$var$ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    } // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: $c2aed710c01473b4$var$getHighWaterMark
};

});
parcelRequire.register("jNp9Q", function(module, exports) {

$parcel$export(module.exports, "codes", () => $e6961bba41a95a74$export$e45cb6485273080e, (v) => $e6961bba41a95a74$export$e45cb6485273080e = v);
var $e6961bba41a95a74$export$e45cb6485273080e;
"use strict";
function $e6961bba41a95a74$var$_inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var $e6961bba41a95a74$var$codes = {};
function $e6961bba41a95a74$var$createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError = /*#__PURE__*/ function(_Base) {
        $e6961bba41a95a74$var$_inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code;
    $e6961bba41a95a74$var$codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function $e6961bba41a95a74$var$oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function $e6961bba41a95a74$var$startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function $e6961bba41a95a74$var$endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function $e6961bba41a95a74$var$includes(str, search, start) {
    if (typeof start !== "number") start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
$e6961bba41a95a74$var$createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
$e6961bba41a95a74$var$createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === "string" && $e6961bba41a95a74$var$startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
    } else determiner = "must be";
    var msg;
    if ($e6961bba41a95a74$var$endsWith(name, " argument")) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat($e6961bba41a95a74$var$oneOf(expected, "type"));
    else {
        var type = $e6961bba41a95a74$var$includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat($e6961bba41a95a74$var$oneOf(expected, "type"));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
$e6961bba41a95a74$var$createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
$e6961bba41a95a74$var$createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
    return "The " + name + " method is not implemented";
});
$e6961bba41a95a74$var$createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
$e6961bba41a95a74$var$createErrorType("ERR_STREAM_DESTROYED", function(name) {
    return "Cannot call " + name + " after a stream was destroyed";
});
$e6961bba41a95a74$var$createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
$e6961bba41a95a74$var$createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
$e6961bba41a95a74$var$createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
$e6961bba41a95a74$var$createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
$e6961bba41a95a74$var$createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
}, TypeError);
$e6961bba41a95a74$var$createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
$e6961bba41a95a74$export$e45cb6485273080e = $e6961bba41a95a74$var$codes;

});


parcelRequire.register("3NnaL", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

var $jx7mO = parcelRequire("jx7mO");
"use strict";
/*<replacement>*/ var $2c37ec4973f00c57$var$objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = $2c37ec4973f00c57$var$Duplex;

var $eyOXC = parcelRequire("eyOXC");

var $fnshQ = parcelRequire("fnshQ");

(parcelRequire("6QnvD"))($2c37ec4973f00c57$var$Duplex, $eyOXC);
// Allow the keys array to be GC'ed.
var $2c37ec4973f00c57$var$keys = $2c37ec4973f00c57$var$objectKeys($fnshQ.prototype);
for(var $2c37ec4973f00c57$var$v = 0; $2c37ec4973f00c57$var$v < $2c37ec4973f00c57$var$keys.length; $2c37ec4973f00c57$var$v++){
    var $2c37ec4973f00c57$var$method = $2c37ec4973f00c57$var$keys[$2c37ec4973f00c57$var$v];
    if (!$2c37ec4973f00c57$var$Duplex.prototype[$2c37ec4973f00c57$var$method]) $2c37ec4973f00c57$var$Duplex.prototype[$2c37ec4973f00c57$var$method] = $fnshQ.prototype[$2c37ec4973f00c57$var$method];
}
function $2c37ec4973f00c57$var$Duplex(options) {
    if (!(this instanceof $2c37ec4973f00c57$var$Duplex)) return new $2c37ec4973f00c57$var$Duplex(options);
    $eyOXC.call(this, options);
    $fnshQ.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", $2c37ec4973f00c57$var$onend);
        }
    }
}
Object.defineProperty($2c37ec4973f00c57$var$Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty($2c37ec4973f00c57$var$Duplex.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty($2c37ec4973f00c57$var$Duplex.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
}); // the no-half-open enforcer
function $2c37ec4973f00c57$var$onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.
    $jx7mO.nextTick($2c37ec4973f00c57$var$onEndNT, this);
}
function $2c37ec4973f00c57$var$onEndNT(self) {
    self.end();
}
Object.defineProperty($2c37ec4973f00c57$var$Duplex.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

});
parcelRequire.register("fnshQ", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

var $jx7mO = parcelRequire("jx7mO");
"use strict";
module.exports = $b31ef22923122bce$var$Writable;
/* <replacement> */ function $b31ef22923122bce$var$WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream
function $b31ef22923122bce$var$CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        $b31ef22923122bce$var$onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var $b31ef22923122bce$var$Duplex;
/*</replacement>*/ $b31ef22923122bce$var$Writable.WritableState = $b31ef22923122bce$var$WritableState;

/*<replacement>*/ var $b31ef22923122bce$var$internalUtil = {
    deprecate: (parcelRequire("e1ZXC"))
};

var $4o5k1 = parcelRequire("4o5k1");

var $fLrIr = parcelRequire("fLrIr");
var $b31ef22923122bce$require$Buffer = $fLrIr.Buffer;
var $b31ef22923122bce$var$OurUint8Array = $parcel$global.Uint8Array || function() {};
function $b31ef22923122bce$var$_uint8ArrayToBuffer(chunk) {
    return $b31ef22923122bce$require$Buffer.from(chunk);
}
function $b31ef22923122bce$var$_isUint8Array(obj) {
    return $b31ef22923122bce$require$Buffer.isBuffer(obj) || obj instanceof $b31ef22923122bce$var$OurUint8Array;
}

var $fIrpF = parcelRequire("fIrpF");

var $gIi9O = parcelRequire("gIi9O");
var $b31ef22923122bce$var$getHighWaterMark = $gIi9O.getHighWaterMark;

var $jNp9Q = parcelRequire("jNp9Q");
var $b31ef22923122bce$require$_require$codes = $jNp9Q.codes;
var $b31ef22923122bce$var$ERR_INVALID_ARG_TYPE = $b31ef22923122bce$require$_require$codes.ERR_INVALID_ARG_TYPE, $b31ef22923122bce$var$ERR_METHOD_NOT_IMPLEMENTED = $b31ef22923122bce$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $b31ef22923122bce$var$ERR_MULTIPLE_CALLBACK = $b31ef22923122bce$require$_require$codes.ERR_MULTIPLE_CALLBACK, $b31ef22923122bce$var$ERR_STREAM_CANNOT_PIPE = $b31ef22923122bce$require$_require$codes.ERR_STREAM_CANNOT_PIPE, $b31ef22923122bce$var$ERR_STREAM_DESTROYED = $b31ef22923122bce$require$_require$codes.ERR_STREAM_DESTROYED, $b31ef22923122bce$var$ERR_STREAM_NULL_VALUES = $b31ef22923122bce$require$_require$codes.ERR_STREAM_NULL_VALUES, $b31ef22923122bce$var$ERR_STREAM_WRITE_AFTER_END = $b31ef22923122bce$require$_require$codes.ERR_STREAM_WRITE_AFTER_END, $b31ef22923122bce$var$ERR_UNKNOWN_ENCODING = $b31ef22923122bce$require$_require$codes.ERR_UNKNOWN_ENCODING;
var $b31ef22923122bce$var$errorOrDestroy = $fIrpF.errorOrDestroy;

(parcelRequire("6QnvD"))($b31ef22923122bce$var$Writable, $4o5k1);
function $b31ef22923122bce$var$nop() {}

function $b31ef22923122bce$var$WritableState(options, stream, isDuplex) {
    $b31ef22923122bce$var$Duplex = $b31ef22923122bce$var$Duplex || (parcelRequire("3NnaL"));
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof $b31ef22923122bce$var$Duplex; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = $b31ef22923122bce$var$getHighWaterMark(this, options, "writableHighWaterMark", isDuplex); // if _final has been called
    this.finalCalled = false; // drain event flag.
    this.needDrain = false; // at the start of calling end()
    this.ending = false; // when end() has been called, and returned
    this.ended = false; // when 'finish' is emitted
    this.finished = false; // has it been destroyed
    this.destroyed = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8"; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0; // a flag to see when we're in the middle of a write.
    this.writing = false; // when true all writes will be buffered until .uncork() call
    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        $b31ef22923122bce$var$onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null; // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false; // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy; // count buffered requests
    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new $b31ef22923122bce$var$CorkedRequest(this);
}
$b31ef22923122bce$var$WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty($b31ef22923122bce$var$WritableState.prototype, "buffer", {
            get: $b31ef22923122bce$var$internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
    } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var $b31ef22923122bce$var$realHasInstance;
if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    $b31ef22923122bce$var$realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty($b31ef22923122bce$var$Writable, Symbol.hasInstance, {
        value: function value(object) {
            if ($b31ef22923122bce$var$realHasInstance.call(this, object)) return true;
            if (this !== $b31ef22923122bce$var$Writable) return false;
            return object && object._writableState instanceof $b31ef22923122bce$var$WritableState;
        }
    });
} else $b31ef22923122bce$var$realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};

function $b31ef22923122bce$var$Writable(options) {
    $b31ef22923122bce$var$Duplex = $b31ef22923122bce$var$Duplex || (parcelRequire("3NnaL")); // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $b31ef22923122bce$var$Duplex;
    if (!isDuplex && !$b31ef22923122bce$var$realHasInstance.call($b31ef22923122bce$var$Writable, this)) return new $b31ef22923122bce$var$Writable(options);
    this._writableState = new $b31ef22923122bce$var$WritableState(options, this, isDuplex); // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options.final === "function") this._final = options.final;
    }
    $4o5k1.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.
$b31ef22923122bce$var$Writable.prototype.pipe = function() {
    $b31ef22923122bce$var$errorOrDestroy(this, new $b31ef22923122bce$var$ERR_STREAM_CANNOT_PIPE());
};
function $b31ef22923122bce$var$writeAfterEnd(stream, cb) {
    var er = new $b31ef22923122bce$var$ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
    $b31ef22923122bce$var$errorOrDestroy(stream, er);
    $jx7mO.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function $b31ef22923122bce$var$validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new $b31ef22923122bce$var$ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== "string" && !state.objectMode) er = new $b31ef22923122bce$var$ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer"
    ], chunk);
    if (er) {
        $b31ef22923122bce$var$errorOrDestroy(stream, er);
        $jx7mO.nextTick(cb, er);
        return false;
    }
    return true;
}
$b31ef22923122bce$var$Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && $b31ef22923122bce$var$_isUint8Array(chunk);
    if (isBuf && !$b31ef22923122bce$require$Buffer.isBuffer(chunk)) chunk = $b31ef22923122bce$var$_uint8ArrayToBuffer(chunk);
    if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = "buffer";
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== "function") cb = $b31ef22923122bce$var$nop;
    if (state.ending) $b31ef22923122bce$var$writeAfterEnd(this, cb);
    else if (isBuf || $b31ef22923122bce$var$validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = $b31ef22923122bce$var$writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
$b31ef22923122bce$var$Writable.prototype.cork = function() {
    this._writableState.corked++;
};
$b31ef22923122bce$var$Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) $b31ef22923122bce$var$clearBuffer(this, state);
    }
};
$b31ef22923122bce$var$Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === "string") encoding = encoding.toLowerCase();
    if (!([
        "hex",
        "utf8",
        "utf-8",
        "ascii",
        "binary",
        "base64",
        "ucs2",
        "ucs-2",
        "utf16le",
        "utf-16le",
        "raw"
    ].indexOf((encoding + "").toLowerCase()) > -1)) throw new $b31ef22923122bce$var$ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty($b31ef22923122bce$var$Writable.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function $b31ef22923122bce$var$decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") chunk = $b31ef22923122bce$require$Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty($b31ef22923122bce$var$Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function $b31ef22923122bce$var$writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = $b31ef22923122bce$var$decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else $b31ef22923122bce$var$doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function $b31ef22923122bce$var$doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new $b31ef22923122bce$var$ERR_STREAM_DESTROYED("write"));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function $b31ef22923122bce$var$onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        $jx7mO.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error
        $jx7mO.nextTick($b31ef22923122bce$var$finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        $b31ef22923122bce$var$errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        $b31ef22923122bce$var$errorOrDestroy(stream, er); // this can emit finish, but finish must
        // always follow error
        $b31ef22923122bce$var$finishMaybe(stream, state);
    }
}
function $b31ef22923122bce$var$onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function $b31ef22923122bce$var$onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== "function") throw new $b31ef22923122bce$var$ERR_MULTIPLE_CALLBACK();
    $b31ef22923122bce$var$onwriteStateUpdate(state);
    if (er) $b31ef22923122bce$var$onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = $b31ef22923122bce$var$needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) $b31ef22923122bce$var$clearBuffer(stream, state);
        if (sync) $jx7mO.nextTick($b31ef22923122bce$var$afterWrite, stream, state, finished, cb);
        else $b31ef22923122bce$var$afterWrite(stream, state, finished, cb);
    }
}
function $b31ef22923122bce$var$afterWrite(stream, state, finished, cb) {
    if (!finished) $b31ef22923122bce$var$onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    $b31ef22923122bce$var$finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function $b31ef22923122bce$var$onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
    }
} // if there's something in the buffer waiting, then process it
function $b31ef22923122bce$var$clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        $b31ef22923122bce$var$doWrite(stream, state, true, state.length, buffer, "", holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new $b31ef22923122bce$var$CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            $b31ef22923122bce$var$doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
$b31ef22923122bce$var$Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new $b31ef22923122bce$var$ERR_METHOD_NOT_IMPLEMENTED("_write()"));
};
$b31ef22923122bce$var$Writable.prototype._writev = null;
$b31ef22923122bce$var$Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    } // ignore unnecessary end() calls.
    if (!state.ending) $b31ef22923122bce$var$endWritable(this, state, cb);
    return this;
};
Object.defineProperty($b31ef22923122bce$var$Writable.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function $b31ef22923122bce$var$needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function $b31ef22923122bce$var$callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) $b31ef22923122bce$var$errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit("prefinish");
        $b31ef22923122bce$var$finishMaybe(stream, state);
    });
}
function $b31ef22923122bce$var$prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            $jx7mO.nextTick($b31ef22923122bce$var$callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit("prefinish");
        }
    }
}
function $b31ef22923122bce$var$finishMaybe(stream, state) {
    var need = $b31ef22923122bce$var$needFinish(state);
    if (need) {
        $b31ef22923122bce$var$prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function $b31ef22923122bce$var$endWritable(stream, state, cb) {
    state.ending = true;
    $b31ef22923122bce$var$finishMaybe(stream, state);
    if (cb) {
        if (state.finished) $jx7mO.nextTick(cb);
        else stream.once("finish", cb);
    }
    state.ended = true;
    stream.writable = false;
}
function $b31ef22923122bce$var$onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    } // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty($b31ef22923122bce$var$Writable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
$b31ef22923122bce$var$Writable.prototype.destroy = $fIrpF.destroy;
$b31ef22923122bce$var$Writable.prototype._undestroy = $fIrpF.undestroy;
$b31ef22923122bce$var$Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

});


parcelRequire.register("lyxmS", function(module, exports) {

var $jx7mO = parcelRequire("jx7mO");
"use strict";
var $fb16a8201265711a$var$_Object$setPrototypeO;
function $fb16a8201265711a$var$_defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}

var $96MRH = parcelRequire("96MRH");
var $fb16a8201265711a$var$kLastResolve = Symbol("lastResolve");
var $fb16a8201265711a$var$kLastReject = Symbol("lastReject");
var $fb16a8201265711a$var$kError = Symbol("error");
var $fb16a8201265711a$var$kEnded = Symbol("ended");
var $fb16a8201265711a$var$kLastPromise = Symbol("lastPromise");
var $fb16a8201265711a$var$kHandlePromise = Symbol("handlePromise");
var $fb16a8201265711a$var$kStream = Symbol("stream");
function $fb16a8201265711a$var$createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function $fb16a8201265711a$var$readAndResolve(iter) {
    var resolve = iter[$fb16a8201265711a$var$kLastResolve];
    if (resolve !== null) {
        var data = iter[$fb16a8201265711a$var$kStream].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[$fb16a8201265711a$var$kLastPromise] = null;
            iter[$fb16a8201265711a$var$kLastResolve] = null;
            iter[$fb16a8201265711a$var$kLastReject] = null;
            resolve($fb16a8201265711a$var$createIterResult(data, false));
        }
    }
}
function $fb16a8201265711a$var$onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    $jx7mO.nextTick($fb16a8201265711a$var$readAndResolve, iter);
}
function $fb16a8201265711a$var$wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[$fb16a8201265711a$var$kEnded]) {
                resolve($fb16a8201265711a$var$createIterResult(undefined, true));
                return;
            }
            iter[$fb16a8201265711a$var$kHandlePromise](resolve, reject);
        }, reject);
    };
}
var $fb16a8201265711a$var$AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
var $fb16a8201265711a$var$ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf(($fb16a8201265711a$var$_Object$setPrototypeO = {
    get stream () {
        return this[$fb16a8201265711a$var$kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[$fb16a8201265711a$var$kError];
        if (error !== null) return Promise.reject(error);
        if (this[$fb16a8201265711a$var$kEnded]) return Promise.resolve($fb16a8201265711a$var$createIterResult(undefined, true));
        if (this[$fb16a8201265711a$var$kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            $jx7mO.nextTick(function() {
                if (_this[$fb16a8201265711a$var$kError]) reject(_this[$fb16a8201265711a$var$kError]);
                else resolve($fb16a8201265711a$var$createIterResult(undefined, true));
            });
        });
         // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[$fb16a8201265711a$var$kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise($fb16a8201265711a$var$wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[$fb16a8201265711a$var$kStream].read();
            if (data !== null) return Promise.resolve($fb16a8201265711a$var$createIterResult(data, false));
            promise = new Promise(this[$fb16a8201265711a$var$kHandlePromise]);
        }
        this[$fb16a8201265711a$var$kLastPromise] = promise;
        return promise;
    }
}, $fb16a8201265711a$var$_defineProperty($fb16a8201265711a$var$_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), $fb16a8201265711a$var$_defineProperty($fb16a8201265711a$var$_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[$fb16a8201265711a$var$kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve($fb16a8201265711a$var$createIterResult(undefined, true));
        });
    });
}), $fb16a8201265711a$var$_Object$setPrototypeO), $fb16a8201265711a$var$AsyncIteratorPrototype);
var $fb16a8201265711a$var$createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create($fb16a8201265711a$var$ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, $fb16a8201265711a$var$_defineProperty(_Object$create, $fb16a8201265711a$var$kStream, {
        value: stream,
        writable: true
    }), $fb16a8201265711a$var$_defineProperty(_Object$create, $fb16a8201265711a$var$kLastResolve, {
        value: null,
        writable: true
    }), $fb16a8201265711a$var$_defineProperty(_Object$create, $fb16a8201265711a$var$kLastReject, {
        value: null,
        writable: true
    }), $fb16a8201265711a$var$_defineProperty(_Object$create, $fb16a8201265711a$var$kError, {
        value: null,
        writable: true
    }), $fb16a8201265711a$var$_defineProperty(_Object$create, $fb16a8201265711a$var$kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), $fb16a8201265711a$var$_defineProperty(_Object$create, $fb16a8201265711a$var$kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[$fb16a8201265711a$var$kStream].read();
            if (data) {
                iterator[$fb16a8201265711a$var$kLastPromise] = null;
                iterator[$fb16a8201265711a$var$kLastResolve] = null;
                iterator[$fb16a8201265711a$var$kLastReject] = null;
                resolve($fb16a8201265711a$var$createIterResult(data, false));
            } else {
                iterator[$fb16a8201265711a$var$kLastResolve] = resolve;
                iterator[$fb16a8201265711a$var$kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[$fb16a8201265711a$var$kLastPromise] = null;
    $96MRH(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[$fb16a8201265711a$var$kLastReject]; // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[$fb16a8201265711a$var$kLastPromise] = null;
                iterator[$fb16a8201265711a$var$kLastResolve] = null;
                iterator[$fb16a8201265711a$var$kLastReject] = null;
                reject(err);
            }
            iterator[$fb16a8201265711a$var$kError] = err;
            return;
        }
        var resolve = iterator[$fb16a8201265711a$var$kLastResolve];
        if (resolve !== null) {
            iterator[$fb16a8201265711a$var$kLastPromise] = null;
            iterator[$fb16a8201265711a$var$kLastResolve] = null;
            iterator[$fb16a8201265711a$var$kLastReject] = null;
            resolve($fb16a8201265711a$var$createIterResult(undefined, true));
        }
        iterator[$fb16a8201265711a$var$kEnded] = true;
    });
    stream.on("readable", $fb16a8201265711a$var$onReadable.bind(null, iterator));
    return iterator;
};
module.exports = $fb16a8201265711a$var$createReadableStreamAsyncIterator;

});
parcelRequire.register("96MRH", function(module, exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";

var $jNp9Q = parcelRequire("jNp9Q");
var $6a1a943346f9f161$var$ERR_STREAM_PREMATURE_CLOSE = $jNp9Q.codes.ERR_STREAM_PREMATURE_CLOSE;
function $6a1a943346f9f161$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function $6a1a943346f9f161$var$noop() {}
function $6a1a943346f9f161$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function $6a1a943346f9f161$var$eos(stream, opts, callback) {
    if (typeof opts === "function") return $6a1a943346f9f161$var$eos(stream, null, opts);
    if (!opts) opts = {};
    callback = $6a1a943346f9f161$var$once(callback || $6a1a943346f9f161$var$noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new $6a1a943346f9f161$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new $6a1a943346f9f161$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on("finish", onfinish);
    };
    if ($6a1a943346f9f161$var$isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req) onrequest();
        else stream.on("request", onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
    }
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false) stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req) stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
    };
}
module.exports = $6a1a943346f9f161$var$eos;

});


parcelRequire.register("get4M", function(module, exports) {
module.exports = function() {
    throw new Error("Readable.from is not available in the browser");
};

});


parcelRequire.register("20Yx4", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
"use strict";
module.exports = $177a894f7f266a57$var$Transform;

var $jNp9Q = parcelRequire("jNp9Q");
var $177a894f7f266a57$require$_require$codes = $jNp9Q.codes;
var $177a894f7f266a57$var$ERR_METHOD_NOT_IMPLEMENTED = $177a894f7f266a57$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $177a894f7f266a57$var$ERR_MULTIPLE_CALLBACK = $177a894f7f266a57$require$_require$codes.ERR_MULTIPLE_CALLBACK, $177a894f7f266a57$var$ERR_TRANSFORM_ALREADY_TRANSFORMING = $177a894f7f266a57$require$_require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, $177a894f7f266a57$var$ERR_TRANSFORM_WITH_LENGTH_0 = $177a894f7f266a57$require$_require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var $3NnaL = parcelRequire("3NnaL");

(parcelRequire("6QnvD"))($177a894f7f266a57$var$Transform, $3NnaL);
function $177a894f7f266a57$var$afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit("error", new $177a894f7f266a57$var$ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function $177a894f7f266a57$var$Transform(options) {
    if (!(this instanceof $177a894f7f266a57$var$Transform)) return new $177a894f7f266a57$var$Transform(options);
    $3NnaL.call(this, options);
    this._transformState = {
        afterTransform: $177a894f7f266a57$var$afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    }; // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
    } // When the writable side finishes, then flush out anything remaining.
    this.on("prefinish", $177a894f7f266a57$var$prefinish);
}
function $177a894f7f266a57$var$prefinish() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) this._flush(function(er, data) {
        $177a894f7f266a57$var$done(_this, er, data);
    });
    else $177a894f7f266a57$var$done(this, null, null);
}
$177a894f7f266a57$var$Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return $3NnaL.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
$177a894f7f266a57$var$Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new $177a894f7f266a57$var$ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
};
$177a894f7f266a57$var$Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
$177a894f7f266a57$var$Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
$177a894f7f266a57$var$Transform.prototype._destroy = function(err, cb) {
    $3NnaL.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function $177a894f7f266a57$var$done(stream, er, data) {
    if (er) return stream.emit("error", er);
    if (data != null) stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new $177a894f7f266a57$var$ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new $177a894f7f266a57$var$ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

});

parcelRequire.register("7qPs8", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
"use strict";
module.exports = $5692df8c2535aee4$var$PassThrough;

var $20Yx4 = parcelRequire("20Yx4");

(parcelRequire("6QnvD"))($5692df8c2535aee4$var$PassThrough, $20Yx4);
function $5692df8c2535aee4$var$PassThrough(options) {
    if (!(this instanceof $5692df8c2535aee4$var$PassThrough)) return new $5692df8c2535aee4$var$PassThrough(options);
    $20Yx4.call(this, options);
}
$5692df8c2535aee4$var$PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

});

parcelRequire.register("6vBfV", function(module, exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var $4bd2898c2b9b90c0$var$eos;
function $4bd2898c2b9b90c0$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}

var $jNp9Q = parcelRequire("jNp9Q");
var $4bd2898c2b9b90c0$require$_require$codes = $jNp9Q.codes;
var $4bd2898c2b9b90c0$var$ERR_MISSING_ARGS = $4bd2898c2b9b90c0$require$_require$codes.ERR_MISSING_ARGS, $4bd2898c2b9b90c0$var$ERR_STREAM_DESTROYED = $4bd2898c2b9b90c0$require$_require$codes.ERR_STREAM_DESTROYED;
function $4bd2898c2b9b90c0$var$noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function $4bd2898c2b9b90c0$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}

function $4bd2898c2b9b90c0$var$destroyer(stream, reading, writing, callback) {
    callback = $4bd2898c2b9b90c0$var$once(callback);
    var closed = false;
    stream.on("close", function() {
        closed = true;
    });
    if ($4bd2898c2b9b90c0$var$eos === undefined) $4bd2898c2b9b90c0$var$eos = (parcelRequire("96MRH"));
    $4bd2898c2b9b90c0$var$eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want
        if ($4bd2898c2b9b90c0$var$isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === "function") return stream.destroy();
        callback(err || new $4bd2898c2b9b90c0$var$ERR_STREAM_DESTROYED("pipe"));
    };
}
function $4bd2898c2b9b90c0$var$call(fn) {
    fn();
}
function $4bd2898c2b9b90c0$var$pipe(from, to) {
    return from.pipe(to);
}
function $4bd2898c2b9b90c0$var$popCallback(streams) {
    if (!streams.length) return $4bd2898c2b9b90c0$var$noop;
    if (typeof streams[streams.length - 1] !== "function") return $4bd2898c2b9b90c0$var$noop;
    return streams.pop();
}
function $4bd2898c2b9b90c0$var$pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = $4bd2898c2b9b90c0$var$popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new $4bd2898c2b9b90c0$var$ERR_MISSING_ARGS("streams");
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return $4bd2898c2b9b90c0$var$destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach($4bd2898c2b9b90c0$var$call);
            if (reading) return;
            destroys.forEach($4bd2898c2b9b90c0$var$call);
            callback(error);
        });
    });
    return streams.reduce($4bd2898c2b9b90c0$var$pipe);
}
module.exports = $4bd2898c2b9b90c0$var$pipeline;

});


parcelRequire.register("aF4zP", function(module, exports) {
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js

var $1O4xH = parcelRequire("1O4xH");
var $7c314896a6bb0c72$require$Buffer = $1O4xH.Buffer;

var $dfWjY = parcelRequire("dfWjY");

var $g0Wvg = parcelRequire("g0Wvg");

var $aIiD0 = parcelRequire("aIiD0");
var $7c314896a6bb0c72$require$EC = $aIiD0.ec;

var $68cvu = parcelRequire("68cvu");

var $inGO1 = parcelRequire("inGO1");

var $6d9Oj = parcelRequire("6d9Oj");
function $7c314896a6bb0c72$var$sign(hash, key, hashType, signType, tag) {
    var priv = $inGO1(key);
    if (priv.curve) {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== "ecdsa" && signType !== "ecdsa/rsa") throw new Error("wrong private key type");
        return $7c314896a6bb0c72$var$ecSign(hash, priv);
    } else if (priv.type === "dsa") {
        if (signType !== "dsa") throw new Error("wrong private key type");
        return $7c314896a6bb0c72$var$dsaSign(hash, priv, hashType);
    } else {
        if (signType !== "rsa" && signType !== "ecdsa/rsa") throw new Error("wrong private key type");
    }
    hash = $7c314896a6bb0c72$require$Buffer.concat([
        tag,
        hash
    ]);
    var len = priv.modulus.byteLength();
    var pad = [
        0,
        1
    ];
    while(hash.length + pad.length + 1 < len)pad.push(0xff);
    pad.push(0x00);
    var i = -1;
    while(++i < hash.length)pad.push(hash[i]);
    var out = $g0Wvg(pad, priv);
    return out;
}
function $7c314896a6bb0c72$var$ecSign(hash, priv) {
    var curveId = $6d9Oj[priv.curve.join(".")];
    if (!curveId) throw new Error("unknown curve " + priv.curve.join("."));
    var curve = new $7c314896a6bb0c72$require$EC(curveId);
    var key = curve.keyFromPrivate(priv.privateKey);
    var out = key.sign(hash);
    return $7c314896a6bb0c72$require$Buffer.from(out.toDER());
}
function $7c314896a6bb0c72$var$dsaSign(hash, priv, algo) {
    var x = priv.params.priv_key;
    var p = priv.params.p;
    var q = priv.params.q;
    var g = priv.params.g;
    var r = new $68cvu(0);
    var k;
    var H = $7c314896a6bb0c72$var$bits2int(hash, q).mod(q);
    var s = false;
    var kv = $7c314896a6bb0c72$var$getKey(x, q, hash, algo);
    while(s === false){
        k = $7c314896a6bb0c72$var$makeKey(q, kv, algo);
        r = $7c314896a6bb0c72$var$makeR(g, k, p, q);
        s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
        if (s.cmpn(0) === 0) {
            s = false;
            r = new $68cvu(0);
        }
    }
    return $7c314896a6bb0c72$var$toDER(r, s);
}
function $7c314896a6bb0c72$var$toDER(r, s) {
    r = r.toArray();
    s = s.toArray();
    // Pad values
    if (r[0] & 0x80) r = [
        0
    ].concat(r);
    if (s[0] & 0x80) s = [
        0
    ].concat(s);
    var total = r.length + s.length + 4;
    var res = [
        0x30,
        total,
        0x02,
        r.length
    ];
    res = res.concat(r, [
        0x02,
        s.length
    ], s);
    return $7c314896a6bb0c72$require$Buffer.from(res);
}
function $7c314896a6bb0c72$var$getKey(x, q, hash, algo) {
    x = $7c314896a6bb0c72$require$Buffer.from(x.toArray());
    if (x.length < q.byteLength()) {
        var zeros = $7c314896a6bb0c72$require$Buffer.alloc(q.byteLength() - x.length);
        x = $7c314896a6bb0c72$require$Buffer.concat([
            zeros,
            x
        ]);
    }
    var hlen = hash.length;
    var hbits = $7c314896a6bb0c72$var$bits2octets(hash, q);
    var v = $7c314896a6bb0c72$require$Buffer.alloc(hlen);
    v.fill(1);
    var k = $7c314896a6bb0c72$require$Buffer.alloc(hlen);
    k = $dfWjY(algo, k).update(v).update($7c314896a6bb0c72$require$Buffer.from([
        0
    ])).update(x).update(hbits).digest();
    v = $dfWjY(algo, k).update(v).digest();
    k = $dfWjY(algo, k).update(v).update($7c314896a6bb0c72$require$Buffer.from([
        1
    ])).update(x).update(hbits).digest();
    v = $dfWjY(algo, k).update(v).digest();
    return {
        k: k,
        v: v
    };
}
function $7c314896a6bb0c72$var$bits2int(obits, q) {
    var bits = new $68cvu(obits);
    var shift = (obits.length << 3) - q.bitLength();
    if (shift > 0) bits.ishrn(shift);
    return bits;
}
function $7c314896a6bb0c72$var$bits2octets(bits, q) {
    bits = $7c314896a6bb0c72$var$bits2int(bits, q);
    bits = bits.mod(q);
    var out = $7c314896a6bb0c72$require$Buffer.from(bits.toArray());
    if (out.length < q.byteLength()) {
        var zeros = $7c314896a6bb0c72$require$Buffer.alloc(q.byteLength() - out.length);
        out = $7c314896a6bb0c72$require$Buffer.concat([
            zeros,
            out
        ]);
    }
    return out;
}
function $7c314896a6bb0c72$var$makeKey(q, kv, algo) {
    var t;
    var k;
    do {
        t = $7c314896a6bb0c72$require$Buffer.alloc(0);
        while(t.length * 8 < q.bitLength()){
            kv.v = $dfWjY(algo, kv.k).update(kv.v).digest();
            t = $7c314896a6bb0c72$require$Buffer.concat([
                t,
                kv.v
            ]);
        }
        k = $7c314896a6bb0c72$var$bits2int(t, q);
        kv.k = $dfWjY(algo, kv.k).update(kv.v).update($7c314896a6bb0c72$require$Buffer.from([
            0
        ])).digest();
        kv.v = $dfWjY(algo, kv.k).update(kv.v).digest();
    }while (k.cmp(q) !== -1);
    return k;
}
function $7c314896a6bb0c72$var$makeR(g, k, p, q) {
    return g.toRed($68cvu.mont(p)).redPow(k).fromRed().mod(q);
}
module.exports = $7c314896a6bb0c72$var$sign;
module.exports.getKey = $7c314896a6bb0c72$var$getKey;
module.exports.makeKey = $7c314896a6bb0c72$var$makeKey;

});
parcelRequire.register("g0Wvg", function(module, exports) {

var $fLrIr = parcelRequire("fLrIr");
var $ba8a06f71e7b48b0$require$Buffer = $fLrIr.Buffer;

var $68cvu = parcelRequire("68cvu");

var $kVSZC = parcelRequire("kVSZC");
function $ba8a06f71e7b48b0$var$blind(priv) {
    var r = $ba8a06f71e7b48b0$var$getr(priv);
    var blinder = r.toRed($68cvu.mont(priv.modulus)).redPow(new $68cvu(priv.publicExponent)).fromRed();
    return {
        blinder: blinder,
        unblinder: r.invm(priv.modulus)
    };
}
function $ba8a06f71e7b48b0$var$getr(priv) {
    var len = priv.modulus.byteLength();
    var r;
    do r = new $68cvu($kVSZC(len));
    while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2));
    return r;
}
function $ba8a06f71e7b48b0$var$crt(msg, priv) {
    var blinds = $ba8a06f71e7b48b0$var$blind(priv);
    var len = priv.modulus.byteLength();
    var blinded = new $68cvu(msg).mul(blinds.blinder).umod(priv.modulus);
    var c1 = blinded.toRed($68cvu.mont(priv.prime1));
    var c2 = blinded.toRed($68cvu.mont(priv.prime2));
    var qinv = priv.coefficient;
    var p = priv.prime1;
    var q = priv.prime2;
    var m1 = c1.redPow(priv.exponent1).fromRed();
    var m2 = c2.redPow(priv.exponent2).fromRed();
    var h = m1.isub(m2).imul(qinv).umod(p).imul(q);
    return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike($ba8a06f71e7b48b0$require$Buffer, "be", len);
}
$ba8a06f71e7b48b0$var$crt.getr = $ba8a06f71e7b48b0$var$getr;
module.exports = $ba8a06f71e7b48b0$var$crt;

});
parcelRequire.register("68cvu", function(module, exports) {

(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = (parcelRequire("XDU19")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this._strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) return c - 48;
        else if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else assert(false, "Invalid character in " + string);
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) b = c - 49 + 0xa;
            else if (c >= 17) b = c - 17 + 0xa;
            else b = c;
            assert(c >= 0 && b < mul, "Invalid character");
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this._strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
        move(dest, this);
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") try {
        BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
    } catch (e) {
        BN.prototype.inspect = inspect;
    }
    else BN.prototype.inspect = inspect;
    function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    }
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position++] = word & 0xff;
            if (position < res.length) res[position++] = word >> 8 & 0xff;
            if (position < res.length) res[position++] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position < res.length) res[position++] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while(position < res.length)res[position++] = 0;
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position--] = word & 0xff;
            if (position >= 0) res[position--] = word >> 8 & 0xff;
            if (position >= 0) res[position--] = word >> 16 & 0xff;
            if (shift === 6) {
                if (position >= 0) res[position--] = word >> 24 & 0xff;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while(position >= 0)res[position--] = 0;
        }
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 0x01;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q._strip();
        a._strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is a BN v4 instance
        r.strip();
        else // r is a BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});


parcelRequire.register("aIiD0", function(module, exports) {
"use strict";
var $7ccc76978642e499$var$elliptic = module.exports;

$7ccc76978642e499$var$elliptic.version = (parcelRequire("cDcRn")).version;

$7ccc76978642e499$var$elliptic.utils = (parcelRequire("iEG0Y"));

$7ccc76978642e499$var$elliptic.rand = (parcelRequire("eexYx"));

$7ccc76978642e499$var$elliptic.curve = (parcelRequire("kT7az"));

$7ccc76978642e499$var$elliptic.curves = (parcelRequire("dq3BX"));

// Protocols
$7ccc76978642e499$var$elliptic.ec = (parcelRequire("iGiia"));

$7ccc76978642e499$var$elliptic.eddsa = (parcelRequire("3LKzp"));

});
parcelRequire.register("cDcRn", function(module, exports) {
module.exports = JSON.parse('{"_from":"elliptic@^6.5.3","_id":"elliptic@6.5.4","_inBundle":false,"_integrity":"sha512-iLhC6ULemrljPZb+QutR5TQGB+pdW6KGD5RSegS+8sorOZT+rdQFbsQFJgvN3eRqNALqJer4oQ16YvJHlU8hzQ==","_location":"/elliptic","_phantomChildren":{},"_requested":{"type":"range","registry":true,"raw":"elliptic@^6.5.3","name":"elliptic","escapedName":"elliptic","rawSpec":"^6.5.3","saveSpec":null,"fetchSpec":"^6.5.3"},"_requiredBy":["/browserify-sign","/create-ecdh"],"_resolved":"https://registry.npmjs.org/elliptic/-/elliptic-6.5.4.tgz","_shasum":"da37cebd31e79a1367e941b592ed1fbebd58abbb","_spec":"elliptic@^6.5.3","_where":"C:\\\\Users\\\\odeleham\\\\wk\\\\web\\\\projects\\\\peerjs\\\\node_modules\\\\browserify-sign","author":{"name":"Fedor Indutny","email":"fedor@indutny.com"},"bugs":{"url":"https://github.com/indutny/elliptic/issues"},"bundleDependencies":false,"dependencies":{"bn.js":"^4.11.9","brorand":"^1.1.0","hash.js":"^1.0.0","hmac-drbg":"^1.0.1","inherits":"^2.0.4","minimalistic-assert":"^1.0.1","minimalistic-crypto-utils":"^1.0.1"},"deprecated":false,"description":"EC cryptography","devDependencies":{"brfs":"^2.0.2","coveralls":"^3.1.0","eslint":"^7.6.0","grunt":"^1.2.1","grunt-browserify":"^5.3.0","grunt-cli":"^1.3.2","grunt-contrib-connect":"^3.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^5.0.0","grunt-mocha-istanbul":"^5.0.2","grunt-saucelabs":"^9.0.1","istanbul":"^0.4.5","mocha":"^8.0.1"},"files":["lib"],"homepage":"https://github.com/indutny/elliptic","keywords":["EC","Elliptic","curve","Cryptography"],"license":"MIT","main":"lib/elliptic.js","name":"elliptic","repository":{"type":"git","url":"git+ssh://git@github.com/indutny/elliptic.git"},"scripts":{"lint":"eslint lib test","lint:fix":"npm run lint -- --fix","test":"npm run lint && npm run unit","unit":"istanbul test _mocha --reporter=spec test/index.js","version":"grunt dist && git add dist/"},"version":"6.5.4"}');

});

parcelRequire.register("iEG0Y", function(module, exports) {
"use strict";
var $d94c8dac4d592361$var$utils = module.exports;

var $4H3ep = parcelRequire("4H3ep");

var $eHrxZ = parcelRequire("eHrxZ");

var $ioaAf = parcelRequire("ioaAf");
$d94c8dac4d592361$var$utils.assert = $eHrxZ;
$d94c8dac4d592361$var$utils.toArray = $ioaAf.toArray;
$d94c8dac4d592361$var$utils.zero2 = $ioaAf.zero2;
$d94c8dac4d592361$var$utils.toHex = $ioaAf.toHex;
$d94c8dac4d592361$var$utils.encode = $ioaAf.encode;
// Represent num in a w-NAF form
function $d94c8dac4d592361$var$getNAF(num, w, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);
    var ws = 1 << w + 1;
    var k = num.clone();
    for(var i = 0; i < naf.length; i++){
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
            if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
            else z = mod;
            k.isubn(z);
        } else z = 0;
        naf[i] = z;
        k.iushrn(1);
    }
    return naf;
}
$d94c8dac4d592361$var$utils.getNAF = $d94c8dac4d592361$var$getNAF;
// Represent k1, k2 in a Joint Sparse Form
function $d94c8dac4d592361$var$getJSF(k1, k2) {
    var jsf = [
        [],
        []
    ];
    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    var m8;
    while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){
        // First phase
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3) m14 = -1;
        if (m24 === 3) m24 = -1;
        var u1;
        if ((m14 & 1) === 0) u1 = 0;
        else {
            m8 = k1.andln(7) + d1 & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
            else u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) u2 = 0;
        else {
            m8 = k2.andln(7) + d2 & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
            else u2 = m24;
        }
        jsf[1].push(u2);
        // Second phase
        if (2 * d1 === u1 + 1) d1 = 1 - d1;
        if (2 * d2 === u2 + 1) d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
    }
    return jsf;
}
$d94c8dac4d592361$var$utils.getJSF = $d94c8dac4d592361$var$getJSF;
function $d94c8dac4d592361$var$cachedProperty(obj, name, computer) {
    var key = "_" + name;
    obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
    };
}
$d94c8dac4d592361$var$utils.cachedProperty = $d94c8dac4d592361$var$cachedProperty;
function $d94c8dac4d592361$var$parseBytes(bytes) {
    return typeof bytes === "string" ? $d94c8dac4d592361$var$utils.toArray(bytes, "hex") : bytes;
}
$d94c8dac4d592361$var$utils.parseBytes = $d94c8dac4d592361$var$parseBytes;
function $d94c8dac4d592361$var$intFromLE(bytes) {
    return new $4H3ep(bytes, "hex", "le");
}
$d94c8dac4d592361$var$utils.intFromLE = $d94c8dac4d592361$var$intFromLE;

});
parcelRequire.register("4H3ep", function(module, exports) {

(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = (parcelRequire("XDU19")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});

parcelRequire.register("ioaAf", function(module, exports) {
"use strict";
var $d632ad90185c0a73$var$utils = module.exports;
function $d632ad90185c0a73$var$toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg !== "string") {
        for(var i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
        return res;
    }
    if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0) msg = "0" + msg;
        for(var i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
    } else for(var i = 0; i < msg.length; i++){
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi) res.push(hi, lo);
        else res.push(lo);
    }
    return res;
}
$d632ad90185c0a73$var$utils.toArray = $d632ad90185c0a73$var$toArray;
function $d632ad90185c0a73$var$zero2(word) {
    if (word.length === 1) return "0" + word;
    else return word;
}
$d632ad90185c0a73$var$utils.zero2 = $d632ad90185c0a73$var$zero2;
function $d632ad90185c0a73$var$toHex(msg) {
    var res = "";
    for(var i = 0; i < msg.length; i++)res += $d632ad90185c0a73$var$zero2(msg[i].toString(16));
    return res;
}
$d632ad90185c0a73$var$utils.toHex = $d632ad90185c0a73$var$toHex;
$d632ad90185c0a73$var$utils.encode = function encode(arr, enc) {
    if (enc === "hex") return $d632ad90185c0a73$var$toHex(arr);
    else return arr;
};

});


parcelRequire.register("kT7az", function(module, exports) {
"use strict";
var $f34e8165dd545ed6$var$curve = module.exports;

$f34e8165dd545ed6$var$curve.base = (parcelRequire("jXbl7"));

$f34e8165dd545ed6$var$curve.short = (parcelRequire("4l0lI"));

$f34e8165dd545ed6$var$curve.mont = (parcelRequire("81dBg"));

$f34e8165dd545ed6$var$curve.edwards = (parcelRequire("9iz4N"));

});
parcelRequire.register("jXbl7", function(module, exports) {
"use strict";

var $4H3ep = parcelRequire("4H3ep");

var $iEG0Y = parcelRequire("iEG0Y");
var $e86c52d2b4d83607$var$getNAF = $iEG0Y.getNAF;
var $e86c52d2b4d83607$var$getJSF = $iEG0Y.getJSF;
var $e86c52d2b4d83607$var$assert = $iEG0Y.assert;
function $e86c52d2b4d83607$var$BaseCurve(type, conf) {
    this.type = type;
    this.p = new $4H3ep(conf.p, 16);
    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? $4H3ep.red(conf.prime) : $4H3ep.mont(this.p);
    // Useful for many curves
    this.zero = new $4H3ep(0).toRed(this.red);
    this.one = new $4H3ep(1).toRed(this.red);
    this.two = new $4H3ep(2).toRed(this.red);
    // Curve configuration, optional
    this.n = conf.n && new $4H3ep(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) this.redN = null;
    else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
    }
}
module.exports = $e86c52d2b4d83607$var$BaseCurve;
$e86c52d2b4d83607$var$BaseCurve.prototype.point = function point() {
    throw new Error("Not implemented");
};
$e86c52d2b4d83607$var$BaseCurve.prototype.validate = function validate() {
    throw new Error("Not implemented");
};
$e86c52d2b4d83607$var$BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    $e86c52d2b4d83607$var$assert(p.precomputed);
    var doubles = p._getDoubles();
    var naf = $e86c52d2b4d83607$var$getNAF(k, 1, this._bitLength);
    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    // Translate into more windowed form
    var repr = [];
    var j;
    var nafW;
    for(j = 0; j < naf.length; j += doubles.step){
        nafW = 0;
        for(var l = j + doubles.step - 1; l >= j; l--)nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for(var i = I; i > 0; i--){
        for(j = 0; j < repr.length; j++){
            nafW = repr[j];
            if (nafW === i) b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
    }
    return a.toP();
};
$e86c52d2b4d83607$var$BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    // Get NAF form
    var naf = $e86c52d2b4d83607$var$getNAF(k, w, this._bitLength);
    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for(var i = naf.length - 1; i >= 0; i--){
        // Count zeroes
        for(var l = 0; i >= 0 && naf[i] === 0; i--)l++;
        if (i >= 0) l++;
        acc = acc.dblp(l);
        if (i < 0) break;
        var z = naf[i];
        $e86c52d2b4d83607$var$assert(z !== 0);
        if (p.type === "affine") {
            // J +- P
            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);
            else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else // J +- J
        if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);
        else acc = acc.add(wnd[-z - 1 >> 1].neg());
    }
    return p.type === "affine" ? acc.toP() : acc;
};
$e86c52d2b4d83607$var$BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    // Fill all arrays
    var max = 0;
    var i;
    var j;
    var p;
    for(i = 0; i < len; i++){
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
    }
    // Comb small window NAFs
    for(i = len - 1; i >= 1; i -= 2){
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = $e86c52d2b4d83607$var$getNAF(coeffs[a], wndWidth[a], this._bitLength);
            naf[b] = $e86c52d2b4d83607$var$getNAF(coeffs[b], wndWidth[b], this._bitLength);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
        }
        var comb = [
            points[a],
            /* 1 */ null,
            /* 3 */ null,
            /* 5 */ points[b]
        ];
        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
        } else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
            -3,
            /* -1 -1 */ -1,
            /* -1 0 */ -5,
            /* -1 1 */ -7,
            /* 0 -1 */ 0,
            /* 0 0 */ 7,
            /* 0 1 */ 5,
            /* 1 -1 */ 1,
            /* 1 0 */ 3
        ];
        var jsf = $e86c52d2b4d83607$var$getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for(j = 0; j < max; j++){
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;
            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
        }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for(i = max; i >= 0; i--){
        var k = 0;
        while(i >= 0){
            var zero = true;
            for(j = 0; j < len; j++){
                tmp[j] = naf[j][i] | 0;
                if (tmp[j] !== 0) zero = false;
            }
            if (!zero) break;
            k++;
            i--;
        }
        if (i >= 0) k++;
        acc = acc.dblp(k);
        if (i < 0) break;
        for(j = 0; j < len; j++){
            var z = tmp[j];
            p;
            if (z === 0) continue;
            else if (z > 0) p = wnd[j][z - 1 >> 1];
            else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
            if (p.type === "affine") acc = acc.mixedAdd(p);
            else acc = acc.add(p);
        }
    }
    // Zeroify references
    for(i = 0; i < len; i++)wnd[i] = null;
    if (jacobianResult) return acc;
    else return acc.toP();
};
function $e86c52d2b4d83607$var$BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
}
$e86c52d2b4d83607$var$BaseCurve.BasePoint = $e86c52d2b4d83607$var$BasePoint;
$e86c52d2b4d83607$var$BasePoint.prototype.eq = function eq() {
    throw new Error("Not implemented");
};
$e86c52d2b4d83607$var$BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
};
$e86c52d2b4d83607$var$BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = $iEG0Y.toArray(bytes, enc);
    var len = this.p.byteLength();
    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06) $e86c52d2b4d83607$var$assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07) $e86c52d2b4d83607$var$assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
        return res;
    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
    throw new Error("Unknown point format");
};
$e86c52d2b4d83607$var$BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
};
$e86c52d2b4d83607$var$BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray("be", len);
    if (compact) return [
        this.getY().isEven() ? 0x02 : 0x03
    ].concat(x);
    return [
        0x04
    ].concat(x, this.getY().toArray("be", len));
};
$e86c52d2b4d83607$var$BasePoint.prototype.encode = function encode(enc, compact) {
    return $iEG0Y.encode(this._encode(compact), enc);
};
$e86c52d2b4d83607$var$BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed) return this;
    var precomputed = {
        doubles: null,
        naf: null,
        beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
};
$e86c52d2b4d83607$var$BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed) return false;
    var doubles = this.precomputed.doubles;
    if (!doubles) return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};
$e86c52d2b4d83607$var$BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
    var doubles = [
        this
    ];
    var acc = this;
    for(var i = 0; i < power; i += step){
        for(var j = 0; j < step; j++)acc = acc.dbl();
        doubles.push(acc);
    }
    return {
        step: step,
        points: doubles
    };
};
$e86c52d2b4d83607$var$BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
    var res = [
        this
    ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl);
    return {
        wnd: wnd,
        points: res
    };
};
$e86c52d2b4d83607$var$BasePoint.prototype._getBeta = function _getBeta() {
    return null;
};
$e86c52d2b4d83607$var$BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for(var i = 0; i < k; i++)r = r.dbl();
    return r;
};

});

parcelRequire.register("4l0lI", function(module, exports) {
"use strict";

var $iEG0Y = parcelRequire("iEG0Y");

var $4H3ep = parcelRequire("4H3ep");

var $6QnvD = parcelRequire("6QnvD");

var $jXbl7 = parcelRequire("jXbl7");
var $328964ee9284e903$var$assert = $iEG0Y.assert;
function $328964ee9284e903$var$ShortCurve(conf) {
    $jXbl7.call(this, "short", conf);
    this.a = new $4H3ep(conf.a, 16).toRed(this.red);
    this.b = new $4H3ep(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
}
$6QnvD($328964ee9284e903$var$ShortCurve, $jXbl7);
module.exports = $328964ee9284e903$var$ShortCurve;
$328964ee9284e903$var$ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;
    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) beta = new $4H3ep(conf.beta, 16).toRed(this.red);
    else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
    }
    if (conf.lambda) lambda = new $4H3ep(conf.lambda, 16);
    else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) lambda = lambdas[0];
        else {
            lambda = lambdas[1];
            $328964ee9284e903$var$assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
    }
    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) basis = conf.basis.map(function(vec) {
        return {
            a: new $4H3ep(vec.a, 16),
            b: new $4H3ep(vec.b, 16)
        };
    });
    else basis = this._getEndoBasis(lambda);
    return {
        beta: beta,
        lambda: lambda,
        basis: basis
    };
};
$328964ee9284e903$var$ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : $4H3ep.mont(num);
    var tinv = new $4H3ep(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s = new $4H3ep(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [
        l1,
        l2
    ];
};
$328964ee9284e903$var$ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new $4H3ep(1);
    var y1 = new $4H3ep(0);
    var x2 = new $4H3ep(0);
    var y2 = new $4H3ep(1);
    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r;
    var x;
    while(u.cmpn(0) !== 0){
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x;
        } else if (a1 && ++i === 2) break;
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
    }
    a2 = r.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
    }
    // Normalize signs
    if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
    }
    if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
    }
    return [
        {
            a: a1,
            b: b1
        },
        {
            a: a2,
            b: b2
        }
    ];
};
$328964ee9284e903$var$ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return {
        k1: k1,
        k2: k2
    };
};
$328964ee9284e903$var$ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new $4H3ep(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error("invalid point");
    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
$328964ee9284e903$var$ShortCurve.prototype.validate = function validate(point) {
    if (point.inf) return true;
    var x = point.x;
    var y = point.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
};
$328964ee9284e903$var$ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for(var i = 0; i < points.length; i++){
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
        }
        if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
    // Clean-up references to points and coefficients
    for(var j = 0; j < i * 2; j++){
        npoints[j] = null;
        ncoeffs[j] = null;
    }
    return res;
};
function $328964ee9284e903$var$Point(curve, x, y, isRed) {
    $jXbl7.BasePoint.call(this, curve, "affine");
    if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
    } else {
        this.x = new $4H3ep(x, 16);
        this.y = new $4H3ep(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
        }
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        this.inf = false;
    }
}
$6QnvD($328964ee9284e903$var$Point, $jXbl7.BasePoint);
$328964ee9284e903$var$ShortCurve.prototype.point = function point(x, y, isRed) {
    return new $328964ee9284e903$var$Point(this, x, y, isRed);
};
$328964ee9284e903$var$ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return $328964ee9284e903$var$Point.fromJSON(this, obj, red);
};
$328964ee9284e903$var$Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo) return;
    var pre = this.precomputed;
    if (pre && pre.beta) return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
            beta: null,
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(endoMul)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(endoMul)
            }
        };
    }
    return beta;
};
$328964ee9284e903$var$Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed) return [
        this.x,
        this.y
    ];
    return [
        this.x,
        this.y,
        this.precomputed && {
            doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
            },
            naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
            }
        }
    ];
};
$328964ee9284e903$var$Point.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === "string") obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2]) return res;
    function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
    }
    var pre = obj[2];
    res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [
                res
            ].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [
                res
            ].concat(pre.naf.points.map(obj2point))
        }
    };
    return res;
};
$328964ee9284e903$var$Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
};
$328964ee9284e903$var$Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
};
$328964ee9284e903$var$Point.prototype.add = function add(p) {
    // O + P = P
    if (this.inf) return p;
    // P + O = P
    if (p.inf) return this;
    // P + P = 2P
    if (this.eq(p)) return this.dbl();
    // P + (-P) = O
    if (this.neg().eq(p)) return this.curve.point(null, null);
    // P + Q = O
    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
$328964ee9284e903$var$Point.prototype.dbl = function dbl() {
    if (this.inf) return this;
    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
$328964ee9284e903$var$Point.prototype.getX = function getX() {
    return this.x.fromRed();
};
$328964ee9284e903$var$Point.prototype.getY = function getY() {
    return this.y.fromRed();
};
$328964ee9284e903$var$Point.prototype.mul = function mul(k) {
    k = new $4H3ep(k, 16);
    if (this.isInfinity()) return this;
    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo) return this.curve._endoWnafMulAdd([
        this
    ], [
        k
    ]);
    else return this.curve._wnafMul(this, k);
};
$328964ee9284e903$var$Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};
$328964ee9284e903$var$Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};
$328964ee9284e903$var$Point.prototype.eq = function eq(p) {
    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};
$328964ee9284e903$var$Point.prototype.neg = function neg(_precompute) {
    if (this.inf) return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
            return p.neg();
        };
        res.precomputed = {
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(negate)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(negate)
            }
        };
    }
    return res;
};
$328964ee9284e903$var$Point.prototype.toJ = function toJ() {
    if (this.inf) return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
};
function $328964ee9284e903$var$JPoint(curve, x, y, z) {
    $jXbl7.BasePoint.call(this, curve, "jacobian");
    if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new $4H3ep(0);
    } else {
        this.x = new $4H3ep(x, 16);
        this.y = new $4H3ep(y, 16);
        this.z = new $4H3ep(z, 16);
    }
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
}
$6QnvD($328964ee9284e903$var$JPoint, $jXbl7.BasePoint);
$328964ee9284e903$var$ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new $328964ee9284e903$var$JPoint(this, x, y, z);
};
$328964ee9284e903$var$JPoint.prototype.toP = function toP() {
    if (this.isInfinity()) return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
};
$328964ee9284e903$var$JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
$328964ee9284e903$var$JPoint.prototype.add = function add(p) {
    // O + P = P
    if (this.isInfinity()) return p;
    // P + O = P
    if (p.isInfinity()) return this;
    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
$328964ee9284e903$var$JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity()) return p.toJ();
    // P + O = P
    if (p.isInfinity()) return this;
    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
$328964ee9284e903$var$JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0) return this;
    if (this.isInfinity()) return this;
    if (!pow) return this.dbl();
    var i;
    if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for(i = 0; i < pow; i++)r = r.dbl();
        return r;
    }
    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    // Reuse results
    var jyd = jy.redAdd(jy);
    for(i = 0; i < pow; i++){
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};
$328964ee9284e903$var$JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    if (this.curve.zeroA) return this._zeroDbl();
    else if (this.curve.threeA) return this._threeDbl();
    else return this._dbl();
};
$328964ee9284e903$var$JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);
        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A
        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();
        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
};
$328964ee9284e903$var$JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S
        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
};
$328964ee9284e903$var$JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
};
$328964ee9284e903$var$JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA) return this.dbl().add(this);
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...
    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
};
$328964ee9284e903$var$JPoint.prototype.mul = function mul(k, kbase) {
    k = new $4H3ep(k, kbase);
    return this.curve._wnafMul(this, k);
};
$328964ee9284e903$var$JPoint.prototype.eq = function eq(p) {
    if (p.type === "affine") return this.eq(p.toJ());
    if (this === p) return true;
    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;
    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};
$328964ee9284e903$var$JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
$328964ee9284e903$var$JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC JPoint Infinity>";
    return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
};
$328964ee9284e903$var$JPoint.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};

});

parcelRequire.register("81dBg", function(module, exports) {
"use strict";

var $4H3ep = parcelRequire("4H3ep");

var $6QnvD = parcelRequire("6QnvD");

var $jXbl7 = parcelRequire("jXbl7");

var $iEG0Y = parcelRequire("iEG0Y");
function $5d68f769b053aa68$var$MontCurve(conf) {
    $jXbl7.call(this, "mont", conf);
    this.a = new $4H3ep(conf.a, 16).toRed(this.red);
    this.b = new $4H3ep(conf.b, 16).toRed(this.red);
    this.i4 = new $4H3ep(4).toRed(this.red).redInvm();
    this.two = new $4H3ep(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
$6QnvD($5d68f769b053aa68$var$MontCurve, $jXbl7);
module.exports = $5d68f769b053aa68$var$MontCurve;
$5d68f769b053aa68$var$MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();
    return y.redSqr().cmp(rhs) === 0;
};
function $5d68f769b053aa68$var$Point(curve, x, z) {
    $jXbl7.BasePoint.call(this, curve, "projective");
    if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
    } else {
        this.x = new $4H3ep(x, 16);
        this.z = new $4H3ep(z, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    }
}
$6QnvD($5d68f769b053aa68$var$Point, $jXbl7.BasePoint);
$5d68f769b053aa68$var$MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point($iEG0Y.toArray(bytes, enc), 1);
};
$5d68f769b053aa68$var$MontCurve.prototype.point = function point(x, z) {
    return new $5d68f769b053aa68$var$Point(this, x, z);
};
$5d68f769b053aa68$var$MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return $5d68f769b053aa68$var$Point.fromJSON(this, obj);
};
$5d68f769b053aa68$var$Point.prototype.precompute = function precompute() {
// No-op
};
$5d68f769b053aa68$var$Point.prototype._encode = function _encode() {
    return this.getX().toArray("be", this.curve.p.byteLength());
};
$5d68f769b053aa68$var$Point.fromJSON = function fromJSON(curve, obj) {
    return new $5d68f769b053aa68$var$Point(curve, obj[0], obj[1] || curve.one);
};
$5d68f769b053aa68$var$Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
};
$5d68f769b053aa68$var$Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};
$5d68f769b053aa68$var$Point.prototype.dbl = function dbl() {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A
    // A = X1 + Z1
    var a = this.x.redAdd(this.z);
    // AA = A^2
    var aa = a.redSqr();
    // B = X1 - Z1
    var b = this.x.redSub(this.z);
    // BB = B^2
    var bb = b.redSqr();
    // C = AA - BB
    var c = aa.redSub(bb);
    // X3 = AA * BB
    var nx = aa.redMul(bb);
    // Z3 = C * (BB + A24 * C)
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
};
$5d68f769b053aa68$var$Point.prototype.add = function add() {
    throw new Error("Not supported on Montgomery curve");
};
$5d68f769b053aa68$var$Point.prototype.diffAdd = function diffAdd(p, diff) {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A
    // A = X2 + Z2
    var a = this.x.redAdd(this.z);
    // B = X2 - Z2
    var b = this.x.redSub(this.z);
    // C = X3 + Z3
    var c = p.x.redAdd(p.z);
    // D = X3 - Z3
    var d = p.x.redSub(p.z);
    // DA = D * A
    var da = d.redMul(a);
    // CB = C * B
    var cb = c.redMul(b);
    // X5 = Z1 * (DA + CB)^2
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    // Z5 = X1 * (DA - CB)^2
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
};
$5d68f769b053aa68$var$Point.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this; // (N / 2) * Q + Q
    var b = this.curve.point(null, null); // (N / 2) * Q
    var c = this; // Q
    for(var bits = []; t.cmpn(0) !== 0; t.iushrn(1))bits.push(t.andln(1));
    for(var i = bits.length - 1; i >= 0; i--)if (bits[i] === 0) {
        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
        a = a.diffAdd(b, c);
        // N * Q = 2 * ((N / 2) * Q + Q))
        b = b.dbl();
    } else {
        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
        b = a.diffAdd(b, c);
        // N * Q + Q = 2 * ((N / 2) * Q + Q)
        a = a.dbl();
    }
    return b;
};
$5d68f769b053aa68$var$Point.prototype.mulAdd = function mulAdd() {
    throw new Error("Not supported on Montgomery curve");
};
$5d68f769b053aa68$var$Point.prototype.jumlAdd = function jumlAdd() {
    throw new Error("Not supported on Montgomery curve");
};
$5d68f769b053aa68$var$Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
};
$5d68f769b053aa68$var$Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
};
$5d68f769b053aa68$var$Point.prototype.getX = function getX() {
    // Normalize coordinates
    this.normalize();
    return this.x.fromRed();
};

});

parcelRequire.register("9iz4N", function(module, exports) {
"use strict";

var $iEG0Y = parcelRequire("iEG0Y");

var $4H3ep = parcelRequire("4H3ep");

var $6QnvD = parcelRequire("6QnvD");

var $jXbl7 = parcelRequire("jXbl7");
var $6c5100ea3de8f5ff$var$assert = $iEG0Y.assert;
function $6c5100ea3de8f5ff$var$EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    $jXbl7.call(this, "edwards", conf);
    this.a = new $4H3ep(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new $4H3ep(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new $4H3ep(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    $6c5100ea3de8f5ff$var$assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
}
$6QnvD($6c5100ea3de8f5ff$var$EdwardsCurve, $jXbl7);
module.exports = $6c5100ea3de8f5ff$var$EdwardsCurve;
$6c5100ea3de8f5ff$var$EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA) return num.redNeg();
    else return this.a.redMul(num);
};
$6c5100ea3de8f5ff$var$EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC) return num;
    else return this.c.redMul(num);
};
// Just for compatibility with Short curve
$6c5100ea3de8f5ff$var$EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
};
$6c5100ea3de8f5ff$var$EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new $4H3ep(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error("invalid point");
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
$6c5100ea3de8f5ff$var$EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new $4H3ep(y, 16);
    if (!y.red) y = y.toRed(this.red);
    // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.c2);
    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x2 = lhs.redMul(rhs.redInvm());
    if (x2.cmp(this.zero) === 0) {
        if (odd) throw new Error("invalid point");
        else return this.point(this.zero, y);
    }
    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error("invalid point");
    if (x.fromRed().isOdd() !== odd) x = x.redNeg();
    return this.point(x, y);
};
$6c5100ea3de8f5ff$var$EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity()) return true;
    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
};
function $6c5100ea3de8f5ff$var$Point(curve, x, y, z, t) {
    $jXbl7.BasePoint.call(this, curve, "projective");
    if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
    } else {
        this.x = new $4H3ep(x, 16);
        this.y = new $4H3ep(y, 16);
        this.z = z ? new $4H3ep(z, 16) : this.curve.one;
        this.t = t && new $4H3ep(t, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        // Use extended coordinates
        if (this.curve.extended && !this.t) {
            this.t = this.x.redMul(this.y);
            if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
        }
    }
}
$6QnvD($6c5100ea3de8f5ff$var$Point, $jXbl7.BasePoint);
$6c5100ea3de8f5ff$var$EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return $6c5100ea3de8f5ff$var$Point.fromJSON(this, obj);
};
$6c5100ea3de8f5ff$var$EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new $6c5100ea3de8f5ff$var$Point(this, x, y, z, t);
};
$6c5100ea3de8f5ff$var$Point.fromJSON = function fromJSON(curve, obj) {
    return new $6c5100ea3de8f5ff$var$Point(curve, obj[0], obj[1], obj[2]);
};
$6c5100ea3de8f5ff$var$Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
};
$6c5100ea3de8f5ff$var$Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
};
$6c5100ea3de8f5ff$var$Point.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S
    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
$6c5100ea3de8f5ff$var$Point.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S
    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    var e;
    var h;
    var j;
    if (this.curve.twisted) {
        // E = a * C
        e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
            // X3 = (B - C - D) * (F - 2)
            nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F^2 - 2 * F
            nz = f.redSqr().redSub(f).redSub(f);
        } else {
            // H = Z1^2
            h = this.z.redSqr();
            // J = F - 2 * H
            j = f.redSub(h).redISub(h);
            // X3 = (B-C-D)*J
            nx = b.redSub(c).redISub(d).redMul(j);
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F * J
            nz = f.redMul(j);
        }
    } else {
        // E = C + D
        e = c.redAdd(d);
        // H = (c * Z1)^2
        h = this.curve._mulC(this.z).redSqr();
        // J = E - 2 * H
        j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
};
$6c5100ea3de8f5ff$var$Point.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    // Double in extended coordinates
    if (this.curve.extended) return this._extDbl();
    else return this._projDbl();
};
$6c5100ea3de8f5ff$var$Point.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M
    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
$6c5100ea3de8f5ff$var$Point.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S
    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
    } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
};
$6c5100ea3de8f5ff$var$Point.prototype.add = function add(p) {
    if (this.isInfinity()) return p;
    if (p.isInfinity()) return this;
    if (this.curve.extended) return this._extAdd(p);
    else return this._projAdd(p);
};
$6c5100ea3de8f5ff$var$Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else return this.curve._wnafMul(this, k);
};
$6c5100ea3de8f5ff$var$Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, false);
};
$6c5100ea3de8f5ff$var$Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, true);
};
$6c5100ea3de8f5ff$var$Point.prototype.normalize = function normalize() {
    if (this.zOne) return this;
    // Normalize coordinates
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t) this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
};
$6c5100ea3de8f5ff$var$Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
};
$6c5100ea3de8f5ff$var$Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
};
$6c5100ea3de8f5ff$var$Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
};
$6c5100ea3de8f5ff$var$Point.prototype.eq = function eq(other) {
    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
};
$6c5100ea3de8f5ff$var$Point.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
// Compatibility with BaseCurve
$6c5100ea3de8f5ff$var$Point.prototype.toP = $6c5100ea3de8f5ff$var$Point.prototype.normalize;
$6c5100ea3de8f5ff$var$Point.prototype.mixedAdd = $6c5100ea3de8f5ff$var$Point.prototype.add;

});


parcelRequire.register("dq3BX", function(module, exports) {
"use strict";
var $9c508130216f0f0e$var$curves = module.exports;

var $PVPdV = parcelRequire("PVPdV");

var $kT7az = parcelRequire("kT7az");

var $iEG0Y = parcelRequire("iEG0Y");
var $9c508130216f0f0e$var$assert = $iEG0Y.assert;
function $9c508130216f0f0e$var$PresetCurve(options) {
    if (options.type === "short") this.curve = new $kT7az.short(options);
    else if (options.type === "edwards") this.curve = new $kT7az.edwards(options);
    else this.curve = new $kT7az.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    $9c508130216f0f0e$var$assert(this.g.validate(), "Invalid curve");
    $9c508130216f0f0e$var$assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
}
$9c508130216f0f0e$var$curves.PresetCurve = $9c508130216f0f0e$var$PresetCurve;
function $9c508130216f0f0e$var$defineCurve(name, options) {
    Object.defineProperty($9c508130216f0f0e$var$curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
            var curve = new $9c508130216f0f0e$var$PresetCurve(options);
            Object.defineProperty($9c508130216f0f0e$var$curves, name, {
                configurable: true,
                enumerable: true,
                value: curve
            });
            return curve;
        }
    });
}
$9c508130216f0f0e$var$defineCurve("p192", {
    type: "short",
    prime: "p192",
    p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
    b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
    n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
    hash: $PVPdV.sha256,
    gRed: false,
    g: [
        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
    ]
});
$9c508130216f0f0e$var$defineCurve("p224", {
    type: "short",
    prime: "p224",
    p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
    a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
    b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
    n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
    hash: $PVPdV.sha256,
    gRed: false,
    g: [
        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
    ]
});
$9c508130216f0f0e$var$defineCurve("p256", {
    type: "short",
    prime: null,
    p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
    a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
    b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
    n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
    hash: $PVPdV.sha256,
    gRed: false,
    g: [
        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
    ]
});
$9c508130216f0f0e$var$defineCurve("p384", {
    type: "short",
    prime: null,
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
    hash: $PVPdV.sha384,
    gRed: false,
    g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
    ]
});
$9c508130216f0f0e$var$defineCurve("p521", {
    type: "short",
    prime: null,
    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
    hash: $PVPdV.sha512,
    gRed: false,
    g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
    ]
});
$9c508130216f0f0e$var$defineCurve("curve25519", {
    type: "mont",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "76d06",
    b: "1",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: $PVPdV.sha256,
    gRed: false,
    g: [
        "9"
    ]
});
$9c508130216f0f0e$var$defineCurve("ed25519", {
    type: "edwards",
    prime: "p25519",
    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
    a: "-1",
    c: "1",
    // -121665 * (121666^(-1)) (mod P)
    d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
    hash: $PVPdV.sha256,
    gRed: false,
    g: [
        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
        // 4/5
        "6666666666666666666666666666666666666666666666666666666666666658"
    ]
});
var $9c508130216f0f0e$var$pre;

try {
    $9c508130216f0f0e$var$pre = (parcelRequire("13erg"));
} catch (e) {
    $9c508130216f0f0e$var$pre = undefined;
}
$9c508130216f0f0e$var$defineCurve("secp256k1", {
    type: "short",
    prime: "k256",
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
    a: "0",
    b: "7",
    n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
    h: "1",
    hash: $PVPdV.sha256,
    // Precomputed endomorphism
    beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
    lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
    basis: [
        {
            a: "3086d221a7d46bcde86c90e49284eb15",
            b: "-e4437ed6010e88286f547fa90abfe4c3"
        },
        {
            a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
            b: "3086d221a7d46bcde86c90e49284eb15"
        }
    ],
    gRed: false,
    g: [
        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
        $9c508130216f0f0e$var$pre
    ]
});

});
parcelRequire.register("PVPdV", function(module, exports) {
var $09c19e69af746b43$var$hash = module.exports;

$09c19e69af746b43$var$hash.utils = (parcelRequire("4jzrq"));

$09c19e69af746b43$var$hash.common = (parcelRequire("f17Fx"));

$09c19e69af746b43$var$hash.sha = (parcelRequire("9hihG"));

$09c19e69af746b43$var$hash.ripemd = (parcelRequire("1Jj3c"));

$09c19e69af746b43$var$hash.hmac = (parcelRequire("60A7N"));
// Proxy hash functions to the main object
$09c19e69af746b43$var$hash.sha1 = $09c19e69af746b43$var$hash.sha.sha1;
$09c19e69af746b43$var$hash.sha256 = $09c19e69af746b43$var$hash.sha.sha256;
$09c19e69af746b43$var$hash.sha224 = $09c19e69af746b43$var$hash.sha.sha224;
$09c19e69af746b43$var$hash.sha384 = $09c19e69af746b43$var$hash.sha.sha384;
$09c19e69af746b43$var$hash.sha512 = $09c19e69af746b43$var$hash.sha.sha512;
$09c19e69af746b43$var$hash.ripemd160 = $09c19e69af746b43$var$hash.ripemd.ripemd160;

});
parcelRequire.register("4jzrq", function(module, exports) {

$parcel$export(module.exports, "inherits", () => $32446db57ca26dcf$export$69f1b2dcda23c5f8, (v) => $32446db57ca26dcf$export$69f1b2dcda23c5f8 = v);
$parcel$export(module.exports, "toArray", () => $32446db57ca26dcf$export$45b10814cc054894, (v) => $32446db57ca26dcf$export$45b10814cc054894 = v);
$parcel$export(module.exports, "toHex", () => $32446db57ca26dcf$export$7ea66e3774a60b67, (v) => $32446db57ca26dcf$export$7ea66e3774a60b67 = v);
$parcel$export(module.exports, "htonl", () => $32446db57ca26dcf$export$34a52f00f601f6f1, (v) => $32446db57ca26dcf$export$34a52f00f601f6f1 = v);
$parcel$export(module.exports, "toHex32", () => $32446db57ca26dcf$export$812b0cbd5e8a72ab, (v) => $32446db57ca26dcf$export$812b0cbd5e8a72ab = v);
$parcel$export(module.exports, "zero2", () => $32446db57ca26dcf$export$f24f9e11d63bb314, (v) => $32446db57ca26dcf$export$f24f9e11d63bb314 = v);
$parcel$export(module.exports, "zero8", () => $32446db57ca26dcf$export$b71357c7e07ca1f1, (v) => $32446db57ca26dcf$export$b71357c7e07ca1f1 = v);
$parcel$export(module.exports, "join32", () => $32446db57ca26dcf$export$2e58a4b541fdcbe8, (v) => $32446db57ca26dcf$export$2e58a4b541fdcbe8 = v);
$parcel$export(module.exports, "split32", () => $32446db57ca26dcf$export$183b950bde9faab8, (v) => $32446db57ca26dcf$export$183b950bde9faab8 = v);
$parcel$export(module.exports, "rotr32", () => $32446db57ca26dcf$export$4785c77169fea59e, (v) => $32446db57ca26dcf$export$4785c77169fea59e = v);
$parcel$export(module.exports, "rotl32", () => $32446db57ca26dcf$export$242a185dfcffac5b, (v) => $32446db57ca26dcf$export$242a185dfcffac5b = v);
$parcel$export(module.exports, "sum32", () => $32446db57ca26dcf$export$58c04ae0ae31877d, (v) => $32446db57ca26dcf$export$58c04ae0ae31877d = v);
$parcel$export(module.exports, "sum32_3", () => $32446db57ca26dcf$export$d058ca695f8c6f11, (v) => $32446db57ca26dcf$export$d058ca695f8c6f11 = v);
$parcel$export(module.exports, "sum32_4", () => $32446db57ca26dcf$export$a1efd7fc3e986367, (v) => $32446db57ca26dcf$export$a1efd7fc3e986367 = v);
$parcel$export(module.exports, "sum32_5", () => $32446db57ca26dcf$export$bbfea4a2b5abaab4, (v) => $32446db57ca26dcf$export$bbfea4a2b5abaab4 = v);
$parcel$export(module.exports, "sum64", () => $32446db57ca26dcf$export$97ad4afc7de86152, (v) => $32446db57ca26dcf$export$97ad4afc7de86152 = v);
$parcel$export(module.exports, "sum64_hi", () => $32446db57ca26dcf$export$ce4673d9a79f6a4b, (v) => $32446db57ca26dcf$export$ce4673d9a79f6a4b = v);
$parcel$export(module.exports, "sum64_lo", () => $32446db57ca26dcf$export$786cc99fc6eedc0b, (v) => $32446db57ca26dcf$export$786cc99fc6eedc0b = v);
$parcel$export(module.exports, "sum64_4_hi", () => $32446db57ca26dcf$export$45c59b9a1848dd0, (v) => $32446db57ca26dcf$export$45c59b9a1848dd0 = v);
$parcel$export(module.exports, "sum64_4_lo", () => $32446db57ca26dcf$export$50d8f613e76d3034, (v) => $32446db57ca26dcf$export$50d8f613e76d3034 = v);
$parcel$export(module.exports, "sum64_5_hi", () => $32446db57ca26dcf$export$b8e83683c60ee162, (v) => $32446db57ca26dcf$export$b8e83683c60ee162 = v);
$parcel$export(module.exports, "sum64_5_lo", () => $32446db57ca26dcf$export$aeeb51790d1bcc4a, (v) => $32446db57ca26dcf$export$aeeb51790d1bcc4a = v);
$parcel$export(module.exports, "rotr64_hi", () => $32446db57ca26dcf$export$bb7c616f719ad9c, (v) => $32446db57ca26dcf$export$bb7c616f719ad9c = v);
$parcel$export(module.exports, "rotr64_lo", () => $32446db57ca26dcf$export$4d63290824f9d7df, (v) => $32446db57ca26dcf$export$4d63290824f9d7df = v);
$parcel$export(module.exports, "shr64_hi", () => $32446db57ca26dcf$export$2f64ceb90ef28ea1, (v) => $32446db57ca26dcf$export$2f64ceb90ef28ea1 = v);
$parcel$export(module.exports, "shr64_lo", () => $32446db57ca26dcf$export$8d2089d465f6d10d, (v) => $32446db57ca26dcf$export$8d2089d465f6d10d = v);
var $32446db57ca26dcf$export$69f1b2dcda23c5f8;
var $32446db57ca26dcf$export$45b10814cc054894;
var $32446db57ca26dcf$export$7ea66e3774a60b67;
var $32446db57ca26dcf$export$34a52f00f601f6f1;
var $32446db57ca26dcf$export$812b0cbd5e8a72ab;
var $32446db57ca26dcf$export$f24f9e11d63bb314;
var $32446db57ca26dcf$export$b71357c7e07ca1f1;
var $32446db57ca26dcf$export$2e58a4b541fdcbe8;
var $32446db57ca26dcf$export$183b950bde9faab8;
var $32446db57ca26dcf$export$4785c77169fea59e;
var $32446db57ca26dcf$export$242a185dfcffac5b;
var $32446db57ca26dcf$export$58c04ae0ae31877d;
var $32446db57ca26dcf$export$d058ca695f8c6f11;
var $32446db57ca26dcf$export$a1efd7fc3e986367;
var $32446db57ca26dcf$export$bbfea4a2b5abaab4;
var $32446db57ca26dcf$export$97ad4afc7de86152;
var $32446db57ca26dcf$export$ce4673d9a79f6a4b;
var $32446db57ca26dcf$export$786cc99fc6eedc0b;
var $32446db57ca26dcf$export$45c59b9a1848dd0;
var $32446db57ca26dcf$export$50d8f613e76d3034;
var $32446db57ca26dcf$export$b8e83683c60ee162;
var $32446db57ca26dcf$export$aeeb51790d1bcc4a;
var $32446db57ca26dcf$export$bb7c616f719ad9c;
var $32446db57ca26dcf$export$4d63290824f9d7df;
var $32446db57ca26dcf$export$2f64ceb90ef28ea1;
var $32446db57ca26dcf$export$8d2089d465f6d10d;
"use strict";

var $eHrxZ = parcelRequire("eHrxZ");

var $6QnvD = parcelRequire("6QnvD");
$32446db57ca26dcf$export$69f1b2dcda23c5f8 = $6QnvD;
function $32446db57ca26dcf$var$isSurrogatePair(msg, i) {
    if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) return false;
    if (i < 0 || i + 1 >= msg.length) return false;
    return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}
function $32446db57ca26dcf$var$toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg === "string") {
        if (!enc) {
            // Inspired by stringToUtf8ByteArray() in closure-library by Google
            // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
            // Apache License 2.0
            // https://github.com/google/closure-library/blob/master/LICENSE
            var p = 0;
            for(var i = 0; i < msg.length; i++){
                var c = msg.charCodeAt(i);
                if (c < 128) res[p++] = c;
                else if (c < 2048) {
                    res[p++] = c >> 6 | 192;
                    res[p++] = c & 63 | 128;
                } else if ($32446db57ca26dcf$var$isSurrogatePair(msg, i)) {
                    c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
                    res[p++] = c >> 18 | 240;
                    res[p++] = c >> 12 & 63 | 128;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                } else {
                    res[p++] = c >> 12 | 224;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                }
            }
        } else if (enc === "hex") {
            msg = msg.replace(/[^a-z0-9]+/ig, "");
            if (msg.length % 2 !== 0) msg = "0" + msg;
            for(i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
    } else for(i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
    return res;
}
$32446db57ca26dcf$export$45b10814cc054894 = $32446db57ca26dcf$var$toArray;
function $32446db57ca26dcf$var$toHex(msg) {
    var res = "";
    for(var i = 0; i < msg.length; i++)res += $32446db57ca26dcf$var$zero2(msg[i].toString(16));
    return res;
}
$32446db57ca26dcf$export$7ea66e3774a60b67 = $32446db57ca26dcf$var$toHex;
function $32446db57ca26dcf$var$htonl(w) {
    var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
    return res >>> 0;
}
$32446db57ca26dcf$export$34a52f00f601f6f1 = $32446db57ca26dcf$var$htonl;
function $32446db57ca26dcf$var$toHex32(msg, endian) {
    var res = "";
    for(var i = 0; i < msg.length; i++){
        var w = msg[i];
        if (endian === "little") w = $32446db57ca26dcf$var$htonl(w);
        res += $32446db57ca26dcf$var$zero8(w.toString(16));
    }
    return res;
}
$32446db57ca26dcf$export$812b0cbd5e8a72ab = $32446db57ca26dcf$var$toHex32;
function $32446db57ca26dcf$var$zero2(word) {
    if (word.length === 1) return "0" + word;
    else return word;
}
$32446db57ca26dcf$export$f24f9e11d63bb314 = $32446db57ca26dcf$var$zero2;
function $32446db57ca26dcf$var$zero8(word) {
    if (word.length === 7) return "0" + word;
    else if (word.length === 6) return "00" + word;
    else if (word.length === 5) return "000" + word;
    else if (word.length === 4) return "0000" + word;
    else if (word.length === 3) return "00000" + word;
    else if (word.length === 2) return "000000" + word;
    else if (word.length === 1) return "0000000" + word;
    else return word;
}
$32446db57ca26dcf$export$b71357c7e07ca1f1 = $32446db57ca26dcf$var$zero8;
function $32446db57ca26dcf$var$join32(msg, start, end, endian) {
    var len = end - start;
    $eHrxZ(len % 4 === 0);
    var res = new Array(len / 4);
    for(var i = 0, k = start; i < res.length; i++, k += 4){
        var w;
        if (endian === "big") w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
    }
    return res;
}
$32446db57ca26dcf$export$2e58a4b541fdcbe8 = $32446db57ca26dcf$var$join32;
function $32446db57ca26dcf$var$split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for(var i = 0, k = 0; i < msg.length; i++, k += 4){
        var m = msg[i];
        if (endian === "big") {
            res[k] = m >>> 24;
            res[k + 1] = m >>> 16 & 0xff;
            res[k + 2] = m >>> 8 & 0xff;
            res[k + 3] = m & 0xff;
        } else {
            res[k + 3] = m >>> 24;
            res[k + 2] = m >>> 16 & 0xff;
            res[k + 1] = m >>> 8 & 0xff;
            res[k] = m & 0xff;
        }
    }
    return res;
}
$32446db57ca26dcf$export$183b950bde9faab8 = $32446db57ca26dcf$var$split32;
function $32446db57ca26dcf$var$rotr32(w, b) {
    return w >>> b | w << 32 - b;
}
$32446db57ca26dcf$export$4785c77169fea59e = $32446db57ca26dcf$var$rotr32;
function $32446db57ca26dcf$var$rotl32(w, b) {
    return w << b | w >>> 32 - b;
}
$32446db57ca26dcf$export$242a185dfcffac5b = $32446db57ca26dcf$var$rotl32;
function $32446db57ca26dcf$var$sum32(a, b) {
    return a + b >>> 0;
}
$32446db57ca26dcf$export$58c04ae0ae31877d = $32446db57ca26dcf$var$sum32;
function $32446db57ca26dcf$var$sum32_3(a, b, c) {
    return a + b + c >>> 0;
}
$32446db57ca26dcf$export$d058ca695f8c6f11 = $32446db57ca26dcf$var$sum32_3;
function $32446db57ca26dcf$var$sum32_4(a, b, c, d) {
    return a + b + c + d >>> 0;
}
$32446db57ca26dcf$export$a1efd7fc3e986367 = $32446db57ca26dcf$var$sum32_4;
function $32446db57ca26dcf$var$sum32_5(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
}
$32446db57ca26dcf$export$bbfea4a2b5abaab4 = $32446db57ca26dcf$var$sum32_5;
function $32446db57ca26dcf$var$sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
}
$32446db57ca26dcf$export$97ad4afc7de86152 = $32446db57ca26dcf$var$sum64;
function $32446db57ca26dcf$var$sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
}
$32446db57ca26dcf$export$ce4673d9a79f6a4b = $32446db57ca26dcf$var$sum64_hi;
function $32446db57ca26dcf$var$sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
}
$32446db57ca26dcf$export$786cc99fc6eedc0b = $32446db57ca26dcf$var$sum64_lo;
function $32446db57ca26dcf$var$sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
}
$32446db57ca26dcf$export$45c59b9a1848dd0 = $32446db57ca26dcf$var$sum64_4_hi;
function $32446db57ca26dcf$var$sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
}
$32446db57ca26dcf$export$50d8f613e76d3034 = $32446db57ca26dcf$var$sum64_4_lo;
function $32446db57ca26dcf$var$sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
}
$32446db57ca26dcf$export$b8e83683c60ee162 = $32446db57ca26dcf$var$sum64_5_hi;
function $32446db57ca26dcf$var$sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
}
$32446db57ca26dcf$export$aeeb51790d1bcc4a = $32446db57ca26dcf$var$sum64_5_lo;
function $32446db57ca26dcf$var$rotr64_hi(ah, al, num) {
    var r = al << 32 - num | ah >>> num;
    return r >>> 0;
}
$32446db57ca26dcf$export$bb7c616f719ad9c = $32446db57ca26dcf$var$rotr64_hi;
function $32446db57ca26dcf$var$rotr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
$32446db57ca26dcf$export$4d63290824f9d7df = $32446db57ca26dcf$var$rotr64_lo;
function $32446db57ca26dcf$var$shr64_hi(ah, al, num) {
    return ah >>> num;
}
$32446db57ca26dcf$export$2f64ceb90ef28ea1 = $32446db57ca26dcf$var$shr64_hi;
function $32446db57ca26dcf$var$shr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
$32446db57ca26dcf$export$8d2089d465f6d10d = $32446db57ca26dcf$var$shr64_lo;

});

parcelRequire.register("f17Fx", function(module, exports) {

$parcel$export(module.exports, "BlockHash", () => $aeece5eb3d3a68af$export$8687658379b577e6, (v) => $aeece5eb3d3a68af$export$8687658379b577e6 = v);
var $aeece5eb3d3a68af$export$8687658379b577e6;
"use strict";

var $4jzrq = parcelRequire("4jzrq");

var $eHrxZ = parcelRequire("eHrxZ");
function $aeece5eb3d3a68af$var$BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = "big";
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
}
$aeece5eb3d3a68af$export$8687658379b577e6 = $aeece5eb3d3a68af$var$BlockHash;
$aeece5eb3d3a68af$var$BlockHash.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = $4jzrq.toArray(msg, enc);
    if (!this.pending) this.pending = msg;
    else this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
        msg = this.pending;
        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0) this.pending = null;
        msg = $4jzrq.join32(msg, 0, msg.length - r, this.endian);
        for(var i = 0; i < msg.length; i += this._delta32)this._update(msg, i, i + this._delta32);
    }
    return this;
};
$aeece5eb3d3a68af$var$BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    $eHrxZ(this.pending === null);
    return this._digest(enc);
};
$aeece5eb3d3a68af$var$BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - (len + this.padLength) % bytes;
    var res = new Array(k + this.padLength);
    res[0] = 0x80;
    for(var i = 1; i < k; i++)res[i] = 0;
    // Append length
    len <<= 3;
    if (this.endian === "big") {
        for(var t = 8; t < this.padLength; t++)res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len & 0xff;
    } else {
        res[i++] = len & 0xff;
        res[i++] = len >>> 8 & 0xff;
        res[i++] = len >>> 16 & 0xff;
        res[i++] = len >>> 24 & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for(t = 8; t < this.padLength; t++)res[i++] = 0;
    }
    return res;
};

});

parcelRequire.register("9hihG", function(module, exports) {

$parcel$export(module.exports, "sha1", () => $6c13e273d687df12$export$5091bdda49ba90f5, (v) => $6c13e273d687df12$export$5091bdda49ba90f5 = v);
$parcel$export(module.exports, "sha224", () => $6c13e273d687df12$export$97b70509d4e397ea, (v) => $6c13e273d687df12$export$97b70509d4e397ea = v);
$parcel$export(module.exports, "sha256", () => $6c13e273d687df12$export$bced8d2aada2d1c9, (v) => $6c13e273d687df12$export$bced8d2aada2d1c9 = v);
$parcel$export(module.exports, "sha384", () => $6c13e273d687df12$export$612d47d55dedde45, (v) => $6c13e273d687df12$export$612d47d55dedde45 = v);
$parcel$export(module.exports, "sha512", () => $6c13e273d687df12$export$a888d2532e6dc7bb, (v) => $6c13e273d687df12$export$a888d2532e6dc7bb = v);
var $6c13e273d687df12$export$5091bdda49ba90f5;
var $6c13e273d687df12$export$97b70509d4e397ea;
var $6c13e273d687df12$export$bced8d2aada2d1c9;
var $6c13e273d687df12$export$612d47d55dedde45;
var $6c13e273d687df12$export$a888d2532e6dc7bb;
"use strict";

$6c13e273d687df12$export$5091bdda49ba90f5 = (parcelRequire("lWdAF"));

$6c13e273d687df12$export$97b70509d4e397ea = (parcelRequire("lRq10"));

$6c13e273d687df12$export$bced8d2aada2d1c9 = (parcelRequire("gxE3y"));

$6c13e273d687df12$export$612d47d55dedde45 = (parcelRequire("l0KbI"));

$6c13e273d687df12$export$a888d2532e6dc7bb = (parcelRequire("dV40O"));

});
parcelRequire.register("lWdAF", function(module, exports) {
"use strict";

var $4jzrq = parcelRequire("4jzrq");

var $f17Fx = parcelRequire("f17Fx");

var $gHZ2r = parcelRequire("gHZ2r");
var $ff898e81f4ab0b2f$var$rotl32 = $4jzrq.rotl32;
var $ff898e81f4ab0b2f$var$sum32 = $4jzrq.sum32;
var $ff898e81f4ab0b2f$var$sum32_5 = $4jzrq.sum32_5;
var $ff898e81f4ab0b2f$var$ft_1 = $gHZ2r.ft_1;
var $ff898e81f4ab0b2f$var$BlockHash = $f17Fx.BlockHash;
var $ff898e81f4ab0b2f$var$sha1_K = [
    0x5A827999,
    0x6ED9EBA1,
    0x8F1BBCDC,
    0xCA62C1D6
];
function $ff898e81f4ab0b2f$var$SHA1() {
    if (!(this instanceof $ff898e81f4ab0b2f$var$SHA1)) return new $ff898e81f4ab0b2f$var$SHA1();
    $ff898e81f4ab0b2f$var$BlockHash.call(this);
    this.h = [
        0x67452301,
        0xefcdab89,
        0x98badcfe,
        0x10325476,
        0xc3d2e1f0
    ];
    this.W = new Array(80);
}
$4jzrq.inherits($ff898e81f4ab0b2f$var$SHA1, $ff898e81f4ab0b2f$var$BlockHash);
module.exports = $ff898e81f4ab0b2f$var$SHA1;
$ff898e81f4ab0b2f$var$SHA1.blockSize = 512;
$ff898e81f4ab0b2f$var$SHA1.outSize = 160;
$ff898e81f4ab0b2f$var$SHA1.hmacStrength = 80;
$ff898e81f4ab0b2f$var$SHA1.padLength = 64;
$ff898e81f4ab0b2f$var$SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = $ff898e81f4ab0b2f$var$rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    for(i = 0; i < W.length; i++){
        var s = ~~(i / 20);
        var t = $ff898e81f4ab0b2f$var$sum32_5($ff898e81f4ab0b2f$var$rotl32(a, 5), $ff898e81f4ab0b2f$var$ft_1(s, b, c, d), e, W[i], $ff898e81f4ab0b2f$var$sha1_K[s]);
        e = d;
        d = c;
        c = $ff898e81f4ab0b2f$var$rotl32(b, 30);
        b = a;
        a = t;
    }
    this.h[0] = $ff898e81f4ab0b2f$var$sum32(this.h[0], a);
    this.h[1] = $ff898e81f4ab0b2f$var$sum32(this.h[1], b);
    this.h[2] = $ff898e81f4ab0b2f$var$sum32(this.h[2], c);
    this.h[3] = $ff898e81f4ab0b2f$var$sum32(this.h[3], d);
    this.h[4] = $ff898e81f4ab0b2f$var$sum32(this.h[4], e);
};
$ff898e81f4ab0b2f$var$SHA1.prototype._digest = function digest(enc) {
    if (enc === "hex") return $4jzrq.toHex32(this.h, "big");
    else return $4jzrq.split32(this.h, "big");
};

});
parcelRequire.register("gHZ2r", function(module, exports) {

$parcel$export(module.exports, "ft_1", () => $c2a0026f24e181fc$export$5a92649d7ddb9f63, (v) => $c2a0026f24e181fc$export$5a92649d7ddb9f63 = v);
$parcel$export(module.exports, "ch32", () => $c2a0026f24e181fc$export$c6d0d020c3a6269, (v) => $c2a0026f24e181fc$export$c6d0d020c3a6269 = v);
$parcel$export(module.exports, "maj32", () => $c2a0026f24e181fc$export$eb90c27fca05f956, (v) => $c2a0026f24e181fc$export$eb90c27fca05f956 = v);
$parcel$export(module.exports, "s0_256", () => $c2a0026f24e181fc$export$14a4a98e063b1999, (v) => $c2a0026f24e181fc$export$14a4a98e063b1999 = v);
$parcel$export(module.exports, "s1_256", () => $c2a0026f24e181fc$export$d20cecfa1564c686, (v) => $c2a0026f24e181fc$export$d20cecfa1564c686 = v);
$parcel$export(module.exports, "g0_256", () => $c2a0026f24e181fc$export$44fd472a12fc6db, (v) => $c2a0026f24e181fc$export$44fd472a12fc6db = v);
$parcel$export(module.exports, "g1_256", () => $c2a0026f24e181fc$export$1ed238bb6ea1dd47, (v) => $c2a0026f24e181fc$export$1ed238bb6ea1dd47 = v);
var $c2a0026f24e181fc$export$5a92649d7ddb9f63;
var $c2a0026f24e181fc$export$c6d0d020c3a6269;
var $c2a0026f24e181fc$export$eb90c27fca05f956;
var $c2a0026f24e181fc$export$cc992891a14496a1;
var $c2a0026f24e181fc$export$14a4a98e063b1999;
var $c2a0026f24e181fc$export$d20cecfa1564c686;
var $c2a0026f24e181fc$export$44fd472a12fc6db;
var $c2a0026f24e181fc$export$1ed238bb6ea1dd47;
"use strict";

var $4jzrq = parcelRequire("4jzrq");
var $c2a0026f24e181fc$var$rotr32 = $4jzrq.rotr32;
function $c2a0026f24e181fc$var$ft_1(s, x, y, z) {
    if (s === 0) return $c2a0026f24e181fc$var$ch32(x, y, z);
    if (s === 1 || s === 3) return $c2a0026f24e181fc$var$p32(x, y, z);
    if (s === 2) return $c2a0026f24e181fc$var$maj32(x, y, z);
}
$c2a0026f24e181fc$export$5a92649d7ddb9f63 = $c2a0026f24e181fc$var$ft_1;
function $c2a0026f24e181fc$var$ch32(x, y, z) {
    return x & y ^ ~x & z;
}
$c2a0026f24e181fc$export$c6d0d020c3a6269 = $c2a0026f24e181fc$var$ch32;
function $c2a0026f24e181fc$var$maj32(x, y, z) {
    return x & y ^ x & z ^ y & z;
}
$c2a0026f24e181fc$export$eb90c27fca05f956 = $c2a0026f24e181fc$var$maj32;
function $c2a0026f24e181fc$var$p32(x, y, z) {
    return x ^ y ^ z;
}
$c2a0026f24e181fc$export$cc992891a14496a1 = $c2a0026f24e181fc$var$p32;
function $c2a0026f24e181fc$var$s0_256(x) {
    return $c2a0026f24e181fc$var$rotr32(x, 2) ^ $c2a0026f24e181fc$var$rotr32(x, 13) ^ $c2a0026f24e181fc$var$rotr32(x, 22);
}
$c2a0026f24e181fc$export$14a4a98e063b1999 = $c2a0026f24e181fc$var$s0_256;
function $c2a0026f24e181fc$var$s1_256(x) {
    return $c2a0026f24e181fc$var$rotr32(x, 6) ^ $c2a0026f24e181fc$var$rotr32(x, 11) ^ $c2a0026f24e181fc$var$rotr32(x, 25);
}
$c2a0026f24e181fc$export$d20cecfa1564c686 = $c2a0026f24e181fc$var$s1_256;
function $c2a0026f24e181fc$var$g0_256(x) {
    return $c2a0026f24e181fc$var$rotr32(x, 7) ^ $c2a0026f24e181fc$var$rotr32(x, 18) ^ x >>> 3;
}
$c2a0026f24e181fc$export$44fd472a12fc6db = $c2a0026f24e181fc$var$g0_256;
function $c2a0026f24e181fc$var$g1_256(x) {
    return $c2a0026f24e181fc$var$rotr32(x, 17) ^ $c2a0026f24e181fc$var$rotr32(x, 19) ^ x >>> 10;
}
$c2a0026f24e181fc$export$1ed238bb6ea1dd47 = $c2a0026f24e181fc$var$g1_256;

});


parcelRequire.register("lRq10", function(module, exports) {
"use strict";

var $4jzrq = parcelRequire("4jzrq");

var $gxE3y = parcelRequire("gxE3y");
function $fea2ba50d5fd5e16$var$SHA224() {
    if (!(this instanceof $fea2ba50d5fd5e16$var$SHA224)) return new $fea2ba50d5fd5e16$var$SHA224();
    $gxE3y.call(this);
    this.h = [
        0xc1059ed8,
        0x367cd507,
        0x3070dd17,
        0xf70e5939,
        0xffc00b31,
        0x68581511,
        0x64f98fa7,
        0xbefa4fa4
    ];
}
$4jzrq.inherits($fea2ba50d5fd5e16$var$SHA224, $gxE3y);
module.exports = $fea2ba50d5fd5e16$var$SHA224;
$fea2ba50d5fd5e16$var$SHA224.blockSize = 512;
$fea2ba50d5fd5e16$var$SHA224.outSize = 224;
$fea2ba50d5fd5e16$var$SHA224.hmacStrength = 192;
$fea2ba50d5fd5e16$var$SHA224.padLength = 64;
$fea2ba50d5fd5e16$var$SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === "hex") return $4jzrq.toHex32(this.h.slice(0, 7), "big");
    else return $4jzrq.split32(this.h.slice(0, 7), "big");
};

});
parcelRequire.register("gxE3y", function(module, exports) {
"use strict";

var $4jzrq = parcelRequire("4jzrq");

var $f17Fx = parcelRequire("f17Fx");

var $gHZ2r = parcelRequire("gHZ2r");

var $eHrxZ = parcelRequire("eHrxZ");
var $c0aeccc3aaaf87a4$var$sum32 = $4jzrq.sum32;
var $c0aeccc3aaaf87a4$var$sum32_4 = $4jzrq.sum32_4;
var $c0aeccc3aaaf87a4$var$sum32_5 = $4jzrq.sum32_5;
var $c0aeccc3aaaf87a4$var$ch32 = $gHZ2r.ch32;
var $c0aeccc3aaaf87a4$var$maj32 = $gHZ2r.maj32;
var $c0aeccc3aaaf87a4$var$s0_256 = $gHZ2r.s0_256;
var $c0aeccc3aaaf87a4$var$s1_256 = $gHZ2r.s1_256;
var $c0aeccc3aaaf87a4$var$g0_256 = $gHZ2r.g0_256;
var $c0aeccc3aaaf87a4$var$g1_256 = $gHZ2r.g1_256;
var $c0aeccc3aaaf87a4$var$BlockHash = $f17Fx.BlockHash;
var $c0aeccc3aaaf87a4$var$sha256_K = [
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
];
function $c0aeccc3aaaf87a4$var$SHA256() {
    if (!(this instanceof $c0aeccc3aaaf87a4$var$SHA256)) return new $c0aeccc3aaaf87a4$var$SHA256();
    $c0aeccc3aaaf87a4$var$BlockHash.call(this);
    this.h = [
        0x6a09e667,
        0xbb67ae85,
        0x3c6ef372,
        0xa54ff53a,
        0x510e527f,
        0x9b05688c,
        0x1f83d9ab,
        0x5be0cd19
    ];
    this.k = $c0aeccc3aaaf87a4$var$sha256_K;
    this.W = new Array(64);
}
$4jzrq.inherits($c0aeccc3aaaf87a4$var$SHA256, $c0aeccc3aaaf87a4$var$BlockHash);
module.exports = $c0aeccc3aaaf87a4$var$SHA256;
$c0aeccc3aaaf87a4$var$SHA256.blockSize = 512;
$c0aeccc3aaaf87a4$var$SHA256.outSize = 256;
$c0aeccc3aaaf87a4$var$SHA256.hmacStrength = 192;
$c0aeccc3aaaf87a4$var$SHA256.padLength = 64;
$c0aeccc3aaaf87a4$var$SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = $c0aeccc3aaaf87a4$var$sum32_4($c0aeccc3aaaf87a4$var$g1_256(W[i - 2]), W[i - 7], $c0aeccc3aaaf87a4$var$g0_256(W[i - 15]), W[i - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    $eHrxZ(this.k.length === W.length);
    for(i = 0; i < W.length; i++){
        var T1 = $c0aeccc3aaaf87a4$var$sum32_5(h, $c0aeccc3aaaf87a4$var$s1_256(e), $c0aeccc3aaaf87a4$var$ch32(e, f, g), this.k[i], W[i]);
        var T2 = $c0aeccc3aaaf87a4$var$sum32($c0aeccc3aaaf87a4$var$s0_256(a), $c0aeccc3aaaf87a4$var$maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = $c0aeccc3aaaf87a4$var$sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = $c0aeccc3aaaf87a4$var$sum32(T1, T2);
    }
    this.h[0] = $c0aeccc3aaaf87a4$var$sum32(this.h[0], a);
    this.h[1] = $c0aeccc3aaaf87a4$var$sum32(this.h[1], b);
    this.h[2] = $c0aeccc3aaaf87a4$var$sum32(this.h[2], c);
    this.h[3] = $c0aeccc3aaaf87a4$var$sum32(this.h[3], d);
    this.h[4] = $c0aeccc3aaaf87a4$var$sum32(this.h[4], e);
    this.h[5] = $c0aeccc3aaaf87a4$var$sum32(this.h[5], f);
    this.h[6] = $c0aeccc3aaaf87a4$var$sum32(this.h[6], g);
    this.h[7] = $c0aeccc3aaaf87a4$var$sum32(this.h[7], h);
};
$c0aeccc3aaaf87a4$var$SHA256.prototype._digest = function digest(enc) {
    if (enc === "hex") return $4jzrq.toHex32(this.h, "big");
    else return $4jzrq.split32(this.h, "big");
};

});


parcelRequire.register("l0KbI", function(module, exports) {
"use strict";

var $4jzrq = parcelRequire("4jzrq");

var $dV40O = parcelRequire("dV40O");
function $f4bd6d08dec9a7b2$var$SHA384() {
    if (!(this instanceof $f4bd6d08dec9a7b2$var$SHA384)) return new $f4bd6d08dec9a7b2$var$SHA384();
    $dV40O.call(this);
    this.h = [
        0xcbbb9d5d,
        0xc1059ed8,
        0x629a292a,
        0x367cd507,
        0x9159015a,
        0x3070dd17,
        0x152fecd8,
        0xf70e5939,
        0x67332667,
        0xffc00b31,
        0x8eb44a87,
        0x68581511,
        0xdb0c2e0d,
        0x64f98fa7,
        0x47b5481d,
        0xbefa4fa4
    ];
}
$4jzrq.inherits($f4bd6d08dec9a7b2$var$SHA384, $dV40O);
module.exports = $f4bd6d08dec9a7b2$var$SHA384;
$f4bd6d08dec9a7b2$var$SHA384.blockSize = 1024;
$f4bd6d08dec9a7b2$var$SHA384.outSize = 384;
$f4bd6d08dec9a7b2$var$SHA384.hmacStrength = 192;
$f4bd6d08dec9a7b2$var$SHA384.padLength = 128;
$f4bd6d08dec9a7b2$var$SHA384.prototype._digest = function digest(enc) {
    if (enc === "hex") return $4jzrq.toHex32(this.h.slice(0, 12), "big");
    else return $4jzrq.split32(this.h.slice(0, 12), "big");
};

});
parcelRequire.register("dV40O", function(module, exports) {
"use strict";

var $4jzrq = parcelRequire("4jzrq");

var $f17Fx = parcelRequire("f17Fx");

var $eHrxZ = parcelRequire("eHrxZ");
var $a223b5f3efb4d932$var$rotr64_hi = $4jzrq.rotr64_hi;
var $a223b5f3efb4d932$var$rotr64_lo = $4jzrq.rotr64_lo;
var $a223b5f3efb4d932$var$shr64_hi = $4jzrq.shr64_hi;
var $a223b5f3efb4d932$var$shr64_lo = $4jzrq.shr64_lo;
var $a223b5f3efb4d932$var$sum64 = $4jzrq.sum64;
var $a223b5f3efb4d932$var$sum64_hi = $4jzrq.sum64_hi;
var $a223b5f3efb4d932$var$sum64_lo = $4jzrq.sum64_lo;
var $a223b5f3efb4d932$var$sum64_4_hi = $4jzrq.sum64_4_hi;
var $a223b5f3efb4d932$var$sum64_4_lo = $4jzrq.sum64_4_lo;
var $a223b5f3efb4d932$var$sum64_5_hi = $4jzrq.sum64_5_hi;
var $a223b5f3efb4d932$var$sum64_5_lo = $4jzrq.sum64_5_lo;
var $a223b5f3efb4d932$var$BlockHash = $f17Fx.BlockHash;
var $a223b5f3efb4d932$var$sha512_K = [
    0x428a2f98,
    0xd728ae22,
    0x71374491,
    0x23ef65cd,
    0xb5c0fbcf,
    0xec4d3b2f,
    0xe9b5dba5,
    0x8189dbbc,
    0x3956c25b,
    0xf348b538,
    0x59f111f1,
    0xb605d019,
    0x923f82a4,
    0xaf194f9b,
    0xab1c5ed5,
    0xda6d8118,
    0xd807aa98,
    0xa3030242,
    0x12835b01,
    0x45706fbe,
    0x243185be,
    0x4ee4b28c,
    0x550c7dc3,
    0xd5ffb4e2,
    0x72be5d74,
    0xf27b896f,
    0x80deb1fe,
    0x3b1696b1,
    0x9bdc06a7,
    0x25c71235,
    0xc19bf174,
    0xcf692694,
    0xe49b69c1,
    0x9ef14ad2,
    0xefbe4786,
    0x384f25e3,
    0x0fc19dc6,
    0x8b8cd5b5,
    0x240ca1cc,
    0x77ac9c65,
    0x2de92c6f,
    0x592b0275,
    0x4a7484aa,
    0x6ea6e483,
    0x5cb0a9dc,
    0xbd41fbd4,
    0x76f988da,
    0x831153b5,
    0x983e5152,
    0xee66dfab,
    0xa831c66d,
    0x2db43210,
    0xb00327c8,
    0x98fb213f,
    0xbf597fc7,
    0xbeef0ee4,
    0xc6e00bf3,
    0x3da88fc2,
    0xd5a79147,
    0x930aa725,
    0x06ca6351,
    0xe003826f,
    0x14292967,
    0x0a0e6e70,
    0x27b70a85,
    0x46d22ffc,
    0x2e1b2138,
    0x5c26c926,
    0x4d2c6dfc,
    0x5ac42aed,
    0x53380d13,
    0x9d95b3df,
    0x650a7354,
    0x8baf63de,
    0x766a0abb,
    0x3c77b2a8,
    0x81c2c92e,
    0x47edaee6,
    0x92722c85,
    0x1482353b,
    0xa2bfe8a1,
    0x4cf10364,
    0xa81a664b,
    0xbc423001,
    0xc24b8b70,
    0xd0f89791,
    0xc76c51a3,
    0x0654be30,
    0xd192e819,
    0xd6ef5218,
    0xd6990624,
    0x5565a910,
    0xf40e3585,
    0x5771202a,
    0x106aa070,
    0x32bbd1b8,
    0x19a4c116,
    0xb8d2d0c8,
    0x1e376c08,
    0x5141ab53,
    0x2748774c,
    0xdf8eeb99,
    0x34b0bcb5,
    0xe19b48a8,
    0x391c0cb3,
    0xc5c95a63,
    0x4ed8aa4a,
    0xe3418acb,
    0x5b9cca4f,
    0x7763e373,
    0x682e6ff3,
    0xd6b2b8a3,
    0x748f82ee,
    0x5defb2fc,
    0x78a5636f,
    0x43172f60,
    0x84c87814,
    0xa1f0ab72,
    0x8cc70208,
    0x1a6439ec,
    0x90befffa,
    0x23631e28,
    0xa4506ceb,
    0xde82bde9,
    0xbef9a3f7,
    0xb2c67915,
    0xc67178f2,
    0xe372532b,
    0xca273ece,
    0xea26619c,
    0xd186b8c7,
    0x21c0c207,
    0xeada7dd6,
    0xcde0eb1e,
    0xf57d4f7f,
    0xee6ed178,
    0x06f067aa,
    0x72176fba,
    0x0a637dc5,
    0xa2c898a6,
    0x113f9804,
    0xbef90dae,
    0x1b710b35,
    0x131c471b,
    0x28db77f5,
    0x23047d84,
    0x32caab7b,
    0x40c72493,
    0x3c9ebe0a,
    0x15c9bebc,
    0x431d67c4,
    0x9c100d4c,
    0x4cc5d4be,
    0xcb3e42b6,
    0x597f299c,
    0xfc657e2a,
    0x5fcb6fab,
    0x3ad6faec,
    0x6c44198c,
    0x4a475817
];
function $a223b5f3efb4d932$var$SHA512() {
    if (!(this instanceof $a223b5f3efb4d932$var$SHA512)) return new $a223b5f3efb4d932$var$SHA512();
    $a223b5f3efb4d932$var$BlockHash.call(this);
    this.h = [
        0x6a09e667,
        0xf3bcc908,
        0xbb67ae85,
        0x84caa73b,
        0x3c6ef372,
        0xfe94f82b,
        0xa54ff53a,
        0x5f1d36f1,
        0x510e527f,
        0xade682d1,
        0x9b05688c,
        0x2b3e6c1f,
        0x1f83d9ab,
        0xfb41bd6b,
        0x5be0cd19,
        0x137e2179
    ];
    this.k = $a223b5f3efb4d932$var$sha512_K;
    this.W = new Array(160);
}
$4jzrq.inherits($a223b5f3efb4d932$var$SHA512, $a223b5f3efb4d932$var$BlockHash);
module.exports = $a223b5f3efb4d932$var$SHA512;
$a223b5f3efb4d932$var$SHA512.blockSize = 1024;
$a223b5f3efb4d932$var$SHA512.outSize = 512;
$a223b5f3efb4d932$var$SHA512.hmacStrength = 192;
$a223b5f3efb4d932$var$SHA512.padLength = 128;
$a223b5f3efb4d932$var$SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
    // 32 x 32bit words
    for(var i = 0; i < 32; i++)W[i] = msg[start + i];
    for(; i < W.length; i += 2){
        var c0_hi = $a223b5f3efb4d932$var$g1_512_hi(W[i - 4], W[i - 3]); // i - 2
        var c0_lo = $a223b5f3efb4d932$var$g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14]; // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = $a223b5f3efb4d932$var$g0_512_hi(W[i - 30], W[i - 29]); // i - 15
        var c2_lo = $a223b5f3efb4d932$var$g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32]; // i - 16
        var c3_lo = W[i - 31];
        W[i] = $a223b5f3efb4d932$var$sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W[i + 1] = $a223b5f3efb4d932$var$sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    }
};
$a223b5f3efb4d932$var$SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    $eHrxZ(this.k.length === W.length);
    for(var i = 0; i < W.length; i += 2){
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = $a223b5f3efb4d932$var$s1_512_hi(eh, el);
        var c1_lo = $a223b5f3efb4d932$var$s1_512_lo(eh, el);
        var c2_hi = $a223b5f3efb4d932$var$ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = $a223b5f3efb4d932$var$ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = $a223b5f3efb4d932$var$sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = $a223b5f3efb4d932$var$sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        c0_hi = $a223b5f3efb4d932$var$s0_512_hi(ah, al);
        c0_lo = $a223b5f3efb4d932$var$s0_512_lo(ah, al);
        c1_hi = $a223b5f3efb4d932$var$maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = $a223b5f3efb4d932$var$maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = $a223b5f3efb4d932$var$sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = $a223b5f3efb4d932$var$sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = $a223b5f3efb4d932$var$sum64_hi(dh, dl, T1_hi, T1_lo);
        el = $a223b5f3efb4d932$var$sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = $a223b5f3efb4d932$var$sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = $a223b5f3efb4d932$var$sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    $a223b5f3efb4d932$var$sum64(this.h, 0, ah, al);
    $a223b5f3efb4d932$var$sum64(this.h, 2, bh, bl);
    $a223b5f3efb4d932$var$sum64(this.h, 4, ch, cl);
    $a223b5f3efb4d932$var$sum64(this.h, 6, dh, dl);
    $a223b5f3efb4d932$var$sum64(this.h, 8, eh, el);
    $a223b5f3efb4d932$var$sum64(this.h, 10, fh, fl);
    $a223b5f3efb4d932$var$sum64(this.h, 12, gh, gl);
    $a223b5f3efb4d932$var$sum64(this.h, 14, hh, hl);
};
$a223b5f3efb4d932$var$SHA512.prototype._digest = function digest(enc) {
    if (enc === "hex") return $4jzrq.toHex32(this.h, "big");
    else return $4jzrq.split32(this.h, "big");
};
function $a223b5f3efb4d932$var$ch64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ ~xh & zh;
    if (r < 0) r += 0x100000000;
    return r;
}
function $a223b5f3efb4d932$var$ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ ~xl & zl;
    if (r < 0) r += 0x100000000;
    return r;
}
function $a223b5f3efb4d932$var$maj64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ xh & zh ^ yh & zh;
    if (r < 0) r += 0x100000000;
    return r;
}
function $a223b5f3efb4d932$var$maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ xl & zl ^ yl & zl;
    if (r < 0) r += 0x100000000;
    return r;
}
function $a223b5f3efb4d932$var$s0_512_hi(xh, xl) {
    var c0_hi = $a223b5f3efb4d932$var$rotr64_hi(xh, xl, 28);
    var c1_hi = $a223b5f3efb4d932$var$rotr64_hi(xl, xh, 2); // 34
    var c2_hi = $a223b5f3efb4d932$var$rotr64_hi(xl, xh, 7); // 39
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function $a223b5f3efb4d932$var$s0_512_lo(xh, xl) {
    var c0_lo = $a223b5f3efb4d932$var$rotr64_lo(xh, xl, 28);
    var c1_lo = $a223b5f3efb4d932$var$rotr64_lo(xl, xh, 2); // 34
    var c2_lo = $a223b5f3efb4d932$var$rotr64_lo(xl, xh, 7); // 39
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function $a223b5f3efb4d932$var$s1_512_hi(xh, xl) {
    var c0_hi = $a223b5f3efb4d932$var$rotr64_hi(xh, xl, 14);
    var c1_hi = $a223b5f3efb4d932$var$rotr64_hi(xh, xl, 18);
    var c2_hi = $a223b5f3efb4d932$var$rotr64_hi(xl, xh, 9); // 41
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function $a223b5f3efb4d932$var$s1_512_lo(xh, xl) {
    var c0_lo = $a223b5f3efb4d932$var$rotr64_lo(xh, xl, 14);
    var c1_lo = $a223b5f3efb4d932$var$rotr64_lo(xh, xl, 18);
    var c2_lo = $a223b5f3efb4d932$var$rotr64_lo(xl, xh, 9); // 41
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function $a223b5f3efb4d932$var$g0_512_hi(xh, xl) {
    var c0_hi = $a223b5f3efb4d932$var$rotr64_hi(xh, xl, 1);
    var c1_hi = $a223b5f3efb4d932$var$rotr64_hi(xh, xl, 8);
    var c2_hi = $a223b5f3efb4d932$var$shr64_hi(xh, xl, 7);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function $a223b5f3efb4d932$var$g0_512_lo(xh, xl) {
    var c0_lo = $a223b5f3efb4d932$var$rotr64_lo(xh, xl, 1);
    var c1_lo = $a223b5f3efb4d932$var$rotr64_lo(xh, xl, 8);
    var c2_lo = $a223b5f3efb4d932$var$shr64_lo(xh, xl, 7);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}
function $a223b5f3efb4d932$var$g1_512_hi(xh, xl) {
    var c0_hi = $a223b5f3efb4d932$var$rotr64_hi(xh, xl, 19);
    var c1_hi = $a223b5f3efb4d932$var$rotr64_hi(xl, xh, 29); // 61
    var c2_hi = $a223b5f3efb4d932$var$shr64_hi(xh, xl, 6);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 0x100000000;
    return r;
}
function $a223b5f3efb4d932$var$g1_512_lo(xh, xl) {
    var c0_lo = $a223b5f3efb4d932$var$rotr64_lo(xh, xl, 19);
    var c1_lo = $a223b5f3efb4d932$var$rotr64_lo(xl, xh, 29); // 61
    var c2_lo = $a223b5f3efb4d932$var$shr64_lo(xh, xl, 6);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 0x100000000;
    return r;
}

});



parcelRequire.register("1Jj3c", function(module, exports) {

$parcel$export(module.exports, "ripemd160", () => $1428c572a7b37c8c$export$d1cea0ee4e3f0d3e, (v) => $1428c572a7b37c8c$export$d1cea0ee4e3f0d3e = v);
var $1428c572a7b37c8c$export$d1cea0ee4e3f0d3e;
"use strict";

var $4jzrq = parcelRequire("4jzrq");

var $f17Fx = parcelRequire("f17Fx");
var $1428c572a7b37c8c$var$rotl32 = $4jzrq.rotl32;
var $1428c572a7b37c8c$var$sum32 = $4jzrq.sum32;
var $1428c572a7b37c8c$var$sum32_3 = $4jzrq.sum32_3;
var $1428c572a7b37c8c$var$sum32_4 = $4jzrq.sum32_4;
var $1428c572a7b37c8c$var$BlockHash = $f17Fx.BlockHash;
function $1428c572a7b37c8c$var$RIPEMD160() {
    if (!(this instanceof $1428c572a7b37c8c$var$RIPEMD160)) return new $1428c572a7b37c8c$var$RIPEMD160();
    $1428c572a7b37c8c$var$BlockHash.call(this);
    this.h = [
        0x67452301,
        0xefcdab89,
        0x98badcfe,
        0x10325476,
        0xc3d2e1f0
    ];
    this.endian = "little";
}
$4jzrq.inherits($1428c572a7b37c8c$var$RIPEMD160, $1428c572a7b37c8c$var$BlockHash);
$1428c572a7b37c8c$export$d1cea0ee4e3f0d3e = $1428c572a7b37c8c$var$RIPEMD160;
$1428c572a7b37c8c$var$RIPEMD160.blockSize = 512;
$1428c572a7b37c8c$var$RIPEMD160.outSize = 160;
$1428c572a7b37c8c$var$RIPEMD160.hmacStrength = 192;
$1428c572a7b37c8c$var$RIPEMD160.padLength = 64;
$1428c572a7b37c8c$var$RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for(var j = 0; j < 80; j++){
        var T = $1428c572a7b37c8c$var$sum32($1428c572a7b37c8c$var$rotl32($1428c572a7b37c8c$var$sum32_4(A, $1428c572a7b37c8c$var$f(j, B, C, D), msg[$1428c572a7b37c8c$var$r[j] + start], $1428c572a7b37c8c$var$K(j)), $1428c572a7b37c8c$var$s[j]), E);
        A = E;
        E = D;
        D = $1428c572a7b37c8c$var$rotl32(C, 10);
        C = B;
        B = T;
        T = $1428c572a7b37c8c$var$sum32($1428c572a7b37c8c$var$rotl32($1428c572a7b37c8c$var$sum32_4(Ah, $1428c572a7b37c8c$var$f(79 - j, Bh, Ch, Dh), msg[$1428c572a7b37c8c$var$rh[j] + start], $1428c572a7b37c8c$var$Kh(j)), $1428c572a7b37c8c$var$sh[j]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = $1428c572a7b37c8c$var$rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
    }
    T = $1428c572a7b37c8c$var$sum32_3(this.h[1], C, Dh);
    this.h[1] = $1428c572a7b37c8c$var$sum32_3(this.h[2], D, Eh);
    this.h[2] = $1428c572a7b37c8c$var$sum32_3(this.h[3], E, Ah);
    this.h[3] = $1428c572a7b37c8c$var$sum32_3(this.h[4], A, Bh);
    this.h[4] = $1428c572a7b37c8c$var$sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
};
$1428c572a7b37c8c$var$RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === "hex") return $4jzrq.toHex32(this.h, "little");
    else return $4jzrq.split32(this.h, "little");
};
function $1428c572a7b37c8c$var$f(j, x, y, z) {
    if (j <= 15) return x ^ y ^ z;
    else if (j <= 31) return x & y | ~x & z;
    else if (j <= 47) return (x | ~y) ^ z;
    else if (j <= 63) return x & z | y & ~z;
    else return x ^ (y | ~z);
}
function $1428c572a7b37c8c$var$K(j) {
    if (j <= 15) return 0x00000000;
    else if (j <= 31) return 0x5a827999;
    else if (j <= 47) return 0x6ed9eba1;
    else if (j <= 63) return 0x8f1bbcdc;
    else return 0xa953fd4e;
}
function $1428c572a7b37c8c$var$Kh(j) {
    if (j <= 15) return 0x50a28be6;
    else if (j <= 31) return 0x5c4dd124;
    else if (j <= 47) return 0x6d703ef3;
    else if (j <= 63) return 0x7a6d76e9;
    else return 0x00000000;
}
var $1428c572a7b37c8c$var$r = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var $1428c572a7b37c8c$var$rh = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var $1428c572a7b37c8c$var$s = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var $1428c572a7b37c8c$var$sh = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];

});

parcelRequire.register("60A7N", function(module, exports) {
"use strict";

var $4jzrq = parcelRequire("4jzrq");

var $eHrxZ = parcelRequire("eHrxZ");
function $45fec3c652907a76$var$Hmac(hash, key, enc) {
    if (!(this instanceof $45fec3c652907a76$var$Hmac)) return new $45fec3c652907a76$var$Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init($4jzrq.toArray(key, enc));
}
module.exports = $45fec3c652907a76$var$Hmac;
$45fec3c652907a76$var$Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
    $eHrxZ(key.length <= this.blockSize);
    // Add padding to key
    for(var i = key.length; i < this.blockSize; i++)key.push(0);
    for(i = 0; i < key.length; i++)key[i] ^= 0x36;
    this.inner = new this.Hash().update(key);
    // 0x36 ^ 0x5c = 0x6a
    for(i = 0; i < key.length; i++)key[i] ^= 0x6a;
    this.outer = new this.Hash().update(key);
};
$45fec3c652907a76$var$Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
};
$45fec3c652907a76$var$Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
};

});


parcelRequire.register("13erg", function(module, exports) {
module.exports = {
    doubles: {
        step: 4,
        points: [
            [
                "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
                "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
            ],
            [
                "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
                "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
            ],
            [
                "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
                "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
            ],
            [
                "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
                "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
            ],
            [
                "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
                "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
            ],
            [
                "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
                "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
            ],
            [
                "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
                "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
            ],
            [
                "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
                "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
            ],
            [
                "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
                "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
            ],
            [
                "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
                "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
            ],
            [
                "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
                "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
            ],
            [
                "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
                "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
            ],
            [
                "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
                "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
            ],
            [
                "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
                "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
            ],
            [
                "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
                "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
            ],
            [
                "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
                "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
            ],
            [
                "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
                "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
            ],
            [
                "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
                "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
            ],
            [
                "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
                "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
            ],
            [
                "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
                "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
            ],
            [
                "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
                "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
            ],
            [
                "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
                "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
            ],
            [
                "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
                "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
            ],
            [
                "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
                "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
            ],
            [
                "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
                "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
            ],
            [
                "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
                "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
            ],
            [
                "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
                "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
            ],
            [
                "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
                "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
            ],
            [
                "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
                "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
            ],
            [
                "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
                "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
            ],
            [
                "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
                "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
            ],
            [
                "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
                "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
            ],
            [
                "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
                "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
            ],
            [
                "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
                "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
            ],
            [
                "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
                "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
            ],
            [
                "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
                "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
            ],
            [
                "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
                "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
            ],
            [
                "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
                "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
            ],
            [
                "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
                "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
            ],
            [
                "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
                "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
            ],
            [
                "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
                "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
            ],
            [
                "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
                "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
            ],
            [
                "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
                "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
            ],
            [
                "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
                "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
            ],
            [
                "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
                "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
            ],
            [
                "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
                "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
            ],
            [
                "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
                "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
            ],
            [
                "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
                "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
            ],
            [
                "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
                "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
            ],
            [
                "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
                "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
            ],
            [
                "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
                "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
            ],
            [
                "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
                "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
            ],
            [
                "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
                "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
            ],
            [
                "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
                "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
            ],
            [
                "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
                "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
            ],
            [
                "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
                "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
            ],
            [
                "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
                "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
            ],
            [
                "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
                "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
            ],
            [
                "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
                "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
            ],
            [
                "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
                "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
            ],
            [
                "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
                "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
            ],
            [
                "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
                "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
            ],
            [
                "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
                "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
            ],
            [
                "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
                "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
            ],
            [
                "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
                "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
            ]
        ]
    },
    naf: {
        wnd: 7,
        points: [
            [
                "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
                "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
            ],
            [
                "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
                "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
            ],
            [
                "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
                "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
            ],
            [
                "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
                "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
            ],
            [
                "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
                "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
            ],
            [
                "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
                "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
            ],
            [
                "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
                "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
            ],
            [
                "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
                "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
            ],
            [
                "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
                "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
            ],
            [
                "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
                "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
            ],
            [
                "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
                "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
            ],
            [
                "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
                "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
            ],
            [
                "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
                "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
            ],
            [
                "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
                "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
            ],
            [
                "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
                "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
            ],
            [
                "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
                "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
            ],
            [
                "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
                "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
            ],
            [
                "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
                "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
            ],
            [
                "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
                "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
            ],
            [
                "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
                "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
            ],
            [
                "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
                "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
            ],
            [
                "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
                "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
            ],
            [
                "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
                "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
            ],
            [
                "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
                "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
            ],
            [
                "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
                "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
            ],
            [
                "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
                "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
            ],
            [
                "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
                "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
            ],
            [
                "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
                "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
            ],
            [
                "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
                "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
            ],
            [
                "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
                "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
            ],
            [
                "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
                "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
            ],
            [
                "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
                "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
            ],
            [
                "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
                "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
            ],
            [
                "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
                "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
            ],
            [
                "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
                "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
            ],
            [
                "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
                "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
            ],
            [
                "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
                "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
            ],
            [
                "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
                "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
            ],
            [
                "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
                "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
            ],
            [
                "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
                "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
            ],
            [
                "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
                "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
            ],
            [
                "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
                "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
            ],
            [
                "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
                "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
            ],
            [
                "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
                "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
            ],
            [
                "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
                "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
            ],
            [
                "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
                "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
            ],
            [
                "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
                "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
            ],
            [
                "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
                "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
            ],
            [
                "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
                "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
            ],
            [
                "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
                "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
            ],
            [
                "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
                "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
            ],
            [
                "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
                "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
            ],
            [
                "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
                "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
            ],
            [
                "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
                "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
            ],
            [
                "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
                "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
            ],
            [
                "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
                "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
            ],
            [
                "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
                "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
            ],
            [
                "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
                "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
            ],
            [
                "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
                "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
            ],
            [
                "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
                "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
            ],
            [
                "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
                "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
            ],
            [
                "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
                "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
            ],
            [
                "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
                "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
            ],
            [
                "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
                "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
            ],
            [
                "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
                "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
            ],
            [
                "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
                "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
            ],
            [
                "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
                "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
            ],
            [
                "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
                "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
            ],
            [
                "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
                "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
            ],
            [
                "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
                "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
            ],
            [
                "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
                "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
            ],
            [
                "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
                "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
            ],
            [
                "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
                "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
            ],
            [
                "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
                "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
            ],
            [
                "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
                "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
            ],
            [
                "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
                "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
            ],
            [
                "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
                "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
            ],
            [
                "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
                "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
            ],
            [
                "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
                "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
            ],
            [
                "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
                "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
            ],
            [
                "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
                "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
            ],
            [
                "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
                "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
            ],
            [
                "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
                "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
            ],
            [
                "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
                "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
            ],
            [
                "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
                "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
            ],
            [
                "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
                "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
            ],
            [
                "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
                "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
            ],
            [
                "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
                "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
            ],
            [
                "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
                "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
            ],
            [
                "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
                "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
            ],
            [
                "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
                "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
            ],
            [
                "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
                "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
            ],
            [
                "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
                "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
            ],
            [
                "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
                "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
            ],
            [
                "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
                "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
            ],
            [
                "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
                "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
            ],
            [
                "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
                "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
            ],
            [
                "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
                "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
            ],
            [
                "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
                "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
            ],
            [
                "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
                "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
            ],
            [
                "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
                "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
            ],
            [
                "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
                "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
            ],
            [
                "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
                "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
            ],
            [
                "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
                "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
            ],
            [
                "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
                "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
            ],
            [
                "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
                "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
            ],
            [
                "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
                "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
            ],
            [
                "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
                "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
            ],
            [
                "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
                "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
            ],
            [
                "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
                "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
            ],
            [
                "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
                "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
            ],
            [
                "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
                "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
            ],
            [
                "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
                "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
            ],
            [
                "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
                "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
            ],
            [
                "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
                "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
            ],
            [
                "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
                "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
            ],
            [
                "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
                "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
            ],
            [
                "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
                "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
            ],
            [
                "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
                "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
            ],
            [
                "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
                "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
            ],
            [
                "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
                "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
            ],
            [
                "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
                "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
            ],
            [
                "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
                "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
            ],
            [
                "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
                "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
            ],
            [
                "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
                "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
            ],
            [
                "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
                "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
            ],
            [
                "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
                "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
            ]
        ]
    }
};

});


parcelRequire.register("iGiia", function(module, exports) {
"use strict";

var $4H3ep = parcelRequire("4H3ep");

var $dCuT0 = parcelRequire("dCuT0");

var $iEG0Y = parcelRequire("iEG0Y");

var $dq3BX = parcelRequire("dq3BX");

var $eexYx = parcelRequire("eexYx");
var $d99a56acff314ca0$var$assert = $iEG0Y.assert;

var $66PVY = parcelRequire("66PVY");

var $fDVZj = parcelRequire("fDVZj");
function $d99a56acff314ca0$var$EC(options) {
    if (!(this instanceof $d99a56acff314ca0$var$EC)) return new $d99a56acff314ca0$var$EC(options);
    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === "string") {
        $d99a56acff314ca0$var$assert(Object.prototype.hasOwnProperty.call($dq3BX, options), "Unknown curve " + options);
        options = $dq3BX[options];
    }
    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof $dq3BX.PresetCurve) options = {
        curve: options
    };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
}
module.exports = $d99a56acff314ca0$var$EC;
$d99a56acff314ca0$var$EC.prototype.keyPair = function keyPair(options) {
    return new $66PVY(this, options);
};
$d99a56acff314ca0$var$EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return $66PVY.fromPrivate(this, priv, enc);
};
$d99a56acff314ca0$var$EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return $66PVY.fromPublic(this, pub, enc);
};
$d99a56acff314ca0$var$EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options) options = {};
    // Instantiate Hmac_DRBG
    var drbg = new $dCuT0({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || "utf8",
        entropy: options.entropy || $eexYx(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || "utf8",
        nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new $4H3ep(2));
    for(;;){
        var priv = new $4H3ep(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0) continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
    }
};
$d99a56acff314ca0$var$EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0) msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
    else return msg;
};
$d99a56acff314ca0$var$EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === "object") {
        options = enc;
        enc = null;
    }
    if (!options) options = {};
    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new $4H3ep(msg, 16));
    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray("be", bytes);
    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray("be", bytes);
    // Instantiate Hmac_DRBG
    var drbg = new $dCuT0({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || "utf8"
    });
    // Number of bytes to generate
    var ns1 = this.n.sub(new $4H3ep(1));
    for(var iter = 0;; iter++){
        var k = options.k ? options.k(iter) : new $4H3ep(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity()) continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0) continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0) continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
            s = this.n.sub(s);
            recoveryParam ^= 1;
        }
        return new $fDVZj({
            r: r,
            s: s,
            recoveryParam: recoveryParam
        });
    }
};
$d99a56acff314ca0$var$EC.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new $4H3ep(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new $fDVZj(signature, "hex");
    // Perform primitive values validation
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;
    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    var p;
    if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity()) return false;
        return p.getX().umod(this.n).cmp(r) === 0;
    }
    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K
    p = this.g.jmulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;
    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
};
$d99a56acff314ca0$var$EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
    $d99a56acff314ca0$var$assert((3 & j) === j, "The recovery param is more than two bits");
    signature = new $fDVZj(signature, enc);
    var n = this.n;
    var e = new $4H3ep(msg);
    var r = signature.r;
    var s = signature.s;
    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error("Unable to find sencond key candinate");
    // 1.1. Let x = r + jn.
    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else r = this.curve.pointFromX(r, isYOdd);
    var rInv = signature.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);
    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
};
$d99a56acff314ca0$var$EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
    signature = new $fDVZj(signature, enc);
    if (signature.recoveryParam !== null) return signature.recoveryParam;
    for(var i = 0; i < 4; i++){
        var Qprime;
        try {
            Qprime = this.recoverPubKey(e, signature, i);
        } catch (e) {
            continue;
        }
        if (Qprime.eq(Q)) return i;
    }
    throw new Error("Unable to find valid recovery factor");
};

});
parcelRequire.register("dCuT0", function(module, exports) {
"use strict";

var $PVPdV = parcelRequire("PVPdV");

var $ioaAf = parcelRequire("ioaAf");

var $eHrxZ = parcelRequire("eHrxZ");
function $9ea6c857f558eb31$var$HmacDRBG(options) {
    if (!(this instanceof $9ea6c857f558eb31$var$HmacDRBG)) return new $9ea6c857f558eb31$var$HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = $ioaAf.toArray(options.entropy, options.entropyEnc || "hex");
    var nonce = $ioaAf.toArray(options.nonce, options.nonceEnc || "hex");
    var pers = $ioaAf.toArray(options.pers, options.persEnc || "hex");
    $eHrxZ(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._init(entropy, nonce, pers);
}
module.exports = $9ea6c857f558eb31$var$HmacDRBG;
$9ea6c857f558eb31$var$HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for(var i = 0; i < this.V.length; i++){
        this.K[i] = 0x00;
        this.V[i] = 0x01;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 0x1000000000000; // 2^48
};
$9ea6c857f558eb31$var$HmacDRBG.prototype._hmac = function hmac() {
    return new $PVPdV.hmac(this.hash, this.K);
};
$9ea6c857f558eb31$var$HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([
        0x00
    ]);
    if (seed) kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed) return;
    this.K = this._hmac().update(this.V).update([
        0x01
    ]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
};
$9ea6c857f558eb31$var$HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== "string") {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
    }
    entropy = $ioaAf.toArray(entropy, entropyEnc);
    add = $ioaAf.toArray(add, addEnc);
    $eHrxZ(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
    this._update(entropy.concat(add || []));
    this._reseed = 1;
};
$9ea6c857f558eb31$var$HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
    // Optional encoding
    if (typeof enc !== "string") {
        addEnc = add;
        add = enc;
        enc = null;
    }
    // Optional additional data
    if (add) {
        add = $ioaAf.toArray(add, addEnc || "hex");
        this._update(add);
    }
    var temp = [];
    while(temp.length < len){
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return $ioaAf.encode(res, enc);
};

});

parcelRequire.register("66PVY", function(module, exports) {
"use strict";

var $4H3ep = parcelRequire("4H3ep");

var $iEG0Y = parcelRequire("iEG0Y");
var $472b96a6bc0bde7b$var$assert = $iEG0Y.assert;
function $472b96a6bc0bde7b$var$KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;
    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv) this._importPrivate(options.priv, options.privEnc);
    if (options.pub) this._importPublic(options.pub, options.pubEnc);
}
module.exports = $472b96a6bc0bde7b$var$KeyPair;
$472b96a6bc0bde7b$var$KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof $472b96a6bc0bde7b$var$KeyPair) return pub;
    return new $472b96a6bc0bde7b$var$KeyPair(ec, {
        pub: pub,
        pubEnc: enc
    });
};
$472b96a6bc0bde7b$var$KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof $472b96a6bc0bde7b$var$KeyPair) return priv;
    return new $472b96a6bc0bde7b$var$KeyPair(ec, {
        priv: priv,
        privEnc: enc
    });
};
$472b96a6bc0bde7b$var$KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity()) return {
        result: false,
        reason: "Invalid public key"
    };
    if (!pub.validate()) return {
        result: false,
        reason: "Public key is not a point"
    };
    if (!pub.mul(this.ec.curve.n).isInfinity()) return {
        result: false,
        reason: "Public key * N != O"
    };
    return {
        result: true,
        reason: null
    };
};
$472b96a6bc0bde7b$var$KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === "string") {
        enc = compact;
        compact = null;
    }
    if (!this.pub) this.pub = this.ec.g.mul(this.priv);
    if (!enc) return this.pub;
    return this.pub.encode(enc, compact);
};
$472b96a6bc0bde7b$var$KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === "hex") return this.priv.toString(16, 2);
    else return this.priv;
};
$472b96a6bc0bde7b$var$KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new $4H3ep(key, enc || 16);
    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
};
$472b96a6bc0bde7b$var$KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === "mont") $472b96a6bc0bde7b$var$assert(key.x, "Need x coordinate");
        else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") $472b96a6bc0bde7b$var$assert(key.x && key.y, "Need both x and y coordinate");
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
};
// ECDH
$472b96a6bc0bde7b$var$KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) $472b96a6bc0bde7b$var$assert(pub.validate(), "public point not validated");
    return pub.mul(this.priv).getX();
};
// ECDSA
$472b96a6bc0bde7b$var$KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
};
$472b96a6bc0bde7b$var$KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
};
$472b96a6bc0bde7b$var$KeyPair.prototype.inspect = function inspect() {
    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
};

});

parcelRequire.register("fDVZj", function(module, exports) {
"use strict";

var $4H3ep = parcelRequire("4H3ep");

var $iEG0Y = parcelRequire("iEG0Y");
var $b6377abbd52a9bac$var$assert = $iEG0Y.assert;
function $b6377abbd52a9bac$var$Signature(options, enc) {
    if (options instanceof $b6377abbd52a9bac$var$Signature) return options;
    if (this._importDER(options, enc)) return;
    $b6377abbd52a9bac$var$assert(options.r && options.s, "Signature without r or s");
    this.r = new $4H3ep(options.r, 16);
    this.s = new $4H3ep(options.s, 16);
    if (options.recoveryParam === undefined) this.recoveryParam = null;
    else this.recoveryParam = options.recoveryParam;
}
module.exports = $b6377abbd52a9bac$var$Signature;
function $b6377abbd52a9bac$var$Position() {
    this.place = 0;
}
function $b6377abbd52a9bac$var$getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 0x80)) return initial;
    var octetLen = initial & 0xf;
    // Indefinite length or overflow
    if (octetLen === 0 || octetLen > 4) return false;
    var val = 0;
    for(var i = 0, off = p.place; i < octetLen; i++, off++){
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
    }
    // Leading zeroes
    if (val <= 0x7f) return false;
    p.place = off;
    return val;
}
function $b6377abbd52a9bac$var$rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while(!buf[i] && !(buf[i + 1] & 0x80) && i < len)i++;
    if (i === 0) return buf;
    return buf.slice(i);
}
$b6377abbd52a9bac$var$Signature.prototype._importDER = function _importDER(data, enc) {
    data = $iEG0Y.toArray(data, enc);
    var p = new $b6377abbd52a9bac$var$Position();
    if (data[p.place++] !== 0x30) return false;
    var len = $b6377abbd52a9bac$var$getLength(data, p);
    if (len === false) return false;
    if (len + p.place !== data.length) return false;
    if (data[p.place++] !== 0x02) return false;
    var rlen = $b6377abbd52a9bac$var$getLength(data, p);
    if (rlen === false) return false;
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 0x02) return false;
    var slen = $b6377abbd52a9bac$var$getLength(data, p);
    if (slen === false) return false;
    if (data.length !== slen + p.place) return false;
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0) {
        if (r[1] & 0x80) r = r.slice(1);
        else // Leading zeroes
        return false;
    }
    if (s[0] === 0) {
        if (s[1] & 0x80) s = s.slice(1);
        else // Leading zeroes
        return false;
    }
    this.r = new $4H3ep(r);
    this.s = new $4H3ep(s);
    this.recoveryParam = null;
    return true;
};
function $b6377abbd52a9bac$var$constructLength(arr, len) {
    if (len < 0x80) {
        arr.push(len);
        return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 0x80);
    while(--octets)arr.push(len >>> (octets << 3) & 0xff);
    arr.push(len);
}
$b6377abbd52a9bac$var$Signature.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();
    // Pad values
    if (r[0] & 0x80) r = [
        0
    ].concat(r);
    // Pad values
    if (s[0] & 0x80) s = [
        0
    ].concat(s);
    r = $b6377abbd52a9bac$var$rmPadding(r);
    s = $b6377abbd52a9bac$var$rmPadding(s);
    while(!s[0] && !(s[1] & 0x80))s = s.slice(1);
    var arr = [
        0x02
    ];
    $b6377abbd52a9bac$var$constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(0x02);
    $b6377abbd52a9bac$var$constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [
        0x30
    ];
    $b6377abbd52a9bac$var$constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return $iEG0Y.encode(res, enc);
};

});


parcelRequire.register("3LKzp", function(module, exports) {
"use strict";

var $PVPdV = parcelRequire("PVPdV");

var $dq3BX = parcelRequire("dq3BX");

var $iEG0Y = parcelRequire("iEG0Y");
var $2be9e2bd31cf1d25$var$assert = $iEG0Y.assert;
var $2be9e2bd31cf1d25$var$parseBytes = $iEG0Y.parseBytes;

var $6t9Rn = parcelRequire("6t9Rn");

var $fBPSe = parcelRequire("fBPSe");
function $2be9e2bd31cf1d25$var$EDDSA(curve) {
    $2be9e2bd31cf1d25$var$assert(curve === "ed25519", "only tested with ed25519 so far");
    if (!(this instanceof $2be9e2bd31cf1d25$var$EDDSA)) return new $2be9e2bd31cf1d25$var$EDDSA(curve);
    curve = $dq3BX[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);
    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = $PVPdV.sha512;
}
module.exports = $2be9e2bd31cf1d25$var$EDDSA;
/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/ $2be9e2bd31cf1d25$var$EDDSA.prototype.sign = function sign(message, secret) {
    message = $2be9e2bd31cf1d25$var$parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.messagePrefix(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({
        R: R,
        S: S,
        Rencoded: Rencoded
    });
};
/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/ $2be9e2bd31cf1d25$var$EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = $2be9e2bd31cf1d25$var$parseBytes(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
};
$2be9e2bd31cf1d25$var$EDDSA.prototype.hashInt = function hashInt() {
    var hash = this.hash();
    for(var i = 0; i < arguments.length; i++)hash.update(arguments[i]);
    return $iEG0Y.intFromLE(hash.digest()).umod(this.curve.n);
};
$2be9e2bd31cf1d25$var$EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return $6t9Rn.fromPublic(this, pub);
};
$2be9e2bd31cf1d25$var$EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return $6t9Rn.fromSecret(this, secret);
};
$2be9e2bd31cf1d25$var$EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof $fBPSe) return sig;
    return new $fBPSe(this, sig);
};
/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/ $2be9e2bd31cf1d25$var$EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray("le", this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
    return enc;
};
$2be9e2bd31cf1d25$var$EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = $iEG0Y.parseBytes(bytes);
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & -129);
    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
    var y = $iEG0Y.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
};
$2be9e2bd31cf1d25$var$EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray("le", this.encodingLength);
};
$2be9e2bd31cf1d25$var$EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return $iEG0Y.intFromLE(bytes);
};
$2be9e2bd31cf1d25$var$EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
};

});
parcelRequire.register("6t9Rn", function(module, exports) {
"use strict";

var $iEG0Y = parcelRequire("iEG0Y");
var $4b5d198164d06624$var$assert = $iEG0Y.assert;
var $4b5d198164d06624$var$parseBytes = $iEG0Y.parseBytes;
var $4b5d198164d06624$var$cachedProperty = $iEG0Y.cachedProperty;
/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/ function $4b5d198164d06624$var$KeyPair(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = $4b5d198164d06624$var$parseBytes(params.secret);
    if (eddsa.isPoint(params.pub)) this._pub = params.pub;
    else this._pubBytes = $4b5d198164d06624$var$parseBytes(params.pub);
}
$4b5d198164d06624$var$KeyPair.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof $4b5d198164d06624$var$KeyPair) return pub;
    return new $4b5d198164d06624$var$KeyPair(eddsa, {
        pub: pub
    });
};
$4b5d198164d06624$var$KeyPair.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof $4b5d198164d06624$var$KeyPair) return secret;
    return new $4b5d198164d06624$var$KeyPair(eddsa, {
        secret: secret
    });
};
$4b5d198164d06624$var$KeyPair.prototype.secret = function secret() {
    return this._secret;
};
$4b5d198164d06624$var$cachedProperty($4b5d198164d06624$var$KeyPair, "pubBytes", function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
});
$4b5d198164d06624$var$cachedProperty($4b5d198164d06624$var$KeyPair, "pub", function pub() {
    if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
});
$4b5d198164d06624$var$cachedProperty($4b5d198164d06624$var$KeyPair, "privBytes", function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;
    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;
    return a;
});
$4b5d198164d06624$var$cachedProperty($4b5d198164d06624$var$KeyPair, "priv", function priv() {
    return this.eddsa.decodeInt(this.privBytes());
});
$4b5d198164d06624$var$cachedProperty($4b5d198164d06624$var$KeyPair, "hash", function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
});
$4b5d198164d06624$var$cachedProperty($4b5d198164d06624$var$KeyPair, "messagePrefix", function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
});
$4b5d198164d06624$var$KeyPair.prototype.sign = function sign(message) {
    $4b5d198164d06624$var$assert(this._secret, "KeyPair can only verify");
    return this.eddsa.sign(message, this);
};
$4b5d198164d06624$var$KeyPair.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
};
$4b5d198164d06624$var$KeyPair.prototype.getSecret = function getSecret(enc) {
    $4b5d198164d06624$var$assert(this._secret, "KeyPair is public only");
    return $iEG0Y.encode(this.secret(), enc);
};
$4b5d198164d06624$var$KeyPair.prototype.getPublic = function getPublic(enc) {
    return $iEG0Y.encode(this.pubBytes(), enc);
};
module.exports = $4b5d198164d06624$var$KeyPair;

});

parcelRequire.register("fBPSe", function(module, exports) {
"use strict";

var $4H3ep = parcelRequire("4H3ep");

var $iEG0Y = parcelRequire("iEG0Y");
var $b5d28cbc420dd9b2$var$assert = $iEG0Y.assert;
var $b5d28cbc420dd9b2$var$cachedProperty = $iEG0Y.cachedProperty;
var $b5d28cbc420dd9b2$var$parseBytes = $iEG0Y.parseBytes;
/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/ function $b5d28cbc420dd9b2$var$Signature(eddsa, sig) {
    this.eddsa = eddsa;
    if (typeof sig !== "object") sig = $b5d28cbc420dd9b2$var$parseBytes(sig);
    if (Array.isArray(sig)) sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength)
    };
    $b5d28cbc420dd9b2$var$assert(sig.R && sig.S, "Signature without R or S");
    if (eddsa.isPoint(sig.R)) this._R = sig.R;
    if (sig.S instanceof $4H3ep) this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}
$b5d28cbc420dd9b2$var$cachedProperty($b5d28cbc420dd9b2$var$Signature, "S", function S() {
    return this.eddsa.decodeInt(this.Sencoded());
});
$b5d28cbc420dd9b2$var$cachedProperty($b5d28cbc420dd9b2$var$Signature, "R", function R() {
    return this.eddsa.decodePoint(this.Rencoded());
});
$b5d28cbc420dd9b2$var$cachedProperty($b5d28cbc420dd9b2$var$Signature, "Rencoded", function Rencoded() {
    return this.eddsa.encodePoint(this.R());
});
$b5d28cbc420dd9b2$var$cachedProperty($b5d28cbc420dd9b2$var$Signature, "Sencoded", function Sencoded() {
    return this.eddsa.encodeInt(this.S());
});
$b5d28cbc420dd9b2$var$Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
};
$b5d28cbc420dd9b2$var$Signature.prototype.toHex = function toHex() {
    return $iEG0Y.encode(this.toBytes(), "hex").toUpperCase();
};
module.exports = $b5d28cbc420dd9b2$var$Signature;

});



parcelRequire.register("inGO1", function(module, exports) {

var $74v5W = parcelRequire("74v5W");

var $d4EPx = parcelRequire("d4EPx");

var $2LguU = parcelRequire("2LguU");

var $kQEw6 = parcelRequire("kQEw6");

var $lqJN7 = parcelRequire("lqJN7");

var $1fMpU = parcelRequire("1fMpU");
var $d61b944d5ff6ed83$require$Buffer = $1fMpU.Buffer;
module.exports = $d61b944d5ff6ed83$var$parseKeys;
function $d61b944d5ff6ed83$var$parseKeys(buffer) {
    var password;
    if (typeof buffer === "object" && !$d61b944d5ff6ed83$require$Buffer.isBuffer(buffer)) {
        password = buffer.passphrase;
        buffer = buffer.key;
    }
    if (typeof buffer === "string") buffer = $d61b944d5ff6ed83$require$Buffer.from(buffer);
    var stripped = $2LguU(buffer, password);
    var type = stripped.tag;
    var data = stripped.data;
    var subtype, ndata;
    switch(type){
        case "CERTIFICATE":
            ndata = $74v5W.certificate.decode(data, "der").tbsCertificate.subjectPublicKeyInfo;
        // falls through
        case "PUBLIC KEY":
            if (!ndata) ndata = $74v5W.PublicKey.decode(data, "der");
            subtype = ndata.algorithm.algorithm.join(".");
            switch(subtype){
                case "1.2.840.113549.1.1.1":
                    return $74v5W.RSAPublicKey.decode(ndata.subjectPublicKey.data, "der");
                case "1.2.840.10045.2.1":
                    ndata.subjectPrivateKey = ndata.subjectPublicKey;
                    return {
                        type: "ec",
                        data: ndata
                    };
                case "1.2.840.10040.4.1":
                    ndata.algorithm.params.pub_key = $74v5W.DSAparam.decode(ndata.subjectPublicKey.data, "der");
                    return {
                        type: "dsa",
                        data: ndata.algorithm.params
                    };
                default:
                    throw new Error("unknown key id " + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case "ENCRYPTED PRIVATE KEY":
            data = $74v5W.EncryptedPrivateKey.decode(data, "der");
            data = $d61b944d5ff6ed83$var$decrypt(data, password);
        // falls through
        case "PRIVATE KEY":
            ndata = $74v5W.PrivateKey.decode(data, "der");
            subtype = ndata.algorithm.algorithm.join(".");
            switch(subtype){
                case "1.2.840.113549.1.1.1":
                    return $74v5W.RSAPrivateKey.decode(ndata.subjectPrivateKey, "der");
                case "1.2.840.10045.2.1":
                    return {
                        curve: ndata.algorithm.curve,
                        privateKey: $74v5W.ECPrivateKey.decode(ndata.subjectPrivateKey, "der").privateKey
                    };
                case "1.2.840.10040.4.1":
                    ndata.algorithm.params.priv_key = $74v5W.DSAparam.decode(ndata.subjectPrivateKey, "der");
                    return {
                        type: "dsa",
                        params: ndata.algorithm.params
                    };
                default:
                    throw new Error("unknown key id " + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case "RSA PUBLIC KEY":
            return $74v5W.RSAPublicKey.decode(data, "der");
        case "RSA PRIVATE KEY":
            return $74v5W.RSAPrivateKey.decode(data, "der");
        case "DSA PRIVATE KEY":
            return {
                type: "dsa",
                params: $74v5W.DSAPrivateKey.decode(data, "der")
            };
        case "EC PRIVATE KEY":
            data = $74v5W.ECPrivateKey.decode(data, "der");
            return {
                curve: data.parameters.value,
                privateKey: data.privateKey
            };
        default:
            throw new Error("unknown key type " + type);
    }
}
$d61b944d5ff6ed83$var$parseKeys.signature = $74v5W.signature;
function $d61b944d5ff6ed83$var$decrypt(data, password) {
    var salt = data.algorithm.decrypt.kde.kdeparams.salt;
    var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
    var algo = $d4EPx[data.algorithm.decrypt.cipher.algo.join(".")];
    var iv = data.algorithm.decrypt.cipher.iv;
    var cipherText = data.subjectPrivateKey;
    var keylen = parseInt(algo.split("-")[1], 10) / 8;
    var key = $lqJN7.pbkdf2Sync(password, salt, iters, keylen, "sha1");
    var cipher = $kQEw6.createDecipheriv(algo, key, iv);
    var out = [];
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    return $d61b944d5ff6ed83$require$Buffer.concat(out);
}

});
parcelRequire.register("74v5W", function(module, exports) {

$parcel$export(module.exports, "certificate", () => $526106e3315d7c83$export$c98397a6eb8d0678, (v) => $526106e3315d7c83$export$c98397a6eb8d0678 = v);
$parcel$export(module.exports, "RSAPrivateKey", () => $526106e3315d7c83$export$f4aab6816f64fa6b, (v) => $526106e3315d7c83$export$f4aab6816f64fa6b = v);
$parcel$export(module.exports, "RSAPublicKey", () => $526106e3315d7c83$export$4471f5c65d097c11, (v) => $526106e3315d7c83$export$4471f5c65d097c11 = v);
$parcel$export(module.exports, "PublicKey", () => $526106e3315d7c83$export$ca8b6604d6ce14de, (v) => $526106e3315d7c83$export$ca8b6604d6ce14de = v);
$parcel$export(module.exports, "PrivateKey", () => $526106e3315d7c83$export$8f54525b330fd87b, (v) => $526106e3315d7c83$export$8f54525b330fd87b = v);
$parcel$export(module.exports, "EncryptedPrivateKey", () => $526106e3315d7c83$export$23cd2842b44ca3e7, (v) => $526106e3315d7c83$export$23cd2842b44ca3e7 = v);
$parcel$export(module.exports, "DSAPrivateKey", () => $526106e3315d7c83$export$245c9aaa9f5ce4ce, (v) => $526106e3315d7c83$export$245c9aaa9f5ce4ce = v);
$parcel$export(module.exports, "DSAparam", () => $526106e3315d7c83$export$8ad762e3e6399afe, (v) => $526106e3315d7c83$export$8ad762e3e6399afe = v);
$parcel$export(module.exports, "ECPrivateKey", () => $526106e3315d7c83$export$32ef6f92e22c6ab0, (v) => $526106e3315d7c83$export$32ef6f92e22c6ab0 = v);
$parcel$export(module.exports, "signature", () => $526106e3315d7c83$export$c9cd164b539ebb63, (v) => $526106e3315d7c83$export$c9cd164b539ebb63 = v);
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
var $526106e3315d7c83$export$c98397a6eb8d0678;
var $526106e3315d7c83$export$f4aab6816f64fa6b;
var $526106e3315d7c83$export$4471f5c65d097c11;
var $526106e3315d7c83$export$ca8b6604d6ce14de;
var $526106e3315d7c83$export$8f54525b330fd87b;
var $526106e3315d7c83$export$23cd2842b44ca3e7;
var $526106e3315d7c83$export$245c9aaa9f5ce4ce;
var $526106e3315d7c83$export$8ad762e3e6399afe;
var $526106e3315d7c83$export$32ef6f92e22c6ab0;
var $526106e3315d7c83$export$c9cd164b539ebb63;
"use strict";

var $aJ36C = parcelRequire("aJ36C");

$526106e3315d7c83$export$c98397a6eb8d0678 = (parcelRequire("rhZ80"));
var $526106e3315d7c83$var$RSAPrivateKey = $aJ36C.define("RSAPrivateKey", function() {
    this.seq().obj(this.key("version").int(), this.key("modulus").int(), this.key("publicExponent").int(), this.key("privateExponent").int(), this.key("prime1").int(), this.key("prime2").int(), this.key("exponent1").int(), this.key("exponent2").int(), this.key("coefficient").int());
});
$526106e3315d7c83$export$f4aab6816f64fa6b = $526106e3315d7c83$var$RSAPrivateKey;
var $526106e3315d7c83$var$RSAPublicKey = $aJ36C.define("RSAPublicKey", function() {
    this.seq().obj(this.key("modulus").int(), this.key("publicExponent").int());
});
$526106e3315d7c83$export$4471f5c65d097c11 = $526106e3315d7c83$var$RSAPublicKey;
var $526106e3315d7c83$var$PublicKey = $aJ36C.define("SubjectPublicKeyInfo", function() {
    this.seq().obj(this.key("algorithm").use($526106e3315d7c83$var$AlgorithmIdentifier), this.key("subjectPublicKey").bitstr());
});
$526106e3315d7c83$export$ca8b6604d6ce14de = $526106e3315d7c83$var$PublicKey;
var $526106e3315d7c83$var$AlgorithmIdentifier = $aJ36C.define("AlgorithmIdentifier", function() {
    this.seq().obj(this.key("algorithm").objid(), this.key("none").null_().optional(), this.key("curve").objid().optional(), this.key("params").seq().obj(this.key("p").int(), this.key("q").int(), this.key("g").int()).optional());
});
var $526106e3315d7c83$var$PrivateKeyInfo = $aJ36C.define("PrivateKeyInfo", function() {
    this.seq().obj(this.key("version").int(), this.key("algorithm").use($526106e3315d7c83$var$AlgorithmIdentifier), this.key("subjectPrivateKey").octstr());
});
$526106e3315d7c83$export$8f54525b330fd87b = $526106e3315d7c83$var$PrivateKeyInfo;
var $526106e3315d7c83$var$EncryptedPrivateKeyInfo = $aJ36C.define("EncryptedPrivateKeyInfo", function() {
    this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(), this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(), this.key("kdeparams").seq().obj(this.key("salt").octstr(), this.key("iters").int())), this.key("cipher").seq().obj(this.key("algo").objid(), this.key("iv").octstr()))), this.key("subjectPrivateKey").octstr());
});
$526106e3315d7c83$export$23cd2842b44ca3e7 = $526106e3315d7c83$var$EncryptedPrivateKeyInfo;
var $526106e3315d7c83$var$DSAPrivateKey = $aJ36C.define("DSAPrivateKey", function() {
    this.seq().obj(this.key("version").int(), this.key("p").int(), this.key("q").int(), this.key("g").int(), this.key("pub_key").int(), this.key("priv_key").int());
});
$526106e3315d7c83$export$245c9aaa9f5ce4ce = $526106e3315d7c83$var$DSAPrivateKey;
$526106e3315d7c83$export$8ad762e3e6399afe = $aJ36C.define("DSAparam", function() {
    this.int();
});
var $526106e3315d7c83$var$ECPrivateKey = $aJ36C.define("ECPrivateKey", function() {
    this.seq().obj(this.key("version").int(), this.key("privateKey").octstr(), this.key("parameters").optional().explicit(0).use($526106e3315d7c83$var$ECParameters), this.key("publicKey").optional().explicit(1).bitstr());
});
$526106e3315d7c83$export$32ef6f92e22c6ab0 = $526106e3315d7c83$var$ECPrivateKey;
var $526106e3315d7c83$var$ECParameters = $aJ36C.define("ECParameters", function() {
    this.choice({
        namedCurve: this.objid()
    });
});
$526106e3315d7c83$export$c9cd164b539ebb63 = $aJ36C.define("signature", function() {
    this.seq().obj(this.key("r").int(), this.key("s").int());
});

});
parcelRequire.register("aJ36C", function(module, exports) {
"use strict";
const $7cf084126d359dcc$var$asn1 = module.exports;

$7cf084126d359dcc$var$asn1.bignum = (parcelRequire("ixhaF"));

$7cf084126d359dcc$var$asn1.define = (parcelRequire("3yd3C")).define;

$7cf084126d359dcc$var$asn1.base = (parcelRequire("6SveA"));

$7cf084126d359dcc$var$asn1.constants = (parcelRequire("dXjgu"));

$7cf084126d359dcc$var$asn1.decoders = (parcelRequire("jkSYo"));

$7cf084126d359dcc$var$asn1.encoders = (parcelRequire("4zkhw"));

});
parcelRequire.register("ixhaF", function(module, exports) {

(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = (parcelRequire("XDU19")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});

parcelRequire.register("3yd3C", function(module, exports) {
"use strict";

var $4zkhw = parcelRequire("4zkhw");

var $jkSYo = parcelRequire("jkSYo");

var $6QnvD = parcelRequire("6QnvD");
const $295ead05367a86e5$var$api = module.exports;
$295ead05367a86e5$var$api.define = function define(name, body) {
    return new $295ead05367a86e5$var$Entity(name, body);
};
function $295ead05367a86e5$var$Entity(name, body) {
    this.name = name;
    this.body = body;
    this.decoders = {};
    this.encoders = {};
}
$295ead05367a86e5$var$Entity.prototype._createNamed = function createNamed(Base) {
    const name = this.name;
    function Generated(entity) {
        this._initNamed(entity, name);
    }
    $6QnvD(Generated, Base);
    Generated.prototype._initNamed = function _initNamed(entity, name) {
        Base.call(this, entity, name);
    };
    return new Generated(this);
};
$295ead05367a86e5$var$Entity.prototype._getDecoder = function _getDecoder(enc) {
    enc = enc || "der";
    // Lazily create decoder
    if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed($jkSYo[enc]);
    return this.decoders[enc];
};
$295ead05367a86e5$var$Entity.prototype.decode = function decode(data, enc, options) {
    return this._getDecoder(enc).decode(data, options);
};
$295ead05367a86e5$var$Entity.prototype._getEncoder = function _getEncoder(enc) {
    enc = enc || "der";
    // Lazily create encoder
    if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed($4zkhw[enc]);
    return this.encoders[enc];
};
$295ead05367a86e5$var$Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
    return this._getEncoder(enc).encode(data, reporter);
};

});
parcelRequire.register("4zkhw", function(module, exports) {
"use strict";
const $353a29d3c73b730c$var$encoders = module.exports;

$353a29d3c73b730c$var$encoders.der = (parcelRequire("nGrno"));

$353a29d3c73b730c$var$encoders.pem = (parcelRequire("9bXnP"));

});
parcelRequire.register("nGrno", function(module, exports) {
"use strict";

var $6QnvD = parcelRequire("6QnvD");

var $5ORxK = parcelRequire("5ORxK");
var $047311e83c360102$require$Buffer = $5ORxK.Buffer;

var $fc2DE = parcelRequire("fc2DE");

var $fDBLK = parcelRequire("fDBLK");
function $047311e83c360102$var$DEREncoder(entity) {
    this.enc = "der";
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new $047311e83c360102$var$DERNode();
    this.tree._init(entity.body);
}
module.exports = $047311e83c360102$var$DEREncoder;
$047311e83c360102$var$DEREncoder.prototype.encode = function encode(data, reporter) {
    return this.tree._encode(data, reporter).join();
};
// Tree methods
function $047311e83c360102$var$DERNode(parent) {
    $fc2DE.call(this, "der", parent);
}
$6QnvD($047311e83c360102$var$DERNode, $fc2DE);
$047311e83c360102$var$DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
    const encodedTag = $047311e83c360102$var$encodeTag(tag, primitive, cls, this.reporter);
    // Short form
    if (content.length < 0x80) {
        const header = $047311e83c360102$require$Buffer.alloc(2);
        header[0] = encodedTag;
        header[1] = content.length;
        return this._createEncoderBuffer([
            header,
            content
        ]);
    }
    // Long form
    // Count octets required to store length
    let lenOctets = 1;
    for(let i = content.length; i >= 0x100; i >>= 8)lenOctets++;
    const header = $047311e83c360102$require$Buffer.alloc(2 + lenOctets);
    header[0] = encodedTag;
    header[1] = 0x80 | lenOctets;
    for(let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)header[i] = j & 0xff;
    return this._createEncoderBuffer([
        header,
        content
    ]);
};
$047311e83c360102$var$DERNode.prototype._encodeStr = function encodeStr(str, tag) {
    if (tag === "bitstr") return this._createEncoderBuffer([
        str.unused | 0,
        str.data
    ]);
    else if (tag === "bmpstr") {
        const buf = $047311e83c360102$require$Buffer.alloc(str.length * 2);
        for(let i = 0; i < str.length; i++)buf.writeUInt16BE(str.charCodeAt(i), i * 2);
        return this._createEncoderBuffer(buf);
    } else if (tag === "numstr") {
        if (!this._isNumstr(str)) return this.reporter.error("Encoding of string type: numstr supports only digits and space");
        return this._createEncoderBuffer(str);
    } else if (tag === "printstr") {
        if (!this._isPrintstr(str)) return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
        return this._createEncoderBuffer(str);
    } else if (/str$/.test(tag)) return this._createEncoderBuffer(str);
    else if (tag === "objDesc") return this._createEncoderBuffer(str);
    else return this.reporter.error("Encoding of string type: " + tag + " unsupported");
};
$047311e83c360102$var$DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
    if (typeof id === "string") {
        if (!values) return this.reporter.error("string objid given, but no values map found");
        if (!values.hasOwnProperty(id)) return this.reporter.error("objid not found in values map");
        id = values[id].split(/[\s.]+/g);
        for(let i = 0; i < id.length; i++)id[i] |= 0;
    } else if (Array.isArray(id)) {
        id = id.slice();
        for(let i = 0; i < id.length; i++)id[i] |= 0;
    }
    if (!Array.isArray(id)) return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id));
    if (!relative) {
        if (id[1] >= 40) return this.reporter.error("Second objid identifier OOB");
        id.splice(0, 2, id[0] * 40 + id[1]);
    }
    // Count number of octets
    let size = 0;
    for(let i = 0; i < id.length; i++){
        let ident = id[i];
        for(size++; ident >= 0x80; ident >>= 7)size++;
    }
    const objid = $047311e83c360102$require$Buffer.alloc(size);
    let offset = objid.length - 1;
    for(let i = id.length - 1; i >= 0; i--){
        let ident = id[i];
        objid[offset--] = ident & 0x7f;
        while((ident >>= 7) > 0)objid[offset--] = 0x80 | ident & 0x7f;
    }
    return this._createEncoderBuffer(objid);
};
function $047311e83c360102$var$two(num) {
    if (num < 10) return "0" + num;
    else return num;
}
$047311e83c360102$var$DERNode.prototype._encodeTime = function encodeTime(time, tag) {
    let str;
    const date = new Date(time);
    if (tag === "gentime") str = [
        $047311e83c360102$var$two(date.getUTCFullYear()),
        $047311e83c360102$var$two(date.getUTCMonth() + 1),
        $047311e83c360102$var$two(date.getUTCDate()),
        $047311e83c360102$var$two(date.getUTCHours()),
        $047311e83c360102$var$two(date.getUTCMinutes()),
        $047311e83c360102$var$two(date.getUTCSeconds()),
        "Z"
    ].join("");
    else if (tag === "utctime") str = [
        $047311e83c360102$var$two(date.getUTCFullYear() % 100),
        $047311e83c360102$var$two(date.getUTCMonth() + 1),
        $047311e83c360102$var$two(date.getUTCDate()),
        $047311e83c360102$var$two(date.getUTCHours()),
        $047311e83c360102$var$two(date.getUTCMinutes()),
        $047311e83c360102$var$two(date.getUTCSeconds()),
        "Z"
    ].join("");
    else this.reporter.error("Encoding " + tag + " time is not supported yet");
    return this._encodeStr(str, "octstr");
};
$047311e83c360102$var$DERNode.prototype._encodeNull = function encodeNull() {
    return this._createEncoderBuffer("");
};
$047311e83c360102$var$DERNode.prototype._encodeInt = function encodeInt(num, values) {
    if (typeof num === "string") {
        if (!values) return this.reporter.error("String int or enum given, but no values map");
        if (!values.hasOwnProperty(num)) return this.reporter.error("Values map doesn't contain: " + JSON.stringify(num));
        num = values[num];
    }
    // Bignum, assume big endian
    if (typeof num !== "number" && !$047311e83c360102$require$Buffer.isBuffer(num)) {
        const numArray = num.toArray();
        if (!num.sign && numArray[0] & 0x80) numArray.unshift(0);
        num = $047311e83c360102$require$Buffer.from(numArray);
    }
    if ($047311e83c360102$require$Buffer.isBuffer(num)) {
        let size = num.length;
        if (num.length === 0) size++;
        const out = $047311e83c360102$require$Buffer.alloc(size);
        num.copy(out);
        if (num.length === 0) out[0] = 0;
        return this._createEncoderBuffer(out);
    }
    if (num < 0x80) return this._createEncoderBuffer(num);
    if (num < 0x100) return this._createEncoderBuffer([
        0,
        num
    ]);
    let size = 1;
    for(let i = num; i >= 0x100; i >>= 8)size++;
    const out = new Array(size);
    for(let i = out.length - 1; i >= 0; i--){
        out[i] = num & 0xff;
        num >>= 8;
    }
    if (out[0] & 0x80) out.unshift(0);
    return this._createEncoderBuffer($047311e83c360102$require$Buffer.from(out));
};
$047311e83c360102$var$DERNode.prototype._encodeBool = function encodeBool(value) {
    return this._createEncoderBuffer(value ? 0xff : 0);
};
$047311e83c360102$var$DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === "function") entity = entity(obj);
    return entity._getEncoder("der").tree;
};
$047311e83c360102$var$DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
    const state = this._baseState;
    let i;
    if (state["default"] === null) return false;
    const data = dataBuffer.join();
    if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state["default"], reporter, parent).join();
    if (data.length !== state.defaultBuffer.length) return false;
    for(i = 0; i < data.length; i++)if (data[i] !== state.defaultBuffer[i]) return false;
    return true;
};
// Utility methods
function $047311e83c360102$var$encodeTag(tag, primitive, cls, reporter) {
    let res;
    if (tag === "seqof") tag = "seq";
    else if (tag === "setof") tag = "set";
    if ($fDBLK.tagByName.hasOwnProperty(tag)) res = $fDBLK.tagByName[tag];
    else if (typeof tag === "number" && (tag | 0) === tag) res = tag;
    else return reporter.error("Unknown tag: " + tag);
    if (res >= 0x1f) return reporter.error("Multi-octet tag encoding unsupported");
    if (!primitive) res |= 0x20;
    res |= $fDBLK.tagClassByName[cls || "universal"] << 6;
    return res;
}

});
parcelRequire.register("5ORxK", function(module, exports) {
/* eslint-disable node/no-deprecated-api */ 
var $jx7mO = parcelRequire("jx7mO");
"use strict";

var $fLrIr = parcelRequire("fLrIr");
var $43cb27deb915ae5b$var$Buffer = $fLrIr.Buffer;
var $43cb27deb915ae5b$var$safer = {};
var $43cb27deb915ae5b$var$key;
for($43cb27deb915ae5b$var$key in $fLrIr){
    if (!$fLrIr.hasOwnProperty($43cb27deb915ae5b$var$key)) continue;
    if ($43cb27deb915ae5b$var$key === "SlowBuffer" || $43cb27deb915ae5b$var$key === "Buffer") continue;
    $43cb27deb915ae5b$var$safer[$43cb27deb915ae5b$var$key] = $fLrIr[$43cb27deb915ae5b$var$key];
}
var $43cb27deb915ae5b$var$Safer = $43cb27deb915ae5b$var$safer.Buffer = {};
for($43cb27deb915ae5b$var$key in $43cb27deb915ae5b$var$Buffer){
    if (!$43cb27deb915ae5b$var$Buffer.hasOwnProperty($43cb27deb915ae5b$var$key)) continue;
    if ($43cb27deb915ae5b$var$key === "allocUnsafe" || $43cb27deb915ae5b$var$key === "allocUnsafeSlow") continue;
    $43cb27deb915ae5b$var$Safer[$43cb27deb915ae5b$var$key] = $43cb27deb915ae5b$var$Buffer[$43cb27deb915ae5b$var$key];
}
$43cb27deb915ae5b$var$safer.Buffer.prototype = $43cb27deb915ae5b$var$Buffer.prototype;
if (!$43cb27deb915ae5b$var$Safer.from || $43cb27deb915ae5b$var$Safer.from === Uint8Array.from) $43cb27deb915ae5b$var$Safer.from = function(value, encodingOrOffset, length) {
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
    if (value && typeof value.length === "undefined") throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    return $43cb27deb915ae5b$var$Buffer(value, encodingOrOffset, length);
};
if (!$43cb27deb915ae5b$var$Safer.alloc) $43cb27deb915ae5b$var$Safer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
    if (size < 0 || size >= 2 * 1073741824) throw new RangeError('The value "' + size + '" is invalid for option "size"');
    var buf = $43cb27deb915ae5b$var$Buffer(size);
    if (!fill || fill.length === 0) buf.fill(0);
    else if (typeof encoding === "string") buf.fill(fill, encoding);
    else buf.fill(fill);
    return buf;
};
if (!$43cb27deb915ae5b$var$safer.kStringMaxLength) try {
    $43cb27deb915ae5b$var$safer.kStringMaxLength = $jx7mO.binding("buffer").kStringMaxLength;
} catch (e) {
// we can't determine kStringMaxLength in environments where process.binding
// is unsupported, so let's not set it
}
if (!$43cb27deb915ae5b$var$safer.constants) {
    $43cb27deb915ae5b$var$safer.constants = {
        MAX_LENGTH: $43cb27deb915ae5b$var$safer.kMaxLength
    };
    if ($43cb27deb915ae5b$var$safer.kStringMaxLength) $43cb27deb915ae5b$var$safer.constants.MAX_STRING_LENGTH = $43cb27deb915ae5b$var$safer.kStringMaxLength;
}
module.exports = $43cb27deb915ae5b$var$safer;

});

parcelRequire.register("fc2DE", function(module, exports) {
"use strict";

var $7wNTp = parcelRequire("7wNTp");
var $b0fa05f43267a2d2$require$Reporter = $7wNTp.Reporter;

var $2Bl31 = parcelRequire("2Bl31");
var $b0fa05f43267a2d2$require$EncoderBuffer = $2Bl31.EncoderBuffer;

var $2Bl31 = parcelRequire("2Bl31");
var $b0fa05f43267a2d2$require$DecoderBuffer = $2Bl31.DecoderBuffer;

var $eHrxZ = parcelRequire("eHrxZ");
// Supported tags
const $b0fa05f43267a2d2$var$tags = [
    "seq",
    "seqof",
    "set",
    "setof",
    "objid",
    "bool",
    "gentime",
    "utctime",
    "null_",
    "enum",
    "int",
    "objDesc",
    "bitstr",
    "bmpstr",
    "charstr",
    "genstr",
    "graphstr",
    "ia5str",
    "iso646str",
    "numstr",
    "octstr",
    "printstr",
    "t61str",
    "unistr",
    "utf8str",
    "videostr"
];
// Public methods list
const $b0fa05f43267a2d2$var$methods = [
    "key",
    "obj",
    "use",
    "optional",
    "explicit",
    "implicit",
    "def",
    "choice",
    "any",
    "contains"
].concat($b0fa05f43267a2d2$var$tags);
// Overrided methods list
const $b0fa05f43267a2d2$var$overrided = [
    "_peekTag",
    "_decodeTag",
    "_use",
    "_decodeStr",
    "_decodeObjid",
    "_decodeTime",
    "_decodeNull",
    "_decodeInt",
    "_decodeBool",
    "_decodeList",
    "_encodeComposite",
    "_encodeStr",
    "_encodeObjid",
    "_encodeTime",
    "_encodeNull",
    "_encodeInt",
    "_encodeBool"
];
function $b0fa05f43267a2d2$var$Node(enc, parent, name) {
    const state = {};
    this._baseState = state;
    state.name = name;
    state.enc = enc;
    state.parent = parent || null;
    state.children = null;
    // State
    state.tag = null;
    state.args = null;
    state.reverseArgs = null;
    state.choice = null;
    state.optional = false;
    state.any = false;
    state.obj = false;
    state.use = null;
    state.useDecoder = null;
    state.key = null;
    state["default"] = null;
    state.explicit = null;
    state.implicit = null;
    state.contains = null;
    // Should create new instance on each method
    if (!state.parent) {
        state.children = [];
        this._wrap();
    }
}
module.exports = $b0fa05f43267a2d2$var$Node;
const $b0fa05f43267a2d2$var$stateProps = [
    "enc",
    "parent",
    "children",
    "tag",
    "args",
    "reverseArgs",
    "choice",
    "optional",
    "any",
    "obj",
    "use",
    "alteredUse",
    "key",
    "default",
    "explicit",
    "implicit",
    "contains"
];
$b0fa05f43267a2d2$var$Node.prototype.clone = function clone() {
    const state = this._baseState;
    const cstate = {};
    $b0fa05f43267a2d2$var$stateProps.forEach(function(prop) {
        cstate[prop] = state[prop];
    });
    const res = new this.constructor(cstate.parent);
    res._baseState = cstate;
    return res;
};
$b0fa05f43267a2d2$var$Node.prototype._wrap = function wrap() {
    const state = this._baseState;
    $b0fa05f43267a2d2$var$methods.forEach(function(method) {
        this[method] = function _wrappedMethod() {
            const clone = new this.constructor(this);
            state.children.push(clone);
            return clone[method].apply(clone, arguments);
        };
    }, this);
};
$b0fa05f43267a2d2$var$Node.prototype._init = function init(body) {
    const state = this._baseState;
    $eHrxZ(state.parent === null);
    body.call(this);
    // Filter children
    state.children = state.children.filter(function(child) {
        return child._baseState.parent === this;
    }, this);
    $eHrxZ.equal(state.children.length, 1, "Root node can have only one child");
};
$b0fa05f43267a2d2$var$Node.prototype._useArgs = function useArgs(args) {
    const state = this._baseState;
    // Filter children and args
    const children = args.filter(function(arg) {
        return arg instanceof this.constructor;
    }, this);
    args = args.filter(function(arg) {
        return !(arg instanceof this.constructor);
    }, this);
    if (children.length !== 0) {
        $eHrxZ(state.children === null);
        state.children = children;
        // Replace parent to maintain backward link
        children.forEach(function(child) {
            child._baseState.parent = this;
        }, this);
    }
    if (args.length !== 0) {
        $eHrxZ(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function(arg) {
            if (typeof arg !== "object" || arg.constructor !== Object) return arg;
            const res = {};
            Object.keys(arg).forEach(function(key) {
                if (key == (key | 0)) key |= 0;
                const value = arg[key];
                res[value] = key;
            });
            return res;
        });
    }
};
//
// Overrided methods
//
$b0fa05f43267a2d2$var$overrided.forEach(function(method) {
    $b0fa05f43267a2d2$var$Node.prototype[method] = function _overrided() {
        const state = this._baseState;
        throw new Error(method + " not implemented for encoding: " + state.enc);
    };
});
//
// Public methods
//
$b0fa05f43267a2d2$var$tags.forEach(function(tag) {
    $b0fa05f43267a2d2$var$Node.prototype[tag] = function _tagMethod() {
        const state = this._baseState;
        const args = Array.prototype.slice.call(arguments);
        $eHrxZ(state.tag === null);
        state.tag = tag;
        this._useArgs(args);
        return this;
    };
});
$b0fa05f43267a2d2$var$Node.prototype.use = function use(item) {
    $eHrxZ(item);
    const state = this._baseState;
    $eHrxZ(state.use === null);
    state.use = item;
    return this;
};
$b0fa05f43267a2d2$var$Node.prototype.optional = function optional() {
    const state = this._baseState;
    state.optional = true;
    return this;
};
$b0fa05f43267a2d2$var$Node.prototype.def = function def(val) {
    const state = this._baseState;
    $eHrxZ(state["default"] === null);
    state["default"] = val;
    state.optional = true;
    return this;
};
$b0fa05f43267a2d2$var$Node.prototype.explicit = function explicit(num) {
    const state = this._baseState;
    $eHrxZ(state.explicit === null && state.implicit === null);
    state.explicit = num;
    return this;
};
$b0fa05f43267a2d2$var$Node.prototype.implicit = function implicit(num) {
    const state = this._baseState;
    $eHrxZ(state.explicit === null && state.implicit === null);
    state.implicit = num;
    return this;
};
$b0fa05f43267a2d2$var$Node.prototype.obj = function obj() {
    const state = this._baseState;
    const args = Array.prototype.slice.call(arguments);
    state.obj = true;
    if (args.length !== 0) this._useArgs(args);
    return this;
};
$b0fa05f43267a2d2$var$Node.prototype.key = function key(newKey) {
    const state = this._baseState;
    $eHrxZ(state.key === null);
    state.key = newKey;
    return this;
};
$b0fa05f43267a2d2$var$Node.prototype.any = function any() {
    const state = this._baseState;
    state.any = true;
    return this;
};
$b0fa05f43267a2d2$var$Node.prototype.choice = function choice(obj) {
    const state = this._baseState;
    $eHrxZ(state.choice === null);
    state.choice = obj;
    this._useArgs(Object.keys(obj).map(function(key) {
        return obj[key];
    }));
    return this;
};
$b0fa05f43267a2d2$var$Node.prototype.contains = function contains(item) {
    const state = this._baseState;
    $eHrxZ(state.use === null);
    state.contains = item;
    return this;
};
//
// Decoding
//
$b0fa05f43267a2d2$var$Node.prototype._decode = function decode(input, options) {
    const state = this._baseState;
    // Decode root node
    if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));
    let result = state["default"];
    let present = true;
    let prevKey = null;
    if (state.key !== null) prevKey = input.enterKey(state.key);
    // Check if tag is there
    if (state.optional) {
        let tag = null;
        if (state.explicit !== null) tag = state.explicit;
        else if (state.implicit !== null) tag = state.implicit;
        else if (state.tag !== null) tag = state.tag;
        if (tag === null && !state.any) {
            // Trial and Error
            const save = input.save();
            try {
                if (state.choice === null) this._decodeGeneric(state.tag, input, options);
                else this._decodeChoice(input, options);
                present = true;
            } catch (e) {
                present = false;
            }
            input.restore(save);
        } else {
            present = this._peekTag(input, tag, state.any);
            if (input.isError(present)) return present;
        }
    }
    // Push object on stack
    let prevObj;
    if (state.obj && present) prevObj = input.enterObject();
    if (present) {
        // Unwrap explicit values
        if (state.explicit !== null) {
            const explicit = this._decodeTag(input, state.explicit);
            if (input.isError(explicit)) return explicit;
            input = explicit;
        }
        const start = input.offset;
        // Unwrap implicit and normal values
        if (state.use === null && state.choice === null) {
            let save;
            if (state.any) save = input.save();
            const body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
            if (input.isError(body)) return body;
            if (state.any) result = input.raw(save);
            else input = body;
        }
        if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, "tagged");
        if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, "content");
        // Select proper method for tag
        if (state.any) ;
        else if (state.choice === null) result = this._decodeGeneric(state.tag, input, options);
        else result = this._decodeChoice(input, options);
        if (input.isError(result)) return result;
        // Decode children
        if (!state.any && state.choice === null && state.children !== null) state.children.forEach(function decodeChildren(child) {
            // NOTE: We are ignoring errors here, to let parser continue with other
            // parts of encoded data
            child._decode(input, options);
        });
        // Decode contained/encoded by schema, only in bit or octet strings
        if (state.contains && (state.tag === "octstr" || state.tag === "bitstr")) {
            const data = new $b0fa05f43267a2d2$require$DecoderBuffer(result);
            result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
        }
    }
    // Pop object
    if (state.obj && present) result = input.leaveObject(prevObj);
    // Set key
    if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);
    else if (prevKey !== null) input.exitKey(prevKey);
    return result;
};
$b0fa05f43267a2d2$var$Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
    const state = this._baseState;
    if (tag === "seq" || tag === "set") return null;
    if (tag === "seqof" || tag === "setof") return this._decodeList(input, tag, state.args[0], options);
    else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);
    else if (tag === "objid" && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);
    else if (tag === "objid") return this._decodeObjid(input, null, null, options);
    else if (tag === "gentime" || tag === "utctime") return this._decodeTime(input, tag, options);
    else if (tag === "null_") return this._decodeNull(input, options);
    else if (tag === "bool") return this._decodeBool(input, options);
    else if (tag === "objDesc") return this._decodeStr(input, tag, options);
    else if (tag === "int" || tag === "enum") return this._decodeInt(input, state.args && state.args[0], options);
    if (state.use !== null) return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
    else return input.error("unknown tag: " + tag);
};
$b0fa05f43267a2d2$var$Node.prototype._getUse = function _getUse(entity, obj) {
    const state = this._baseState;
    // Create altered use decoder if implicit is set
    state.useDecoder = this._use(entity, obj);
    $eHrxZ(state.useDecoder._baseState.parent === null);
    state.useDecoder = state.useDecoder._baseState.children[0];
    if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
    }
    return state.useDecoder;
};
$b0fa05f43267a2d2$var$Node.prototype._decodeChoice = function decodeChoice(input, options) {
    const state = this._baseState;
    let result = null;
    let match = false;
    Object.keys(state.choice).some(function(key) {
        const save = input.save();
        const node = state.choice[key];
        try {
            const value = node._decode(input, options);
            if (input.isError(value)) return false;
            result = {
                type: key,
                value: value
            };
            match = true;
        } catch (e) {
            input.restore(save);
            return false;
        }
        return true;
    }, this);
    if (!match) return input.error("Choice not matched");
    return result;
};
//
// Encoding
//
$b0fa05f43267a2d2$var$Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
    return new $b0fa05f43267a2d2$require$EncoderBuffer(data, this.reporter);
};
$b0fa05f43267a2d2$var$Node.prototype._encode = function encode(data, reporter, parent) {
    const state = this._baseState;
    if (state["default"] !== null && state["default"] === data) return;
    const result = this._encodeValue(data, reporter, parent);
    if (result === undefined) return;
    if (this._skipDefault(result, reporter, parent)) return;
    return result;
};
$b0fa05f43267a2d2$var$Node.prototype._encodeValue = function encode(data, reporter, parent) {
    const state = this._baseState;
    // Decode root node
    if (state.parent === null) return state.children[0]._encode(data, reporter || new $b0fa05f43267a2d2$require$Reporter());
    let result = null;
    // Set reporter to share it with a child class
    this.reporter = reporter;
    // Check if data is there
    if (state.optional && data === undefined) {
        if (state["default"] !== null) data = state["default"];
        else return;
    }
    // Encode children first
    let content = null;
    let primitive = false;
    if (state.any) // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
    else if (state.choice) result = this._encodeChoice(data, reporter);
    else if (state.contains) {
        content = this._getUse(state.contains, parent)._encode(data, reporter);
        primitive = true;
    } else if (state.children) {
        content = state.children.map(function(child) {
            if (child._baseState.tag === "null_") return child._encode(null, reporter, data);
            if (child._baseState.key === null) return reporter.error("Child should have a key");
            const prevKey = reporter.enterKey(child._baseState.key);
            if (typeof data !== "object") return reporter.error("Child expected, but input is not object");
            const res = child._encode(data[child._baseState.key], reporter, data);
            reporter.leaveKey(prevKey);
            return res;
        }, this).filter(function(child) {
            return child;
        });
        content = this._createEncoderBuffer(content);
    } else {
        if (state.tag === "seqof" || state.tag === "setof") {
            // TODO(indutny): this should be thrown on DSL level
            if (!(state.args && state.args.length === 1)) return reporter.error("Too many args for : " + state.tag);
            if (!Array.isArray(data)) return reporter.error("seqof/setof, but data is not Array");
            const child = this.clone();
            child._baseState.implicit = null;
            content = this._createEncoderBuffer(data.map(function(item) {
                const state = this._baseState;
                return this._getUse(state.args[0], data)._encode(item, reporter);
            }, child));
        } else if (state.use !== null) result = this._getUse(state.use, parent)._encode(data, reporter);
        else {
            content = this._encodePrimitive(state.tag, data);
            primitive = true;
        }
    }
    // Encode data itself
    if (!state.any && state.choice === null) {
        const tag = state.implicit !== null ? state.implicit : state.tag;
        const cls = state.implicit === null ? "universal" : "context";
        if (tag === null) {
            if (state.use === null) reporter.error("Tag could be omitted only for .use()");
        } else if (state.use === null) result = this._encodeComposite(tag, primitive, cls, content);
    }
    // Wrap in explicit
    if (state.explicit !== null) result = this._encodeComposite(state.explicit, false, "context", result);
    return result;
};
$b0fa05f43267a2d2$var$Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
    const state = this._baseState;
    const node = state.choice[data.type];
    if (!node) $eHrxZ(false, data.type + " not found in " + JSON.stringify(Object.keys(state.choice)));
    return node._encode(data.value, reporter);
};
$b0fa05f43267a2d2$var$Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
    const state = this._baseState;
    if (/str$/.test(tag)) return this._encodeStr(data, tag);
    else if (tag === "objid" && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
    else if (tag === "objid") return this._encodeObjid(data, null, null);
    else if (tag === "gentime" || tag === "utctime") return this._encodeTime(data, tag);
    else if (tag === "null_") return this._encodeNull();
    else if (tag === "int" || tag === "enum") return this._encodeInt(data, state.args && state.reverseArgs[0]);
    else if (tag === "bool") return this._encodeBool(data);
    else if (tag === "objDesc") return this._encodeStr(data, tag);
    else throw new Error("Unsupported tag: " + tag);
};
$b0fa05f43267a2d2$var$Node.prototype._isNumstr = function isNumstr(str) {
    return /^[0-9 ]*$/.test(str);
};
$b0fa05f43267a2d2$var$Node.prototype._isPrintstr = function isPrintstr(str) {
    return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
};

});
parcelRequire.register("7wNTp", function(module, exports) {

$parcel$export(module.exports, "Reporter", () => $57b23934a351e449$export$957313a2f485e5ed, (v) => $57b23934a351e449$export$957313a2f485e5ed = v);
var $57b23934a351e449$export$957313a2f485e5ed;
"use strict";

var $6QnvD = parcelRequire("6QnvD");
function $57b23934a351e449$var$Reporter(options) {
    this._reporterState = {
        obj: null,
        path: [],
        options: options || {},
        errors: []
    };
}
$57b23934a351e449$export$957313a2f485e5ed = $57b23934a351e449$var$Reporter;
$57b23934a351e449$var$Reporter.prototype.isError = function isError(obj) {
    return obj instanceof $57b23934a351e449$var$ReporterError;
};
$57b23934a351e449$var$Reporter.prototype.save = function save() {
    const state = this._reporterState;
    return {
        obj: state.obj,
        pathLen: state.path.length
    };
};
$57b23934a351e449$var$Reporter.prototype.restore = function restore(data) {
    const state = this._reporterState;
    state.obj = data.obj;
    state.path = state.path.slice(0, data.pathLen);
};
$57b23934a351e449$var$Reporter.prototype.enterKey = function enterKey(key) {
    return this._reporterState.path.push(key);
};
$57b23934a351e449$var$Reporter.prototype.exitKey = function exitKey(index) {
    const state = this._reporterState;
    state.path = state.path.slice(0, index - 1);
};
$57b23934a351e449$var$Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
    const state = this._reporterState;
    this.exitKey(index);
    if (state.obj !== null) state.obj[key] = value;
};
$57b23934a351e449$var$Reporter.prototype.path = function path() {
    return this._reporterState.path.join("/");
};
$57b23934a351e449$var$Reporter.prototype.enterObject = function enterObject() {
    const state = this._reporterState;
    const prev = state.obj;
    state.obj = {};
    return prev;
};
$57b23934a351e449$var$Reporter.prototype.leaveObject = function leaveObject(prev) {
    const state = this._reporterState;
    const now = state.obj;
    state.obj = prev;
    return now;
};
$57b23934a351e449$var$Reporter.prototype.error = function error(msg) {
    let err;
    const state = this._reporterState;
    const inherited = msg instanceof $57b23934a351e449$var$ReporterError;
    if (inherited) err = msg;
    else err = new $57b23934a351e449$var$ReporterError(state.path.map(function(elem) {
        return "[" + JSON.stringify(elem) + "]";
    }).join(""), msg.message || msg, msg.stack);
    if (!state.options.partial) throw err;
    if (!inherited) state.errors.push(err);
    return err;
};
$57b23934a351e449$var$Reporter.prototype.wrapResult = function wrapResult(result) {
    const state = this._reporterState;
    if (!state.options.partial) return result;
    return {
        result: this.isError(result) ? null : result,
        errors: state.errors
    };
};
function $57b23934a351e449$var$ReporterError(path, msg) {
    this.path = path;
    this.rethrow(msg);
}
$6QnvD($57b23934a351e449$var$ReporterError, Error);
$57b23934a351e449$var$ReporterError.prototype.rethrow = function rethrow(msg) {
    this.message = msg + " at: " + (this.path || "(shallow)");
    if (Error.captureStackTrace) Error.captureStackTrace(this, $57b23934a351e449$var$ReporterError);
    if (!this.stack) try {
        // IE only adds stack when thrown
        throw new Error(this.message);
    } catch (e) {
        this.stack = e.stack;
    }
    return this;
};

});

parcelRequire.register("2Bl31", function(module, exports) {

$parcel$export(module.exports, "DecoderBuffer", () => $1e4f5d1a8a6f939c$export$bf9f79cdc4a49163, (v) => $1e4f5d1a8a6f939c$export$bf9f79cdc4a49163 = v);
$parcel$export(module.exports, "EncoderBuffer", () => $1e4f5d1a8a6f939c$export$8ff24f7760c7a78e, (v) => $1e4f5d1a8a6f939c$export$8ff24f7760c7a78e = v);
var $1e4f5d1a8a6f939c$export$bf9f79cdc4a49163;
var $1e4f5d1a8a6f939c$export$8ff24f7760c7a78e;
"use strict";

var $6QnvD = parcelRequire("6QnvD");

var $7wNTp = parcelRequire("7wNTp");
var $1e4f5d1a8a6f939c$require$Reporter = $7wNTp.Reporter;

var $5ORxK = parcelRequire("5ORxK");
var $1e4f5d1a8a6f939c$require$Buffer = $5ORxK.Buffer;
function $1e4f5d1a8a6f939c$var$DecoderBuffer(base, options) {
    $1e4f5d1a8a6f939c$require$Reporter.call(this, options);
    if (!$1e4f5d1a8a6f939c$require$Buffer.isBuffer(base)) {
        this.error("Input not Buffer");
        return;
    }
    this.base = base;
    this.offset = 0;
    this.length = base.length;
}
$6QnvD($1e4f5d1a8a6f939c$var$DecoderBuffer, $1e4f5d1a8a6f939c$require$Reporter);
$1e4f5d1a8a6f939c$export$bf9f79cdc4a49163 = $1e4f5d1a8a6f939c$var$DecoderBuffer;
$1e4f5d1a8a6f939c$var$DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
    if (data instanceof $1e4f5d1a8a6f939c$var$DecoderBuffer) return true;
    // Or accept compatible API
    const isCompatible = typeof data === "object" && $1e4f5d1a8a6f939c$require$Buffer.isBuffer(data.base) && data.constructor.name === "DecoderBuffer" && typeof data.offset === "number" && typeof data.length === "number" && typeof data.save === "function" && typeof data.restore === "function" && typeof data.isEmpty === "function" && typeof data.readUInt8 === "function" && typeof data.skip === "function" && typeof data.raw === "function";
    return isCompatible;
};
$1e4f5d1a8a6f939c$var$DecoderBuffer.prototype.save = function save() {
    return {
        offset: this.offset,
        reporter: $1e4f5d1a8a6f939c$require$Reporter.prototype.save.call(this)
    };
};
$1e4f5d1a8a6f939c$var$DecoderBuffer.prototype.restore = function restore(save) {
    // Return skipped data
    const res = new $1e4f5d1a8a6f939c$var$DecoderBuffer(this.base);
    res.offset = save.offset;
    res.length = this.offset;
    this.offset = save.offset;
    $1e4f5d1a8a6f939c$require$Reporter.prototype.restore.call(this, save.reporter);
    return res;
};
$1e4f5d1a8a6f939c$var$DecoderBuffer.prototype.isEmpty = function isEmpty() {
    return this.offset === this.length;
};
$1e4f5d1a8a6f939c$var$DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
    if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);
    else return this.error(fail || "DecoderBuffer overrun");
};
$1e4f5d1a8a6f939c$var$DecoderBuffer.prototype.skip = function skip(bytes, fail) {
    if (!(this.offset + bytes <= this.length)) return this.error(fail || "DecoderBuffer overrun");
    const res = new $1e4f5d1a8a6f939c$var$DecoderBuffer(this.base);
    // Share reporter state
    res._reporterState = this._reporterState;
    res.offset = this.offset;
    res.length = this.offset + bytes;
    this.offset += bytes;
    return res;
};
$1e4f5d1a8a6f939c$var$DecoderBuffer.prototype.raw = function raw(save) {
    return this.base.slice(save ? save.offset : this.offset, this.length);
};
function $1e4f5d1a8a6f939c$var$EncoderBuffer(value, reporter) {
    if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function(item) {
            if (!$1e4f5d1a8a6f939c$var$EncoderBuffer.isEncoderBuffer(item)) item = new $1e4f5d1a8a6f939c$var$EncoderBuffer(item, reporter);
            this.length += item.length;
            return item;
        }, this);
    } else if (typeof value === "number") {
        if (!(0 <= value && value <= 0xff)) return reporter.error("non-byte EncoderBuffer value");
        this.value = value;
        this.length = 1;
    } else if (typeof value === "string") {
        this.value = value;
        this.length = $1e4f5d1a8a6f939c$require$Buffer.byteLength(value);
    } else if ($1e4f5d1a8a6f939c$require$Buffer.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
    } else return reporter.error("Unsupported type: " + typeof value);
}
$1e4f5d1a8a6f939c$export$8ff24f7760c7a78e = $1e4f5d1a8a6f939c$var$EncoderBuffer;
$1e4f5d1a8a6f939c$var$EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
    if (data instanceof $1e4f5d1a8a6f939c$var$EncoderBuffer) return true;
    // Or accept compatible API
    const isCompatible = typeof data === "object" && data.constructor.name === "EncoderBuffer" && typeof data.length === "number" && typeof data.join === "function";
    return isCompatible;
};
$1e4f5d1a8a6f939c$var$EncoderBuffer.prototype.join = function join(out, offset) {
    if (!out) out = $1e4f5d1a8a6f939c$require$Buffer.alloc(this.length);
    if (!offset) offset = 0;
    if (this.length === 0) return out;
    if (Array.isArray(this.value)) this.value.forEach(function(item) {
        item.join(out, offset);
        offset += item.length;
    });
    else {
        if (typeof this.value === "number") out[offset] = this.value;
        else if (typeof this.value === "string") out.write(this.value, offset);
        else if ($1e4f5d1a8a6f939c$require$Buffer.isBuffer(this.value)) this.value.copy(out, offset);
        offset += this.length;
    }
    return out;
};

});


parcelRequire.register("fDBLK", function(module, exports) {

$parcel$export(module.exports, "tagClass", () => $b627cbb8823551fe$export$3584c46ed60baee8, (v) => $b627cbb8823551fe$export$3584c46ed60baee8 = v);
$parcel$export(module.exports, "tagClassByName", () => $b627cbb8823551fe$export$f18596ef8d632e49, (v) => $b627cbb8823551fe$export$f18596ef8d632e49 = v);
$parcel$export(module.exports, "tag", () => $b627cbb8823551fe$export$2b067c6666111485, (v) => $b627cbb8823551fe$export$2b067c6666111485 = v);
$parcel$export(module.exports, "tagByName", () => $b627cbb8823551fe$export$f17df38a421ab9e3, (v) => $b627cbb8823551fe$export$f17df38a421ab9e3 = v);
var $b627cbb8823551fe$export$3584c46ed60baee8;
var $b627cbb8823551fe$export$f18596ef8d632e49;
var $b627cbb8823551fe$export$2b067c6666111485;
var $b627cbb8823551fe$export$f17df38a421ab9e3;
"use strict";
// Helper
function $b627cbb8823551fe$var$reverse(map) {
    const res = {};
    Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        const value = map[key];
        res[value] = key;
    });
    return res;
}
$b627cbb8823551fe$export$3584c46ed60baee8 = {
    0: "universal",
    1: "application",
    2: "context",
    3: "private"
};
$b627cbb8823551fe$export$f18596ef8d632e49 = $b627cbb8823551fe$var$reverse($b627cbb8823551fe$export$3584c46ed60baee8);
$b627cbb8823551fe$export$2b067c6666111485 = {
    0x00: "end",
    0x01: "bool",
    0x02: "int",
    0x03: "bitstr",
    0x04: "octstr",
    0x05: "null_",
    0x06: "objid",
    0x07: "objDesc",
    0x08: "external",
    0x09: "real",
    0x0a: "enum",
    0x0b: "embed",
    0x0c: "utf8str",
    0x0d: "relativeOid",
    0x10: "seq",
    0x11: "set",
    0x12: "numstr",
    0x13: "printstr",
    0x14: "t61str",
    0x15: "videostr",
    0x16: "ia5str",
    0x17: "utctime",
    0x18: "gentime",
    0x19: "graphstr",
    0x1a: "iso646str",
    0x1b: "genstr",
    0x1c: "unistr",
    0x1d: "charstr",
    0x1e: "bmpstr"
};
$b627cbb8823551fe$export$f17df38a421ab9e3 = $b627cbb8823551fe$var$reverse($b627cbb8823551fe$export$2b067c6666111485);

});


parcelRequire.register("9bXnP", function(module, exports) {
"use strict";

var $6QnvD = parcelRequire("6QnvD");

var $nGrno = parcelRequire("nGrno");
function $6b13347282f0ad97$var$PEMEncoder(entity) {
    $nGrno.call(this, entity);
    this.enc = "pem";
}
$6QnvD($6b13347282f0ad97$var$PEMEncoder, $nGrno);
module.exports = $6b13347282f0ad97$var$PEMEncoder;
$6b13347282f0ad97$var$PEMEncoder.prototype.encode = function encode(data, options) {
    const buf = $nGrno.prototype.encode.call(this, data);
    const p = buf.toString("base64");
    const out = [
        "-----BEGIN " + options.label + "-----"
    ];
    for(let i = 0; i < p.length; i += 64)out.push(p.slice(i, i + 64));
    out.push("-----END " + options.label + "-----");
    return out.join("\n");
};

});


parcelRequire.register("jkSYo", function(module, exports) {
"use strict";
const $e13a87197335d911$var$decoders = module.exports;

$e13a87197335d911$var$decoders.der = (parcelRequire("4Ttrm"));

$e13a87197335d911$var$decoders.pem = (parcelRequire("e0KIL"));

});
parcelRequire.register("4Ttrm", function(module, exports) {
"use strict";

var $6QnvD = parcelRequire("6QnvD");

var $ixhaF = parcelRequire("ixhaF");

var $2Bl31 = parcelRequire("2Bl31");
var $390322afc4885199$require$DecoderBuffer = $2Bl31.DecoderBuffer;

var $fc2DE = parcelRequire("fc2DE");

var $fDBLK = parcelRequire("fDBLK");
function $390322afc4885199$var$DERDecoder(entity) {
    this.enc = "der";
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new $390322afc4885199$var$DERNode();
    this.tree._init(entity.body);
}
module.exports = $390322afc4885199$var$DERDecoder;
$390322afc4885199$var$DERDecoder.prototype.decode = function decode(data, options) {
    if (!$390322afc4885199$require$DecoderBuffer.isDecoderBuffer(data)) data = new $390322afc4885199$require$DecoderBuffer(data, options);
    return this.tree._decode(data, options);
};
// Tree methods
function $390322afc4885199$var$DERNode(parent) {
    $fc2DE.call(this, "der", parent);
}
$6QnvD($390322afc4885199$var$DERNode, $fc2DE);
$390322afc4885199$var$DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
    if (buffer.isEmpty()) return false;
    const state = buffer.save();
    const decodedTag = $390322afc4885199$var$derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    buffer.restore(state);
    return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + "of" === tag || any;
};
$390322afc4885199$var$DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
    const decodedTag = $390322afc4885199$var$derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    let len = $390322afc4885199$var$derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"');
    // Failure
    if (buffer.isError(len)) return len;
    if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + "of" !== tag) return buffer.error('Failed to match tag: "' + tag + '"');
    if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    // Indefinite length... find END tag
    const state = buffer.save();
    const res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');
    if (buffer.isError(res)) return res;
    len = buffer.offset - state.offset;
    buffer.restore(state);
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};
$390322afc4885199$var$DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
    for(;;){
        const tag = $390322afc4885199$var$derDecodeTag(buffer, fail);
        if (buffer.isError(tag)) return tag;
        const len = $390322afc4885199$var$derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len)) return len;
        let res;
        if (tag.primitive || len !== null) res = buffer.skip(len);
        else res = this._skipUntilEnd(buffer, fail);
        // Failure
        if (buffer.isError(res)) return res;
        if (tag.tagStr === "end") break;
    }
};
$390322afc4885199$var$DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
    const result = [];
    while(!buffer.isEmpty()){
        const possibleEnd = this._peekTag(buffer, "end");
        if (buffer.isError(possibleEnd)) return possibleEnd;
        const res = decoder.decode(buffer, "der", options);
        if (buffer.isError(res) && possibleEnd) break;
        result.push(res);
    }
    return result;
};
$390322afc4885199$var$DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
    if (tag === "bitstr") {
        const unused = buffer.readUInt8();
        if (buffer.isError(unused)) return unused;
        return {
            unused: unused,
            data: buffer.raw()
        };
    } else if (tag === "bmpstr") {
        const raw = buffer.raw();
        if (raw.length % 2 === 1) return buffer.error("Decoding of string type: bmpstr length mismatch");
        let str = "";
        for(let i = 0; i < raw.length / 2; i++)str += String.fromCharCode(raw.readUInt16BE(i * 2));
        return str;
    } else if (tag === "numstr") {
        const numstr = buffer.raw().toString("ascii");
        if (!this._isNumstr(numstr)) return buffer.error("Decoding of string type: numstr unsupported characters");
        return numstr;
    } else if (tag === "octstr") return buffer.raw();
    else if (tag === "objDesc") return buffer.raw();
    else if (tag === "printstr") {
        const printstr = buffer.raw().toString("ascii");
        if (!this._isPrintstr(printstr)) return buffer.error("Decoding of string type: printstr unsupported characters");
        return printstr;
    } else if (/str$/.test(tag)) return buffer.raw().toString();
    else return buffer.error("Decoding of string type: " + tag + " unsupported");
};
$390322afc4885199$var$DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
    let result;
    const identifiers = [];
    let ident = 0;
    let subident = 0;
    while(!buffer.isEmpty()){
        subident = buffer.readUInt8();
        ident <<= 7;
        ident |= subident & 0x7f;
        if ((subident & 0x80) === 0) {
            identifiers.push(ident);
            ident = 0;
        }
    }
    if (subident & 0x80) identifiers.push(ident);
    const first = identifiers[0] / 40 | 0;
    const second = identifiers[0] % 40;
    if (relative) result = identifiers;
    else result = [
        first,
        second
    ].concat(identifiers.slice(1));
    if (values) {
        let tmp = values[result.join(" ")];
        if (tmp === undefined) tmp = values[result.join(".")];
        if (tmp !== undefined) result = tmp;
    }
    return result;
};
$390322afc4885199$var$DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
    const str = buffer.raw().toString();
    let year;
    let mon;
    let day;
    let hour;
    let min;
    let sec;
    if (tag === "gentime") {
        year = str.slice(0, 4) | 0;
        mon = str.slice(4, 6) | 0;
        day = str.slice(6, 8) | 0;
        hour = str.slice(8, 10) | 0;
        min = str.slice(10, 12) | 0;
        sec = str.slice(12, 14) | 0;
    } else if (tag === "utctime") {
        year = str.slice(0, 2) | 0;
        mon = str.slice(2, 4) | 0;
        day = str.slice(4, 6) | 0;
        hour = str.slice(6, 8) | 0;
        min = str.slice(8, 10) | 0;
        sec = str.slice(10, 12) | 0;
        if (year < 70) year = 2000 + year;
        else year = 1900 + year;
    } else return buffer.error("Decoding " + tag + " time is not supported yet");
    return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};
$390322afc4885199$var$DERNode.prototype._decodeNull = function decodeNull() {
    return null;
};
$390322afc4885199$var$DERNode.prototype._decodeBool = function decodeBool(buffer) {
    const res = buffer.readUInt8();
    if (buffer.isError(res)) return res;
    else return res !== 0;
};
$390322afc4885199$var$DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
    // Bigint, return as it is (assume big endian)
    const raw = buffer.raw();
    let res = new $ixhaF(raw);
    if (values) res = values[res.toString(10)] || res;
    return res;
};
$390322afc4885199$var$DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === "function") entity = entity(obj);
    return entity._getDecoder("der").tree;
};
// Utility methods
function $390322afc4885199$var$derDecodeTag(buf, fail) {
    let tag = buf.readUInt8(fail);
    if (buf.isError(tag)) return tag;
    const cls = $fDBLK.tagClass[tag >> 6];
    const primitive = (tag & 0x20) === 0;
    // Multi-octet tag - load
    if ((tag & 0x1f) === 0x1f) {
        let oct = tag;
        tag = 0;
        while((oct & 0x80) === 0x80){
            oct = buf.readUInt8(fail);
            if (buf.isError(oct)) return oct;
            tag <<= 7;
            tag |= oct & 0x7f;
        }
    } else tag &= 0x1f;
    const tagStr = $fDBLK.tag[tag];
    return {
        cls: cls,
        primitive: primitive,
        tag: tag,
        tagStr: tagStr
    };
}
function $390322afc4885199$var$derDecodeLen(buf, primitive, fail) {
    let len = buf.readUInt8(fail);
    if (buf.isError(len)) return len;
    // Indefinite form
    if (!primitive && len === 0x80) return null;
    // Definite form
    if ((len & 0x80) === 0) // Short form
    return len;
    // Long form
    const num = len & 0x7f;
    if (num > 4) return buf.error("length octect is too long");
    len = 0;
    for(let i = 0; i < num; i++){
        len <<= 8;
        const j = buf.readUInt8(fail);
        if (buf.isError(j)) return j;
        len |= j;
    }
    return len;
}

});

parcelRequire.register("e0KIL", function(module, exports) {
"use strict";

var $6QnvD = parcelRequire("6QnvD");

var $5ORxK = parcelRequire("5ORxK");
var $a3354e92613e4b1d$require$Buffer = $5ORxK.Buffer;

var $4Ttrm = parcelRequire("4Ttrm");
function $a3354e92613e4b1d$var$PEMDecoder(entity) {
    $4Ttrm.call(this, entity);
    this.enc = "pem";
}
$6QnvD($a3354e92613e4b1d$var$PEMDecoder, $4Ttrm);
module.exports = $a3354e92613e4b1d$var$PEMDecoder;
$a3354e92613e4b1d$var$PEMDecoder.prototype.decode = function decode(data, options) {
    const lines = data.toString().split(/[\r\n]+/g);
    const label = options.label.toUpperCase();
    const re = /^-----(BEGIN|END) ([^-]+)-----$/;
    let start = -1;
    let end = -1;
    for(let i = 0; i < lines.length; i++){
        const match = lines[i].match(re);
        if (match === null) continue;
        if (match[2] !== label) continue;
        if (start === -1) {
            if (match[1] !== "BEGIN") break;
            start = i;
        } else {
            if (match[1] !== "END") break;
            end = i;
            break;
        }
    }
    if (start === -1 || end === -1) throw new Error("PEM section not found for: " + label);
    const base64 = lines.slice(start + 1, end).join("");
    // Remove excessive symbols
    base64.replace(/[^a-z0-9+/=]+/gi, "");
    const input = $a3354e92613e4b1d$require$Buffer.from(base64, "base64");
    return $4Ttrm.prototype.decode.call(this, input, options);
};

});



parcelRequire.register("6SveA", function(module, exports) {
"use strict";
const $502003b6aac288b7$var$base = module.exports;

$502003b6aac288b7$var$base.Reporter = (parcelRequire("7wNTp")).Reporter;

$502003b6aac288b7$var$base.DecoderBuffer = (parcelRequire("2Bl31")).DecoderBuffer;

$502003b6aac288b7$var$base.EncoderBuffer = (parcelRequire("2Bl31")).EncoderBuffer;

$502003b6aac288b7$var$base.Node = (parcelRequire("fc2DE"));

});

parcelRequire.register("dXjgu", function(module, exports) {
"use strict";
const $a28fbab1d2451db0$var$constants = module.exports;
// Helper
$a28fbab1d2451db0$var$constants._reverse = function reverse(map) {
    const res = {};
    Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        const value = map[key];
        res[value] = key;
    });
    return res;
};

$a28fbab1d2451db0$var$constants.der = (parcelRequire("fDBLK"));

});


parcelRequire.register("rhZ80", function(module, exports) {
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen
"use strict";

var $aJ36C = parcelRequire("aJ36C");
var $0520792a30e6d2de$var$Time = $aJ36C.define("Time", function() {
    this.choice({
        utcTime: this.utctime(),
        generalTime: this.gentime()
    });
});
var $0520792a30e6d2de$var$AttributeTypeValue = $aJ36C.define("AttributeTypeValue", function() {
    this.seq().obj(this.key("type").objid(), this.key("value").any());
});
var $0520792a30e6d2de$var$AlgorithmIdentifier = $aJ36C.define("AlgorithmIdentifier", function() {
    this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional(), this.key("curve").objid().optional());
});
var $0520792a30e6d2de$var$SubjectPublicKeyInfo = $aJ36C.define("SubjectPublicKeyInfo", function() {
    this.seq().obj(this.key("algorithm").use($0520792a30e6d2de$var$AlgorithmIdentifier), this.key("subjectPublicKey").bitstr());
});
var $0520792a30e6d2de$var$RelativeDistinguishedName = $aJ36C.define("RelativeDistinguishedName", function() {
    this.setof($0520792a30e6d2de$var$AttributeTypeValue);
});
var $0520792a30e6d2de$var$RDNSequence = $aJ36C.define("RDNSequence", function() {
    this.seqof($0520792a30e6d2de$var$RelativeDistinguishedName);
});
var $0520792a30e6d2de$var$Name = $aJ36C.define("Name", function() {
    this.choice({
        rdnSequence: this.use($0520792a30e6d2de$var$RDNSequence)
    });
});
var $0520792a30e6d2de$var$Validity = $aJ36C.define("Validity", function() {
    this.seq().obj(this.key("notBefore").use($0520792a30e6d2de$var$Time), this.key("notAfter").use($0520792a30e6d2de$var$Time));
});
var $0520792a30e6d2de$var$Extension = $aJ36C.define("Extension", function() {
    this.seq().obj(this.key("extnID").objid(), this.key("critical").bool().def(false), this.key("extnValue").octstr());
});
var $0520792a30e6d2de$var$TBSCertificate = $aJ36C.define("TBSCertificate", function() {
    this.seq().obj(this.key("version").explicit(0).int().optional(), this.key("serialNumber").int(), this.key("signature").use($0520792a30e6d2de$var$AlgorithmIdentifier), this.key("issuer").use($0520792a30e6d2de$var$Name), this.key("validity").use($0520792a30e6d2de$var$Validity), this.key("subject").use($0520792a30e6d2de$var$Name), this.key("subjectPublicKeyInfo").use($0520792a30e6d2de$var$SubjectPublicKeyInfo), this.key("issuerUniqueID").implicit(1).bitstr().optional(), this.key("subjectUniqueID").implicit(2).bitstr().optional(), this.key("extensions").explicit(3).seqof($0520792a30e6d2de$var$Extension).optional());
});
var $0520792a30e6d2de$var$X509Certificate = $aJ36C.define("X509Certificate", function() {
    this.seq().obj(this.key("tbsCertificate").use($0520792a30e6d2de$var$TBSCertificate), this.key("signatureAlgorithm").use($0520792a30e6d2de$var$AlgorithmIdentifier), this.key("signatureValue").bitstr());
});
module.exports = $0520792a30e6d2de$var$X509Certificate;

});


parcelRequire.register("d4EPx", function(module, exports) {
module.exports = JSON.parse('{"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"}');

});

parcelRequire.register("2LguU", function(module, exports) {
// adapted from https://github.com/apatil/pemstrip
var $202cc4a3784e69a3$var$findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
var $202cc4a3784e69a3$var$startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
var $202cc4a3784e69a3$var$fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;

var $2yXJt = parcelRequire("2yXJt");

var $kQEw6 = parcelRequire("kQEw6");

var $1fMpU = parcelRequire("1fMpU");
var $202cc4a3784e69a3$require$Buffer = $1fMpU.Buffer;
module.exports = function(okey, password) {
    var key = okey.toString();
    var match = key.match($202cc4a3784e69a3$var$findProc);
    var decrypted;
    if (!match) {
        var match2 = key.match($202cc4a3784e69a3$var$fullRegex);
        decrypted = $202cc4a3784e69a3$require$Buffer.from(match2[2].replace(/[\r\n]/g, ""), "base64");
    } else {
        var suite = "aes" + match[1];
        var iv = $202cc4a3784e69a3$require$Buffer.from(match[2], "hex");
        var cipherText = $202cc4a3784e69a3$require$Buffer.from(match[3].replace(/[\r\n]/g, ""), "base64");
        var cipherKey = $2yXJt(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
        var out = [];
        var cipher = $kQEw6.createDecipheriv(suite, cipherKey, iv);
        out.push(cipher.update(cipherText));
        out.push(cipher.final());
        decrypted = $202cc4a3784e69a3$require$Buffer.concat(out);
    }
    var tag = key.match($202cc4a3784e69a3$var$startRegex)[1];
    return {
        tag: tag,
        data: decrypted
    };
};

});


parcelRequire.register("6d9Oj", function(module, exports) {
module.exports = JSON.parse('{"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"}');

});


parcelRequire.register("iu2SR", function(module, exports) {
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js

var $1O4xH = parcelRequire("1O4xH");
var $d74d44073c72b1e4$require$Buffer = $1O4xH.Buffer;

var $68cvu = parcelRequire("68cvu");

var $aIiD0 = parcelRequire("aIiD0");
var $d74d44073c72b1e4$require$EC = $aIiD0.ec;

var $inGO1 = parcelRequire("inGO1");

var $6d9Oj = parcelRequire("6d9Oj");
function $d74d44073c72b1e4$var$verify(sig, hash, key, signType, tag) {
    var pub = $inGO1(key);
    if (pub.type === "ec") {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== "ecdsa" && signType !== "ecdsa/rsa") throw new Error("wrong public key type");
        return $d74d44073c72b1e4$var$ecVerify(sig, hash, pub);
    } else if (pub.type === "dsa") {
        if (signType !== "dsa") throw new Error("wrong public key type");
        return $d74d44073c72b1e4$var$dsaVerify(sig, hash, pub);
    } else {
        if (signType !== "rsa" && signType !== "ecdsa/rsa") throw new Error("wrong public key type");
    }
    hash = $d74d44073c72b1e4$require$Buffer.concat([
        tag,
        hash
    ]);
    var len = pub.modulus.byteLength();
    var pad = [
        1
    ];
    var padNum = 0;
    while(hash.length + pad.length + 2 < len){
        pad.push(0xff);
        padNum++;
    }
    pad.push(0x00);
    var i = -1;
    while(++i < hash.length)pad.push(hash[i]);
    pad = $d74d44073c72b1e4$require$Buffer.from(pad);
    var red = $68cvu.mont(pub.modulus);
    sig = new $68cvu(sig).toRed(red);
    sig = sig.redPow(new $68cvu(pub.publicExponent));
    sig = $d74d44073c72b1e4$require$Buffer.from(sig.fromRed().toArray());
    var out = padNum < 8 ? 1 : 0;
    len = Math.min(sig.length, pad.length);
    if (sig.length !== pad.length) out = 1;
    i = -1;
    while(++i < len)out |= sig[i] ^ pad[i];
    return out === 0;
}
function $d74d44073c72b1e4$var$ecVerify(sig, hash, pub) {
    var curveId = $6d9Oj[pub.data.algorithm.curve.join(".")];
    if (!curveId) throw new Error("unknown curve " + pub.data.algorithm.curve.join("."));
    var curve = new $d74d44073c72b1e4$require$EC(curveId);
    var pubkey = pub.data.subjectPrivateKey.data;
    return curve.verify(hash, sig, pubkey);
}
function $d74d44073c72b1e4$var$dsaVerify(sig, hash, pub) {
    var p = pub.data.p;
    var q = pub.data.q;
    var g = pub.data.g;
    var y = pub.data.pub_key;
    var unpacked = $inGO1.signature.decode(sig, "der");
    var s = unpacked.s;
    var r = unpacked.r;
    $d74d44073c72b1e4$var$checkValue(s, q);
    $d74d44073c72b1e4$var$checkValue(r, q);
    var montp = $68cvu.mont(p);
    var w = s.invm(q);
    var v = g.toRed(montp).redPow(new $68cvu(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
    return v.cmp(r) === 0;
}
function $d74d44073c72b1e4$var$checkValue(b, q) {
    if (b.cmpn(0) <= 0) throw new Error("invalid sig");
    if (b.cmp(q) >= q) throw new Error("invalid sig");
}
module.exports = $d74d44073c72b1e4$var$verify;

});


parcelRequire.register("242Kq", function(module, exports) {

var $fLrIr = parcelRequire("fLrIr");
var $180e162287af7c5b$require$Buffer = $fLrIr.Buffer;

var $aIiD0 = parcelRequire("aIiD0");

var $aHdU7 = parcelRequire("aHdU7");
module.exports = function createECDH(curve) {
    return new $180e162287af7c5b$var$ECDH(curve);
};
var $180e162287af7c5b$var$aliases = {
    secp256k1: {
        name: "secp256k1",
        byteLength: 32
    },
    secp224r1: {
        name: "p224",
        byteLength: 28
    },
    prime256v1: {
        name: "p256",
        byteLength: 32
    },
    prime192v1: {
        name: "p192",
        byteLength: 24
    },
    ed25519: {
        name: "ed25519",
        byteLength: 32
    },
    secp384r1: {
        name: "p384",
        byteLength: 48
    },
    secp521r1: {
        name: "p521",
        byteLength: 66
    }
};
$180e162287af7c5b$var$aliases.p224 = $180e162287af7c5b$var$aliases.secp224r1;
$180e162287af7c5b$var$aliases.p256 = $180e162287af7c5b$var$aliases.secp256r1 = $180e162287af7c5b$var$aliases.prime256v1;
$180e162287af7c5b$var$aliases.p192 = $180e162287af7c5b$var$aliases.secp192r1 = $180e162287af7c5b$var$aliases.prime192v1;
$180e162287af7c5b$var$aliases.p384 = $180e162287af7c5b$var$aliases.secp384r1;
$180e162287af7c5b$var$aliases.p521 = $180e162287af7c5b$var$aliases.secp521r1;
function $180e162287af7c5b$var$ECDH(curve) {
    this.curveType = $180e162287af7c5b$var$aliases[curve];
    if (!this.curveType) this.curveType = {
        name: curve
    };
    this.curve = new $aIiD0.ec(this.curveType.name) // eslint-disable-line new-cap
    ;
    this.keys = void 0;
}
$180e162287af7c5b$var$ECDH.prototype.generateKeys = function(enc, format) {
    this.keys = this.curve.genKeyPair();
    return this.getPublicKey(enc, format);
};
$180e162287af7c5b$var$ECDH.prototype.computeSecret = function(other, inenc, enc) {
    inenc = inenc || "utf8";
    if (!$180e162287af7c5b$require$Buffer.isBuffer(other)) other = new $180e162287af7c5b$require$Buffer(other, inenc);
    var otherPub = this.curve.keyFromPublic(other).getPublic();
    var out = otherPub.mul(this.keys.getPrivate()).getX();
    return $180e162287af7c5b$var$formatReturnValue(out, enc, this.curveType.byteLength);
};
$180e162287af7c5b$var$ECDH.prototype.getPublicKey = function(enc, format) {
    var key = this.keys.getPublic(format === "compressed", true);
    if (format === "hybrid") {
        if (key[key.length - 1] % 2) key[0] = 7;
        else key[0] = 6;
    }
    return $180e162287af7c5b$var$formatReturnValue(key, enc);
};
$180e162287af7c5b$var$ECDH.prototype.getPrivateKey = function(enc) {
    return $180e162287af7c5b$var$formatReturnValue(this.keys.getPrivate(), enc);
};
$180e162287af7c5b$var$ECDH.prototype.setPublicKey = function(pub, enc) {
    enc = enc || "utf8";
    if (!$180e162287af7c5b$require$Buffer.isBuffer(pub)) pub = new $180e162287af7c5b$require$Buffer(pub, enc);
    this.keys._importPublic(pub);
    return this;
};
$180e162287af7c5b$var$ECDH.prototype.setPrivateKey = function(priv, enc) {
    enc = enc || "utf8";
    if (!$180e162287af7c5b$require$Buffer.isBuffer(priv)) priv = new $180e162287af7c5b$require$Buffer(priv, enc);
    var _priv = new $aHdU7(priv);
    _priv = _priv.toString(16);
    this.keys = this.curve.genKeyPair();
    this.keys._importPrivate(_priv);
    return this;
};
function $180e162287af7c5b$var$formatReturnValue(bn, enc, len) {
    if (!Array.isArray(bn)) bn = bn.toArray();
    var buf = new $180e162287af7c5b$require$Buffer(bn);
    if (len && buf.length < len) {
        var zeros = new $180e162287af7c5b$require$Buffer(len - buf.length);
        zeros.fill(0);
        buf = $180e162287af7c5b$require$Buffer.concat([
            zeros,
            buf
        ]);
    }
    if (!enc) return buf;
    else return buf.toString(enc);
}

});
parcelRequire.register("aHdU7", function(module, exports) {

(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = (parcelRequire("XDU19")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});


parcelRequire.register("W4hSj", function(module, exports) {

$parcel$export(module.exports, "publicEncrypt", () => $0ae8be43a55a2d58$export$512823e338ddb1b7, (v) => $0ae8be43a55a2d58$export$512823e338ddb1b7 = v);
$parcel$export(module.exports, "privateDecrypt", () => $0ae8be43a55a2d58$export$7efb24e2fddf99b9, (v) => $0ae8be43a55a2d58$export$7efb24e2fddf99b9 = v);
$parcel$export(module.exports, "privateEncrypt", () => $0ae8be43a55a2d58$export$9d0e0c0c4a8d30f3, (v) => $0ae8be43a55a2d58$export$9d0e0c0c4a8d30f3 = v);
$parcel$export(module.exports, "publicDecrypt", () => $0ae8be43a55a2d58$export$b9d55ff329113abd, (v) => $0ae8be43a55a2d58$export$b9d55ff329113abd = v);
var $0ae8be43a55a2d58$export$512823e338ddb1b7;
var $0ae8be43a55a2d58$export$7efb24e2fddf99b9;
var $0ae8be43a55a2d58$export$9d0e0c0c4a8d30f3;
var $0ae8be43a55a2d58$export$b9d55ff329113abd;

$0ae8be43a55a2d58$export$512823e338ddb1b7 = (parcelRequire("firOQ"));

$0ae8be43a55a2d58$export$7efb24e2fddf99b9 = (parcelRequire("j77fd"));
$0ae8be43a55a2d58$export$9d0e0c0c4a8d30f3 = function privateEncrypt(key, buf) {
    return $0ae8be43a55a2d58$export$512823e338ddb1b7(key, buf, true);
};
$0ae8be43a55a2d58$export$b9d55ff329113abd = function publicDecrypt(key, buf) {
    return $0ae8be43a55a2d58$export$7efb24e2fddf99b9(key, buf, true);
};

});
parcelRequire.register("firOQ", function(module, exports) {

var $inGO1 = parcelRequire("inGO1");

var $kVSZC = parcelRequire("kVSZC");

var $hIpsB = parcelRequire("hIpsB");

var $hgttz = parcelRequire("hgttz");

var $4lQ0L = parcelRequire("4lQ0L");

var $3kGr1 = parcelRequire("3kGr1");

var $ex2VV = parcelRequire("ex2VV");

var $g0Wvg = parcelRequire("g0Wvg");

var $1fMpU = parcelRequire("1fMpU");
var $b22e1dbe448e9f7f$require$Buffer = $1fMpU.Buffer;
module.exports = function publicEncrypt(publicKey, msg, reverse) {
    var padding;
    if (publicKey.padding) padding = publicKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = $inGO1(publicKey);
    var paddedMsg;
    if (padding === 4) paddedMsg = $b22e1dbe448e9f7f$var$oaep(key, msg);
    else if (padding === 1) paddedMsg = $b22e1dbe448e9f7f$var$pkcs1(key, msg, reverse);
    else if (padding === 3) {
        paddedMsg = new $3kGr1(msg);
        if (paddedMsg.cmp(key.modulus) >= 0) throw new Error("data too long for modulus");
    } else throw new Error("unknown padding");
    if (reverse) return $g0Wvg(paddedMsg, key);
    else return $ex2VV(paddedMsg, key);
};
function $b22e1dbe448e9f7f$var$oaep(key, msg) {
    var k = key.modulus.byteLength();
    var mLen = msg.length;
    var iHash = $hIpsB("sha1").update($b22e1dbe448e9f7f$require$Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    var hLen2 = 2 * hLen;
    if (mLen > k - hLen2 - 2) throw new Error("message too long");
    var ps = $b22e1dbe448e9f7f$require$Buffer.alloc(k - mLen - hLen2 - 2);
    var dblen = k - hLen - 1;
    var seed = $kVSZC(hLen);
    var maskedDb = $4lQ0L($b22e1dbe448e9f7f$require$Buffer.concat([
        iHash,
        ps,
        $b22e1dbe448e9f7f$require$Buffer.alloc(1, 1),
        msg
    ], dblen), $hgttz(seed, dblen));
    var maskedSeed = $4lQ0L(seed, $hgttz(maskedDb, hLen));
    return new $3kGr1($b22e1dbe448e9f7f$require$Buffer.concat([
        $b22e1dbe448e9f7f$require$Buffer.alloc(1),
        maskedSeed,
        maskedDb
    ], k));
}
function $b22e1dbe448e9f7f$var$pkcs1(key, msg, reverse) {
    var mLen = msg.length;
    var k = key.modulus.byteLength();
    if (mLen > k - 11) throw new Error("message too long");
    var ps;
    if (reverse) ps = $b22e1dbe448e9f7f$require$Buffer.alloc(k - mLen - 3, 0xff);
    else ps = $b22e1dbe448e9f7f$var$nonZero(k - mLen - 3);
    return new $3kGr1($b22e1dbe448e9f7f$require$Buffer.concat([
        $b22e1dbe448e9f7f$require$Buffer.from([
            0,
            reverse ? 1 : 2
        ]),
        ps,
        $b22e1dbe448e9f7f$require$Buffer.alloc(1),
        msg
    ], k));
}
function $b22e1dbe448e9f7f$var$nonZero(len) {
    var out = $b22e1dbe448e9f7f$require$Buffer.allocUnsafe(len);
    var i = 0;
    var cache = $kVSZC(len * 2);
    var cur = 0;
    var num;
    while(i < len){
        if (cur === cache.length) {
            cache = $kVSZC(len * 2);
            cur = 0;
        }
        num = cache[cur++];
        if (num) out[i++] = num;
    }
    return out;
}

});
parcelRequire.register("hgttz", function(module, exports) {

var $hIpsB = parcelRequire("hIpsB");

var $1fMpU = parcelRequire("1fMpU");
var $c91acb95f5eaea2c$require$Buffer = $1fMpU.Buffer;
module.exports = function(seed, len) {
    var t = $c91acb95f5eaea2c$require$Buffer.alloc(0);
    var i = 0;
    var c;
    while(t.length < len){
        c = $c91acb95f5eaea2c$var$i2ops(i++);
        t = $c91acb95f5eaea2c$require$Buffer.concat([
            t,
            $hIpsB("sha1").update(seed).update(c).digest()
        ]);
    }
    return t.slice(0, len);
};
function $c91acb95f5eaea2c$var$i2ops(c) {
    var out = $c91acb95f5eaea2c$require$Buffer.allocUnsafe(4);
    out.writeUInt32BE(c, 0);
    return out;
}

});

parcelRequire.register("4lQ0L", function(module, exports) {
module.exports = function xor(a, b) {
    var len = a.length;
    var i = -1;
    while(++i < len)a[i] ^= b[i];
    return a;
};

});

parcelRequire.register("3kGr1", function(module, exports) {

(function(module1, exports) {
    "use strict";
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === "le" || base === "be") {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
        }
    }
    if (typeof module1 === "object") module1.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
        else Buffer = (parcelRequire("XDU19")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") return this._initNumber(number, base, endian);
        if (typeof number === "object") return this._initArray(number, base, endian);
        if (base === "hex") base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === "le") this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 0x4000000) {
            this.words = [
                number & 0x3ffffff
            ];
            this.length = 1;
        } else if (number < 0x10000000000000) {
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff
            ];
            this.length = 2;
        } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [
                number & 0x3ffffff,
                number / 0x4000000 & 0x3ffffff,
                1
            ];
            this.length = 3;
        }
        if (endian !== "le") return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === "number");
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 0x3ffffff;
            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 0xf;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 0x3ffffff;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 0xa;
            else if (c >= 17) r += c - 17 + 0xa;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 0xffffff).toString(16);
                carry = w >>> 24 - off & 0xffffff;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = "0" + out;
            while(out.length % padding !== 0)out = "0" + out;
            if (this.negative !== 0) out = "-" + out;
            return out;
        }
        assert(false, "Base should be between 2 and 36");
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 0x4000000;
        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
        ret += 0x10000000000000 + this.words[1] * 0x4000000;
        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== "undefined");
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(0xff);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 0x40) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 0x8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 0x02) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 0x1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        var carry = r / 0x4000000 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 0x4000000 | 0;
                rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 0x3ffffff;
                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 0x3ffffff;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 0x3ffffff;
            if (w < 0x4000000) carry = 0;
            else carry = w / 0x4000000 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += w / 0x4000000 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - (right / 0x4000000 | 0);
            this.words[i + shift] = w & 0x3ffffff;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 0x3ffffff);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== "div" && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") div = res.div.neg();
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === "div") return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === "mod") return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 0x3ffffff);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 0x3ffffff);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true);
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 0x3ffffff, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + (lo / 0x4000000 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === "k256") prime = new K256();
        else if (name === "p224") prime = new P224();
        else if (name === "p192") prime = new P192();
        else if (name === "p25519") prime = new P25519();
        else throw new Error("Unknown prime " + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});

parcelRequire.register("ex2VV", function(module, exports) {

var $3kGr1 = parcelRequire("3kGr1");

var $1fMpU = parcelRequire("1fMpU");
var $a9466c3f74b455c9$require$Buffer = $1fMpU.Buffer;
function $a9466c3f74b455c9$var$withPublic(paddedMsg, key) {
    return $a9466c3f74b455c9$require$Buffer.from(paddedMsg.toRed($3kGr1.mont(key.modulus)).redPow(new $3kGr1(key.publicExponent)).fromRed().toArray());
}
module.exports = $a9466c3f74b455c9$var$withPublic;

});


parcelRequire.register("j77fd", function(module, exports) {

var $inGO1 = parcelRequire("inGO1");

var $hgttz = parcelRequire("hgttz");

var $4lQ0L = parcelRequire("4lQ0L");

var $3kGr1 = parcelRequire("3kGr1");

var $g0Wvg = parcelRequire("g0Wvg");

var $hIpsB = parcelRequire("hIpsB");

var $ex2VV = parcelRequire("ex2VV");

var $1fMpU = parcelRequire("1fMpU");
var $dea44a5805c0451d$require$Buffer = $1fMpU.Buffer;
module.exports = function privateDecrypt(privateKey, enc, reverse) {
    var padding;
    if (privateKey.padding) padding = privateKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = $inGO1(privateKey);
    var k = key.modulus.byteLength();
    if (enc.length > k || new $3kGr1(enc).cmp(key.modulus) >= 0) throw new Error("decryption error");
    var msg;
    if (reverse) msg = $ex2VV(new $3kGr1(enc), key);
    else msg = $g0Wvg(enc, key);
    var zBuffer = $dea44a5805c0451d$require$Buffer.alloc(k - msg.length);
    msg = $dea44a5805c0451d$require$Buffer.concat([
        zBuffer,
        msg
    ], k);
    if (padding === 4) return $dea44a5805c0451d$var$oaep(key, msg);
    else if (padding === 1) return $dea44a5805c0451d$var$pkcs1(key, msg, reverse);
    else if (padding === 3) return msg;
    else throw new Error("unknown padding");
};
function $dea44a5805c0451d$var$oaep(key, msg) {
    var k = key.modulus.byteLength();
    var iHash = $hIpsB("sha1").update($dea44a5805c0451d$require$Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    if (msg[0] !== 0) throw new Error("decryption error");
    var maskedSeed = msg.slice(1, hLen + 1);
    var maskedDb = msg.slice(hLen + 1);
    var seed = $4lQ0L(maskedSeed, $hgttz(maskedDb, hLen));
    var db = $4lQ0L(maskedDb, $hgttz(seed, k - hLen - 1));
    if ($dea44a5805c0451d$var$compare(iHash, db.slice(0, hLen))) throw new Error("decryption error");
    var i = hLen;
    while(db[i] === 0)i++;
    if (db[i++] !== 1) throw new Error("decryption error");
    return db.slice(i);
}
function $dea44a5805c0451d$var$pkcs1(key, msg, reverse) {
    var p1 = msg.slice(0, 2);
    var i = 2;
    var status = 0;
    while(msg[i++] !== 0)if (i >= msg.length) {
        status++;
        break;
    }
    var ps = msg.slice(2, i - 1);
    if (p1.toString("hex") !== "0002" && !reverse || p1.toString("hex") !== "0001" && reverse) status++;
    if (ps.length < 8) status++;
    if (status) throw new Error("decryption error");
    return msg.slice(i);
}
function $dea44a5805c0451d$var$compare(a, b) {
    a = $dea44a5805c0451d$require$Buffer.from(a);
    b = $dea44a5805c0451d$require$Buffer.from(b);
    var dif = 0;
    var len = a.length;
    if (a.length !== b.length) {
        dif++;
        len = Math.min(a.length, b.length);
    }
    var i = -1;
    while(++i < len)dif += a[i] ^ b[i];
    return dif;
}

});


parcelRequire.register("kMiAK", function(module, exports) {

$parcel$export(module.exports, "randomFill", () => $f206b644a2544472$export$bb1abf2ce84fc7e8, (v) => $f206b644a2544472$export$bb1abf2ce84fc7e8 = v);
$parcel$export(module.exports, "randomFillSync", () => $f206b644a2544472$export$2f7171e78e524d5e, (v) => $f206b644a2544472$export$2f7171e78e524d5e = v);
var $f206b644a2544472$export$bb1abf2ce84fc7e8;
var $f206b644a2544472$export$2f7171e78e524d5e;

var $jx7mO = parcelRequire("jx7mO");
"use strict";
function $f206b644a2544472$var$oldBrowser() {
    throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
}

var $1fMpU = parcelRequire("1fMpU");

var $kVSZC = parcelRequire("kVSZC");
var $f206b644a2544472$var$Buffer = $1fMpU.Buffer;
var $f206b644a2544472$var$kBufferMaxLength = $1fMpU.kMaxLength;
var $f206b644a2544472$var$crypto = $parcel$global.crypto || $parcel$global.msCrypto;
var $f206b644a2544472$var$kMaxUint32 = Math.pow(2, 32) - 1;
function $f206b644a2544472$var$assertOffset(offset, length) {
    if (typeof offset !== "number" || offset !== offset) throw new TypeError("offset must be a number");
    if (offset > $f206b644a2544472$var$kMaxUint32 || offset < 0) throw new TypeError("offset must be a uint32");
    if (offset > $f206b644a2544472$var$kBufferMaxLength || offset > length) throw new RangeError("offset out of range");
}
function $f206b644a2544472$var$assertSize(size, offset, length) {
    if (typeof size !== "number" || size !== size) throw new TypeError("size must be a number");
    if (size > $f206b644a2544472$var$kMaxUint32 || size < 0) throw new TypeError("size must be a uint32");
    if (size + offset > length || size > $f206b644a2544472$var$kBufferMaxLength) throw new RangeError("buffer too small");
}
if ($f206b644a2544472$var$crypto && $f206b644a2544472$var$crypto.getRandomValues || false) {
    $f206b644a2544472$export$bb1abf2ce84fc7e8 = $f206b644a2544472$var$randomFill;
    $f206b644a2544472$export$2f7171e78e524d5e = $f206b644a2544472$var$randomFillSync;
} else {
    $f206b644a2544472$export$bb1abf2ce84fc7e8 = $f206b644a2544472$var$oldBrowser;
    $f206b644a2544472$export$2f7171e78e524d5e = $f206b644a2544472$var$oldBrowser;
}
function $f206b644a2544472$var$randomFill(buf, offset, size, cb) {
    if (!$f206b644a2544472$var$Buffer.isBuffer(buf) && !(buf instanceof $parcel$global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    if (typeof offset === "function") {
        cb = offset;
        offset = 0;
        size = buf.length;
    } else if (typeof size === "function") {
        cb = size;
        size = buf.length - offset;
    } else if (typeof cb !== "function") throw new TypeError('"cb" argument must be a function');
    $f206b644a2544472$var$assertOffset(offset, buf.length);
    $f206b644a2544472$var$assertSize(size, offset, buf.length);
    return $f206b644a2544472$var$actualFill(buf, offset, size, cb);
}
function $f206b644a2544472$var$actualFill(buf, offset, size, cb) {
    var ourBuf = buf.buffer;
    var uint = new Uint8Array(ourBuf, offset, size);
    $f206b644a2544472$var$crypto.getRandomValues(uint);
    if (cb) {
        $jx7mO.nextTick(function() {
            cb(null, buf);
        });
        return;
    }
    return buf;
    if (cb) {
        $kVSZC(size, function(err, bytes) {
            if (err) return cb(err);
            bytes.copy(buf, offset);
            cb(null, buf);
        });
        return;
    }
    var bytes = $kVSZC(size);
    bytes.copy(buf, offset);
    return buf;
}
function $f206b644a2544472$var$randomFillSync(buf, offset, size) {
    if (typeof offset === "undefined") offset = 0;
    if (!$f206b644a2544472$var$Buffer.isBuffer(buf) && !(buf instanceof $parcel$global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    $f206b644a2544472$var$assertOffset(offset, buf.length);
    if (size === undefined) size = buf.length - offset;
    $f206b644a2544472$var$assertSize(size, offset, buf.length);
    return $f206b644a2544472$var$actualFill(buf, offset, size);
}

});



var $b018198082cf097a$exports = {};
!function(e, t) {
    var i, s;
    $b018198082cf097a$exports = t();
}(self, function() {
    return (()=>{
        "use strict";
        var e = {
            4567: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.AccessibilityManager = void 0;
                const s = i(9042), r = i(6114), n = i(9924), o = i(3656), a = i(844), h = i(5596), c = i(9631);
                class l extends a.Disposable {
                    constructor(e, t){
                        super(), this._terminal = e, this._renderService = t, this._liveRegionLineCount = 0, this._charsToConsume = [], this._charsToAnnounce = "", this._accessibilityTreeRoot = document.createElement("div"), this._accessibilityTreeRoot.classList.add("xterm-accessibility"), this._accessibilityTreeRoot.tabIndex = 0, this._rowContainer = document.createElement("div"), this._rowContainer.setAttribute("role", "list"), this._rowContainer.classList.add("xterm-accessibility-tree"), this._rowElements = [];
                        for(let e = 0; e < this._terminal.rows; e++)this._rowElements[e] = this._createAccessibilityTreeNode(), this._rowContainer.appendChild(this._rowElements[e]);
                        if (this._topBoundaryFocusListener = (e)=>this._handleBoundaryFocus(e, 0), this._bottomBoundaryFocusListener = (e)=>this._handleBoundaryFocus(e, 1), this._rowElements[0].addEventListener("focus", this._topBoundaryFocusListener), this._rowElements[this._rowElements.length - 1].addEventListener("focus", this._bottomBoundaryFocusListener), this._refreshRowsDimensions(), this._accessibilityTreeRoot.appendChild(this._rowContainer), this._renderRowsDebouncer = new n.TimeBasedDebouncer(this._renderRows.bind(this)), this._refreshRows(), this._liveRegion = document.createElement("div"), this._liveRegion.classList.add("live-region"), this._liveRegion.setAttribute("aria-live", "assertive"), this._accessibilityTreeRoot.appendChild(this._liveRegion), !this._terminal.element) throw new Error("Cannot enable accessibility before Terminal.open");
                        this._terminal.element.insertAdjacentElement("afterbegin", this._accessibilityTreeRoot), this.register(this._renderRowsDebouncer), this.register(this._terminal.onResize((e)=>this._handleResize(e.rows))), this.register(this._terminal.onRender((e)=>this._refreshRows(e.start, e.end))), this.register(this._terminal.onScroll(()=>this._refreshRows())), this.register(this._terminal.onA11yChar((e)=>this._handleChar(e))), this.register(this._terminal.onLineFeed(()=>this._handleChar("\n"))), this.register(this._terminal.onA11yTab((e)=>this._handleTab(e))), this.register(this._terminal.onKey((e)=>this._handleKey(e.key))), this.register(this._terminal.onBlur(()=>this._clearLiveRegion())), this.register(this._renderService.onDimensionsChange(()=>this._refreshRowsDimensions())), this._screenDprMonitor = new h.ScreenDprMonitor(window), this.register(this._screenDprMonitor), this._screenDprMonitor.setListener(()=>this._refreshRowsDimensions()), this.register((0, o.addDisposableDomListener)(window, "resize", ()=>this._refreshRowsDimensions())), this.register((0, a.toDisposable)(()=>{
                            (0, c.removeElementFromParent)(this._accessibilityTreeRoot), this._rowElements.length = 0;
                        }));
                    }
                    _handleBoundaryFocus(e, t) {
                        const i = e.target, s = this._rowElements[0 === t ? 1 : this._rowElements.length - 2];
                        if (i.getAttribute("aria-posinset") === (0 === t ? "1" : `${this._terminal.buffer.lines.length}`)) return;
                        if (e.relatedTarget !== s) return;
                        let r, n;
                        if (0 === t ? (r = i, n = this._rowElements.pop(), this._rowContainer.removeChild(n)) : (r = this._rowElements.shift(), n = i, this._rowContainer.removeChild(r)), r.removeEventListener("focus", this._topBoundaryFocusListener), n.removeEventListener("focus", this._bottomBoundaryFocusListener), 0 === t) {
                            const e = this._createAccessibilityTreeNode();
                            this._rowElements.unshift(e), this._rowContainer.insertAdjacentElement("afterbegin", e);
                        } else {
                            const e = this._createAccessibilityTreeNode();
                            this._rowElements.push(e), this._rowContainer.appendChild(e);
                        }
                        this._rowElements[0].addEventListener("focus", this._topBoundaryFocusListener), this._rowElements[this._rowElements.length - 1].addEventListener("focus", this._bottomBoundaryFocusListener), this._terminal.scrollLines(0 === t ? -1 : 1), this._rowElements[0 === t ? 1 : this._rowElements.length - 2].focus(), e.preventDefault(), e.stopImmediatePropagation();
                    }
                    _handleResize(e) {
                        this._rowElements[this._rowElements.length - 1].removeEventListener("focus", this._bottomBoundaryFocusListener);
                        for(let e = this._rowContainer.children.length; e < this._terminal.rows; e++)this._rowElements[e] = this._createAccessibilityTreeNode(), this._rowContainer.appendChild(this._rowElements[e]);
                        for(; this._rowElements.length > e;)this._rowContainer.removeChild(this._rowElements.pop());
                        this._rowElements[this._rowElements.length - 1].addEventListener("focus", this._bottomBoundaryFocusListener), this._refreshRowsDimensions();
                    }
                    _createAccessibilityTreeNode() {
                        const e = document.createElement("div");
                        return e.setAttribute("role", "listitem"), e.tabIndex = -1, this._refreshRowDimensions(e), e;
                    }
                    _handleTab(e) {
                        for(let t = 0; t < e; t++)this._handleChar(" ");
                    }
                    _handleChar(e) {
                        this._liveRegionLineCount < 21 && (this._charsToConsume.length > 0 ? this._charsToConsume.shift() !== e && (this._charsToAnnounce += e) : this._charsToAnnounce += e, "\n" === e && (this._liveRegionLineCount++, 21 === this._liveRegionLineCount && (this._liveRegion.textContent += s.tooMuchOutput)), r.isMac && this._liveRegion.textContent && this._liveRegion.textContent.length > 0 && !this._liveRegion.parentNode && setTimeout(()=>{
                            this._accessibilityTreeRoot.appendChild(this._liveRegion);
                        }, 0));
                    }
                    _clearLiveRegion() {
                        this._liveRegion.textContent = "", this._liveRegionLineCount = 0, r.isMac && (0, c.removeElementFromParent)(this._liveRegion);
                    }
                    _handleKey(e) {
                        this._clearLiveRegion(), /\p{Control}/u.test(e) || this._charsToConsume.push(e);
                    }
                    _refreshRows(e, t) {
                        this._renderRowsDebouncer.refresh(e, t, this._terminal.rows);
                    }
                    _renderRows(e, t) {
                        const i = this._terminal.buffer, s = i.lines.length.toString();
                        for(let r = e; r <= t; r++){
                            const e = i.translateBufferLineToString(i.ydisp + r, !0), t = (i.ydisp + r + 1).toString(), n = this._rowElements[r];
                            n && (0 === e.length ? n.innerText = "\xa0" : n.textContent = e, n.setAttribute("aria-posinset", t), n.setAttribute("aria-setsize", s));
                        }
                        this._announceCharacters();
                    }
                    _refreshRowsDimensions() {
                        if (this._renderService.dimensions.css.cell.height) {
                            this._accessibilityTreeRoot.style.width = `${this._renderService.dimensions.css.canvas.width}px`, this._rowElements.length !== this._terminal.rows && this._handleResize(this._terminal.rows);
                            for(let e = 0; e < this._terminal.rows; e++)this._refreshRowDimensions(this._rowElements[e]);
                        }
                    }
                    _refreshRowDimensions(e) {
                        e.style.height = `${this._renderService.dimensions.css.cell.height}px`;
                    }
                    _announceCharacters() {
                        0 !== this._charsToAnnounce.length && (this._liveRegion.textContent += this._charsToAnnounce, this._charsToAnnounce = "");
                    }
                }
                t.AccessibilityManager = l;
            },
            3614: (e, t)=>{
                function i(e) {
                    return e.replace(/\r?\n/g, "\r");
                }
                function s(e, t) {
                    return t ? "\x1b[200~" + e + "\x1b[201~" : e;
                }
                function r(e, t, r) {
                    e = s(e = i(e), r.decPrivateModes.bracketedPasteMode), r.triggerDataEvent(e, !0), t.value = "";
                }
                function n(e, t, i) {
                    const s = i.getBoundingClientRect(), r = e.clientX - s.left - 10, n = e.clientY - s.top - 10;
                    t.style.width = "20px", t.style.height = "20px", t.style.left = `${r}px`, t.style.top = `${n}px`, t.style.zIndex = "1000", t.focus();
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.rightClickHandler = t.moveTextAreaUnderMouseCursor = t.paste = t.handlePasteEvent = t.copyHandler = t.bracketTextForPaste = t.prepareTextForTerminal = void 0, t.prepareTextForTerminal = i, t.bracketTextForPaste = s, t.copyHandler = function(e, t) {
                    e.clipboardData && e.clipboardData.setData("text/plain", t.selectionText), e.preventDefault();
                }, t.handlePasteEvent = function(e, t, i) {
                    e.stopPropagation(), e.clipboardData && r(e.clipboardData.getData("text/plain"), t, i);
                }, t.paste = r, t.moveTextAreaUnderMouseCursor = n, t.rightClickHandler = function(e, t, i, s, r) {
                    n(e, t, i), r && s.rightClickSelect(e), t.value = s.selectionText, t.select();
                };
            },
            7239: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.ColorContrastCache = void 0;
                const s = i(1505);
                t.ColorContrastCache = class {
                    constructor(){
                        this._color = new s.TwoKeyMap, this._css = new s.TwoKeyMap;
                    }
                    setCss(e, t, i) {
                        this._css.set(e, t, i);
                    }
                    getCss(e, t) {
                        return this._css.get(e, t);
                    }
                    setColor(e, t, i) {
                        this._color.set(e, t, i);
                    }
                    getColor(e, t) {
                        return this._color.get(e, t);
                    }
                    clear() {
                        this._color.clear(), this._css.clear();
                    }
                };
            },
            9631: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.removeElementFromParent = void 0, t.removeElementFromParent = function(...e) {
                    var t;
                    for (const i of e)null === (t = null == i ? void 0 : i.parentElement) || void 0 === t || t.removeChild(i);
                };
            },
            3656: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.addDisposableDomListener = void 0, t.addDisposableDomListener = function(e, t, i, s) {
                    e.addEventListener(t, i, s);
                    let r = !1;
                    return {
                        dispose: ()=>{
                            r || (r = !0, e.removeEventListener(t, i, s));
                        }
                    };
                };
            },
            6465: function(e, t, i) {
                var s = this && this.__decorate || function(e, t, i, s) {
                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);
                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);
                    return n > 3 && o && Object.defineProperty(t, i, o), o;
                }, r = this && this.__param || function(e, t) {
                    return function(i, s) {
                        t(i, s, e);
                    };
                };
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.Linkifier2 = void 0;
                const n = i(2585), o = i(8460), a = i(844), h = i(3656);
                let c = class extends a.Disposable {
                    constructor(e){
                        super(), this._bufferService = e, this._linkProviders = [], this._linkCacheDisposables = [], this._isMouseOut = !0, this._activeLine = -1, this._onShowLinkUnderline = this.register(new o.EventEmitter), this.onShowLinkUnderline = this._onShowLinkUnderline.event, this._onHideLinkUnderline = this.register(new o.EventEmitter), this.onHideLinkUnderline = this._onHideLinkUnderline.event, this.register((0, a.getDisposeArrayDisposable)(this._linkCacheDisposables)), this.register((0, a.toDisposable)(()=>{
                            this._lastMouseEvent = void 0;
                        }));
                    }
                    get currentLink() {
                        return this._currentLink;
                    }
                    registerLinkProvider(e) {
                        return this._linkProviders.push(e), {
                            dispose: ()=>{
                                const t = this._linkProviders.indexOf(e);
                                -1 !== t && this._linkProviders.splice(t, 1);
                            }
                        };
                    }
                    attachToDom(e, t, i) {
                        this._element = e, this._mouseService = t, this._renderService = i, this.register((0, h.addDisposableDomListener)(this._element, "mouseleave", ()=>{
                            this._isMouseOut = !0, this._clearCurrentLink();
                        })), this.register((0, h.addDisposableDomListener)(this._element, "mousemove", this._handleMouseMove.bind(this))), this.register((0, h.addDisposableDomListener)(this._element, "mousedown", this._handleMouseDown.bind(this))), this.register((0, h.addDisposableDomListener)(this._element, "mouseup", this._handleMouseUp.bind(this)));
                    }
                    _handleMouseMove(e) {
                        if (this._lastMouseEvent = e, !this._element || !this._mouseService) return;
                        const t = this._positionFromMouseEvent(e, this._element, this._mouseService);
                        if (!t) return;
                        this._isMouseOut = !1;
                        const i = e.composedPath();
                        for(let e = 0; e < i.length; e++){
                            const t = i[e];
                            if (t.classList.contains("xterm")) break;
                            if (t.classList.contains("xterm-hover")) return;
                        }
                        this._lastBufferCell && t.x === this._lastBufferCell.x && t.y === this._lastBufferCell.y || (this._handleHover(t), this._lastBufferCell = t);
                    }
                    _handleHover(e) {
                        if (this._activeLine !== e.y) return this._clearCurrentLink(), void this._askForLink(e, !1);
                        this._currentLink && this._linkAtPosition(this._currentLink.link, e) || (this._clearCurrentLink(), this._askForLink(e, !0));
                    }
                    _askForLink(e, t) {
                        var i, s;
                        this._activeProviderReplies && t || (null === (i = this._activeProviderReplies) || void 0 === i || i.forEach((e)=>{
                            null == e || e.forEach((e)=>{
                                e.link.dispose && e.link.dispose();
                            });
                        }), this._activeProviderReplies = new Map, this._activeLine = e.y);
                        let r = !1;
                        for (const [i, n] of this._linkProviders.entries())t ? (null === (s = this._activeProviderReplies) || void 0 === s ? void 0 : s.get(i)) && (r = this._checkLinkProviderResult(i, e, r)) : n.provideLinks(e.y, (t)=>{
                            var s, n;
                            if (this._isMouseOut) return;
                            const o = null == t ? void 0 : t.map((e)=>({
                                    link: e
                                }));
                            null === (s = this._activeProviderReplies) || void 0 === s || s.set(i, o), r = this._checkLinkProviderResult(i, e, r), (null === (n = this._activeProviderReplies) || void 0 === n ? void 0 : n.size) === this._linkProviders.length && this._removeIntersectingLinks(e.y, this._activeProviderReplies);
                        });
                    }
                    _removeIntersectingLinks(e, t) {
                        const i = new Set;
                        for(let s = 0; s < t.size; s++){
                            const r = t.get(s);
                            if (r) for(let t = 0; t < r.length; t++){
                                const s = r[t], n = s.link.range.start.y < e ? 0 : s.link.range.start.x, o = s.link.range.end.y > e ? this._bufferService.cols : s.link.range.end.x;
                                for(let e = n; e <= o; e++){
                                    if (i.has(e)) {
                                        r.splice(t--, 1);
                                        break;
                                    }
                                    i.add(e);
                                }
                            }
                        }
                    }
                    _checkLinkProviderResult(e, t, i) {
                        var s;
                        if (!this._activeProviderReplies) return i;
                        const r = this._activeProviderReplies.get(e);
                        let n = !1;
                        for(let t = 0; t < e; t++)this._activeProviderReplies.has(t) && !this._activeProviderReplies.get(t) || (n = !0);
                        if (!n && r) {
                            const e = r.find((e)=>this._linkAtPosition(e.link, t));
                            e && (i = !0, this._handleNewLink(e));
                        }
                        if (this._activeProviderReplies.size === this._linkProviders.length && !i) for(let e = 0; e < this._activeProviderReplies.size; e++){
                            const r = null === (s = this._activeProviderReplies.get(e)) || void 0 === s ? void 0 : s.find((e)=>this._linkAtPosition(e.link, t));
                            if (r) {
                                i = !0, this._handleNewLink(r);
                                break;
                            }
                        }
                        return i;
                    }
                    _handleMouseDown() {
                        this._mouseDownLink = this._currentLink;
                    }
                    _handleMouseUp(e) {
                        if (!this._element || !this._mouseService || !this._currentLink) return;
                        const t = this._positionFromMouseEvent(e, this._element, this._mouseService);
                        t && this._mouseDownLink === this._currentLink && this._linkAtPosition(this._currentLink.link, t) && this._currentLink.link.activate(e, this._currentLink.link.text);
                    }
                    _clearCurrentLink(e, t) {
                        this._element && this._currentLink && this._lastMouseEvent && (!e || !t || this._currentLink.link.range.start.y >= e && this._currentLink.link.range.end.y <= t) && (this._linkLeave(this._element, this._currentLink.link, this._lastMouseEvent), this._currentLink = void 0, (0, a.disposeArray)(this._linkCacheDisposables));
                    }
                    _handleNewLink(e) {
                        if (!this._element || !this._lastMouseEvent || !this._mouseService) return;
                        const t = this._positionFromMouseEvent(this._lastMouseEvent, this._element, this._mouseService);
                        t && this._linkAtPosition(e.link, t) && (this._currentLink = e, this._currentLink.state = {
                            decorations: {
                                underline: void 0 === e.link.decorations || e.link.decorations.underline,
                                pointerCursor: void 0 === e.link.decorations || e.link.decorations.pointerCursor
                            },
                            isHovered: !0
                        }, this._linkHover(this._element, e.link, this._lastMouseEvent), e.link.decorations = {}, Object.defineProperties(e.link.decorations, {
                            pointerCursor: {
                                get: ()=>{
                                    var e, t;
                                    return null === (t = null === (e = this._currentLink) || void 0 === e ? void 0 : e.state) || void 0 === t ? void 0 : t.decorations.pointerCursor;
                                },
                                set: (e)=>{
                                    var t, i;
                                    (null === (t = this._currentLink) || void 0 === t ? void 0 : t.state) && this._currentLink.state.decorations.pointerCursor !== e && (this._currentLink.state.decorations.pointerCursor = e, this._currentLink.state.isHovered && (null === (i = this._element) || void 0 === i || i.classList.toggle("xterm-cursor-pointer", e)));
                                }
                            },
                            underline: {
                                get: ()=>{
                                    var e, t;
                                    return null === (t = null === (e = this._currentLink) || void 0 === e ? void 0 : e.state) || void 0 === t ? void 0 : t.decorations.underline;
                                },
                                set: (t)=>{
                                    var i, s, r;
                                    (null === (i = this._currentLink) || void 0 === i ? void 0 : i.state) && (null === (r = null === (s = this._currentLink) || void 0 === s ? void 0 : s.state) || void 0 === r ? void 0 : r.decorations.underline) !== t && (this._currentLink.state.decorations.underline = t, this._currentLink.state.isHovered && this._fireUnderlineEvent(e.link, t));
                                }
                            }
                        }), this._renderService && this._linkCacheDisposables.push(this._renderService.onRenderedViewportChange((e)=>{
                            const t = 0 === e.start ? 0 : e.start + 1 + this._bufferService.buffer.ydisp, i = this._currentLink ? this._lastMouseEvent : void 0;
                            if (this._clearCurrentLink(t, e.end + 1 + this._bufferService.buffer.ydisp), i && this._element) {
                                const e = this._positionFromMouseEvent(i, this._element, this._mouseService);
                                e && this._askForLink(e, !1);
                            }
                        })));
                    }
                    _linkHover(e, t, i) {
                        var s;
                        (null === (s = this._currentLink) || void 0 === s ? void 0 : s.state) && (this._currentLink.state.isHovered = !0, this._currentLink.state.decorations.underline && this._fireUnderlineEvent(t, !0), this._currentLink.state.decorations.pointerCursor && e.classList.add("xterm-cursor-pointer")), t.hover && t.hover(i, t.text);
                    }
                    _fireUnderlineEvent(e, t) {
                        const i = e.range, s = this._bufferService.buffer.ydisp, r = this._createLinkUnderlineEvent(i.start.x - 1, i.start.y - s - 1, i.end.x, i.end.y - s - 1, void 0);
                        (t ? this._onShowLinkUnderline : this._onHideLinkUnderline).fire(r);
                    }
                    _linkLeave(e, t, i) {
                        var s;
                        (null === (s = this._currentLink) || void 0 === s ? void 0 : s.state) && (this._currentLink.state.isHovered = !1, this._currentLink.state.decorations.underline && this._fireUnderlineEvent(t, !1), this._currentLink.state.decorations.pointerCursor && e.classList.remove("xterm-cursor-pointer")), t.leave && t.leave(i, t.text);
                    }
                    _linkAtPosition(e, t) {
                        const i = e.range.start.y * this._bufferService.cols + e.range.start.x, s = e.range.end.y * this._bufferService.cols + e.range.end.x, r = t.y * this._bufferService.cols + t.x;
                        return i <= r && r <= s;
                    }
                    _positionFromMouseEvent(e, t, i) {
                        const s = i.getCoords(e, t, this._bufferService.cols, this._bufferService.rows);
                        if (s) return {
                            x: s[0],
                            y: s[1] + this._bufferService.buffer.ydisp
                        };
                    }
                    _createLinkUnderlineEvent(e, t, i, s, r) {
                        return {
                            x1: e,
                            y1: t,
                            x2: i,
                            y2: s,
                            cols: this._bufferService.cols,
                            fg: r
                        };
                    }
                };
                c = s([
                    r(0, n.IBufferService)
                ], c), t.Linkifier2 = c;
            },
            9042: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.tooMuchOutput = t.promptLabel = void 0, t.promptLabel = "Terminal input", t.tooMuchOutput = "Too much output to announce, navigate to rows manually to read";
            },
            3730: function(e, t, i) {
                var s = this && this.__decorate || function(e, t, i, s) {
                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);
                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);
                    return n > 3 && o && Object.defineProperty(t, i, o), o;
                }, r = this && this.__param || function(e, t) {
                    return function(i, s) {
                        t(i, s, e);
                    };
                };
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.OscLinkProvider = void 0;
                const n = i(511), o = i(2585);
                let a = class {
                    constructor(e, t, i){
                        this._bufferService = e, this._optionsService = t, this._oscLinkService = i;
                    }
                    provideLinks(e, t) {
                        var i;
                        const s = this._bufferService.buffer.lines.get(e - 1);
                        if (!s) return void t(void 0);
                        const r = [], o = this._optionsService.rawOptions.linkHandler, a = new n.CellData, c = s.getTrimmedLength();
                        let l = -1, d = -1, _ = !1;
                        for(let t = 0; t < c; t++)if (-1 !== d || s.hasContent(t)) {
                            if (s.loadCell(t, a), a.hasExtendedAttrs() && a.extended.urlId) {
                                if (-1 === d) {
                                    d = t, l = a.extended.urlId;
                                    continue;
                                }
                                _ = a.extended.urlId !== l;
                            } else -1 !== d && (_ = !0);
                            if (_ || -1 !== d && t === c - 1) {
                                const s = null === (i = this._oscLinkService.getLinkData(l)) || void 0 === i ? void 0 : i.uri;
                                if (s) {
                                    const i = {
                                        start: {
                                            x: d + 1,
                                            y: e
                                        },
                                        end: {
                                            x: t + (_ || t !== c - 1 ? 0 : 1),
                                            y: e
                                        }
                                    };
                                    let n = !1;
                                    if (!(null == o ? void 0 : o.allowNonHttpProtocols)) try {
                                        const e = new URL(s);
                                        [
                                            "http:",
                                            "https:"
                                        ].includes(e.protocol) || (n = !0);
                                    } catch (e) {
                                        n = !0;
                                    }
                                    n || r.push({
                                        text: s,
                                        range: i,
                                        activate: (e, t)=>o ? o.activate(e, t, i) : h(0, t),
                                        hover: (e, t)=>{
                                            var s;
                                            return null === (s = null == o ? void 0 : o.hover) || void 0 === s ? void 0 : s.call(o, e, t, i);
                                        },
                                        leave: (e, t)=>{
                                            var s;
                                            return null === (s = null == o ? void 0 : o.leave) || void 0 === s ? void 0 : s.call(o, e, t, i);
                                        }
                                    });
                                }
                                _ = !1, a.hasExtendedAttrs() && a.extended.urlId ? (d = t, l = a.extended.urlId) : (d = -1, l = -1);
                            }
                        }
                        t(r);
                    }
                };
                function h(e, t) {
                    if (confirm(`Do you want to navigate to ${t}?\n\nWARNING: This link could potentially be dangerous`)) {
                        const e = window.open();
                        if (e) {
                            try {
                                e.opener = null;
                            } catch (e) {}
                            e.location.href = t;
                        } else console.warn("Opening link blocked as opener could not be cleared");
                    }
                }
                a = s([
                    r(0, o.IBufferService),
                    r(1, o.IOptionsService),
                    r(2, o.IOscLinkService)
                ], a), t.OscLinkProvider = a;
            },
            6193: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.RenderDebouncer = void 0, t.RenderDebouncer = class {
                    constructor(e, t){
                        this._parentWindow = e, this._renderCallback = t, this._refreshCallbacks = [];
                    }
                    dispose() {
                        this._animationFrame && (this._parentWindow.cancelAnimationFrame(this._animationFrame), this._animationFrame = void 0);
                    }
                    addRefreshCallback(e) {
                        return this._refreshCallbacks.push(e), this._animationFrame || (this._animationFrame = this._parentWindow.requestAnimationFrame(()=>this._innerRefresh())), this._animationFrame;
                    }
                    refresh(e, t, i) {
                        this._rowCount = i, e = void 0 !== e ? e : 0, t = void 0 !== t ? t : this._rowCount - 1, this._rowStart = void 0 !== this._rowStart ? Math.min(this._rowStart, e) : e, this._rowEnd = void 0 !== this._rowEnd ? Math.max(this._rowEnd, t) : t, this._animationFrame || (this._animationFrame = this._parentWindow.requestAnimationFrame(()=>this._innerRefresh()));
                    }
                    _innerRefresh() {
                        if (this._animationFrame = void 0, void 0 === this._rowStart || void 0 === this._rowEnd || void 0 === this._rowCount) return void this._runRefreshCallbacks();
                        const e = Math.max(this._rowStart, 0), t = Math.min(this._rowEnd, this._rowCount - 1);
                        this._rowStart = void 0, this._rowEnd = void 0, this._renderCallback(e, t), this._runRefreshCallbacks();
                    }
                    _runRefreshCallbacks() {
                        for (const e of this._refreshCallbacks)e(0);
                        this._refreshCallbacks = [];
                    }
                };
            },
            5596: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.ScreenDprMonitor = void 0;
                const s = i(844);
                class r extends s.Disposable {
                    constructor(e){
                        super(), this._parentWindow = e, this._currentDevicePixelRatio = this._parentWindow.devicePixelRatio, this.register((0, s.toDisposable)(()=>{
                            this.clearListener();
                        }));
                    }
                    setListener(e) {
                        this._listener && this.clearListener(), this._listener = e, this._outerListener = ()=>{
                            this._listener && (this._listener(this._parentWindow.devicePixelRatio, this._currentDevicePixelRatio), this._updateDpr());
                        }, this._updateDpr();
                    }
                    _updateDpr() {
                        var e;
                        this._outerListener && (null === (e = this._resolutionMediaMatchList) || void 0 === e || e.removeListener(this._outerListener), this._currentDevicePixelRatio = this._parentWindow.devicePixelRatio, this._resolutionMediaMatchList = this._parentWindow.matchMedia(`screen and (resolution: ${this._parentWindow.devicePixelRatio}dppx)`), this._resolutionMediaMatchList.addListener(this._outerListener));
                    }
                    clearListener() {
                        this._resolutionMediaMatchList && this._listener && this._outerListener && (this._resolutionMediaMatchList.removeListener(this._outerListener), this._resolutionMediaMatchList = void 0, this._listener = void 0, this._outerListener = void 0);
                    }
                }
                t.ScreenDprMonitor = r;
            },
            3236: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.Terminal = void 0;
                const s = i(2950), r = i(1680), n = i(3614), o = i(2584), a = i(5435), h = i(9312), c = i(6114), l = i(3656), d = i(9042), _ = i(4567), u = i(1296), f = i(7399), v = i(8460), g = i(8437), p = i(3230), S = i(4725), m = i(428), C = i(8934), b = i(6465), y = i(5114), w = i(8969), E = i(8055), L = i(4269), k = i(5941), R = i(3107), D = i(5744), A = i(9074), x = i(2585), B = i(3730), T = i(844), M = i(6731), O = "undefined" != typeof window ? window.document : null;
                class I extends w.CoreTerminal {
                    constructor(e = {}){
                        super(e), this.browser = c, this._keyDownHandled = !1, this._keyDownSeen = !1, this._keyPressHandled = !1, this._unprocessedDeadKey = !1, this._onCursorMove = this.register(new v.EventEmitter), this.onCursorMove = this._onCursorMove.event, this._onKey = this.register(new v.EventEmitter), this.onKey = this._onKey.event, this._onRender = this.register(new v.EventEmitter), this.onRender = this._onRender.event, this._onSelectionChange = this.register(new v.EventEmitter), this.onSelectionChange = this._onSelectionChange.event, this._onTitleChange = this.register(new v.EventEmitter), this.onTitleChange = this._onTitleChange.event, this._onBell = this.register(new v.EventEmitter), this.onBell = this._onBell.event, this._onFocus = this.register(new v.EventEmitter), this._onBlur = this.register(new v.EventEmitter), this._onA11yCharEmitter = this.register(new v.EventEmitter), this._onA11yTabEmitter = this.register(new v.EventEmitter), this._onWillOpen = this.register(new v.EventEmitter), this._setup(), this.linkifier2 = this.register(this._instantiationService.createInstance(b.Linkifier2)), this.linkifier2.registerLinkProvider(this._instantiationService.createInstance(B.OscLinkProvider)), this._decorationService = this._instantiationService.createInstance(A.DecorationService), this._instantiationService.setService(x.IDecorationService, this._decorationService), this.register(this._inputHandler.onRequestBell(()=>this._onBell.fire())), this.register(this._inputHandler.onRequestRefreshRows((e, t)=>this.refresh(e, t))), this.register(this._inputHandler.onRequestSendFocus(()=>this._reportFocus())), this.register(this._inputHandler.onRequestReset(()=>this.reset())), this.register(this._inputHandler.onRequestWindowsOptionsReport((e)=>this._reportWindowsOptions(e))), this.register(this._inputHandler.onColor((e)=>this._handleColorEvent(e))), this.register((0, v.forwardEvent)(this._inputHandler.onCursorMove, this._onCursorMove)), this.register((0, v.forwardEvent)(this._inputHandler.onTitleChange, this._onTitleChange)), this.register((0, v.forwardEvent)(this._inputHandler.onA11yChar, this._onA11yCharEmitter)), this.register((0, v.forwardEvent)(this._inputHandler.onA11yTab, this._onA11yTabEmitter)), this.register(this._bufferService.onResize((e)=>this._afterResize(e.cols, e.rows))), this.register((0, T.toDisposable)(()=>{
                            var e, t;
                            this._customKeyEventHandler = void 0, null === (t = null === (e = this.element) || void 0 === e ? void 0 : e.parentNode) || void 0 === t || t.removeChild(this.element);
                        }));
                    }
                    get onFocus() {
                        return this._onFocus.event;
                    }
                    get onBlur() {
                        return this._onBlur.event;
                    }
                    get onA11yChar() {
                        return this._onA11yCharEmitter.event;
                    }
                    get onA11yTab() {
                        return this._onA11yTabEmitter.event;
                    }
                    get onWillOpen() {
                        return this._onWillOpen.event;
                    }
                    _handleColorEvent(e) {
                        if (this._themeService) for (const t of e){
                            let e, i = "";
                            switch(t.index){
                                case 256:
                                    e = "foreground", i = "10";
                                    break;
                                case 257:
                                    e = "background", i = "11";
                                    break;
                                case 258:
                                    e = "cursor", i = "12";
                                    break;
                                default:
                                    e = "ansi", i = "4;" + t.index;
                            }
                            switch(t.type){
                                case 0:
                                    const s = E.color.toColorRGB("ansi" === e ? this._themeService.colors.ansi[t.index] : this._themeService.colors[e]);
                                    this.coreService.triggerDataEvent(`${o.C0.ESC}]${i};${(0, k.toRgbString)(s)}${o.C1_ESCAPED.ST}`);
                                    break;
                                case 1:
                                    if ("ansi" === e) this._themeService.modifyColors((e)=>e.ansi[t.index] = E.rgba.toColor(...t.color));
                                    else {
                                        const i = e;
                                        this._themeService.modifyColors((e)=>e[i] = E.rgba.toColor(...t.color));
                                    }
                                    break;
                                case 2:
                                    this._themeService.restoreColor(t.index);
                            }
                        }
                    }
                    _setup() {
                        super._setup(), this._customKeyEventHandler = void 0;
                    }
                    get buffer() {
                        return this.buffers.active;
                    }
                    focus() {
                        this.textarea && this.textarea.focus({
                            preventScroll: !0
                        });
                    }
                    _handleScreenReaderModeOptionChange(e) {
                        var t;
                        e ? !this._accessibilityManager && this._renderService && (this._accessibilityManager = new _.AccessibilityManager(this, this._renderService)) : (null === (t = this._accessibilityManager) || void 0 === t || t.dispose(), this._accessibilityManager = void 0);
                    }
                    _handleTextAreaFocus(e) {
                        this.coreService.decPrivateModes.sendFocus && this.coreService.triggerDataEvent(o.C0.ESC + "[I"), this.updateCursorStyle(e), this.element.classList.add("focus"), this._showCursor(), this._onFocus.fire();
                    }
                    blur() {
                        var e;
                        return null === (e = this.textarea) || void 0 === e ? void 0 : e.blur();
                    }
                    _handleTextAreaBlur() {
                        this.textarea.value = "", this.refresh(this.buffer.y, this.buffer.y), this.coreService.decPrivateModes.sendFocus && this.coreService.triggerDataEvent(o.C0.ESC + "[O"), this.element.classList.remove("focus"), this._onBlur.fire();
                    }
                    _syncTextArea() {
                        if (!this.textarea || !this.buffer.isCursorInViewport || this._compositionHelper.isComposing || !this._renderService) return;
                        const e = this.buffer.ybase + this.buffer.y, t = this.buffer.lines.get(e);
                        if (!t) return;
                        const i = Math.min(this.buffer.x, this.cols - 1), s = this._renderService.dimensions.css.cell.height, r = t.getWidth(i), n = this._renderService.dimensions.css.cell.width * r, o = this.buffer.y * this._renderService.dimensions.css.cell.height, a = i * this._renderService.dimensions.css.cell.width;
                        this.textarea.style.left = a + "px", this.textarea.style.top = o + "px", this.textarea.style.width = n + "px", this.textarea.style.height = s + "px", this.textarea.style.lineHeight = s + "px", this.textarea.style.zIndex = "-5";
                    }
                    _initGlobal() {
                        this._bindKeys(), this.register((0, l.addDisposableDomListener)(this.element, "copy", (e)=>{
                            this.hasSelection() && (0, n.copyHandler)(e, this._selectionService);
                        }));
                        const e = (e)=>(0, n.handlePasteEvent)(e, this.textarea, this.coreService);
                        this.register((0, l.addDisposableDomListener)(this.textarea, "paste", e)), this.register((0, l.addDisposableDomListener)(this.element, "paste", e)), c.isFirefox ? this.register((0, l.addDisposableDomListener)(this.element, "mousedown", (e)=>{
                            2 === e.button && (0, n.rightClickHandler)(e, this.textarea, this.screenElement, this._selectionService, this.options.rightClickSelectsWord);
                        })) : this.register((0, l.addDisposableDomListener)(this.element, "contextmenu", (e)=>{
                            (0, n.rightClickHandler)(e, this.textarea, this.screenElement, this._selectionService, this.options.rightClickSelectsWord);
                        })), c.isLinux && this.register((0, l.addDisposableDomListener)(this.element, "auxclick", (e)=>{
                            1 === e.button && (0, n.moveTextAreaUnderMouseCursor)(e, this.textarea, this.screenElement);
                        }));
                    }
                    _bindKeys() {
                        this.register((0, l.addDisposableDomListener)(this.textarea, "keyup", (e)=>this._keyUp(e), !0)), this.register((0, l.addDisposableDomListener)(this.textarea, "keydown", (e)=>this._keyDown(e), !0)), this.register((0, l.addDisposableDomListener)(this.textarea, "keypress", (e)=>this._keyPress(e), !0)), this.register((0, l.addDisposableDomListener)(this.textarea, "compositionstart", ()=>this._compositionHelper.compositionstart())), this.register((0, l.addDisposableDomListener)(this.textarea, "compositionupdate", (e)=>this._compositionHelper.compositionupdate(e))), this.register((0, l.addDisposableDomListener)(this.textarea, "compositionend", ()=>this._compositionHelper.compositionend())), this.register((0, l.addDisposableDomListener)(this.textarea, "input", (e)=>this._inputEvent(e), !0)), this.register(this.onRender(()=>this._compositionHelper.updateCompositionElements()));
                    }
                    open(e) {
                        var t;
                        if (!e) throw new Error("Terminal requires a parent element.");
                        e.isConnected || this._logService.debug("Terminal.open was called on an element that was not attached to the DOM"), this._document = e.ownerDocument, this.element = this._document.createElement("div"), this.element.dir = "ltr", this.element.classList.add("terminal"), this.element.classList.add("xterm"), this.element.setAttribute("tabindex", "0"), e.appendChild(this.element);
                        const i = O.createDocumentFragment();
                        this._viewportElement = O.createElement("div"), this._viewportElement.classList.add("xterm-viewport"), i.appendChild(this._viewportElement), this._viewportScrollArea = O.createElement("div"), this._viewportScrollArea.classList.add("xterm-scroll-area"), this._viewportElement.appendChild(this._viewportScrollArea), this.screenElement = O.createElement("div"), this.screenElement.classList.add("xterm-screen"), this._helperContainer = O.createElement("div"), this._helperContainer.classList.add("xterm-helpers"), this.screenElement.appendChild(this._helperContainer), i.appendChild(this.screenElement), this.textarea = O.createElement("textarea"), this.textarea.classList.add("xterm-helper-textarea"), this.textarea.setAttribute("aria-label", d.promptLabel), c.isChromeOS || this.textarea.setAttribute("aria-multiline", "false"), this.textarea.setAttribute("autocorrect", "off"), this.textarea.setAttribute("autocapitalize", "off"), this.textarea.setAttribute("spellcheck", "false"), this.textarea.tabIndex = 0, this._coreBrowserService = this._instantiationService.createInstance(y.CoreBrowserService, this.textarea, null !== (t = this._document.defaultView) && void 0 !== t ? t : window), this._instantiationService.setService(S.ICoreBrowserService, this._coreBrowserService), this.register((0, l.addDisposableDomListener)(this.textarea, "focus", (e)=>this._handleTextAreaFocus(e))), this.register((0, l.addDisposableDomListener)(this.textarea, "blur", ()=>this._handleTextAreaBlur())), this._helperContainer.appendChild(this.textarea), this._charSizeService = this._instantiationService.createInstance(m.CharSizeService, this._document, this._helperContainer), this._instantiationService.setService(S.ICharSizeService, this._charSizeService), this._themeService = this._instantiationService.createInstance(M.ThemeService), this._instantiationService.setService(S.IThemeService, this._themeService), this._characterJoinerService = this._instantiationService.createInstance(L.CharacterJoinerService), this._instantiationService.setService(S.ICharacterJoinerService, this._characterJoinerService), this._renderService = this.register(this._instantiationService.createInstance(p.RenderService, this.rows, this.screenElement)), this._instantiationService.setService(S.IRenderService, this._renderService), this.register(this._renderService.onRenderedViewportChange((e)=>this._onRender.fire(e))), this.onResize((e)=>this._renderService.resize(e.cols, e.rows)), this._compositionView = O.createElement("div"), this._compositionView.classList.add("composition-view"), this._compositionHelper = this._instantiationService.createInstance(s.CompositionHelper, this.textarea, this._compositionView), this._helperContainer.appendChild(this._compositionView), this.element.appendChild(i);
                        try {
                            this._onWillOpen.fire(this.element);
                        } catch (e) {}
                        this._renderService.hasRenderer() || this._renderService.setRenderer(this._createRenderer()), this._mouseService = this._instantiationService.createInstance(C.MouseService), this._instantiationService.setService(S.IMouseService, this._mouseService), this.viewport = this._instantiationService.createInstance(r.Viewport, (e)=>this.scrollLines(e, !0, 1), this._viewportElement, this._viewportScrollArea), this.register(this._inputHandler.onRequestSyncScrollBar(()=>this.viewport.syncScrollArea())), this.register(this.viewport), this.register(this.onCursorMove(()=>{
                            this._renderService.handleCursorMove(), this._syncTextArea();
                        })), this.register(this.onResize(()=>this._renderService.handleResize(this.cols, this.rows))), this.register(this.onBlur(()=>this._renderService.handleBlur())), this.register(this.onFocus(()=>this._renderService.handleFocus())), this.register(this._renderService.onDimensionsChange(()=>this.viewport.syncScrollArea())), this._selectionService = this.register(this._instantiationService.createInstance(h.SelectionService, this.element, this.screenElement, this.linkifier2)), this._instantiationService.setService(S.ISelectionService, this._selectionService), this.register(this._selectionService.onRequestScrollLines((e)=>this.scrollLines(e.amount, e.suppressScrollEvent))), this.register(this._selectionService.onSelectionChange(()=>this._onSelectionChange.fire())), this.register(this._selectionService.onRequestRedraw((e)=>this._renderService.handleSelectionChanged(e.start, e.end, e.columnSelectMode))), this.register(this._selectionService.onLinuxMouseSelection((e)=>{
                            this.textarea.value = e, this.textarea.focus(), this.textarea.select();
                        })), this.register(this._onScroll.event((e)=>{
                            this.viewport.syncScrollArea(), this._selectionService.refresh();
                        })), this.register((0, l.addDisposableDomListener)(this._viewportElement, "scroll", ()=>this._selectionService.refresh())), this.linkifier2.attachToDom(this.screenElement, this._mouseService, this._renderService), this.register(this._instantiationService.createInstance(R.BufferDecorationRenderer, this.screenElement)), this.register((0, l.addDisposableDomListener)(this.element, "mousedown", (e)=>this._selectionService.handleMouseDown(e))), this.coreMouseService.areMouseEventsActive ? (this._selectionService.disable(), this.element.classList.add("enable-mouse-events")) : this._selectionService.enable(), this.options.screenReaderMode && (this._accessibilityManager = new _.AccessibilityManager(this, this._renderService)), this.register(this.optionsService.onSpecificOptionChange("screenReaderMode", (e)=>this._handleScreenReaderModeOptionChange(e))), this.options.overviewRulerWidth && (this._overviewRulerRenderer = this.register(this._instantiationService.createInstance(D.OverviewRulerRenderer, this._viewportElement, this.screenElement))), this.optionsService.onSpecificOptionChange("overviewRulerWidth", (e)=>{
                            !this._overviewRulerRenderer && e && this._viewportElement && this.screenElement && (this._overviewRulerRenderer = this.register(this._instantiationService.createInstance(D.OverviewRulerRenderer, this._viewportElement, this.screenElement)));
                        }), this._charSizeService.measure(), this.refresh(0, this.rows - 1), this._initGlobal(), this.bindMouse();
                    }
                    _createRenderer() {
                        return this._instantiationService.createInstance(u.DomRenderer, this.element, this.screenElement, this._viewportElement, this.linkifier2);
                    }
                    bindMouse() {
                        const e = this, t = this.element;
                        function i(t) {
                            const i = e._mouseService.getMouseReportCoords(t, e.screenElement);
                            if (!i) return !1;
                            let s, r;
                            switch(t.overrideType || t.type){
                                case "mousemove":
                                    r = 32, void 0 === t.buttons ? (s = 3, void 0 !== t.button && (s = t.button < 3 ? t.button : 3)) : s = 1 & t.buttons ? 0 : 4 & t.buttons ? 1 : 2 & t.buttons ? 2 : 3;
                                    break;
                                case "mouseup":
                                    r = 0, s = t.button < 3 ? t.button : 3;
                                    break;
                                case "mousedown":
                                    r = 1, s = t.button < 3 ? t.button : 3;
                                    break;
                                case "wheel":
                                    if (0 === e.viewport.getLinesScrolled(t)) return !1;
                                    r = t.deltaY < 0 ? 0 : 1, s = 4;
                                    break;
                                default:
                                    return !1;
                            }
                            return !(void 0 === r || void 0 === s || s > 4) && e.coreMouseService.triggerMouseEvent({
                                col: i.col,
                                row: i.row,
                                x: i.x,
                                y: i.y,
                                button: s,
                                action: r,
                                ctrl: t.ctrlKey,
                                alt: t.altKey,
                                shift: t.shiftKey
                            });
                        }
                        const s = {
                            mouseup: null,
                            wheel: null,
                            mousedrag: null,
                            mousemove: null
                        }, r = {
                            mouseup: (e)=>(i(e), e.buttons || (this._document.removeEventListener("mouseup", s.mouseup), s.mousedrag && this._document.removeEventListener("mousemove", s.mousedrag)), this.cancel(e)),
                            wheel: (e)=>(i(e), this.cancel(e, !0)),
                            mousedrag: (e)=>{
                                e.buttons && i(e);
                            },
                            mousemove: (e)=>{
                                e.buttons || i(e);
                            }
                        };
                        this.register(this.coreMouseService.onProtocolChange((e)=>{
                            e ? ("debug" === this.optionsService.rawOptions.logLevel && this._logService.debug("Binding to mouse events:", this.coreMouseService.explainEvents(e)), this.element.classList.add("enable-mouse-events"), this._selectionService.disable()) : (this._logService.debug("Unbinding from mouse events."), this.element.classList.remove("enable-mouse-events"), this._selectionService.enable()), 8 & e ? s.mousemove || (t.addEventListener("mousemove", r.mousemove), s.mousemove = r.mousemove) : (t.removeEventListener("mousemove", s.mousemove), s.mousemove = null), 16 & e ? s.wheel || (t.addEventListener("wheel", r.wheel, {
                                passive: !1
                            }), s.wheel = r.wheel) : (t.removeEventListener("wheel", s.wheel), s.wheel = null), 2 & e ? s.mouseup || (s.mouseup = r.mouseup) : (this._document.removeEventListener("mouseup", s.mouseup), s.mouseup = null), 4 & e ? s.mousedrag || (s.mousedrag = r.mousedrag) : (this._document.removeEventListener("mousemove", s.mousedrag), s.mousedrag = null);
                        })), this.coreMouseService.activeProtocol = this.coreMouseService.activeProtocol, this.register((0, l.addDisposableDomListener)(t, "mousedown", (e)=>{
                            if (e.preventDefault(), this.focus(), this.coreMouseService.areMouseEventsActive && !this._selectionService.shouldForceSelection(e)) return i(e), s.mouseup && this._document.addEventListener("mouseup", s.mouseup), s.mousedrag && this._document.addEventListener("mousemove", s.mousedrag), this.cancel(e);
                        })), this.register((0, l.addDisposableDomListener)(t, "wheel", (e)=>{
                            if (!s.wheel) {
                                if (!this.buffer.hasScrollback) {
                                    const t = this.viewport.getLinesScrolled(e);
                                    if (0 === t) return;
                                    const i = o.C0.ESC + (this.coreService.decPrivateModes.applicationCursorKeys ? "O" : "[") + (e.deltaY < 0 ? "A" : "B");
                                    let s = "";
                                    for(let e = 0; e < Math.abs(t); e++)s += i;
                                    return this.coreService.triggerDataEvent(s, !0), this.cancel(e, !0);
                                }
                                return this.viewport.handleWheel(e) ? this.cancel(e) : void 0;
                            }
                        }, {
                            passive: !1
                        })), this.register((0, l.addDisposableDomListener)(t, "touchstart", (e)=>{
                            if (!this.coreMouseService.areMouseEventsActive) return this.viewport.handleTouchStart(e), this.cancel(e);
                        }, {
                            passive: !0
                        })), this.register((0, l.addDisposableDomListener)(t, "touchmove", (e)=>{
                            if (!this.coreMouseService.areMouseEventsActive) return this.viewport.handleTouchMove(e) ? void 0 : this.cancel(e);
                        }, {
                            passive: !1
                        }));
                    }
                    refresh(e, t) {
                        var i;
                        null === (i = this._renderService) || void 0 === i || i.refreshRows(e, t);
                    }
                    updateCursorStyle(e) {
                        var t;
                        (null === (t = this._selectionService) || void 0 === t ? void 0 : t.shouldColumnSelect(e)) ? this.element.classList.add("column-select") : this.element.classList.remove("column-select");
                    }
                    _showCursor() {
                        this.coreService.isCursorInitialized || (this.coreService.isCursorInitialized = !0, this.refresh(this.buffer.y, this.buffer.y));
                    }
                    scrollLines(e, t, i = 0) {
                        super.scrollLines(e, t, i), this.refresh(0, this.rows - 1);
                    }
                    paste(e) {
                        (0, n.paste)(e, this.textarea, this.coreService);
                    }
                    attachCustomKeyEventHandler(e) {
                        this._customKeyEventHandler = e;
                    }
                    registerLinkProvider(e) {
                        return this.linkifier2.registerLinkProvider(e);
                    }
                    registerCharacterJoiner(e) {
                        if (!this._characterJoinerService) throw new Error("Terminal must be opened first");
                        const t = this._characterJoinerService.register(e);
                        return this.refresh(0, this.rows - 1), t;
                    }
                    deregisterCharacterJoiner(e) {
                        if (!this._characterJoinerService) throw new Error("Terminal must be opened first");
                        this._characterJoinerService.deregister(e) && this.refresh(0, this.rows - 1);
                    }
                    get markers() {
                        return this.buffer.markers;
                    }
                    addMarker(e) {
                        return this.buffer.addMarker(this.buffer.ybase + this.buffer.y + e);
                    }
                    registerDecoration(e) {
                        return this._decorationService.registerDecoration(e);
                    }
                    hasSelection() {
                        return !!this._selectionService && this._selectionService.hasSelection;
                    }
                    select(e, t, i) {
                        this._selectionService.setSelection(e, t, i);
                    }
                    getSelection() {
                        return this._selectionService ? this._selectionService.selectionText : "";
                    }
                    getSelectionPosition() {
                        if (this._selectionService && this._selectionService.hasSelection) return {
                            start: {
                                x: this._selectionService.selectionStart[0],
                                y: this._selectionService.selectionStart[1]
                            },
                            end: {
                                x: this._selectionService.selectionEnd[0],
                                y: this._selectionService.selectionEnd[1]
                            }
                        };
                    }
                    clearSelection() {
                        var e;
                        null === (e = this._selectionService) || void 0 === e || e.clearSelection();
                    }
                    selectAll() {
                        var e;
                        null === (e = this._selectionService) || void 0 === e || e.selectAll();
                    }
                    selectLines(e, t) {
                        var i;
                        null === (i = this._selectionService) || void 0 === i || i.selectLines(e, t);
                    }
                    _keyDown(e) {
                        if (this._keyDownHandled = !1, this._keyDownSeen = !0, this._customKeyEventHandler && !1 === this._customKeyEventHandler(e)) return !1;
                        const t = this.browser.isMac && this.options.macOptionIsMeta && e.altKey;
                        if (!t && !this._compositionHelper.keydown(e)) return this.options.scrollOnUserInput && this.buffer.ybase !== this.buffer.ydisp && this._bufferService.scrollToBottom(), !1;
                        t || "Dead" !== e.key && "AltGraph" !== e.key || (this._unprocessedDeadKey = !0);
                        const i = (0, f.evaluateKeyboardEvent)(e, this.coreService.decPrivateModes.applicationCursorKeys, this.browser.isMac, this.options.macOptionIsMeta);
                        if (this.updateCursorStyle(e), 3 === i.type || 2 === i.type) {
                            const t = this.rows - 1;
                            return this.scrollLines(2 === i.type ? -t : t), this.cancel(e, !0);
                        }
                        return 1 === i.type && this.selectAll(), !!this._isThirdLevelShift(this.browser, e) || (i.cancel && this.cancel(e, !0), !i.key || !!(e.key && !e.ctrlKey && !e.altKey && !e.metaKey && 1 === e.key.length && e.key.charCodeAt(0) >= 65 && e.key.charCodeAt(0) <= 90) || (this._unprocessedDeadKey ? (this._unprocessedDeadKey = !1, !0) : (i.key !== o.C0.ETX && i.key !== o.C0.CR || (this.textarea.value = ""), this._onKey.fire({
                            key: i.key,
                            domEvent: e
                        }), this._showCursor(), this.coreService.triggerDataEvent(i.key, !0), !this.optionsService.rawOptions.screenReaderMode || e.altKey || e.ctrlKey ? this.cancel(e, !0) : void (this._keyDownHandled = !0))));
                    }
                    _isThirdLevelShift(e, t) {
                        const i = e.isMac && !this.options.macOptionIsMeta && t.altKey && !t.ctrlKey && !t.metaKey || e.isWindows && t.altKey && t.ctrlKey && !t.metaKey || e.isWindows && t.getModifierState("AltGraph");
                        return "keypress" === t.type ? i : i && (!t.keyCode || t.keyCode > 47);
                    }
                    _keyUp(e) {
                        this._keyDownSeen = !1, this._customKeyEventHandler && !1 === this._customKeyEventHandler(e) || (function(e) {
                            return 16 === e.keyCode || 17 === e.keyCode || 18 === e.keyCode;
                        }(e) || this.focus(), this.updateCursorStyle(e), this._keyPressHandled = !1);
                    }
                    _keyPress(e) {
                        let t;
                        if (this._keyPressHandled = !1, this._keyDownHandled) return !1;
                        if (this._customKeyEventHandler && !1 === this._customKeyEventHandler(e)) return !1;
                        if (this.cancel(e), e.charCode) t = e.charCode;
                        else if (null === e.which || void 0 === e.which) t = e.keyCode;
                        else {
                            if (0 === e.which || 0 === e.charCode) return !1;
                            t = e.which;
                        }
                        return !(!t || (e.altKey || e.ctrlKey || e.metaKey) && !this._isThirdLevelShift(this.browser, e) || (t = String.fromCharCode(t), this._onKey.fire({
                            key: t,
                            domEvent: e
                        }), this._showCursor(), this.coreService.triggerDataEvent(t, !0), this._keyPressHandled = !0, this._unprocessedDeadKey = !1, 0));
                    }
                    _inputEvent(e) {
                        if (e.data && "insertText" === e.inputType && (!e.composed || !this._keyDownSeen) && !this.optionsService.rawOptions.screenReaderMode) {
                            if (this._keyPressHandled) return !1;
                            this._unprocessedDeadKey = !1;
                            const t = e.data;
                            return this.coreService.triggerDataEvent(t, !0), this.cancel(e), !0;
                        }
                        return !1;
                    }
                    resize(e, t) {
                        e !== this.cols || t !== this.rows ? super.resize(e, t) : this._charSizeService && !this._charSizeService.hasValidSize && this._charSizeService.measure();
                    }
                    _afterResize(e, t) {
                        var i, s;
                        null === (i = this._charSizeService) || void 0 === i || i.measure(), null === (s = this.viewport) || void 0 === s || s.syncScrollArea(!0);
                    }
                    clear() {
                        if (0 !== this.buffer.ybase || 0 !== this.buffer.y) {
                            this.buffer.clearAllMarkers(), this.buffer.lines.set(0, this.buffer.lines.get(this.buffer.ybase + this.buffer.y)), this.buffer.lines.length = 1, this.buffer.ydisp = 0, this.buffer.ybase = 0, this.buffer.y = 0;
                            for(let e = 1; e < this.rows; e++)this.buffer.lines.push(this.buffer.getBlankLine(g.DEFAULT_ATTR_DATA));
                            this.refresh(0, this.rows - 1), this._onScroll.fire({
                                position: this.buffer.ydisp,
                                source: 0
                            });
                        }
                    }
                    reset() {
                        var e, t;
                        this.options.rows = this.rows, this.options.cols = this.cols;
                        const i = this._customKeyEventHandler;
                        this._setup(), super.reset(), null === (e = this._selectionService) || void 0 === e || e.reset(), this._decorationService.reset(), this._customKeyEventHandler = i, this.refresh(0, this.rows - 1), null === (t = this.viewport) || void 0 === t || t.syncScrollArea();
                    }
                    clearTextureAtlas() {
                        var e;
                        null === (e = this._renderService) || void 0 === e || e.clearTextureAtlas();
                    }
                    _reportFocus() {
                        var e;
                        (null === (e = this.element) || void 0 === e ? void 0 : e.classList.contains("focus")) ? this.coreService.triggerDataEvent(o.C0.ESC + "[I") : this.coreService.triggerDataEvent(o.C0.ESC + "[O");
                    }
                    _reportWindowsOptions(e) {
                        if (this._renderService) switch(e){
                            case a.WindowsOptionsReportType.GET_WIN_SIZE_PIXELS:
                                const e1 = this._renderService.dimensions.css.canvas.width.toFixed(0), t = this._renderService.dimensions.css.canvas.height.toFixed(0);
                                this.coreService.triggerDataEvent(`${o.C0.ESC}[4;${t};${e1}t`);
                                break;
                            case a.WindowsOptionsReportType.GET_CELL_SIZE_PIXELS:
                                const i = this._renderService.dimensions.css.cell.width.toFixed(0), s = this._renderService.dimensions.css.cell.height.toFixed(0);
                                this.coreService.triggerDataEvent(`${o.C0.ESC}[6;${s};${i}t`);
                        }
                    }
                    cancel(e, t) {
                        if (this.options.cancelEvents || t) return e.preventDefault(), e.stopPropagation(), !1;
                    }
                }
                t.Terminal = I;
            },
            9924: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.TimeBasedDebouncer = void 0, t.TimeBasedDebouncer = class {
                    constructor(e, t = 1e3){
                        this._renderCallback = e, this._debounceThresholdMS = t, this._lastRefreshMs = 0, this._additionalRefreshRequested = !1;
                    }
                    dispose() {
                        this._refreshTimeoutID && clearTimeout(this._refreshTimeoutID);
                    }
                    refresh(e, t, i) {
                        this._rowCount = i, e = void 0 !== e ? e : 0, t = void 0 !== t ? t : this._rowCount - 1, this._rowStart = void 0 !== this._rowStart ? Math.min(this._rowStart, e) : e, this._rowEnd = void 0 !== this._rowEnd ? Math.max(this._rowEnd, t) : t;
                        const s = Date.now();
                        if (s - this._lastRefreshMs >= this._debounceThresholdMS) this._lastRefreshMs = s, this._innerRefresh();
                        else if (!this._additionalRefreshRequested) {
                            const e = s - this._lastRefreshMs, t = this._debounceThresholdMS - e;
                            this._additionalRefreshRequested = !0, this._refreshTimeoutID = window.setTimeout(()=>{
                                this._lastRefreshMs = Date.now(), this._innerRefresh(), this._additionalRefreshRequested = !1, this._refreshTimeoutID = void 0;
                            }, t);
                        }
                    }
                    _innerRefresh() {
                        if (void 0 === this._rowStart || void 0 === this._rowEnd || void 0 === this._rowCount) return;
                        const e = Math.max(this._rowStart, 0), t = Math.min(this._rowEnd, this._rowCount - 1);
                        this._rowStart = void 0, this._rowEnd = void 0, this._renderCallback(e, t);
                    }
                };
            },
            1680: function(e, t, i) {
                var s = this && this.__decorate || function(e, t, i, s) {
                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);
                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);
                    return n > 3 && o && Object.defineProperty(t, i, o), o;
                }, r = this && this.__param || function(e, t) {
                    return function(i, s) {
                        t(i, s, e);
                    };
                };
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.Viewport = void 0;
                const n = i(844), o = i(3656), a = i(4725), h = i(2585);
                let c = class extends n.Disposable {
                    constructor(e, t, i, s, r, n, a, h, c){
                        super(), this._scrollLines = e, this._viewportElement = t, this._scrollArea = i, this._bufferService = s, this._optionsService = r, this._charSizeService = n, this._renderService = a, this._coreBrowserService = h, this.scrollBarWidth = 0, this._currentRowHeight = 0, this._currentDeviceCellHeight = 0, this._lastRecordedBufferLength = 0, this._lastRecordedViewportHeight = 0, this._lastRecordedBufferHeight = 0, this._lastTouchY = 0, this._lastScrollTop = 0, this._wheelPartialScroll = 0, this._refreshAnimationFrame = null, this._ignoreNextScrollEvent = !1, this._smoothScrollState = {
                            startTime: 0,
                            origin: -1,
                            target: -1
                        }, this.scrollBarWidth = this._viewportElement.offsetWidth - this._scrollArea.offsetWidth || 15, this.register((0, o.addDisposableDomListener)(this._viewportElement, "scroll", this._handleScroll.bind(this))), this._activeBuffer = this._bufferService.buffer, this.register(this._bufferService.buffers.onBufferActivate((e)=>this._activeBuffer = e.activeBuffer)), this._renderDimensions = this._renderService.dimensions, this.register(this._renderService.onDimensionsChange((e)=>this._renderDimensions = e)), this._handleThemeChange(c.colors), this.register(c.onChangeColors((e)=>this._handleThemeChange(e))), this.register(this._optionsService.onSpecificOptionChange("scrollback", ()=>this.syncScrollArea())), setTimeout(()=>this.syncScrollArea(), 0);
                    }
                    _handleThemeChange(e) {
                        this._viewportElement.style.backgroundColor = e.background.css;
                    }
                    _refresh(e) {
                        if (e) return this._innerRefresh(), void (null !== this._refreshAnimationFrame && this._coreBrowserService.window.cancelAnimationFrame(this._refreshAnimationFrame));
                        null === this._refreshAnimationFrame && (this._refreshAnimationFrame = this._coreBrowserService.window.requestAnimationFrame(()=>this._innerRefresh()));
                    }
                    _innerRefresh() {
                        if (this._charSizeService.height > 0) {
                            this._currentRowHeight = this._renderService.dimensions.device.cell.height / this._coreBrowserService.dpr, this._currentDeviceCellHeight = this._renderService.dimensions.device.cell.height, this._lastRecordedViewportHeight = this._viewportElement.offsetHeight;
                            const e = Math.round(this._currentRowHeight * this._lastRecordedBufferLength) + (this._lastRecordedViewportHeight - this._renderService.dimensions.css.canvas.height);
                            this._lastRecordedBufferHeight !== e && (this._lastRecordedBufferHeight = e, this._scrollArea.style.height = this._lastRecordedBufferHeight + "px");
                        }
                        const e = this._bufferService.buffer.ydisp * this._currentRowHeight;
                        this._viewportElement.scrollTop !== e && (this._ignoreNextScrollEvent = !0, this._viewportElement.scrollTop = e), this._refreshAnimationFrame = null;
                    }
                    syncScrollArea(e = !1) {
                        if (this._lastRecordedBufferLength !== this._bufferService.buffer.lines.length) return this._lastRecordedBufferLength = this._bufferService.buffer.lines.length, void this._refresh(e);
                        this._lastRecordedViewportHeight === this._renderService.dimensions.css.canvas.height && this._lastScrollTop === this._activeBuffer.ydisp * this._currentRowHeight && this._renderDimensions.device.cell.height === this._currentDeviceCellHeight || this._refresh(e);
                    }
                    _handleScroll(e) {
                        if (this._lastScrollTop = this._viewportElement.scrollTop, !this._viewportElement.offsetParent) return;
                        if (this._ignoreNextScrollEvent) return this._ignoreNextScrollEvent = !1, void this._scrollLines(0);
                        const t = Math.round(this._lastScrollTop / this._currentRowHeight) - this._bufferService.buffer.ydisp;
                        this._scrollLines(t);
                    }
                    _smoothScroll() {
                        if (this._isDisposed || -1 === this._smoothScrollState.origin || -1 === this._smoothScrollState.target) return;
                        const e = this._smoothScrollPercent();
                        this._viewportElement.scrollTop = this._smoothScrollState.origin + Math.round(e * (this._smoothScrollState.target - this._smoothScrollState.origin)), e < 1 ? this._coreBrowserService.window.requestAnimationFrame(()=>this._smoothScroll()) : this._clearSmoothScrollState();
                    }
                    _smoothScrollPercent() {
                        return this._optionsService.rawOptions.smoothScrollDuration && this._smoothScrollState.startTime ? Math.max(Math.min((Date.now() - this._smoothScrollState.startTime) / this._optionsService.rawOptions.smoothScrollDuration, 1), 0) : 1;
                    }
                    _clearSmoothScrollState() {
                        this._smoothScrollState.startTime = 0, this._smoothScrollState.origin = -1, this._smoothScrollState.target = -1;
                    }
                    _bubbleScroll(e, t) {
                        const i = this._viewportElement.scrollTop + this._lastRecordedViewportHeight;
                        return !(t < 0 && 0 !== this._viewportElement.scrollTop || t > 0 && i < this._lastRecordedBufferHeight) || (e.cancelable && e.preventDefault(), !1);
                    }
                    handleWheel(e) {
                        const t = this._getPixelsScrolled(e);
                        return 0 !== t && (this._optionsService.rawOptions.smoothScrollDuration ? (this._smoothScrollState.startTime = Date.now(), this._smoothScrollPercent() < 1 ? (this._smoothScrollState.origin = this._viewportElement.scrollTop, -1 === this._smoothScrollState.target ? this._smoothScrollState.target = this._viewportElement.scrollTop + t : this._smoothScrollState.target += t, this._smoothScrollState.target = Math.max(Math.min(this._smoothScrollState.target, this._viewportElement.scrollHeight), 0), this._smoothScroll()) : this._clearSmoothScrollState()) : this._viewportElement.scrollTop += t, this._bubbleScroll(e, t));
                    }
                    _getPixelsScrolled(e) {
                        if (0 === e.deltaY || e.shiftKey) return 0;
                        let t = this._applyScrollModifier(e.deltaY, e);
                        return e.deltaMode === WheelEvent.DOM_DELTA_LINE ? t *= this._currentRowHeight : e.deltaMode === WheelEvent.DOM_DELTA_PAGE && (t *= this._currentRowHeight * this._bufferService.rows), t;
                    }
                    getLinesScrolled(e) {
                        if (0 === e.deltaY || e.shiftKey) return 0;
                        let t = this._applyScrollModifier(e.deltaY, e);
                        return e.deltaMode === WheelEvent.DOM_DELTA_PIXEL ? (t /= this._currentRowHeight + 0, this._wheelPartialScroll += t, t = Math.floor(Math.abs(this._wheelPartialScroll)) * (this._wheelPartialScroll > 0 ? 1 : -1), this._wheelPartialScroll %= 1) : e.deltaMode === WheelEvent.DOM_DELTA_PAGE && (t *= this._bufferService.rows), t;
                    }
                    _applyScrollModifier(e, t) {
                        const i = this._optionsService.rawOptions.fastScrollModifier;
                        return "alt" === i && t.altKey || "ctrl" === i && t.ctrlKey || "shift" === i && t.shiftKey ? e * this._optionsService.rawOptions.fastScrollSensitivity * this._optionsService.rawOptions.scrollSensitivity : e * this._optionsService.rawOptions.scrollSensitivity;
                    }
                    handleTouchStart(e) {
                        this._lastTouchY = e.touches[0].pageY;
                    }
                    handleTouchMove(e) {
                        const t = this._lastTouchY - e.touches[0].pageY;
                        return this._lastTouchY = e.touches[0].pageY, 0 !== t && (this._viewportElement.scrollTop += t, this._bubbleScroll(e, t));
                    }
                };
                c = s([
                    r(3, h.IBufferService),
                    r(4, h.IOptionsService),
                    r(5, a.ICharSizeService),
                    r(6, a.IRenderService),
                    r(7, a.ICoreBrowserService),
                    r(8, a.IThemeService)
                ], c), t.Viewport = c;
            },
            3107: function(e, t, i) {
                var s = this && this.__decorate || function(e, t, i, s) {
                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);
                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);
                    return n > 3 && o && Object.defineProperty(t, i, o), o;
                }, r = this && this.__param || function(e, t) {
                    return function(i, s) {
                        t(i, s, e);
                    };
                };
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.BufferDecorationRenderer = void 0;
                const n = i(3656), o = i(4725), a = i(844), h = i(2585);
                let c = class extends a.Disposable {
                    constructor(e, t, i, s){
                        super(), this._screenElement = e, this._bufferService = t, this._decorationService = i, this._renderService = s, this._decorationElements = new Map, this._altBufferIsActive = !1, this._dimensionsChanged = !1, this._container = document.createElement("div"), this._container.classList.add("xterm-decoration-container"), this._screenElement.appendChild(this._container), this.register(this._renderService.onRenderedViewportChange(()=>this._doRefreshDecorations())), this.register(this._renderService.onDimensionsChange(()=>{
                            this._dimensionsChanged = !0, this._queueRefresh();
                        })), this.register((0, n.addDisposableDomListener)(window, "resize", ()=>this._queueRefresh())), this.register(this._bufferService.buffers.onBufferActivate(()=>{
                            this._altBufferIsActive = this._bufferService.buffer === this._bufferService.buffers.alt;
                        })), this.register(this._decorationService.onDecorationRegistered(()=>this._queueRefresh())), this.register(this._decorationService.onDecorationRemoved((e)=>this._removeDecoration(e))), this.register((0, a.toDisposable)(()=>{
                            this._container.remove(), this._decorationElements.clear();
                        }));
                    }
                    _queueRefresh() {
                        void 0 === this._animationFrame && (this._animationFrame = this._renderService.addRefreshCallback(()=>{
                            this._doRefreshDecorations(), this._animationFrame = void 0;
                        }));
                    }
                    _doRefreshDecorations() {
                        for (const e of this._decorationService.decorations)this._renderDecoration(e);
                        this._dimensionsChanged = !1;
                    }
                    _renderDecoration(e) {
                        this._refreshStyle(e), this._dimensionsChanged && this._refreshXPosition(e);
                    }
                    _createElement(e) {
                        var t;
                        const i = document.createElement("div");
                        i.classList.add("xterm-decoration"), i.style.width = `${Math.round((e.options.width || 1) * this._renderService.dimensions.css.cell.width)}px`, i.style.height = (e.options.height || 1) * this._renderService.dimensions.css.cell.height + "px", i.style.top = (e.marker.line - this._bufferService.buffers.active.ydisp) * this._renderService.dimensions.css.cell.height + "px", i.style.lineHeight = `${this._renderService.dimensions.css.cell.height}px`;
                        const s = null !== (t = e.options.x) && void 0 !== t ? t : 0;
                        return s && s > this._bufferService.cols && (i.style.display = "none"), this._refreshXPosition(e, i), i;
                    }
                    _refreshStyle(e) {
                        const t = e.marker.line - this._bufferService.buffers.active.ydisp;
                        if (t < 0 || t >= this._bufferService.rows) e.element && (e.element.style.display = "none", e.onRenderEmitter.fire(e.element));
                        else {
                            let i = this._decorationElements.get(e);
                            i || (i = this._createElement(e), e.element = i, this._decorationElements.set(e, i), this._container.appendChild(i)), i.style.top = t * this._renderService.dimensions.css.cell.height + "px", i.style.display = this._altBufferIsActive ? "none" : "block", e.onRenderEmitter.fire(i);
                        }
                    }
                    _refreshXPosition(e, t = e.element) {
                        var i;
                        if (!t) return;
                        const s = null !== (i = e.options.x) && void 0 !== i ? i : 0;
                        "right" === (e.options.anchor || "left") ? t.style.right = s ? s * this._renderService.dimensions.css.cell.width + "px" : "" : t.style.left = s ? s * this._renderService.dimensions.css.cell.width + "px" : "";
                    }
                    _removeDecoration(e) {
                        var t;
                        null === (t = this._decorationElements.get(e)) || void 0 === t || t.remove(), this._decorationElements.delete(e), e.dispose();
                    }
                };
                c = s([
                    r(1, h.IBufferService),
                    r(2, h.IDecorationService),
                    r(3, o.IRenderService)
                ], c), t.BufferDecorationRenderer = c;
            },
            5871: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.ColorZoneStore = void 0, t.ColorZoneStore = class {
                    constructor(){
                        this._zones = [], this._zonePool = [], this._zonePoolIndex = 0, this._linePadding = {
                            full: 0,
                            left: 0,
                            center: 0,
                            right: 0
                        };
                    }
                    get zones() {
                        return this._zonePool.length = Math.min(this._zonePool.length, this._zones.length), this._zones;
                    }
                    clear() {
                        this._zones.length = 0, this._zonePoolIndex = 0;
                    }
                    addDecoration(e) {
                        if (e.options.overviewRulerOptions) {
                            for (const t of this._zones)if (t.color === e.options.overviewRulerOptions.color && t.position === e.options.overviewRulerOptions.position) {
                                if (this._lineIntersectsZone(t, e.marker.line)) return;
                                if (this._lineAdjacentToZone(t, e.marker.line, e.options.overviewRulerOptions.position)) return void this._addLineToZone(t, e.marker.line);
                            }
                            if (this._zonePoolIndex < this._zonePool.length) return this._zonePool[this._zonePoolIndex].color = e.options.overviewRulerOptions.color, this._zonePool[this._zonePoolIndex].position = e.options.overviewRulerOptions.position, this._zonePool[this._zonePoolIndex].startBufferLine = e.marker.line, this._zonePool[this._zonePoolIndex].endBufferLine = e.marker.line, void this._zones.push(this._zonePool[this._zonePoolIndex++]);
                            this._zones.push({
                                color: e.options.overviewRulerOptions.color,
                                position: e.options.overviewRulerOptions.position,
                                startBufferLine: e.marker.line,
                                endBufferLine: e.marker.line
                            }), this._zonePool.push(this._zones[this._zones.length - 1]), this._zonePoolIndex++;
                        }
                    }
                    setPadding(e) {
                        this._linePadding = e;
                    }
                    _lineIntersectsZone(e, t) {
                        return t >= e.startBufferLine && t <= e.endBufferLine;
                    }
                    _lineAdjacentToZone(e, t, i) {
                        return t >= e.startBufferLine - this._linePadding[i || "full"] && t <= e.endBufferLine + this._linePadding[i || "full"];
                    }
                    _addLineToZone(e, t) {
                        e.startBufferLine = Math.min(e.startBufferLine, t), e.endBufferLine = Math.max(e.endBufferLine, t);
                    }
                };
            },
            5744: function(e, t, i) {
                var s = this && this.__decorate || function(e, t, i, s) {
                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);
                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);
                    return n > 3 && o && Object.defineProperty(t, i, o), o;
                }, r = this && this.__param || function(e, t) {
                    return function(i, s) {
                        t(i, s, e);
                    };
                };
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.OverviewRulerRenderer = void 0;
                const n = i(5871), o = i(3656), a = i(4725), h = i(844), c = i(2585), l = {
                    full: 0,
                    left: 0,
                    center: 0,
                    right: 0
                }, d = {
                    full: 0,
                    left: 0,
                    center: 0,
                    right: 0
                }, _ = {
                    full: 0,
                    left: 0,
                    center: 0,
                    right: 0
                };
                let u = class extends h.Disposable {
                    constructor(e, t, i, s, r, o, a){
                        var c;
                        super(), this._viewportElement = e, this._screenElement = t, this._bufferService = i, this._decorationService = s, this._renderService = r, this._optionsService = o, this._coreBrowseService = a, this._colorZoneStore = new n.ColorZoneStore, this._shouldUpdateDimensions = !0, this._shouldUpdateAnchor = !0, this._lastKnownBufferLength = 0, this._canvas = document.createElement("canvas"), this._canvas.classList.add("xterm-decoration-overview-ruler"), this._refreshCanvasDimensions(), null === (c = this._viewportElement.parentElement) || void 0 === c || c.insertBefore(this._canvas, this._viewportElement);
                        const l = this._canvas.getContext("2d");
                        if (!l) throw new Error("Ctx cannot be null");
                        this._ctx = l, this._registerDecorationListeners(), this._registerBufferChangeListeners(), this._registerDimensionChangeListeners(), this.register((0, h.toDisposable)(()=>{
                            var e;
                            null === (e = this._canvas) || void 0 === e || e.remove();
                        }));
                    }
                    get _width() {
                        return this._optionsService.options.overviewRulerWidth || 0;
                    }
                    _registerDecorationListeners() {
                        this.register(this._decorationService.onDecorationRegistered(()=>this._queueRefresh(void 0, !0))), this.register(this._decorationService.onDecorationRemoved(()=>this._queueRefresh(void 0, !0)));
                    }
                    _registerBufferChangeListeners() {
                        this.register(this._renderService.onRenderedViewportChange(()=>this._queueRefresh())), this.register(this._bufferService.buffers.onBufferActivate(()=>{
                            this._canvas.style.display = this._bufferService.buffer === this._bufferService.buffers.alt ? "none" : "block";
                        })), this.register(this._bufferService.onScroll(()=>{
                            this._lastKnownBufferLength !== this._bufferService.buffers.normal.lines.length && (this._refreshDrawHeightConstants(), this._refreshColorZonePadding());
                        }));
                    }
                    _registerDimensionChangeListeners() {
                        this.register(this._renderService.onRender(()=>{
                            this._containerHeight && this._containerHeight === this._screenElement.clientHeight || (this._queueRefresh(!0), this._containerHeight = this._screenElement.clientHeight);
                        })), this.register(this._optionsService.onSpecificOptionChange("overviewRulerWidth", ()=>this._queueRefresh(!0))), this.register((0, o.addDisposableDomListener)(this._coreBrowseService.window, "resize", ()=>this._queueRefresh(!0))), this._queueRefresh(!0);
                    }
                    _refreshDrawConstants() {
                        const e = Math.floor(this._canvas.width / 3), t = Math.ceil(this._canvas.width / 3);
                        d.full = this._canvas.width, d.left = e, d.center = t, d.right = e, this._refreshDrawHeightConstants(), _.full = 0, _.left = 0, _.center = d.left, _.right = d.left + d.center;
                    }
                    _refreshDrawHeightConstants() {
                        l.full = Math.round(2 * this._coreBrowseService.dpr);
                        const e = this._canvas.height / this._bufferService.buffer.lines.length, t = Math.round(Math.max(Math.min(e, 12), 6) * this._coreBrowseService.dpr);
                        l.left = t, l.center = t, l.right = t;
                    }
                    _refreshColorZonePadding() {
                        this._colorZoneStore.setPadding({
                            full: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * l.full),
                            left: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * l.left),
                            center: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * l.center),
                            right: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * l.right)
                        }), this._lastKnownBufferLength = this._bufferService.buffers.normal.lines.length;
                    }
                    _refreshCanvasDimensions() {
                        this._canvas.style.width = `${this._width}px`, this._canvas.width = Math.round(this._width * this._coreBrowseService.dpr), this._canvas.style.height = `${this._screenElement.clientHeight}px`, this._canvas.height = Math.round(this._screenElement.clientHeight * this._coreBrowseService.dpr), this._refreshDrawConstants(), this._refreshColorZonePadding();
                    }
                    _refreshDecorations() {
                        this._shouldUpdateDimensions && this._refreshCanvasDimensions(), this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height), this._colorZoneStore.clear();
                        for (const e of this._decorationService.decorations)this._colorZoneStore.addDecoration(e);
                        this._ctx.lineWidth = 1;
                        const e = this._colorZoneStore.zones;
                        for (const t of e)"full" !== t.position && this._renderColorZone(t);
                        for (const t of e)"full" === t.position && this._renderColorZone(t);
                        this._shouldUpdateDimensions = !1, this._shouldUpdateAnchor = !1;
                    }
                    _renderColorZone(e) {
                        this._ctx.fillStyle = e.color, this._ctx.fillRect(_[e.position || "full"], Math.round((this._canvas.height - 1) * (e.startBufferLine / this._bufferService.buffers.active.lines.length) - l[e.position || "full"] / 2), d[e.position || "full"], Math.round((this._canvas.height - 1) * ((e.endBufferLine - e.startBufferLine) / this._bufferService.buffers.active.lines.length) + l[e.position || "full"]));
                    }
                    _queueRefresh(e, t) {
                        this._shouldUpdateDimensions = e || this._shouldUpdateDimensions, this._shouldUpdateAnchor = t || this._shouldUpdateAnchor, void 0 === this._animationFrame && (this._animationFrame = this._coreBrowseService.window.requestAnimationFrame(()=>{
                            this._refreshDecorations(), this._animationFrame = void 0;
                        }));
                    }
                };
                u = s([
                    r(2, c.IBufferService),
                    r(3, c.IDecorationService),
                    r(4, a.IRenderService),
                    r(5, c.IOptionsService),
                    r(6, a.ICoreBrowserService)
                ], u), t.OverviewRulerRenderer = u;
            },
            2950: function(e, t, i) {
                var s = this && this.__decorate || function(e, t, i, s) {
                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);
                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);
                    return n > 3 && o && Object.defineProperty(t, i, o), o;
                }, r = this && this.__param || function(e, t) {
                    return function(i, s) {
                        t(i, s, e);
                    };
                };
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.CompositionHelper = void 0;
                const n = i(4725), o = i(2585), a = i(2584);
                let h = class {
                    constructor(e, t, i, s, r, n){
                        this._textarea = e, this._compositionView = t, this._bufferService = i, this._optionsService = s, this._coreService = r, this._renderService = n, this._isComposing = !1, this._isSendingComposition = !1, this._compositionPosition = {
                            start: 0,
                            end: 0
                        }, this._dataAlreadySent = "";
                    }
                    get isComposing() {
                        return this._isComposing;
                    }
                    compositionstart() {
                        this._isComposing = !0, this._compositionPosition.start = this._textarea.value.length, this._compositionView.textContent = "", this._dataAlreadySent = "", this._compositionView.classList.add("active");
                    }
                    compositionupdate(e) {
                        this._compositionView.textContent = e.data, this.updateCompositionElements(), setTimeout(()=>{
                            this._compositionPosition.end = this._textarea.value.length;
                        }, 0);
                    }
                    compositionend() {
                        this._finalizeComposition(!0);
                    }
                    keydown(e) {
                        if (this._isComposing || this._isSendingComposition) {
                            if (229 === e.keyCode) return !1;
                            if (16 === e.keyCode || 17 === e.keyCode || 18 === e.keyCode) return !1;
                            this._finalizeComposition(!1);
                        }
                        return 229 !== e.keyCode || (this._handleAnyTextareaChanges(), !1);
                    }
                    _finalizeComposition(e) {
                        if (this._compositionView.classList.remove("active"), this._isComposing = !1, e) {
                            const e = {
                                start: this._compositionPosition.start,
                                end: this._compositionPosition.end
                            };
                            this._isSendingComposition = !0, setTimeout(()=>{
                                if (this._isSendingComposition) {
                                    let t;
                                    this._isSendingComposition = !1, e.start += this._dataAlreadySent.length, t = this._isComposing ? this._textarea.value.substring(e.start, e.end) : this._textarea.value.substring(e.start), t.length > 0 && this._coreService.triggerDataEvent(t, !0);
                                }
                            }, 0);
                        } else {
                            this._isSendingComposition = !1;
                            const e = this._textarea.value.substring(this._compositionPosition.start, this._compositionPosition.end);
                            this._coreService.triggerDataEvent(e, !0);
                        }
                    }
                    _handleAnyTextareaChanges() {
                        const e = this._textarea.value;
                        setTimeout(()=>{
                            if (!this._isComposing) {
                                const t = this._textarea.value, i = t.replace(e, "");
                                this._dataAlreadySent = i, t.length > e.length ? this._coreService.triggerDataEvent(i, !0) : t.length < e.length ? this._coreService.triggerDataEvent(`${a.C0.DEL}`, !0) : t.length === e.length && t !== e && this._coreService.triggerDataEvent(t, !0);
                            }
                        }, 0);
                    }
                    updateCompositionElements(e) {
                        if (this._isComposing) {
                            if (this._bufferService.buffer.isCursorInViewport) {
                                const e = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1), t = this._renderService.dimensions.css.cell.height, i = this._bufferService.buffer.y * this._renderService.dimensions.css.cell.height, s = e * this._renderService.dimensions.css.cell.width;
                                this._compositionView.style.left = s + "px", this._compositionView.style.top = i + "px", this._compositionView.style.height = t + "px", this._compositionView.style.lineHeight = t + "px", this._compositionView.style.fontFamily = this._optionsService.rawOptions.fontFamily, this._compositionView.style.fontSize = this._optionsService.rawOptions.fontSize + "px";
                                const r = this._compositionView.getBoundingClientRect();
                                this._textarea.style.left = s + "px", this._textarea.style.top = i + "px", this._textarea.style.width = Math.max(r.width, 1) + "px", this._textarea.style.height = Math.max(r.height, 1) + "px", this._textarea.style.lineHeight = r.height + "px";
                            }
                            e || setTimeout(()=>this.updateCompositionElements(!0), 0);
                        }
                    }
                };
                h = s([
                    r(2, o.IBufferService),
                    r(3, o.IOptionsService),
                    r(4, o.ICoreService),
                    r(5, n.IRenderService)
                ], h), t.CompositionHelper = h;
            },
            9806: (e, t)=>{
                function i(e, t, i) {
                    const s = i.getBoundingClientRect(), r = e.getComputedStyle(i), n = parseInt(r.getPropertyValue("padding-left")), o = parseInt(r.getPropertyValue("padding-top"));
                    return [
                        t.clientX - s.left - n,
                        t.clientY - s.top - o
                    ];
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.getCoords = t.getCoordsRelativeToElement = void 0, t.getCoordsRelativeToElement = i, t.getCoords = function(e, t, s, r, n, o, a, h, c) {
                    if (!o) return;
                    const l = i(e, t, s);
                    return l ? (l[0] = Math.ceil((l[0] + (c ? a / 2 : 0)) / a), l[1] = Math.ceil(l[1] / h), l[0] = Math.min(Math.max(l[0], 1), r + (c ? 1 : 0)), l[1] = Math.min(Math.max(l[1], 1), n), l) : void 0;
                };
            },
            9504: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.moveToCellSequence = void 0;
                const s = i(2584);
                function r(e, t, i, s) {
                    const r = e - n(e, i), a = t - n(t, i), l = Math.abs(r - a) - function(e, t, i) {
                        let s = 0;
                        const r = e - n(e, i), a = t - n(t, i);
                        for(let n = 0; n < Math.abs(r - a); n++){
                            const a = "A" === o(e, t) ? -1 : 1, h = i.buffer.lines.get(r + a * n);
                            (null == h ? void 0 : h.isWrapped) && s++;
                        }
                        return s;
                    }(e, t, i);
                    return c(l, h(o(e, t), s));
                }
                function n(e, t) {
                    let i = 0, s = t.buffer.lines.get(e), r = null == s ? void 0 : s.isWrapped;
                    for(; r && e >= 0 && e < t.rows;)i++, s = t.buffer.lines.get(--e), r = null == s ? void 0 : s.isWrapped;
                    return i;
                }
                function o(e, t) {
                    return e > t ? "A" : "B";
                }
                function a(e, t, i, s, r, n) {
                    let o = e, a = t, h = "";
                    for(; o !== i || a !== s;)o += r ? 1 : -1, r && o > n.cols - 1 ? (h += n.buffer.translateBufferLineToString(a, !1, e, o), o = 0, e = 0, a++) : !r && o < 0 && (h += n.buffer.translateBufferLineToString(a, !1, 0, e + 1), o = n.cols - 1, e = o, a--);
                    return h + n.buffer.translateBufferLineToString(a, !1, e, o);
                }
                function h(e, t) {
                    const i = t ? "O" : "[";
                    return s.C0.ESC + i + e;
                }
                function c(e, t) {
                    e = Math.floor(e);
                    let i = "";
                    for(let s = 0; s < e; s++)i += t;
                    return i;
                }
                t.moveToCellSequence = function(e, t, i, s) {
                    const o = i.buffer.x, l = i.buffer.y;
                    if (!i.buffer.hasScrollback) return function(e, t, i, s, o, l) {
                        return 0 === r(t, s, o, l).length ? "" : c(a(e, t, e, t - n(t, o), !1, o).length, h("D", l));
                    }(o, l, 0, t, i, s) + r(l, t, i, s) + function(e, t, i, s, o, l) {
                        let d;
                        d = r(t, s, o, l).length > 0 ? s - n(s, o) : t;
                        const _ = s, u = function(e, t, i, s, o, a) {
                            let h;
                            return h = r(i, s, o, a).length > 0 ? s - n(s, o) : t, e < i && h <= s || e >= i && h < s ? "C" : "D";
                        }(e, t, i, s, o, l);
                        return c(a(e, d, i, _, "C" === u, o).length, h(u, l));
                    }(o, l, e, t, i, s);
                    let d;
                    if (l === t) return d = o > e ? "D" : "C", c(Math.abs(o - e), h(d, s));
                    d = l > t ? "D" : "C";
                    const _ = Math.abs(l - t);
                    return c(function(e, t) {
                        return t.cols - e;
                    }(l > t ? e : o, i) + (_ - 1) * i.cols + 1 + ((l > t ? o : e) - 1), h(d, s));
                };
            },
            1296: function(e, t, i) {
                var s = this && this.__decorate || function(e, t, i, s) {
                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);
                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);
                    return n > 3 && o && Object.defineProperty(t, i, o), o;
                }, r = this && this.__param || function(e, t) {
                    return function(i, s) {
                        t(i, s, e);
                    };
                };
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.DomRenderer = void 0;
                const n = i(9631), o = i(3787), a = i(2223), h = i(6171), c = i(4725), l = i(8055), d = i(8460), _ = i(844), u = i(2585), f = "xterm-dom-renderer-owner-", v = "xterm-focus";
                let g = 1, p = class extends _.Disposable {
                    constructor(e, t, i, s, r, a, c, l, u, v){
                        super(), this._element = e, this._screenElement = t, this._viewportElement = i, this._linkifier2 = s, this._charSizeService = a, this._optionsService = c, this._bufferService = l, this._coreBrowserService = u, this._terminalClass = g++, this._rowElements = [], this._cellToRowElements = [], this.onRequestRedraw = this.register(new d.EventEmitter).event, this._rowContainer = document.createElement("div"), this._rowContainer.classList.add("xterm-rows"), this._rowContainer.style.lineHeight = "normal", this._rowContainer.setAttribute("aria-hidden", "true"), this._refreshRowElements(this._bufferService.cols, this._bufferService.rows), this._selectionContainer = document.createElement("div"), this._selectionContainer.classList.add("xterm-selection"), this._selectionContainer.setAttribute("aria-hidden", "true"), this.dimensions = (0, h.createRenderDimensions)(), this._updateDimensions(), this.register(this._optionsService.onOptionChange(()=>this._handleOptionsChanged())), this.register(v.onChangeColors((e)=>this._injectCss(e))), this._injectCss(v.colors), this._rowFactory = r.createInstance(o.DomRendererRowFactory, document), this._element.classList.add(f + this._terminalClass), this._screenElement.appendChild(this._rowContainer), this._screenElement.appendChild(this._selectionContainer), this.register(this._linkifier2.onShowLinkUnderline((e)=>this._handleLinkHover(e))), this.register(this._linkifier2.onHideLinkUnderline((e)=>this._handleLinkLeave(e))), this.register((0, _.toDisposable)(()=>{
                            this._element.classList.remove(f + this._terminalClass), (0, n.removeElementFromParent)(this._rowContainer, this._selectionContainer, this._themeStyleElement, this._dimensionsStyleElement);
                        }));
                    }
                    _updateDimensions() {
                        const e = this._coreBrowserService.dpr;
                        this.dimensions.device.char.width = this._charSizeService.width * e, this.dimensions.device.char.height = Math.ceil(this._charSizeService.height * e), this.dimensions.device.cell.width = this.dimensions.device.char.width + Math.round(this._optionsService.rawOptions.letterSpacing), this.dimensions.device.cell.height = Math.floor(this.dimensions.device.char.height * this._optionsService.rawOptions.lineHeight), this.dimensions.device.char.left = 0, this.dimensions.device.char.top = 0, this.dimensions.device.canvas.width = this.dimensions.device.cell.width * this._bufferService.cols, this.dimensions.device.canvas.height = this.dimensions.device.cell.height * this._bufferService.rows, this.dimensions.css.canvas.width = Math.round(this.dimensions.device.canvas.width / e), this.dimensions.css.canvas.height = Math.round(this.dimensions.device.canvas.height / e), this.dimensions.css.cell.width = this.dimensions.css.canvas.width / this._bufferService.cols, this.dimensions.css.cell.height = this.dimensions.css.canvas.height / this._bufferService.rows;
                        for (const e of this._rowElements)e.style.width = `${this.dimensions.css.canvas.width}px`, e.style.height = `${this.dimensions.css.cell.height}px`, e.style.lineHeight = `${this.dimensions.css.cell.height}px`, e.style.overflow = "hidden";
                        this._dimensionsStyleElement || (this._dimensionsStyleElement = document.createElement("style"), this._screenElement.appendChild(this._dimensionsStyleElement));
                        const t = `${this._terminalSelector} .xterm-rows span { display: inline-block; height: 100%; vertical-align: top; width: ${this.dimensions.css.cell.width}px}`;
                        this._dimensionsStyleElement.textContent = t, this._selectionContainer.style.height = this._viewportElement.style.height, this._screenElement.style.width = `${this.dimensions.css.canvas.width}px`, this._screenElement.style.height = `${this.dimensions.css.canvas.height}px`;
                    }
                    _injectCss(e) {
                        this._themeStyleElement || (this._themeStyleElement = document.createElement("style"), this._screenElement.appendChild(this._themeStyleElement));
                        let t = `${this._terminalSelector} .xterm-rows { color: ${e.foreground.css}; font-family: ${this._optionsService.rawOptions.fontFamily}; font-size: ${this._optionsService.rawOptions.fontSize}px;}`;
                        t += `${this._terminalSelector} span:not(.${o.BOLD_CLASS}) { font-weight: ${this._optionsService.rawOptions.fontWeight};}${this._terminalSelector} span.${o.BOLD_CLASS} { font-weight: ${this._optionsService.rawOptions.fontWeightBold};}${this._terminalSelector} span.${o.ITALIC_CLASS} { font-style: italic;}`, t += "@keyframes blink_box_shadow_" + this._terminalClass + " { 50% {  box-shadow: none; }}", t += "@keyframes blink_block_" + this._terminalClass + " { 0% {" + `  background-color: ${e.cursor.css};` + `  color: ${e.cursorAccent.css}; } 50% {` + `  background-color: ${e.cursorAccent.css};` + `  color: ${e.cursor.css}; }}`, t += `${this._terminalSelector} .xterm-rows:not(.xterm-focus) .${o.CURSOR_CLASS}.${o.CURSOR_STYLE_BLOCK_CLASS} { outline: 1px solid ${e.cursor.css}; outline-offset: -1px;}${this._terminalSelector} .xterm-rows.xterm-focus .${o.CURSOR_CLASS}.${o.CURSOR_BLINK_CLASS}:not(.${o.CURSOR_STYLE_BLOCK_CLASS}) { animation: blink_box_shadow_` + this._terminalClass + " 1s step-end infinite;}" + `${this._terminalSelector} .xterm-rows.xterm-focus .${o.CURSOR_CLASS}.${o.CURSOR_BLINK_CLASS}.${o.CURSOR_STYLE_BLOCK_CLASS} { animation: blink_block_` + this._terminalClass + " 1s step-end infinite;}" + `${this._terminalSelector} .xterm-rows.xterm-focus .${o.CURSOR_CLASS}.${o.CURSOR_STYLE_BLOCK_CLASS} {` + ` background-color: ${e.cursor.css};` + ` color: ${e.cursorAccent.css};}` + `${this._terminalSelector} .xterm-rows .${o.CURSOR_CLASS}.${o.CURSOR_STYLE_BAR_CLASS} {` + ` box-shadow: ${this._optionsService.rawOptions.cursorWidth}px 0 0 ${e.cursor.css} inset;}` + `${this._terminalSelector} .xterm-rows .${o.CURSOR_CLASS}.${o.CURSOR_STYLE_UNDERLINE_CLASS} {` + ` box-shadow: 0 -1px 0 ${e.cursor.css} inset;}`, t += `${this._terminalSelector} .xterm-selection { position: absolute; top: 0; left: 0; z-index: 1; pointer-events: none;}${this._terminalSelector}.focus .xterm-selection div { position: absolute; background-color: ${e.selectionBackgroundOpaque.css};}${this._terminalSelector} .xterm-selection div { position: absolute; background-color: ${e.selectionInactiveBackgroundOpaque.css};}`;
                        for (const [i, s] of e.ansi.entries())t += `${this._terminalSelector} .xterm-fg-${i} { color: ${s.css}; }${this._terminalSelector} .xterm-bg-${i} { background-color: ${s.css}; }`;
                        t += `${this._terminalSelector} .xterm-fg-${a.INVERTED_DEFAULT_COLOR} { color: ${l.color.opaque(e.background).css}; }${this._terminalSelector} .xterm-bg-${a.INVERTED_DEFAULT_COLOR} { background-color: ${e.foreground.css}; }`, this._themeStyleElement.textContent = t;
                    }
                    handleDevicePixelRatioChange() {
                        this._updateDimensions();
                    }
                    _refreshRowElements(e, t) {
                        for(let e = this._rowElements.length; e <= t; e++){
                            const e = document.createElement("div");
                            this._rowContainer.appendChild(e), this._rowElements.push(e);
                        }
                        for(; this._rowElements.length > t;)this._rowContainer.removeChild(this._rowElements.pop());
                    }
                    handleResize(e, t) {
                        this._refreshRowElements(e, t), this._updateDimensions();
                    }
                    handleCharSizeChanged() {
                        this._updateDimensions();
                    }
                    handleBlur() {
                        this._rowContainer.classList.remove(v);
                    }
                    handleFocus() {
                        this._rowContainer.classList.add(v);
                    }
                    handleSelectionChanged(e, t, i) {
                        for(; this._selectionContainer.children.length;)this._selectionContainer.removeChild(this._selectionContainer.children[0]);
                        if (this._rowFactory.handleSelectionChanged(e, t, i), this.renderRows(0, this._bufferService.rows - 1), !e || !t) return;
                        const s = e[1] - this._bufferService.buffer.ydisp, r = t[1] - this._bufferService.buffer.ydisp, n = Math.max(s, 0), o = Math.min(r, this._bufferService.rows - 1);
                        if (n >= this._bufferService.rows || o < 0) return;
                        const a = document.createDocumentFragment();
                        if (i) {
                            const i = e[0] > t[0];
                            a.appendChild(this._createSelectionElement(n, i ? t[0] : e[0], i ? e[0] : t[0], o - n + 1));
                        } else {
                            const i = s === n ? e[0] : 0, h = n === r ? t[0] : this._bufferService.cols;
                            a.appendChild(this._createSelectionElement(n, i, h));
                            const c = o - n - 1;
                            if (a.appendChild(this._createSelectionElement(n + 1, 0, this._bufferService.cols, c)), n !== o) {
                                const e = r === o ? t[0] : this._bufferService.cols;
                                a.appendChild(this._createSelectionElement(o, 0, e));
                            }
                        }
                        this._selectionContainer.appendChild(a);
                    }
                    _createSelectionElement(e, t, i, s = 1) {
                        const r = document.createElement("div");
                        return r.style.height = s * this.dimensions.css.cell.height + "px", r.style.top = e * this.dimensions.css.cell.height + "px", r.style.left = t * this.dimensions.css.cell.width + "px", r.style.width = this.dimensions.css.cell.width * (i - t) + "px", r;
                    }
                    handleCursorMove() {}
                    _handleOptionsChanged() {
                        this._updateDimensions();
                    }
                    clear() {
                        for (const e of this._rowElements)e.replaceChildren();
                    }
                    renderRows(e, t) {
                        const i = this._bufferService.buffer.ybase + this._bufferService.buffer.y, s = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1), r = this._optionsService.rawOptions.cursorBlink;
                        for(let n = e; n <= t; n++){
                            const e = this._rowElements[n], t = n + this._bufferService.buffer.ydisp, o = this._bufferService.buffer.lines.get(t), a = this._optionsService.rawOptions.cursorStyle;
                            this._cellToRowElements[n] && this._cellToRowElements[n].length === this._bufferService.cols || (this._cellToRowElements[n] = new Int16Array(this._bufferService.cols)), e.replaceChildren(this._rowFactory.createRow(o, t, t === i, a, s, r, this.dimensions.css.cell.width, this._bufferService.cols, this._cellToRowElements[n]));
                        }
                    }
                    get _terminalSelector() {
                        return `.${f}${this._terminalClass}`;
                    }
                    _handleLinkHover(e) {
                        this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, !0);
                    }
                    _handleLinkLeave(e) {
                        this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, !1);
                    }
                    _setCellUnderline(e, t, i, s, r, n) {
                        if (e = this._cellToRowElements[i][e], t = this._cellToRowElements[s][t], -1 !== e && -1 !== t) for(; e !== t || i !== s;){
                            const t = this._rowElements[i];
                            if (!t) return;
                            const s = t.children[e];
                            s && (s.style.textDecoration = n ? "underline" : "none"), ++e >= r && (e = 0, i++);
                        }
                    }
                };
                p = s([
                    r(4, u.IInstantiationService),
                    r(5, c.ICharSizeService),
                    r(6, u.IOptionsService),
                    r(7, u.IBufferService),
                    r(8, c.ICoreBrowserService),
                    r(9, c.IThemeService)
                ], p), t.DomRenderer = p;
            },
            3787: function(e, t, i) {
                var s = this && this.__decorate || function(e, t, i, s) {
                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);
                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);
                    return n > 3 && o && Object.defineProperty(t, i, o), o;
                }, r = this && this.__param || function(e, t) {
                    return function(i, s) {
                        t(i, s, e);
                    };
                };
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.DomRendererRowFactory = t.CURSOR_STYLE_UNDERLINE_CLASS = t.CURSOR_STYLE_BAR_CLASS = t.CURSOR_STYLE_BLOCK_CLASS = t.CURSOR_BLINK_CLASS = t.CURSOR_CLASS = t.STRIKETHROUGH_CLASS = t.UNDERLINE_CLASS = t.ITALIC_CLASS = t.DIM_CLASS = t.BOLD_CLASS = void 0;
                const n = i(2223), o = i(643), a = i(511), h = i(2585), c = i(8055), l = i(4725), d = i(4269), _ = i(6171), u = i(3734);
                t.BOLD_CLASS = "xterm-bold", t.DIM_CLASS = "xterm-dim", t.ITALIC_CLASS = "xterm-italic", t.UNDERLINE_CLASS = "xterm-underline", t.STRIKETHROUGH_CLASS = "xterm-strikethrough", t.CURSOR_CLASS = "xterm-cursor", t.CURSOR_BLINK_CLASS = "xterm-cursor-blink", t.CURSOR_STYLE_BLOCK_CLASS = "xterm-cursor-block", t.CURSOR_STYLE_BAR_CLASS = "xterm-cursor-bar", t.CURSOR_STYLE_UNDERLINE_CLASS = "xterm-cursor-underline";
                let f = class {
                    constructor(e, t, i, s, r, n, o){
                        this._document = e, this._characterJoinerService = t, this._optionsService = i, this._coreBrowserService = s, this._coreService = r, this._decorationService = n, this._themeService = o, this._workCell = new a.CellData, this._columnSelectMode = !1;
                    }
                    handleSelectionChanged(e, t, i) {
                        this._selectionStart = e, this._selectionEnd = t, this._columnSelectMode = i;
                    }
                    createRow(e, i, s, r, a, h, l, _, f) {
                        const g = this._document.createDocumentFragment(), p = this._characterJoinerService.getJoinedCharacters(i);
                        let S = 0;
                        for(let t = Math.min(e.length, _) - 1; t >= 0; t--)if (e.loadCell(t, this._workCell).getCode() !== o.NULL_CELL_CODE || s && t === a) {
                            S = t + 1;
                            break;
                        }
                        const m = this._themeService.colors;
                        let C = -1, b = 0;
                        for(; b < S; b++){
                            e.loadCell(b, this._workCell);
                            let _ = this._workCell.getWidth();
                            if (0 === _) {
                                f[b] = C;
                                continue;
                            }
                            let S = !1, y = b, w = this._workCell;
                            if (p.length > 0 && b === p[0][0]) {
                                S = !0;
                                const t = p.shift();
                                w = new d.JoinedCellData(this._workCell, e.translateToString(!0, t[0], t[1]), t[1] - t[0]), y = t[1] - 1, _ = w.getWidth();
                            }
                            const E = this._document.createElement("span");
                            if (_ > 1 && (E.style.width = l * _ + "px"), S && (E.style.display = "inline", a >= b && a <= y && (a = b)), !this._coreService.isCursorHidden && s && b === a) switch(E.classList.add(t.CURSOR_CLASS), h && E.classList.add(t.CURSOR_BLINK_CLASS), r){
                                case "bar":
                                    E.classList.add(t.CURSOR_STYLE_BAR_CLASS);
                                    break;
                                case "underline":
                                    E.classList.add(t.CURSOR_STYLE_UNDERLINE_CLASS);
                                    break;
                                default:
                                    E.classList.add(t.CURSOR_STYLE_BLOCK_CLASS);
                            }
                            if (w.isBold() && E.classList.add(t.BOLD_CLASS), w.isItalic() && E.classList.add(t.ITALIC_CLASS), w.isDim() && E.classList.add(t.DIM_CLASS), w.isInvisible() ? E.textContent = o.WHITESPACE_CELL_CHAR : E.textContent = w.getChars() || o.WHITESPACE_CELL_CHAR, w.isUnderline() && (E.classList.add(`${t.UNDERLINE_CLASS}-${w.extended.underlineStyle}`), " " === E.textContent && (E.textContent = "\xa0"), !w.isUnderlineColorDefault())) {
                                if (w.isUnderlineColorRGB()) E.style.textDecorationColor = `rgb(${u.AttributeData.toColorRGB(w.getUnderlineColor()).join(",")})`;
                                else {
                                    let e = w.getUnderlineColor();
                                    this._optionsService.rawOptions.drawBoldTextInBrightColors && w.isBold() && e < 8 && (e += 8), E.style.textDecorationColor = m.ansi[e].css;
                                }
                            }
                            w.isStrikethrough() && E.classList.add(t.STRIKETHROUGH_CLASS);
                            let L = w.getFgColor(), k = w.getFgColorMode(), R = w.getBgColor(), D = w.getBgColorMode();
                            const A = !!w.isInverse();
                            if (A) {
                                const e = L;
                                L = R, R = e;
                                const t = k;
                                k = D, D = t;
                            }
                            let x, B, T = !1;
                            this._decorationService.forEachDecorationAtCell(b, i, void 0, (e)=>{
                                "top" !== e.options.layer && T || (e.backgroundColorRGB && (D = 50331648, R = e.backgroundColorRGB.rgba >> 8 & 16777215, x = e.backgroundColorRGB), e.foregroundColorRGB && (k = 50331648, L = e.foregroundColorRGB.rgba >> 8 & 16777215, B = e.foregroundColorRGB), T = "top" === e.options.layer);
                            });
                            const M = this._isCellInSelection(b, i);
                            let O;
                            switch(T || m.selectionForeground && M && (k = 50331648, L = m.selectionForeground.rgba >> 8 & 16777215, B = m.selectionForeground), M && (x = this._coreBrowserService.isFocused ? m.selectionBackgroundOpaque : m.selectionInactiveBackgroundOpaque, T = !0), T && E.classList.add("xterm-decoration-top"), D){
                                case 16777216:
                                case 33554432:
                                    O = m.ansi[R], E.classList.add(`xterm-bg-${R}`);
                                    break;
                                case 50331648:
                                    O = c.rgba.toColor(R >> 16, R >> 8 & 255, 255 & R), this._addStyle(E, `background-color:#${v((R >>> 0).toString(16), "0", 6)}`);
                                    break;
                                default:
                                    A ? (O = m.foreground, E.classList.add(`xterm-bg-${n.INVERTED_DEFAULT_COLOR}`)) : O = m.background;
                            }
                            switch(x || w.isDim() && (x = c.color.multiplyOpacity(O, .5)), k){
                                case 16777216:
                                case 33554432:
                                    w.isBold() && L < 8 && this._optionsService.rawOptions.drawBoldTextInBrightColors && (L += 8), this._applyMinimumContrast(E, O, m.ansi[L], w, x, void 0) || E.classList.add(`xterm-fg-${L}`);
                                    break;
                                case 50331648:
                                    const e1 = c.rgba.toColor(L >> 16 & 255, L >> 8 & 255, 255 & L);
                                    this._applyMinimumContrast(E, O, e1, w, x, B) || this._addStyle(E, `color:#${v(L.toString(16), "0", 6)}`);
                                    break;
                                default:
                                    this._applyMinimumContrast(E, O, m.foreground, w, x, void 0) || A && E.classList.add(`xterm-fg-${n.INVERTED_DEFAULT_COLOR}`);
                            }
                            g.appendChild(E), f[b] = ++C, b = y;
                        }
                        return b < _ - 1 && f.subarray(b).fill(++C), g;
                    }
                    _applyMinimumContrast(e, t, i, s, r, n) {
                        if (1 === this._optionsService.rawOptions.minimumContrastRatio || (0, _.excludeFromContrastRatioDemands)(s.getCode())) return !1;
                        let o;
                        return r || n || (o = this._themeService.colors.contrastCache.getColor(t.rgba, i.rgba)), void 0 === o && (o = c.color.ensureContrastRatio(r || t, n || i, this._optionsService.rawOptions.minimumContrastRatio), this._themeService.colors.contrastCache.setColor((r || t).rgba, (n || i).rgba, null != o ? o : null)), !!o && (this._addStyle(e, `color:${o.css}`), !0);
                    }
                    _addStyle(e, t) {
                        e.setAttribute("style", `${e.getAttribute("style") || ""}${t};`);
                    }
                    _isCellInSelection(e, t) {
                        const i = this._selectionStart, s = this._selectionEnd;
                        return !(!i || !s) && (this._columnSelectMode ? i[0] <= s[0] ? e >= i[0] && t >= i[1] && e < s[0] && t <= s[1] : e < i[0] && t >= i[1] && e >= s[0] && t <= s[1] : t > i[1] && t < s[1] || i[1] === s[1] && t === i[1] && e >= i[0] && e < s[0] || i[1] < s[1] && t === s[1] && e < s[0] || i[1] < s[1] && t === i[1] && e >= i[0]);
                    }
                };
                function v(e, t, i) {
                    for(; e.length < i;)e = t + e;
                    return e;
                }
                f = s([
                    r(1, l.ICharacterJoinerService),
                    r(2, h.IOptionsService),
                    r(3, l.ICoreBrowserService),
                    r(4, h.ICoreService),
                    r(5, h.IDecorationService),
                    r(6, l.IThemeService)
                ], f), t.DomRendererRowFactory = f;
            },
            2223: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.TEXT_BASELINE = t.DIM_OPACITY = t.INVERTED_DEFAULT_COLOR = void 0;
                const s = i(6114);
                t.INVERTED_DEFAULT_COLOR = 257, t.DIM_OPACITY = .5, t.TEXT_BASELINE = s.isFirefox || s.isLegacyEdge ? "bottom" : "ideographic";
            },
            6171: (e, t)=>{
                function i(e) {
                    return 57508 <= e && e <= 57558;
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.createRenderDimensions = t.excludeFromContrastRatioDemands = t.isRestrictedPowerlineGlyph = t.isPowerlineGlyph = t.throwIfFalsy = void 0, t.throwIfFalsy = function(e) {
                    if (!e) throw new Error("value must not be falsy");
                    return e;
                }, t.isPowerlineGlyph = i, t.isRestrictedPowerlineGlyph = function(e) {
                    return 57520 <= e && e <= 57527;
                }, t.excludeFromContrastRatioDemands = function(e) {
                    return i(e) || function(e) {
                        return 9472 <= e && e <= 9631;
                    }(e);
                }, t.createRenderDimensions = function() {
                    return {
                        css: {
                            canvas: {
                                width: 0,
                                height: 0
                            },
                            cell: {
                                width: 0,
                                height: 0
                            }
                        },
                        device: {
                            canvas: {
                                width: 0,
                                height: 0
                            },
                            cell: {
                                width: 0,
                                height: 0
                            },
                            char: {
                                width: 0,
                                height: 0,
                                left: 0,
                                top: 0
                            }
                        }
                    };
                };
            },
            456: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.SelectionModel = void 0, t.SelectionModel = class {
                    constructor(e){
                        this._bufferService = e, this.isSelectAllActive = !1, this.selectionStartLength = 0;
                    }
                    clearSelection() {
                        this.selectionStart = void 0, this.selectionEnd = void 0, this.isSelectAllActive = !1, this.selectionStartLength = 0;
                    }
                    get finalSelectionStart() {
                        return this.isSelectAllActive ? [
                            0,
                            0
                        ] : this.selectionEnd && this.selectionStart && this.areSelectionValuesReversed() ? this.selectionEnd : this.selectionStart;
                    }
                    get finalSelectionEnd() {
                        if (this.isSelectAllActive) return [
                            this._bufferService.cols,
                            this._bufferService.buffer.ybase + this._bufferService.rows - 1
                        ];
                        if (this.selectionStart) {
                            if (!this.selectionEnd || this.areSelectionValuesReversed()) {
                                const e = this.selectionStart[0] + this.selectionStartLength;
                                return e > this._bufferService.cols ? e % this._bufferService.cols == 0 ? [
                                    this._bufferService.cols,
                                    this.selectionStart[1] + Math.floor(e / this._bufferService.cols) - 1
                                ] : [
                                    e % this._bufferService.cols,
                                    this.selectionStart[1] + Math.floor(e / this._bufferService.cols)
                                ] : [
                                    e,
                                    this.selectionStart[1]
                                ];
                            }
                            if (this.selectionStartLength && this.selectionEnd[1] === this.selectionStart[1]) {
                                const e = this.selectionStart[0] + this.selectionStartLength;
                                return e > this._bufferService.cols ? [
                                    e % this._bufferService.cols,
                                    this.selectionStart[1] + Math.floor(e / this._bufferService.cols)
                                ] : [
                                    Math.max(e, this.selectionEnd[0]),
                                    this.selectionEnd[1]
                                ];
                            }
                            return this.selectionEnd;
                        }
                    }
                    areSelectionValuesReversed() {
                        const e = this.selectionStart, t = this.selectionEnd;
                        return !(!e || !t) && (e[1] > t[1] || e[1] === t[1] && e[0] > t[0]);
                    }
                    handleTrim(e) {
                        return this.selectionStart && (this.selectionStart[1] -= e), this.selectionEnd && (this.selectionEnd[1] -= e), this.selectionEnd && this.selectionEnd[1] < 0 ? (this.clearSelection(), !0) : (this.selectionStart && this.selectionStart[1] < 0 && (this.selectionStart[1] = 0), !1);
                    }
                };
            },
            428: function(e, t, i) {
                var s = this && this.__decorate || function(e, t, i, s) {
                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);
                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);
                    return n > 3 && o && Object.defineProperty(t, i, o), o;
                }, r = this && this.__param || function(e, t) {
                    return function(i, s) {
                        t(i, s, e);
                    };
                };
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.CharSizeService = void 0;
                const n = i(2585), o = i(8460), a = i(844);
                let h = class extends a.Disposable {
                    constructor(e, t, i){
                        super(), this._optionsService = i, this.width = 0, this.height = 0, this._onCharSizeChange = this.register(new o.EventEmitter), this.onCharSizeChange = this._onCharSizeChange.event, this._measureStrategy = new c(e, t, this._optionsService), this.register(this._optionsService.onMultipleOptionChange([
                            "fontFamily",
                            "fontSize"
                        ], ()=>this.measure()));
                    }
                    get hasValidSize() {
                        return this.width > 0 && this.height > 0;
                    }
                    measure() {
                        const e = this._measureStrategy.measure();
                        e.width === this.width && e.height === this.height || (this.width = e.width, this.height = e.height, this._onCharSizeChange.fire());
                    }
                };
                h = s([
                    r(2, n.IOptionsService)
                ], h), t.CharSizeService = h;
                class c {
                    constructor(e, t, i){
                        this._document = e, this._parentElement = t, this._optionsService = i, this._result = {
                            width: 0,
                            height: 0
                        }, this._measureElement = this._document.createElement("span"), this._measureElement.classList.add("xterm-char-measure-element"), this._measureElement.textContent = "W", this._measureElement.setAttribute("aria-hidden", "true"), this._parentElement.appendChild(this._measureElement);
                    }
                    measure() {
                        this._measureElement.style.fontFamily = this._optionsService.rawOptions.fontFamily, this._measureElement.style.fontSize = `${this._optionsService.rawOptions.fontSize}px`;
                        const e = this._measureElement.getBoundingClientRect();
                        return 0 !== e.width && 0 !== e.height && (this._result.width = e.width, this._result.height = Math.ceil(e.height)), this._result;
                    }
                }
            },
            4269: function(e, t, i) {
                var s = this && this.__decorate || function(e, t, i, s) {
                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);
                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);
                    return n > 3 && o && Object.defineProperty(t, i, o), o;
                }, r = this && this.__param || function(e, t) {
                    return function(i, s) {
                        t(i, s, e);
                    };
                };
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.CharacterJoinerService = t.JoinedCellData = void 0;
                const n = i(3734), o = i(643), a = i(511), h = i(2585);
                class c extends n.AttributeData {
                    constructor(e, t, i){
                        super(), this.content = 0, this.combinedData = "", this.fg = e.fg, this.bg = e.bg, this.combinedData = t, this._width = i;
                    }
                    isCombined() {
                        return 2097152;
                    }
                    getWidth() {
                        return this._width;
                    }
                    getChars() {
                        return this.combinedData;
                    }
                    getCode() {
                        return 2097151;
                    }
                    setFromCharData(e) {
                        throw new Error("not implemented");
                    }
                    getAsCharData() {
                        return [
                            this.fg,
                            this.getChars(),
                            this.getWidth(),
                            this.getCode()
                        ];
                    }
                }
                t.JoinedCellData = c;
                let l = class e {
                    constructor(e){
                        this._bufferService = e, this._characterJoiners = [], this._nextCharacterJoinerId = 0, this._workCell = new a.CellData;
                    }
                    register(e) {
                        const t = {
                            id: this._nextCharacterJoinerId++,
                            handler: e
                        };
                        return this._characterJoiners.push(t), t.id;
                    }
                    deregister(e) {
                        for(let t = 0; t < this._characterJoiners.length; t++)if (this._characterJoiners[t].id === e) return this._characterJoiners.splice(t, 1), !0;
                        return !1;
                    }
                    getJoinedCharacters(e) {
                        if (0 === this._characterJoiners.length) return [];
                        const t = this._bufferService.buffer.lines.get(e);
                        if (!t || 0 === t.length) return [];
                        const i = [], s = t.translateToString(!0);
                        let r = 0, n = 0, a = 0, h = t.getFg(0), c = t.getBg(0);
                        for(let e = 0; e < t.getTrimmedLength(); e++)if (t.loadCell(e, this._workCell), 0 !== this._workCell.getWidth()) {
                            if (this._workCell.fg !== h || this._workCell.bg !== c) {
                                if (e - r > 1) {
                                    const e = this._getJoinedRanges(s, a, n, t, r);
                                    for(let t = 0; t < e.length; t++)i.push(e[t]);
                                }
                                r = e, a = n, h = this._workCell.fg, c = this._workCell.bg;
                            }
                            n += this._workCell.getChars().length || o.WHITESPACE_CELL_CHAR.length;
                        }
                        if (this._bufferService.cols - r > 1) {
                            const e = this._getJoinedRanges(s, a, n, t, r);
                            for(let t = 0; t < e.length; t++)i.push(e[t]);
                        }
                        return i;
                    }
                    _getJoinedRanges(t, i, s, r, n) {
                        const o = t.substring(i, s);
                        let a = [];
                        try {
                            a = this._characterJoiners[0].handler(o);
                        } catch (e) {
                            console.error(e);
                        }
                        for(let t = 1; t < this._characterJoiners.length; t++)try {
                            const i = this._characterJoiners[t].handler(o);
                            for(let t = 0; t < i.length; t++)e._mergeRanges(a, i[t]);
                        } catch (e) {
                            console.error(e);
                        }
                        return this._stringRangesToCellRanges(a, r, n), a;
                    }
                    _stringRangesToCellRanges(e, t, i) {
                        let s = 0, r = !1, n = 0, a = e[s];
                        if (a) {
                            for(let h = i; h < this._bufferService.cols; h++){
                                const i = t.getWidth(h), c = t.getString(h).length || o.WHITESPACE_CELL_CHAR.length;
                                if (0 !== i) {
                                    if (!r && a[0] <= n && (a[0] = h, r = !0), a[1] <= n) {
                                        if (a[1] = h, a = e[++s], !a) break;
                                        a[0] <= n ? (a[0] = h, r = !0) : r = !1;
                                    }
                                    n += c;
                                }
                            }
                            a && (a[1] = this._bufferService.cols);
                        }
                    }
                    static _mergeRanges(e, t) {
                        let i = !1;
                        for(let s = 0; s < e.length; s++){
                            const r = e[s];
                            if (i) {
                                if (t[1] <= r[0]) return e[s - 1][1] = t[1], e;
                                if (t[1] <= r[1]) return e[s - 1][1] = Math.max(t[1], r[1]), e.splice(s, 1), e;
                                e.splice(s, 1), s--;
                            } else {
                                if (t[1] <= r[0]) return e.splice(s, 0, t), e;
                                if (t[1] <= r[1]) return r[0] = Math.min(t[0], r[0]), e;
                                t[0] < r[1] && (r[0] = Math.min(t[0], r[0]), i = !0);
                            }
                        }
                        return i ? e[e.length - 1][1] = t[1] : e.push(t), e;
                    }
                };
                l = s([
                    r(0, h.IBufferService)
                ], l), t.CharacterJoinerService = l;
            },
            5114: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.CoreBrowserService = void 0, t.CoreBrowserService = class {
                    constructor(e, t){
                        this._textarea = e, this.window = t, this._isFocused = !1, this._cachedIsFocused = void 0, this._textarea.addEventListener("focus", ()=>this._isFocused = !0), this._textarea.addEventListener("blur", ()=>this._isFocused = !1);
                    }
                    get dpr() {
                        return this.window.devicePixelRatio;
                    }
                    get isFocused() {
                        return void 0 === this._cachedIsFocused && (this._cachedIsFocused = this._isFocused && this._textarea.ownerDocument.hasFocus(), queueMicrotask(()=>this._cachedIsFocused = void 0)), this._cachedIsFocused;
                    }
                };
            },
            8934: function(e, t, i) {
                var s = this && this.__decorate || function(e, t, i, s) {
                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);
                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);
                    return n > 3 && o && Object.defineProperty(t, i, o), o;
                }, r = this && this.__param || function(e, t) {
                    return function(i, s) {
                        t(i, s, e);
                    };
                };
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.MouseService = void 0;
                const n = i(4725), o = i(9806);
                let a = class {
                    constructor(e, t){
                        this._renderService = e, this._charSizeService = t;
                    }
                    getCoords(e, t, i, s, r) {
                        return (0, o.getCoords)(window, e, t, i, s, this._charSizeService.hasValidSize, this._renderService.dimensions.css.cell.width, this._renderService.dimensions.css.cell.height, r);
                    }
                    getMouseReportCoords(e, t) {
                        const i = (0, o.getCoordsRelativeToElement)(window, e, t);
                        if (!(!this._charSizeService.hasValidSize || i[0] < 0 || i[1] < 0 || i[0] >= this._renderService.dimensions.css.canvas.width || i[1] >= this._renderService.dimensions.css.canvas.height)) return {
                            col: Math.floor(i[0] / this._renderService.dimensions.css.cell.width),
                            row: Math.floor(i[1] / this._renderService.dimensions.css.cell.height),
                            x: Math.floor(i[0]),
                            y: Math.floor(i[1])
                        };
                    }
                };
                a = s([
                    r(0, n.IRenderService),
                    r(1, n.ICharSizeService)
                ], a), t.MouseService = a;
            },
            3230: function(e, t, i) {
                var s = this && this.__decorate || function(e, t, i, s) {
                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);
                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);
                    return n > 3 && o && Object.defineProperty(t, i, o), o;
                }, r = this && this.__param || function(e, t) {
                    return function(i, s) {
                        t(i, s, e);
                    };
                };
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.RenderService = void 0;
                const n = i(6193), o = i(8460), a = i(844), h = i(5596), c = i(3656), l = i(2585), d = i(4725), _ = i(7226);
                let u = class extends a.Disposable {
                    constructor(e, t, i, s, r, a, l, d){
                        if (super(), this._rowCount = e, this._charSizeService = s, this._pausedResizeTask = new _.DebouncedIdleTask, this._isPaused = !1, this._needsFullRefresh = !1, this._isNextRenderRedrawOnly = !0, this._needsSelectionRefresh = !1, this._canvasWidth = 0, this._canvasHeight = 0, this._selectionState = {
                            start: void 0,
                            end: void 0,
                            columnSelectMode: !1
                        }, this._onDimensionsChange = this.register(new o.EventEmitter), this.onDimensionsChange = this._onDimensionsChange.event, this._onRenderedViewportChange = this.register(new o.EventEmitter), this.onRenderedViewportChange = this._onRenderedViewportChange.event, this._onRender = this.register(new o.EventEmitter), this.onRender = this._onRender.event, this._onRefreshRequest = this.register(new o.EventEmitter), this.onRefreshRequest = this._onRefreshRequest.event, this.register({
                            dispose: ()=>{
                                var e;
                                return null === (e = this._renderer) || void 0 === e ? void 0 : e.dispose();
                            }
                        }), this._renderDebouncer = new n.RenderDebouncer(l.window, (e, t)=>this._renderRows(e, t)), this.register(this._renderDebouncer), this._screenDprMonitor = new h.ScreenDprMonitor(l.window), this._screenDprMonitor.setListener(()=>this.handleDevicePixelRatioChange()), this.register(this._screenDprMonitor), this.register(a.onResize(()=>this._fullRefresh())), this.register(a.buffers.onBufferActivate(()=>{
                            var e;
                            return null === (e = this._renderer) || void 0 === e ? void 0 : e.clear();
                        })), this.register(i.onOptionChange(()=>this._handleOptionsChanged())), this.register(this._charSizeService.onCharSizeChange(()=>this.handleCharSizeChanged())), this.register(r.onDecorationRegistered(()=>this._fullRefresh())), this.register(r.onDecorationRemoved(()=>this._fullRefresh())), this.register(i.onMultipleOptionChange([
                            "customGlyphs",
                            "drawBoldTextInBrightColors",
                            "letterSpacing",
                            "lineHeight",
                            "fontFamily",
                            "fontSize",
                            "fontWeight",
                            "fontWeightBold",
                            "minimumContrastRatio"
                        ], ()=>{
                            this.clear(), this.handleResize(a.cols, a.rows), this._fullRefresh();
                        })), this.register(i.onMultipleOptionChange([
                            "cursorBlink",
                            "cursorStyle"
                        ], ()=>this.refreshRows(a.buffer.y, a.buffer.y, !0))), this.register((0, c.addDisposableDomListener)(l.window, "resize", ()=>this.handleDevicePixelRatioChange())), this.register(d.onChangeColors(()=>this._fullRefresh())), "IntersectionObserver" in l.window) {
                            const e = new l.window.IntersectionObserver((e)=>this._handleIntersectionChange(e[e.length - 1]), {
                                threshold: 0
                            });
                            e.observe(t), this.register({
                                dispose: ()=>e.disconnect()
                            });
                        }
                    }
                    get dimensions() {
                        return this._renderer.dimensions;
                    }
                    _handleIntersectionChange(e) {
                        this._isPaused = void 0 === e.isIntersecting ? 0 === e.intersectionRatio : !e.isIntersecting, this._isPaused || this._charSizeService.hasValidSize || this._charSizeService.measure(), !this._isPaused && this._needsFullRefresh && (this._pausedResizeTask.flush(), this.refreshRows(0, this._rowCount - 1), this._needsFullRefresh = !1);
                    }
                    refreshRows(e, t, i = !1) {
                        this._isPaused ? this._needsFullRefresh = !0 : (i || (this._isNextRenderRedrawOnly = !1), this._renderDebouncer.refresh(e, t, this._rowCount));
                    }
                    _renderRows(e, t) {
                        this._renderer && (this._renderer.renderRows(e, t), this._needsSelectionRefresh && (this._renderer.handleSelectionChanged(this._selectionState.start, this._selectionState.end, this._selectionState.columnSelectMode), this._needsSelectionRefresh = !1), this._isNextRenderRedrawOnly || this._onRenderedViewportChange.fire({
                            start: e,
                            end: t
                        }), this._onRender.fire({
                            start: e,
                            end: t
                        }), this._isNextRenderRedrawOnly = !0);
                    }
                    resize(e, t) {
                        this._rowCount = t, this._fireOnCanvasResize();
                    }
                    _handleOptionsChanged() {
                        this._renderer && (this.refreshRows(0, this._rowCount - 1), this._fireOnCanvasResize());
                    }
                    _fireOnCanvasResize() {
                        this._renderer && (this._renderer.dimensions.css.canvas.width === this._canvasWidth && this._renderer.dimensions.css.canvas.height === this._canvasHeight || this._onDimensionsChange.fire(this._renderer.dimensions));
                    }
                    hasRenderer() {
                        return !!this._renderer;
                    }
                    setRenderer(e) {
                        var t;
                        null === (t = this._renderer) || void 0 === t || t.dispose(), this._renderer = e, this._renderer.onRequestRedraw((e)=>this.refreshRows(e.start, e.end, !0)), this._needsSelectionRefresh = !0, this._fullRefresh();
                    }
                    addRefreshCallback(e) {
                        return this._renderDebouncer.addRefreshCallback(e);
                    }
                    _fullRefresh() {
                        this._isPaused ? this._needsFullRefresh = !0 : this.refreshRows(0, this._rowCount - 1);
                    }
                    clearTextureAtlas() {
                        var e, t;
                        this._renderer && (null === (t = (e = this._renderer).clearTextureAtlas) || void 0 === t || t.call(e), this._fullRefresh());
                    }
                    handleDevicePixelRatioChange() {
                        this._charSizeService.measure(), this._renderer && (this._renderer.handleDevicePixelRatioChange(), this.refreshRows(0, this._rowCount - 1));
                    }
                    handleResize(e, t) {
                        this._renderer && (this._isPaused ? this._pausedResizeTask.set(()=>this._renderer.handleResize(e, t)) : this._renderer.handleResize(e, t), this._fullRefresh());
                    }
                    handleCharSizeChanged() {
                        var e;
                        null === (e = this._renderer) || void 0 === e || e.handleCharSizeChanged();
                    }
                    handleBlur() {
                        var e;
                        null === (e = this._renderer) || void 0 === e || e.handleBlur();
                    }
                    handleFocus() {
                        var e;
                        null === (e = this._renderer) || void 0 === e || e.handleFocus();
                    }
                    handleSelectionChanged(e, t, i) {
                        var s;
                        this._selectionState.start = e, this._selectionState.end = t, this._selectionState.columnSelectMode = i, null === (s = this._renderer) || void 0 === s || s.handleSelectionChanged(e, t, i);
                    }
                    handleCursorMove() {
                        var e;
                        null === (e = this._renderer) || void 0 === e || e.handleCursorMove();
                    }
                    clear() {
                        var e;
                        null === (e = this._renderer) || void 0 === e || e.clear();
                    }
                };
                u = s([
                    r(2, l.IOptionsService),
                    r(3, d.ICharSizeService),
                    r(4, l.IDecorationService),
                    r(5, l.IBufferService),
                    r(6, d.ICoreBrowserService),
                    r(7, d.IThemeService)
                ], u), t.RenderService = u;
            },
            9312: function(e, t, i) {
                var s = this && this.__decorate || function(e, t, i, s) {
                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);
                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);
                    return n > 3 && o && Object.defineProperty(t, i, o), o;
                }, r = this && this.__param || function(e, t) {
                    return function(i, s) {
                        t(i, s, e);
                    };
                };
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.SelectionService = void 0;
                const n = i(6114), o = i(456), a = i(511), h = i(8460), c = i(4725), l = i(2585), d = i(9806), _ = i(9504), u = i(844), f = i(4841), v = String.fromCharCode(160), g = new RegExp(v, "g");
                let p = class extends u.Disposable {
                    constructor(e, t, i, s, r, n, c, l, d){
                        super(), this._element = e, this._screenElement = t, this._linkifier = i, this._bufferService = s, this._coreService = r, this._mouseService = n, this._optionsService = c, this._renderService = l, this._coreBrowserService = d, this._dragScrollAmount = 0, this._enabled = !0, this._workCell = new a.CellData, this._mouseDownTimeStamp = 0, this._oldHasSelection = !1, this._oldSelectionStart = void 0, this._oldSelectionEnd = void 0, this._onLinuxMouseSelection = this.register(new h.EventEmitter), this.onLinuxMouseSelection = this._onLinuxMouseSelection.event, this._onRedrawRequest = this.register(new h.EventEmitter), this.onRequestRedraw = this._onRedrawRequest.event, this._onSelectionChange = this.register(new h.EventEmitter), this.onSelectionChange = this._onSelectionChange.event, this._onRequestScrollLines = this.register(new h.EventEmitter), this.onRequestScrollLines = this._onRequestScrollLines.event, this._mouseMoveListener = (e)=>this._handleMouseMove(e), this._mouseUpListener = (e)=>this._handleMouseUp(e), this._coreService.onUserInput(()=>{
                            this.hasSelection && this.clearSelection();
                        }), this._trimListener = this._bufferService.buffer.lines.onTrim((e)=>this._handleTrim(e)), this.register(this._bufferService.buffers.onBufferActivate((e)=>this._handleBufferActivate(e))), this.enable(), this._model = new o.SelectionModel(this._bufferService), this._activeSelectionMode = 0, this.register((0, u.toDisposable)(()=>{
                            this._removeMouseDownListeners();
                        }));
                    }
                    reset() {
                        this.clearSelection();
                    }
                    disable() {
                        this.clearSelection(), this._enabled = !1;
                    }
                    enable() {
                        this._enabled = !0;
                    }
                    get selectionStart() {
                        return this._model.finalSelectionStart;
                    }
                    get selectionEnd() {
                        return this._model.finalSelectionEnd;
                    }
                    get hasSelection() {
                        const e = this._model.finalSelectionStart, t = this._model.finalSelectionEnd;
                        return !(!e || !t || e[0] === t[0] && e[1] === t[1]);
                    }
                    get selectionText() {
                        const e = this._model.finalSelectionStart, t = this._model.finalSelectionEnd;
                        if (!e || !t) return "";
                        const i = this._bufferService.buffer, s = [];
                        if (3 === this._activeSelectionMode) {
                            if (e[0] === t[0]) return "";
                            const r = e[0] < t[0] ? e[0] : t[0], n = e[0] < t[0] ? t[0] : e[0];
                            for(let o = e[1]; o <= t[1]; o++){
                                const e = i.translateBufferLineToString(o, !0, r, n);
                                s.push(e);
                            }
                        } else {
                            const r = e[1] === t[1] ? t[0] : void 0;
                            s.push(i.translateBufferLineToString(e[1], !0, e[0], r));
                            for(let r = e[1] + 1; r <= t[1] - 1; r++){
                                const e = i.lines.get(r), t = i.translateBufferLineToString(r, !0);
                                (null == e ? void 0 : e.isWrapped) ? s[s.length - 1] += t : s.push(t);
                            }
                            if (e[1] !== t[1]) {
                                const e = i.lines.get(t[1]), r = i.translateBufferLineToString(t[1], !0, 0, t[0]);
                                e && e.isWrapped ? s[s.length - 1] += r : s.push(r);
                            }
                        }
                        return s.map((e)=>e.replace(g, " ")).join(n.isWindows ? "\r\n" : "\n");
                    }
                    clearSelection() {
                        this._model.clearSelection(), this._removeMouseDownListeners(), this.refresh(), this._onSelectionChange.fire();
                    }
                    refresh(e) {
                        this._refreshAnimationFrame || (this._refreshAnimationFrame = this._coreBrowserService.window.requestAnimationFrame(()=>this._refresh())), n.isLinux && e && this.selectionText.length && this._onLinuxMouseSelection.fire(this.selectionText);
                    }
                    _refresh() {
                        this._refreshAnimationFrame = void 0, this._onRedrawRequest.fire({
                            start: this._model.finalSelectionStart,
                            end: this._model.finalSelectionEnd,
                            columnSelectMode: 3 === this._activeSelectionMode
                        });
                    }
                    _isClickInSelection(e) {
                        const t = this._getMouseBufferCoords(e), i = this._model.finalSelectionStart, s = this._model.finalSelectionEnd;
                        return !!(i && s && t) && this._areCoordsInSelection(t, i, s);
                    }
                    isCellInSelection(e, t) {
                        const i = this._model.finalSelectionStart, s = this._model.finalSelectionEnd;
                        return !(!i || !s) && this._areCoordsInSelection([
                            e,
                            t
                        ], i, s);
                    }
                    _areCoordsInSelection(e, t, i) {
                        return e[1] > t[1] && e[1] < i[1] || t[1] === i[1] && e[1] === t[1] && e[0] >= t[0] && e[0] < i[0] || t[1] < i[1] && e[1] === i[1] && e[0] < i[0] || t[1] < i[1] && e[1] === t[1] && e[0] >= t[0];
                    }
                    _selectWordAtCursor(e, t) {
                        var i, s;
                        const r = null === (s = null === (i = this._linkifier.currentLink) || void 0 === i ? void 0 : i.link) || void 0 === s ? void 0 : s.range;
                        if (r) return this._model.selectionStart = [
                            r.start.x - 1,
                            r.start.y - 1
                        ], this._model.selectionStartLength = (0, f.getRangeLength)(r, this._bufferService.cols), this._model.selectionEnd = void 0, !0;
                        const n = this._getMouseBufferCoords(e);
                        return !!n && (this._selectWordAt(n, t), this._model.selectionEnd = void 0, !0);
                    }
                    selectAll() {
                        this._model.isSelectAllActive = !0, this.refresh(), this._onSelectionChange.fire();
                    }
                    selectLines(e, t) {
                        this._model.clearSelection(), e = Math.max(e, 0), t = Math.min(t, this._bufferService.buffer.lines.length - 1), this._model.selectionStart = [
                            0,
                            e
                        ], this._model.selectionEnd = [
                            this._bufferService.cols,
                            t
                        ], this.refresh(), this._onSelectionChange.fire();
                    }
                    _handleTrim(e) {
                        this._model.handleTrim(e) && this.refresh();
                    }
                    _getMouseBufferCoords(e) {
                        const t = this._mouseService.getCoords(e, this._screenElement, this._bufferService.cols, this._bufferService.rows, !0);
                        if (t) return t[0]--, t[1]--, t[1] += this._bufferService.buffer.ydisp, t;
                    }
                    _getMouseEventScrollAmount(e) {
                        let t = (0, d.getCoordsRelativeToElement)(this._coreBrowserService.window, e, this._screenElement)[1];
                        const i = this._renderService.dimensions.css.canvas.height;
                        return t >= 0 && t <= i ? 0 : (t > i && (t -= i), t = Math.min(Math.max(t, -50), 50), t /= 50, t / Math.abs(t) + Math.round(14 * t));
                    }
                    shouldForceSelection(e) {
                        return n.isMac ? e.altKey && this._optionsService.rawOptions.macOptionClickForcesSelection : e.shiftKey;
                    }
                    handleMouseDown(e) {
                        if (this._mouseDownTimeStamp = e.timeStamp, (2 !== e.button || !this.hasSelection) && 0 === e.button) {
                            if (!this._enabled) {
                                if (!this.shouldForceSelection(e)) return;
                                e.stopPropagation();
                            }
                            e.preventDefault(), this._dragScrollAmount = 0, this._enabled && e.shiftKey ? this._handleIncrementalClick(e) : 1 === e.detail ? this._handleSingleClick(e) : 2 === e.detail ? this._handleDoubleClick(e) : 3 === e.detail && this._handleTripleClick(e), this._addMouseDownListeners(), this.refresh(!0);
                        }
                    }
                    _addMouseDownListeners() {
                        this._screenElement.ownerDocument && (this._screenElement.ownerDocument.addEventListener("mousemove", this._mouseMoveListener), this._screenElement.ownerDocument.addEventListener("mouseup", this._mouseUpListener)), this._dragScrollIntervalTimer = this._coreBrowserService.window.setInterval(()=>this._dragScroll(), 50);
                    }
                    _removeMouseDownListeners() {
                        this._screenElement.ownerDocument && (this._screenElement.ownerDocument.removeEventListener("mousemove", this._mouseMoveListener), this._screenElement.ownerDocument.removeEventListener("mouseup", this._mouseUpListener)), this._coreBrowserService.window.clearInterval(this._dragScrollIntervalTimer), this._dragScrollIntervalTimer = void 0;
                    }
                    _handleIncrementalClick(e) {
                        this._model.selectionStart && (this._model.selectionEnd = this._getMouseBufferCoords(e));
                    }
                    _handleSingleClick(e) {
                        if (this._model.selectionStartLength = 0, this._model.isSelectAllActive = !1, this._activeSelectionMode = this.shouldColumnSelect(e) ? 3 : 0, this._model.selectionStart = this._getMouseBufferCoords(e), !this._model.selectionStart) return;
                        this._model.selectionEnd = void 0;
                        const t = this._bufferService.buffer.lines.get(this._model.selectionStart[1]);
                        t && t.length !== this._model.selectionStart[0] && 0 === t.hasWidth(this._model.selectionStart[0]) && this._model.selectionStart[0]++;
                    }
                    _handleDoubleClick(e) {
                        this._selectWordAtCursor(e, !0) && (this._activeSelectionMode = 1);
                    }
                    _handleTripleClick(e) {
                        const t = this._getMouseBufferCoords(e);
                        t && (this._activeSelectionMode = 2, this._selectLineAt(t[1]));
                    }
                    shouldColumnSelect(e) {
                        return e.altKey && !(n.isMac && this._optionsService.rawOptions.macOptionClickForcesSelection);
                    }
                    _handleMouseMove(e) {
                        if (e.stopImmediatePropagation(), !this._model.selectionStart) return;
                        const t = this._model.selectionEnd ? [
                            this._model.selectionEnd[0],
                            this._model.selectionEnd[1]
                        ] : null;
                        if (this._model.selectionEnd = this._getMouseBufferCoords(e), !this._model.selectionEnd) return void this.refresh(!0);
                        2 === this._activeSelectionMode ? this._model.selectionEnd[1] < this._model.selectionStart[1] ? this._model.selectionEnd[0] = 0 : this._model.selectionEnd[0] = this._bufferService.cols : 1 === this._activeSelectionMode && this._selectToWordAt(this._model.selectionEnd), this._dragScrollAmount = this._getMouseEventScrollAmount(e), 3 !== this._activeSelectionMode && (this._dragScrollAmount > 0 ? this._model.selectionEnd[0] = this._bufferService.cols : this._dragScrollAmount < 0 && (this._model.selectionEnd[0] = 0));
                        const i = this._bufferService.buffer;
                        if (this._model.selectionEnd[1] < i.lines.length) {
                            const e = i.lines.get(this._model.selectionEnd[1]);
                            e && 0 === e.hasWidth(this._model.selectionEnd[0]) && this._model.selectionEnd[0]++;
                        }
                        t && t[0] === this._model.selectionEnd[0] && t[1] === this._model.selectionEnd[1] || this.refresh(!0);
                    }
                    _dragScroll() {
                        if (this._model.selectionEnd && this._model.selectionStart && this._dragScrollAmount) {
                            this._onRequestScrollLines.fire({
                                amount: this._dragScrollAmount,
                                suppressScrollEvent: !1
                            });
                            const e = this._bufferService.buffer;
                            this._dragScrollAmount > 0 ? (3 !== this._activeSelectionMode && (this._model.selectionEnd[0] = this._bufferService.cols), this._model.selectionEnd[1] = Math.min(e.ydisp + this._bufferService.rows, e.lines.length - 1)) : (3 !== this._activeSelectionMode && (this._model.selectionEnd[0] = 0), this._model.selectionEnd[1] = e.ydisp), this.refresh();
                        }
                    }
                    _handleMouseUp(e) {
                        const t = e.timeStamp - this._mouseDownTimeStamp;
                        if (this._removeMouseDownListeners(), this.selectionText.length <= 1 && t < 500 && e.altKey && this._optionsService.rawOptions.altClickMovesCursor) {
                            if (this._bufferService.buffer.ybase === this._bufferService.buffer.ydisp) {
                                const t = this._mouseService.getCoords(e, this._element, this._bufferService.cols, this._bufferService.rows, !1);
                                if (t && void 0 !== t[0] && void 0 !== t[1]) {
                                    const e = (0, _.moveToCellSequence)(t[0] - 1, t[1] - 1, this._bufferService, this._coreService.decPrivateModes.applicationCursorKeys);
                                    this._coreService.triggerDataEvent(e, !0);
                                }
                            }
                        } else this._fireEventIfSelectionChanged();
                    }
                    _fireEventIfSelectionChanged() {
                        const e = this._model.finalSelectionStart, t = this._model.finalSelectionEnd, i = !(!e || !t || e[0] === t[0] && e[1] === t[1]);
                        i ? e && t && (this._oldSelectionStart && this._oldSelectionEnd && e[0] === this._oldSelectionStart[0] && e[1] === this._oldSelectionStart[1] && t[0] === this._oldSelectionEnd[0] && t[1] === this._oldSelectionEnd[1] || this._fireOnSelectionChange(e, t, i)) : this._oldHasSelection && this._fireOnSelectionChange(e, t, i);
                    }
                    _fireOnSelectionChange(e, t, i) {
                        this._oldSelectionStart = e, this._oldSelectionEnd = t, this._oldHasSelection = i, this._onSelectionChange.fire();
                    }
                    _handleBufferActivate(e) {
                        this.clearSelection(), this._trimListener.dispose(), this._trimListener = e.activeBuffer.lines.onTrim((e)=>this._handleTrim(e));
                    }
                    _convertViewportColToCharacterIndex(e, t) {
                        let i = t;
                        for(let s = 0; t >= s; s++){
                            const r = e.loadCell(s, this._workCell).getChars().length;
                            0 === this._workCell.getWidth() ? i-- : r > 1 && t !== s && (i += r - 1);
                        }
                        return i;
                    }
                    setSelection(e, t, i) {
                        this._model.clearSelection(), this._removeMouseDownListeners(), this._model.selectionStart = [
                            e,
                            t
                        ], this._model.selectionStartLength = i, this.refresh(), this._fireEventIfSelectionChanged();
                    }
                    rightClickSelect(e) {
                        this._isClickInSelection(e) || (this._selectWordAtCursor(e, !1) && this.refresh(!0), this._fireEventIfSelectionChanged());
                    }
                    _getWordAt(e, t, i = !0, s = !0) {
                        if (e[0] >= this._bufferService.cols) return;
                        const r = this._bufferService.buffer, n = r.lines.get(e[1]);
                        if (!n) return;
                        const o = r.translateBufferLineToString(e[1], !1);
                        let a = this._convertViewportColToCharacterIndex(n, e[0]), h = a;
                        const c = e[0] - a;
                        let l = 0, d = 0, _ = 0, u = 0;
                        if (" " === o.charAt(a)) {
                            for(; a > 0 && " " === o.charAt(a - 1);)a--;
                            for(; h < o.length && " " === o.charAt(h + 1);)h++;
                        } else {
                            let t = e[0], i = e[0];
                            0 === n.getWidth(t) && (l++, t--), 2 === n.getWidth(i) && (d++, i++);
                            const s = n.getString(i).length;
                            for(s > 1 && (u += s - 1, h += s - 1); t > 0 && a > 0 && !this._isCharWordSeparator(n.loadCell(t - 1, this._workCell));){
                                n.loadCell(t - 1, this._workCell);
                                const e = this._workCell.getChars().length;
                                0 === this._workCell.getWidth() ? (l++, t--) : e > 1 && (_ += e - 1, a -= e - 1), a--, t--;
                            }
                            for(; i < n.length && h + 1 < o.length && !this._isCharWordSeparator(n.loadCell(i + 1, this._workCell));){
                                n.loadCell(i + 1, this._workCell);
                                const e = this._workCell.getChars().length;
                                2 === this._workCell.getWidth() ? (d++, i++) : e > 1 && (u += e - 1, h += e - 1), h++, i++;
                            }
                        }
                        h++;
                        let f = a + c - l + _, v = Math.min(this._bufferService.cols, h - a + l + d - _ - u);
                        if (t || "" !== o.slice(a, h).trim()) {
                            if (i && 0 === f && 32 !== n.getCodePoint(0)) {
                                const t = r.lines.get(e[1] - 1);
                                if (t && n.isWrapped && 32 !== t.getCodePoint(this._bufferService.cols - 1)) {
                                    const t = this._getWordAt([
                                        this._bufferService.cols - 1,
                                        e[1] - 1
                                    ], !1, !0, !1);
                                    if (t) {
                                        const e = this._bufferService.cols - t.start;
                                        f -= e, v += e;
                                    }
                                }
                            }
                            if (s && f + v === this._bufferService.cols && 32 !== n.getCodePoint(this._bufferService.cols - 1)) {
                                const t = r.lines.get(e[1] + 1);
                                if ((null == t ? void 0 : t.isWrapped) && 32 !== t.getCodePoint(0)) {
                                    const t = this._getWordAt([
                                        0,
                                        e[1] + 1
                                    ], !1, !1, !0);
                                    t && (v += t.length);
                                }
                            }
                            return {
                                start: f,
                                length: v
                            };
                        }
                    }
                    _selectWordAt(e, t) {
                        const i = this._getWordAt(e, t);
                        if (i) {
                            for(; i.start < 0;)i.start += this._bufferService.cols, e[1]--;
                            this._model.selectionStart = [
                                i.start,
                                e[1]
                            ], this._model.selectionStartLength = i.length;
                        }
                    }
                    _selectToWordAt(e) {
                        const t = this._getWordAt(e, !0);
                        if (t) {
                            let i = e[1];
                            for(; t.start < 0;)t.start += this._bufferService.cols, i--;
                            if (!this._model.areSelectionValuesReversed()) for(; t.start + t.length > this._bufferService.cols;)t.length -= this._bufferService.cols, i++;
                            this._model.selectionEnd = [
                                this._model.areSelectionValuesReversed() ? t.start : t.start + t.length,
                                i
                            ];
                        }
                    }
                    _isCharWordSeparator(e) {
                        return 0 !== e.getWidth() && this._optionsService.rawOptions.wordSeparator.indexOf(e.getChars()) >= 0;
                    }
                    _selectLineAt(e) {
                        const t = this._bufferService.buffer.getWrappedRangeForLine(e), i = {
                            start: {
                                x: 0,
                                y: t.first
                            },
                            end: {
                                x: this._bufferService.cols - 1,
                                y: t.last
                            }
                        };
                        this._model.selectionStart = [
                            0,
                            t.first
                        ], this._model.selectionEnd = void 0, this._model.selectionStartLength = (0, f.getRangeLength)(i, this._bufferService.cols);
                    }
                };
                p = s([
                    r(3, l.IBufferService),
                    r(4, l.ICoreService),
                    r(5, c.IMouseService),
                    r(6, l.IOptionsService),
                    r(7, c.IRenderService),
                    r(8, c.ICoreBrowserService)
                ], p), t.SelectionService = p;
            },
            4725: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.IThemeService = t.ICharacterJoinerService = t.ISelectionService = t.IRenderService = t.IMouseService = t.ICoreBrowserService = t.ICharSizeService = void 0;
                const s = i(8343);
                t.ICharSizeService = (0, s.createDecorator)("CharSizeService"), t.ICoreBrowserService = (0, s.createDecorator)("CoreBrowserService"), t.IMouseService = (0, s.createDecorator)("MouseService"), t.IRenderService = (0, s.createDecorator)("RenderService"), t.ISelectionService = (0, s.createDecorator)("SelectionService"), t.ICharacterJoinerService = (0, s.createDecorator)("CharacterJoinerService"), t.IThemeService = (0, s.createDecorator)("ThemeService");
            },
            6731: function(e, t, i) {
                var s = this && this.__decorate || function(e, t, i, s) {
                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);
                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);
                    return n > 3 && o && Object.defineProperty(t, i, o), o;
                }, r = this && this.__param || function(e, t) {
                    return function(i, s) {
                        t(i, s, e);
                    };
                };
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.ThemeService = t.DEFAULT_ANSI_COLORS = void 0;
                const n = i(7239), o = i(8055), a = i(8460), h = i(844), c = i(2585), l = o.css.toColor("#ffffff"), d = o.css.toColor("#000000"), _ = o.css.toColor("#ffffff"), u = o.css.toColor("#000000"), f = {
                    css: "rgba(255, 255, 255, 0.3)",
                    rgba: 4294967117
                };
                t.DEFAULT_ANSI_COLORS = Object.freeze((()=>{
                    const e = [
                        o.css.toColor("#2e3436"),
                        o.css.toColor("#cc0000"),
                        o.css.toColor("#4e9a06"),
                        o.css.toColor("#c4a000"),
                        o.css.toColor("#3465a4"),
                        o.css.toColor("#75507b"),
                        o.css.toColor("#06989a"),
                        o.css.toColor("#d3d7cf"),
                        o.css.toColor("#555753"),
                        o.css.toColor("#ef2929"),
                        o.css.toColor("#8ae234"),
                        o.css.toColor("#fce94f"),
                        o.css.toColor("#729fcf"),
                        o.css.toColor("#ad7fa8"),
                        o.css.toColor("#34e2e2"),
                        o.css.toColor("#eeeeec")
                    ], t = [
                        0,
                        95,
                        135,
                        175,
                        215,
                        255
                    ];
                    for(let i = 0; i < 216; i++){
                        const s = t[i / 36 % 6 | 0], r = t[i / 6 % 6 | 0], n = t[i % 6];
                        e.push({
                            css: o.channels.toCss(s, r, n),
                            rgba: o.channels.toRgba(s, r, n)
                        });
                    }
                    for(let t = 0; t < 24; t++){
                        const i = 8 + 10 * t;
                        e.push({
                            css: o.channels.toCss(i, i, i),
                            rgba: o.channels.toRgba(i, i, i)
                        });
                    }
                    return e;
                })());
                let v = class extends h.Disposable {
                    constructor(e){
                        super(), this._optionsService = e, this._onChangeColors = this.register(new a.EventEmitter), this.onChangeColors = this._onChangeColors.event, this._contrastCache = new n.ColorContrastCache, this._colors = {
                            foreground: l,
                            background: d,
                            cursor: _,
                            cursorAccent: u,
                            selectionForeground: void 0,
                            selectionBackgroundTransparent: f,
                            selectionBackgroundOpaque: o.color.blend(d, f),
                            selectionInactiveBackgroundTransparent: f,
                            selectionInactiveBackgroundOpaque: o.color.blend(d, f),
                            ansi: t.DEFAULT_ANSI_COLORS.slice(),
                            contrastCache: this._contrastCache
                        }, this._updateRestoreColors(), this._setTheme(this._optionsService.rawOptions.theme), this.register(this._optionsService.onSpecificOptionChange("minimumContrastRatio", ()=>this._contrastCache.clear())), this.register(this._optionsService.onSpecificOptionChange("theme", ()=>this._setTheme(this._optionsService.rawOptions.theme)));
                    }
                    get colors() {
                        return this._colors;
                    }
                    _setTheme(e = {}) {
                        const i = this._colors;
                        if (i.foreground = g(e.foreground, l), i.background = g(e.background, d), i.cursor = g(e.cursor, _), i.cursorAccent = g(e.cursorAccent, u), i.selectionBackgroundTransparent = g(e.selectionBackground, f), i.selectionBackgroundOpaque = o.color.blend(i.background, i.selectionBackgroundTransparent), i.selectionInactiveBackgroundTransparent = g(e.selectionInactiveBackground, i.selectionBackgroundTransparent), i.selectionInactiveBackgroundOpaque = o.color.blend(i.background, i.selectionInactiveBackgroundTransparent), i.selectionForeground = e.selectionForeground ? g(e.selectionForeground, o.NULL_COLOR) : void 0, i.selectionForeground === o.NULL_COLOR && (i.selectionForeground = void 0), o.color.isOpaque(i.selectionBackgroundTransparent)) {
                            const e = .3;
                            i.selectionBackgroundTransparent = o.color.opacity(i.selectionBackgroundTransparent, e);
                        }
                        if (o.color.isOpaque(i.selectionInactiveBackgroundTransparent)) {
                            const e = .3;
                            i.selectionInactiveBackgroundTransparent = o.color.opacity(i.selectionInactiveBackgroundTransparent, e);
                        }
                        if (i.ansi = t.DEFAULT_ANSI_COLORS.slice(), i.ansi[0] = g(e.black, t.DEFAULT_ANSI_COLORS[0]), i.ansi[1] = g(e.red, t.DEFAULT_ANSI_COLORS[1]), i.ansi[2] = g(e.green, t.DEFAULT_ANSI_COLORS[2]), i.ansi[3] = g(e.yellow, t.DEFAULT_ANSI_COLORS[3]), i.ansi[4] = g(e.blue, t.DEFAULT_ANSI_COLORS[4]), i.ansi[5] = g(e.magenta, t.DEFAULT_ANSI_COLORS[5]), i.ansi[6] = g(e.cyan, t.DEFAULT_ANSI_COLORS[6]), i.ansi[7] = g(e.white, t.DEFAULT_ANSI_COLORS[7]), i.ansi[8] = g(e.brightBlack, t.DEFAULT_ANSI_COLORS[8]), i.ansi[9] = g(e.brightRed, t.DEFAULT_ANSI_COLORS[9]), i.ansi[10] = g(e.brightGreen, t.DEFAULT_ANSI_COLORS[10]), i.ansi[11] = g(e.brightYellow, t.DEFAULT_ANSI_COLORS[11]), i.ansi[12] = g(e.brightBlue, t.DEFAULT_ANSI_COLORS[12]), i.ansi[13] = g(e.brightMagenta, t.DEFAULT_ANSI_COLORS[13]), i.ansi[14] = g(e.brightCyan, t.DEFAULT_ANSI_COLORS[14]), i.ansi[15] = g(e.brightWhite, t.DEFAULT_ANSI_COLORS[15]), e.extendedAnsi) {
                            const s = Math.min(i.ansi.length - 16, e.extendedAnsi.length);
                            for(let r = 0; r < s; r++)i.ansi[r + 16] = g(e.extendedAnsi[r], t.DEFAULT_ANSI_COLORS[r + 16]);
                        }
                        this._contrastCache.clear(), this._updateRestoreColors(), this._onChangeColors.fire(this.colors);
                    }
                    restoreColor(e) {
                        this._restoreColor(e), this._onChangeColors.fire(this.colors);
                    }
                    _restoreColor(e) {
                        if (void 0 !== e) switch(e){
                            case 256:
                                this._colors.foreground = this._restoreColors.foreground;
                                break;
                            case 257:
                                this._colors.background = this._restoreColors.background;
                                break;
                            case 258:
                                this._colors.cursor = this._restoreColors.cursor;
                                break;
                            default:
                                this._colors.ansi[e] = this._restoreColors.ansi[e];
                        }
                        else for(let e = 0; e < this._restoreColors.ansi.length; ++e)this._colors.ansi[e] = this._restoreColors.ansi[e];
                    }
                    modifyColors(e) {
                        e(this._colors), this._onChangeColors.fire(this.colors);
                    }
                    _updateRestoreColors() {
                        this._restoreColors = {
                            foreground: this._colors.foreground,
                            background: this._colors.background,
                            cursor: this._colors.cursor,
                            ansi: this._colors.ansi.slice()
                        };
                    }
                };
                function g(e, t) {
                    if (void 0 !== e) try {
                        return o.css.toColor(e);
                    } catch (e) {}
                    return t;
                }
                v = s([
                    r(0, c.IOptionsService)
                ], v), t.ThemeService = v;
            },
            6349: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.CircularList = void 0;
                const s = i(8460), r = i(844);
                class n extends r.Disposable {
                    constructor(e){
                        super(), this._maxLength = e, this.onDeleteEmitter = this.register(new s.EventEmitter), this.onDelete = this.onDeleteEmitter.event, this.onInsertEmitter = this.register(new s.EventEmitter), this.onInsert = this.onInsertEmitter.event, this.onTrimEmitter = this.register(new s.EventEmitter), this.onTrim = this.onTrimEmitter.event, this._array = new Array(this._maxLength), this._startIndex = 0, this._length = 0;
                    }
                    get maxLength() {
                        return this._maxLength;
                    }
                    set maxLength(e) {
                        if (this._maxLength === e) return;
                        const t = new Array(e);
                        for(let i = 0; i < Math.min(e, this.length); i++)t[i] = this._array[this._getCyclicIndex(i)];
                        this._array = t, this._maxLength = e, this._startIndex = 0;
                    }
                    get length() {
                        return this._length;
                    }
                    set length(e) {
                        if (e > this._length) for(let t = this._length; t < e; t++)this._array[t] = void 0;
                        this._length = e;
                    }
                    get(e) {
                        return this._array[this._getCyclicIndex(e)];
                    }
                    set(e, t) {
                        this._array[this._getCyclicIndex(e)] = t;
                    }
                    push(e) {
                        this._array[this._getCyclicIndex(this._length)] = e, this._length === this._maxLength ? (this._startIndex = ++this._startIndex % this._maxLength, this.onTrimEmitter.fire(1)) : this._length++;
                    }
                    recycle() {
                        if (this._length !== this._maxLength) throw new Error("Can only recycle when the buffer is full");
                        return this._startIndex = ++this._startIndex % this._maxLength, this.onTrimEmitter.fire(1), this._array[this._getCyclicIndex(this._length - 1)];
                    }
                    get isFull() {
                        return this._length === this._maxLength;
                    }
                    pop() {
                        return this._array[this._getCyclicIndex(this._length-- - 1)];
                    }
                    splice(e, t, ...i) {
                        if (t) {
                            for(let i = e; i < this._length - t; i++)this._array[this._getCyclicIndex(i)] = this._array[this._getCyclicIndex(i + t)];
                            this._length -= t, this.onDeleteEmitter.fire({
                                index: e,
                                amount: t
                            });
                        }
                        for(let t = this._length - 1; t >= e; t--)this._array[this._getCyclicIndex(t + i.length)] = this._array[this._getCyclicIndex(t)];
                        for(let t = 0; t < i.length; t++)this._array[this._getCyclicIndex(e + t)] = i[t];
                        if (i.length && this.onInsertEmitter.fire({
                            index: e,
                            amount: i.length
                        }), this._length + i.length > this._maxLength) {
                            const e = this._length + i.length - this._maxLength;
                            this._startIndex += e, this._length = this._maxLength, this.onTrimEmitter.fire(e);
                        } else this._length += i.length;
                    }
                    trimStart(e) {
                        e > this._length && (e = this._length), this._startIndex += e, this._length -= e, this.onTrimEmitter.fire(e);
                    }
                    shiftElements(e, t, i) {
                        if (!(t <= 0)) {
                            if (e < 0 || e >= this._length) throw new Error("start argument out of range");
                            if (e + i < 0) throw new Error("Cannot shift elements in list beyond index 0");
                            if (i > 0) {
                                for(let s = t - 1; s >= 0; s--)this.set(e + s + i, this.get(e + s));
                                const s = e + t + i - this._length;
                                if (s > 0) for(this._length += s; this._length > this._maxLength;)this._length--, this._startIndex++, this.onTrimEmitter.fire(1);
                            } else for(let s = 0; s < t; s++)this.set(e + s + i, this.get(e + s));
                        }
                    }
                    _getCyclicIndex(e) {
                        return (this._startIndex + e) % this._maxLength;
                    }
                }
                t.CircularList = n;
            },
            1439: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.clone = void 0, t.clone = function e(t, i = 5) {
                    if ("object" != typeof t) return t;
                    const s = Array.isArray(t) ? [] : {};
                    for(const r in t)s[r] = i <= 1 ? t[r] : t[r] && e(t[r], i - 1);
                    return s;
                };
            },
            8055: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.contrastRatio = t.toPaddedHex = t.rgba = t.rgb = t.css = t.color = t.channels = t.NULL_COLOR = void 0;
                const s = i(6114);
                let r = 0, n = 0, o = 0, a = 0;
                var h, c, l;
                function d(e) {
                    const t = e.toString(16);
                    return t.length < 2 ? "0" + t : t;
                }
                function _(e, t) {
                    return e < t ? (t + .05) / (e + .05) : (e + .05) / (t + .05);
                }
                t.NULL_COLOR = {
                    css: "#00000000",
                    rgba: 0
                }, function(e) {
                    e.toCss = function(e, t, i, s) {
                        return void 0 !== s ? `#${d(e)}${d(t)}${d(i)}${d(s)}` : `#${d(e)}${d(t)}${d(i)}`;
                    }, e.toRgba = function(e, t, i, s = 255) {
                        return (e << 24 | t << 16 | i << 8 | s) >>> 0;
                    };
                }(h = t.channels || (t.channels = {})), function(e) {
                    function t(e, t) {
                        return a = Math.round(255 * t), [r, n, o] = l.toChannels(e.rgba), {
                            css: h.toCss(r, n, o, a),
                            rgba: h.toRgba(r, n, o, a)
                        };
                    }
                    e.blend = function(e, t) {
                        if (a = (255 & t.rgba) / 255, 1 === a) return {
                            css: t.css,
                            rgba: t.rgba
                        };
                        const i = t.rgba >> 24 & 255, s = t.rgba >> 16 & 255, c = t.rgba >> 8 & 255, l = e.rgba >> 24 & 255, d = e.rgba >> 16 & 255, _ = e.rgba >> 8 & 255;
                        return r = l + Math.round((i - l) * a), n = d + Math.round((s - d) * a), o = _ + Math.round((c - _) * a), {
                            css: h.toCss(r, n, o),
                            rgba: h.toRgba(r, n, o)
                        };
                    }, e.isOpaque = function(e) {
                        return 255 == (255 & e.rgba);
                    }, e.ensureContrastRatio = function(e, t, i) {
                        const s = l.ensureContrastRatio(e.rgba, t.rgba, i);
                        if (s) return l.toColor(s >> 24 & 255, s >> 16 & 255, s >> 8 & 255);
                    }, e.opaque = function(e) {
                        const t = (255 | e.rgba) >>> 0;
                        return [r, n, o] = l.toChannels(t), {
                            css: h.toCss(r, n, o),
                            rgba: t
                        };
                    }, e.opacity = t, e.multiplyOpacity = function(e, i) {
                        return a = 255 & e.rgba, t(e, a * i / 255);
                    }, e.toColorRGB = function(e) {
                        return [
                            e.rgba >> 24 & 255,
                            e.rgba >> 16 & 255,
                            e.rgba >> 8 & 255
                        ];
                    };
                }(t.color || (t.color = {})), function(e) {
                    let t, i;
                    if (!s.isNode) {
                        const e = document.createElement("canvas");
                        e.width = 1, e.height = 1;
                        const s = e.getContext("2d", {
                            willReadFrequently: !0
                        });
                        s && (t = s, t.globalCompositeOperation = "copy", i = t.createLinearGradient(0, 0, 1, 1));
                    }
                    e.toColor = function(e) {
                        if (e.match(/#[\da-f]{3,8}/i)) switch(e.length){
                            case 4:
                                return r = parseInt(e.slice(1, 2).repeat(2), 16), n = parseInt(e.slice(2, 3).repeat(2), 16), o = parseInt(e.slice(3, 4).repeat(2), 16), l.toColor(r, n, o);
                            case 5:
                                return r = parseInt(e.slice(1, 2).repeat(2), 16), n = parseInt(e.slice(2, 3).repeat(2), 16), o = parseInt(e.slice(3, 4).repeat(2), 16), a = parseInt(e.slice(4, 5).repeat(2), 16), l.toColor(r, n, o, a);
                            case 7:
                                return {
                                    css: e,
                                    rgba: (parseInt(e.slice(1), 16) << 8 | 255) >>> 0
                                };
                            case 9:
                                return {
                                    css: e,
                                    rgba: parseInt(e.slice(1), 16) >>> 0
                                };
                        }
                        const s = e.match(/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(,\s*(0|1|\d?\.(\d+))\s*)?\)/);
                        if (s) return r = parseInt(s[1]), n = parseInt(s[2]), o = parseInt(s[3]), a = Math.round(255 * (void 0 === s[5] ? 1 : parseFloat(s[5]))), l.toColor(r, n, o, a);
                        if (!t || !i) throw new Error("css.toColor: Unsupported css format");
                        if (t.fillStyle = i, t.fillStyle = e, "string" != typeof t.fillStyle) throw new Error("css.toColor: Unsupported css format");
                        if (t.fillRect(0, 0, 1, 1), [r, n, o, a] = t.getImageData(0, 0, 1, 1).data, 255 !== a) throw new Error("css.toColor: Unsupported css format");
                        return {
                            rgba: h.toRgba(r, n, o, a),
                            css: e
                        };
                    };
                }(t.css || (t.css = {})), function(e) {
                    function t(e, t, i) {
                        const s = e / 255, r = t / 255, n = i / 255;
                        return .2126 * (s <= .03928 ? s / 12.92 : Math.pow((s + .055) / 1.055, 2.4)) + .7152 * (r <= .03928 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4)) + .0722 * (n <= .03928 ? n / 12.92 : Math.pow((n + .055) / 1.055, 2.4));
                    }
                    e.relativeLuminance = function(e) {
                        return t(e >> 16 & 255, e >> 8 & 255, 255 & e);
                    }, e.relativeLuminance2 = t;
                }(c = t.rgb || (t.rgb = {})), function(e) {
                    function t(e, t, i) {
                        const s = e >> 24 & 255, r = e >> 16 & 255, n = e >> 8 & 255;
                        let o = t >> 24 & 255, a = t >> 16 & 255, h = t >> 8 & 255, l = _(c.relativeLuminance2(o, a, h), c.relativeLuminance2(s, r, n));
                        for(; l < i && (o > 0 || a > 0 || h > 0);)o -= Math.max(0, Math.ceil(.1 * o)), a -= Math.max(0, Math.ceil(.1 * a)), h -= Math.max(0, Math.ceil(.1 * h)), l = _(c.relativeLuminance2(o, a, h), c.relativeLuminance2(s, r, n));
                        return (o << 24 | a << 16 | h << 8 | 255) >>> 0;
                    }
                    function i(e, t, i) {
                        const s = e >> 24 & 255, r = e >> 16 & 255, n = e >> 8 & 255;
                        let o = t >> 24 & 255, a = t >> 16 & 255, h = t >> 8 & 255, l = _(c.relativeLuminance2(o, a, h), c.relativeLuminance2(s, r, n));
                        for(; l < i && (o < 255 || a < 255 || h < 255);)o = Math.min(255, o + Math.ceil(.1 * (255 - o))), a = Math.min(255, a + Math.ceil(.1 * (255 - a))), h = Math.min(255, h + Math.ceil(.1 * (255 - h))), l = _(c.relativeLuminance2(o, a, h), c.relativeLuminance2(s, r, n));
                        return (o << 24 | a << 16 | h << 8 | 255) >>> 0;
                    }
                    e.ensureContrastRatio = function(e, s, r) {
                        const n = c.relativeLuminance(e >> 8), o = c.relativeLuminance(s >> 8);
                        if (_(n, o) < r) {
                            if (o < n) {
                                const o = t(e, s, r), a = _(n, c.relativeLuminance(o >> 8));
                                if (a < r) {
                                    const t = i(e, s, r);
                                    return a > _(n, c.relativeLuminance(t >> 8)) ? o : t;
                                }
                                return o;
                            }
                            const a = i(e, s, r), h = _(n, c.relativeLuminance(a >> 8));
                            if (h < r) {
                                const i = t(e, s, r);
                                return h > _(n, c.relativeLuminance(i >> 8)) ? a : i;
                            }
                            return a;
                        }
                    }, e.reduceLuminance = t, e.increaseLuminance = i, e.toChannels = function(e) {
                        return [
                            e >> 24 & 255,
                            e >> 16 & 255,
                            e >> 8 & 255,
                            255 & e
                        ];
                    }, e.toColor = function(e, t, i, s) {
                        return {
                            css: h.toCss(e, t, i, s),
                            rgba: h.toRgba(e, t, i, s)
                        };
                    };
                }(l = t.rgba || (t.rgba = {})), t.toPaddedHex = d, t.contrastRatio = _;
            },
            8969: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.CoreTerminal = void 0;
                const s = i(844), r = i(2585), n = i(4348), o = i(7866), a = i(744), h = i(7302), c = i(6975), l = i(8460), d = i(1753), _ = i(1480), u = i(7994), f = i(9282), v = i(5435), g = i(5981), p = i(2660);
                let S = !1;
                class m extends s.Disposable {
                    constructor(e){
                        super(), this._onBinary = this.register(new l.EventEmitter), this.onBinary = this._onBinary.event, this._onData = this.register(new l.EventEmitter), this.onData = this._onData.event, this._onLineFeed = this.register(new l.EventEmitter), this.onLineFeed = this._onLineFeed.event, this._onResize = this.register(new l.EventEmitter), this.onResize = this._onResize.event, this._onWriteParsed = this.register(new l.EventEmitter), this.onWriteParsed = this._onWriteParsed.event, this._onScroll = this.register(new l.EventEmitter), this._instantiationService = new n.InstantiationService, this.optionsService = this.register(new h.OptionsService(e)), this._instantiationService.setService(r.IOptionsService, this.optionsService), this._bufferService = this.register(this._instantiationService.createInstance(a.BufferService)), this._instantiationService.setService(r.IBufferService, this._bufferService), this._logService = this.register(this._instantiationService.createInstance(o.LogService)), this._instantiationService.setService(r.ILogService, this._logService), this.coreService = this.register(this._instantiationService.createInstance(c.CoreService)), this._instantiationService.setService(r.ICoreService, this.coreService), this.coreMouseService = this.register(this._instantiationService.createInstance(d.CoreMouseService)), this._instantiationService.setService(r.ICoreMouseService, this.coreMouseService), this.unicodeService = this.register(this._instantiationService.createInstance(_.UnicodeService)), this._instantiationService.setService(r.IUnicodeService, this.unicodeService), this._charsetService = this._instantiationService.createInstance(u.CharsetService), this._instantiationService.setService(r.ICharsetService, this._charsetService), this._oscLinkService = this._instantiationService.createInstance(p.OscLinkService), this._instantiationService.setService(r.IOscLinkService, this._oscLinkService), this._inputHandler = this.register(new v.InputHandler(this._bufferService, this._charsetService, this.coreService, this._logService, this.optionsService, this._oscLinkService, this.coreMouseService, this.unicodeService)), this.register((0, l.forwardEvent)(this._inputHandler.onLineFeed, this._onLineFeed)), this.register(this._inputHandler), this.register((0, l.forwardEvent)(this._bufferService.onResize, this._onResize)), this.register((0, l.forwardEvent)(this.coreService.onData, this._onData)), this.register((0, l.forwardEvent)(this.coreService.onBinary, this._onBinary)), this.register(this.coreService.onRequestScrollToBottom(()=>this.scrollToBottom())), this.register(this.coreService.onUserInput(()=>this._writeBuffer.handleUserInput())), this.register(this.optionsService.onSpecificOptionChange("windowsMode", (e)=>this._handleWindowsModeOptionChange(e))), this.register(this._bufferService.onScroll((e)=>{
                            this._onScroll.fire({
                                position: this._bufferService.buffer.ydisp,
                                source: 0
                            }), this._inputHandler.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);
                        })), this.register(this._inputHandler.onScroll((e)=>{
                            this._onScroll.fire({
                                position: this._bufferService.buffer.ydisp,
                                source: 0
                            }), this._inputHandler.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);
                        })), this._writeBuffer = this.register(new g.WriteBuffer((e, t)=>this._inputHandler.parse(e, t))), this.register((0, l.forwardEvent)(this._writeBuffer.onWriteParsed, this._onWriteParsed)), this.register((0, s.toDisposable)(()=>{
                            var e;
                            null === (e = this._windowsMode) || void 0 === e || e.dispose(), this._windowsMode = void 0;
                        }));
                    }
                    get onScroll() {
                        return this._onScrollApi || (this._onScrollApi = this.register(new l.EventEmitter), this._onScroll.event((e)=>{
                            var t;
                            null === (t = this._onScrollApi) || void 0 === t || t.fire(e.position);
                        })), this._onScrollApi.event;
                    }
                    get cols() {
                        return this._bufferService.cols;
                    }
                    get rows() {
                        return this._bufferService.rows;
                    }
                    get buffers() {
                        return this._bufferService.buffers;
                    }
                    get options() {
                        return this.optionsService.options;
                    }
                    set options(e) {
                        for(const t in e)this.optionsService.options[t] = e[t];
                    }
                    write(e, t) {
                        this._writeBuffer.write(e, t);
                    }
                    writeSync(e, t) {
                        this._logService.logLevel <= r.LogLevelEnum.WARN && !S && (this._logService.warn("writeSync is unreliable and will be removed soon."), S = !0), this._writeBuffer.writeSync(e, t);
                    }
                    resize(e, t) {
                        isNaN(e) || isNaN(t) || (e = Math.max(e, a.MINIMUM_COLS), t = Math.max(t, a.MINIMUM_ROWS), this._bufferService.resize(e, t));
                    }
                    scroll(e, t = !1) {
                        this._bufferService.scroll(e, t);
                    }
                    scrollLines(e, t, i) {
                        this._bufferService.scrollLines(e, t, i);
                    }
                    scrollPages(e) {
                        this._bufferService.scrollPages(e);
                    }
                    scrollToTop() {
                        this._bufferService.scrollToTop();
                    }
                    scrollToBottom() {
                        this._bufferService.scrollToBottom();
                    }
                    scrollToLine(e) {
                        this._bufferService.scrollToLine(e);
                    }
                    registerEscHandler(e, t) {
                        return this._inputHandler.registerEscHandler(e, t);
                    }
                    registerDcsHandler(e, t) {
                        return this._inputHandler.registerDcsHandler(e, t);
                    }
                    registerCsiHandler(e, t) {
                        return this._inputHandler.registerCsiHandler(e, t);
                    }
                    registerOscHandler(e, t) {
                        return this._inputHandler.registerOscHandler(e, t);
                    }
                    _setup() {
                        this.optionsService.rawOptions.windowsMode && this._enableWindowsMode();
                    }
                    reset() {
                        this._inputHandler.reset(), this._bufferService.reset(), this._charsetService.reset(), this.coreService.reset(), this.coreMouseService.reset();
                    }
                    _handleWindowsModeOptionChange(e) {
                        var t;
                        e ? this._enableWindowsMode() : (null === (t = this._windowsMode) || void 0 === t || t.dispose(), this._windowsMode = void 0);
                    }
                    _enableWindowsMode() {
                        if (!this._windowsMode) {
                            const e = [];
                            e.push(this.onLineFeed(f.updateWindowsModeWrappedState.bind(null, this._bufferService))), e.push(this.registerCsiHandler({
                                final: "H"
                            }, ()=>((0, f.updateWindowsModeWrappedState)(this._bufferService), !1))), this._windowsMode = {
                                dispose: ()=>{
                                    for (const t of e)t.dispose();
                                }
                            };
                        }
                    }
                }
                t.CoreTerminal = m;
            },
            8460: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.forwardEvent = t.EventEmitter = void 0, t.EventEmitter = class {
                    constructor(){
                        this._listeners = [], this._disposed = !1;
                    }
                    get event() {
                        return this._event || (this._event = (e)=>(this._listeners.push(e), {
                                dispose: ()=>{
                                    if (!this._disposed) {
                                        for(let t = 0; t < this._listeners.length; t++)if (this._listeners[t] === e) return void this._listeners.splice(t, 1);
                                    }
                                }
                            })), this._event;
                    }
                    fire(e, t) {
                        const i = [];
                        for(let e = 0; e < this._listeners.length; e++)i.push(this._listeners[e]);
                        for(let s = 0; s < i.length; s++)i[s].call(void 0, e, t);
                    }
                    dispose() {
                        this._listeners && (this._listeners.length = 0), this._disposed = !0;
                    }
                }, t.forwardEvent = function(e, t) {
                    return e((e)=>t.fire(e));
                };
            },
            5435: function(e, t, i) {
                var s = this && this.__decorate || function(e, t, i, s) {
                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);
                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);
                    return n > 3 && o && Object.defineProperty(t, i, o), o;
                }, r = this && this.__param || function(e, t) {
                    return function(i, s) {
                        t(i, s, e);
                    };
                };
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.InputHandler = t.WindowsOptionsReportType = void 0;
                const n = i(2584), o = i(7116), a = i(2015), h = i(844), c = i(482), l = i(8437), d = i(8460), _ = i(643), u = i(511), f = i(3734), v = i(2585), g = i(6242), p = i(6351), S = i(5941), m = {
                    "(": 0,
                    ")": 1,
                    "*": 2,
                    "+": 3,
                    "-": 1,
                    ".": 2
                }, C = 131072;
                function b(e, t) {
                    if (e > 24) return t.setWinLines || !1;
                    switch(e){
                        case 1:
                            return !!t.restoreWin;
                        case 2:
                            return !!t.minimizeWin;
                        case 3:
                            return !!t.setWinPosition;
                        case 4:
                            return !!t.setWinSizePixels;
                        case 5:
                            return !!t.raiseWin;
                        case 6:
                            return !!t.lowerWin;
                        case 7:
                            return !!t.refreshWin;
                        case 8:
                            return !!t.setWinSizeChars;
                        case 9:
                            return !!t.maximizeWin;
                        case 10:
                            return !!t.fullscreenWin;
                        case 11:
                            return !!t.getWinState;
                        case 13:
                            return !!t.getWinPosition;
                        case 14:
                            return !!t.getWinSizePixels;
                        case 15:
                            return !!t.getScreenSizePixels;
                        case 16:
                            return !!t.getCellSizePixels;
                        case 18:
                            return !!t.getWinSizeChars;
                        case 19:
                            return !!t.getScreenSizeChars;
                        case 20:
                            return !!t.getIconTitle;
                        case 21:
                            return !!t.getWinTitle;
                        case 22:
                            return !!t.pushTitle;
                        case 23:
                            return !!t.popTitle;
                        case 24:
                            return !!t.setWinLines;
                    }
                    return !1;
                }
                var y;
                !function(e) {
                    e[e.GET_WIN_SIZE_PIXELS = 0] = "GET_WIN_SIZE_PIXELS", e[e.GET_CELL_SIZE_PIXELS = 1] = "GET_CELL_SIZE_PIXELS";
                }(y = t.WindowsOptionsReportType || (t.WindowsOptionsReportType = {}));
                let w = 0;
                class E extends h.Disposable {
                    constructor(e, t, i, s, r, h, _, f, v = new a.EscapeSequenceParser){
                        super(), this._bufferService = e, this._charsetService = t, this._coreService = i, this._logService = s, this._optionsService = r, this._oscLinkService = h, this._coreMouseService = _, this._unicodeService = f, this._parser = v, this._parseBuffer = new Uint32Array(4096), this._stringDecoder = new c.StringToUtf32, this._utf8Decoder = new c.Utf8ToUtf32, this._workCell = new u.CellData, this._windowTitle = "", this._iconName = "", this._windowTitleStack = [], this._iconNameStack = [], this._curAttrData = l.DEFAULT_ATTR_DATA.clone(), this._eraseAttrDataInternal = l.DEFAULT_ATTR_DATA.clone(), this._onRequestBell = this.register(new d.EventEmitter), this.onRequestBell = this._onRequestBell.event, this._onRequestRefreshRows = this.register(new d.EventEmitter), this.onRequestRefreshRows = this._onRequestRefreshRows.event, this._onRequestReset = this.register(new d.EventEmitter), this.onRequestReset = this._onRequestReset.event, this._onRequestSendFocus = this.register(new d.EventEmitter), this.onRequestSendFocus = this._onRequestSendFocus.event, this._onRequestSyncScrollBar = this.register(new d.EventEmitter), this.onRequestSyncScrollBar = this._onRequestSyncScrollBar.event, this._onRequestWindowsOptionsReport = this.register(new d.EventEmitter), this.onRequestWindowsOptionsReport = this._onRequestWindowsOptionsReport.event, this._onA11yChar = this.register(new d.EventEmitter), this.onA11yChar = this._onA11yChar.event, this._onA11yTab = this.register(new d.EventEmitter), this.onA11yTab = this._onA11yTab.event, this._onCursorMove = this.register(new d.EventEmitter), this.onCursorMove = this._onCursorMove.event, this._onLineFeed = this.register(new d.EventEmitter), this.onLineFeed = this._onLineFeed.event, this._onScroll = this.register(new d.EventEmitter), this.onScroll = this._onScroll.event, this._onTitleChange = this.register(new d.EventEmitter), this.onTitleChange = this._onTitleChange.event, this._onColor = this.register(new d.EventEmitter), this.onColor = this._onColor.event, this._parseStack = {
                            paused: !1,
                            cursorStartX: 0,
                            cursorStartY: 0,
                            decodedLength: 0,
                            position: 0
                        }, this._specialColors = [
                            256,
                            257,
                            258
                        ], this.register(this._parser), this._dirtyRowTracker = new L(this._bufferService), this._activeBuffer = this._bufferService.buffer, this.register(this._bufferService.buffers.onBufferActivate((e)=>this._activeBuffer = e.activeBuffer)), this._parser.setCsiHandlerFallback((e, t)=>{
                            this._logService.debug("Unknown CSI code: ", {
                                identifier: this._parser.identToString(e),
                                params: t.toArray()
                            });
                        }), this._parser.setEscHandlerFallback((e)=>{
                            this._logService.debug("Unknown ESC code: ", {
                                identifier: this._parser.identToString(e)
                            });
                        }), this._parser.setExecuteHandlerFallback((e)=>{
                            this._logService.debug("Unknown EXECUTE code: ", {
                                code: e
                            });
                        }), this._parser.setOscHandlerFallback((e, t, i)=>{
                            this._logService.debug("Unknown OSC code: ", {
                                identifier: e,
                                action: t,
                                data: i
                            });
                        }), this._parser.setDcsHandlerFallback((e, t, i)=>{
                            "HOOK" === t && (i = i.toArray()), this._logService.debug("Unknown DCS code: ", {
                                identifier: this._parser.identToString(e),
                                action: t,
                                payload: i
                            });
                        }), this._parser.setPrintHandler((e, t, i)=>this.print(e, t, i)), this._parser.registerCsiHandler({
                            final: "@"
                        }, (e)=>this.insertChars(e)), this._parser.registerCsiHandler({
                            intermediates: " ",
                            final: "@"
                        }, (e)=>this.scrollLeft(e)), this._parser.registerCsiHandler({
                            final: "A"
                        }, (e)=>this.cursorUp(e)), this._parser.registerCsiHandler({
                            intermediates: " ",
                            final: "A"
                        }, (e)=>this.scrollRight(e)), this._parser.registerCsiHandler({
                            final: "B"
                        }, (e)=>this.cursorDown(e)), this._parser.registerCsiHandler({
                            final: "C"
                        }, (e)=>this.cursorForward(e)), this._parser.registerCsiHandler({
                            final: "D"
                        }, (e)=>this.cursorBackward(e)), this._parser.registerCsiHandler({
                            final: "E"
                        }, (e)=>this.cursorNextLine(e)), this._parser.registerCsiHandler({
                            final: "F"
                        }, (e)=>this.cursorPrecedingLine(e)), this._parser.registerCsiHandler({
                            final: "G"
                        }, (e)=>this.cursorCharAbsolute(e)), this._parser.registerCsiHandler({
                            final: "H"
                        }, (e)=>this.cursorPosition(e)), this._parser.registerCsiHandler({
                            final: "I"
                        }, (e)=>this.cursorForwardTab(e)), this._parser.registerCsiHandler({
                            final: "J"
                        }, (e)=>this.eraseInDisplay(e, !1)), this._parser.registerCsiHandler({
                            prefix: "?",
                            final: "J"
                        }, (e)=>this.eraseInDisplay(e, !0)), this._parser.registerCsiHandler({
                            final: "K"
                        }, (e)=>this.eraseInLine(e, !1)), this._parser.registerCsiHandler({
                            prefix: "?",
                            final: "K"
                        }, (e)=>this.eraseInLine(e, !0)), this._parser.registerCsiHandler({
                            final: "L"
                        }, (e)=>this.insertLines(e)), this._parser.registerCsiHandler({
                            final: "M"
                        }, (e)=>this.deleteLines(e)), this._parser.registerCsiHandler({
                            final: "P"
                        }, (e)=>this.deleteChars(e)), this._parser.registerCsiHandler({
                            final: "S"
                        }, (e)=>this.scrollUp(e)), this._parser.registerCsiHandler({
                            final: "T"
                        }, (e)=>this.scrollDown(e)), this._parser.registerCsiHandler({
                            final: "X"
                        }, (e)=>this.eraseChars(e)), this._parser.registerCsiHandler({
                            final: "Z"
                        }, (e)=>this.cursorBackwardTab(e)), this._parser.registerCsiHandler({
                            final: "`"
                        }, (e)=>this.charPosAbsolute(e)), this._parser.registerCsiHandler({
                            final: "a"
                        }, (e)=>this.hPositionRelative(e)), this._parser.registerCsiHandler({
                            final: "b"
                        }, (e)=>this.repeatPrecedingCharacter(e)), this._parser.registerCsiHandler({
                            final: "c"
                        }, (e)=>this.sendDeviceAttributesPrimary(e)), this._parser.registerCsiHandler({
                            prefix: ">",
                            final: "c"
                        }, (e)=>this.sendDeviceAttributesSecondary(e)), this._parser.registerCsiHandler({
                            final: "d"
                        }, (e)=>this.linePosAbsolute(e)), this._parser.registerCsiHandler({
                            final: "e"
                        }, (e)=>this.vPositionRelative(e)), this._parser.registerCsiHandler({
                            final: "f"
                        }, (e)=>this.hVPosition(e)), this._parser.registerCsiHandler({
                            final: "g"
                        }, (e)=>this.tabClear(e)), this._parser.registerCsiHandler({
                            final: "h"
                        }, (e)=>this.setMode(e)), this._parser.registerCsiHandler({
                            prefix: "?",
                            final: "h"
                        }, (e)=>this.setModePrivate(e)), this._parser.registerCsiHandler({
                            final: "l"
                        }, (e)=>this.resetMode(e)), this._parser.registerCsiHandler({
                            prefix: "?",
                            final: "l"
                        }, (e)=>this.resetModePrivate(e)), this._parser.registerCsiHandler({
                            final: "m"
                        }, (e)=>this.charAttributes(e)), this._parser.registerCsiHandler({
                            final: "n"
                        }, (e)=>this.deviceStatus(e)), this._parser.registerCsiHandler({
                            prefix: "?",
                            final: "n"
                        }, (e)=>this.deviceStatusPrivate(e)), this._parser.registerCsiHandler({
                            intermediates: "!",
                            final: "p"
                        }, (e)=>this.softReset(e)), this._parser.registerCsiHandler({
                            intermediates: " ",
                            final: "q"
                        }, (e)=>this.setCursorStyle(e)), this._parser.registerCsiHandler({
                            final: "r"
                        }, (e)=>this.setScrollRegion(e)), this._parser.registerCsiHandler({
                            final: "s"
                        }, (e)=>this.saveCursor(e)), this._parser.registerCsiHandler({
                            final: "t"
                        }, (e)=>this.windowOptions(e)), this._parser.registerCsiHandler({
                            final: "u"
                        }, (e)=>this.restoreCursor(e)), this._parser.registerCsiHandler({
                            intermediates: "'",
                            final: "}"
                        }, (e)=>this.insertColumns(e)), this._parser.registerCsiHandler({
                            intermediates: "'",
                            final: "~"
                        }, (e)=>this.deleteColumns(e)), this._parser.registerCsiHandler({
                            intermediates: '"',
                            final: "q"
                        }, (e)=>this.selectProtected(e)), this._parser.registerCsiHandler({
                            intermediates: "$",
                            final: "p"
                        }, (e)=>this.requestMode(e, !0)), this._parser.registerCsiHandler({
                            prefix: "?",
                            intermediates: "$",
                            final: "p"
                        }, (e)=>this.requestMode(e, !1)), this._parser.setExecuteHandler(n.C0.BEL, ()=>this.bell()), this._parser.setExecuteHandler(n.C0.LF, ()=>this.lineFeed()), this._parser.setExecuteHandler(n.C0.VT, ()=>this.lineFeed()), this._parser.setExecuteHandler(n.C0.FF, ()=>this.lineFeed()), this._parser.setExecuteHandler(n.C0.CR, ()=>this.carriageReturn()), this._parser.setExecuteHandler(n.C0.BS, ()=>this.backspace()), this._parser.setExecuteHandler(n.C0.HT, ()=>this.tab()), this._parser.setExecuteHandler(n.C0.SO, ()=>this.shiftOut()), this._parser.setExecuteHandler(n.C0.SI, ()=>this.shiftIn()), this._parser.setExecuteHandler(n.C1.IND, ()=>this.index()), this._parser.setExecuteHandler(n.C1.NEL, ()=>this.nextLine()), this._parser.setExecuteHandler(n.C1.HTS, ()=>this.tabSet()), this._parser.registerOscHandler(0, new g.OscHandler((e)=>(this.setTitle(e), this.setIconName(e), !0))), this._parser.registerOscHandler(1, new g.OscHandler((e)=>this.setIconName(e))), this._parser.registerOscHandler(2, new g.OscHandler((e)=>this.setTitle(e))), this._parser.registerOscHandler(4, new g.OscHandler((e)=>this.setOrReportIndexedColor(e))), this._parser.registerOscHandler(8, new g.OscHandler((e)=>this.setHyperlink(e))), this._parser.registerOscHandler(10, new g.OscHandler((e)=>this.setOrReportFgColor(e))), this._parser.registerOscHandler(11, new g.OscHandler((e)=>this.setOrReportBgColor(e))), this._parser.registerOscHandler(12, new g.OscHandler((e)=>this.setOrReportCursorColor(e))), this._parser.registerOscHandler(104, new g.OscHandler((e)=>this.restoreIndexedColor(e))), this._parser.registerOscHandler(110, new g.OscHandler((e)=>this.restoreFgColor(e))), this._parser.registerOscHandler(111, new g.OscHandler((e)=>this.restoreBgColor(e))), this._parser.registerOscHandler(112, new g.OscHandler((e)=>this.restoreCursorColor(e))), this._parser.registerEscHandler({
                            final: "7"
                        }, ()=>this.saveCursor()), this._parser.registerEscHandler({
                            final: "8"
                        }, ()=>this.restoreCursor()), this._parser.registerEscHandler({
                            final: "D"
                        }, ()=>this.index()), this._parser.registerEscHandler({
                            final: "E"
                        }, ()=>this.nextLine()), this._parser.registerEscHandler({
                            final: "H"
                        }, ()=>this.tabSet()), this._parser.registerEscHandler({
                            final: "M"
                        }, ()=>this.reverseIndex()), this._parser.registerEscHandler({
                            final: "="
                        }, ()=>this.keypadApplicationMode()), this._parser.registerEscHandler({
                            final: ">"
                        }, ()=>this.keypadNumericMode()), this._parser.registerEscHandler({
                            final: "c"
                        }, ()=>this.fullReset()), this._parser.registerEscHandler({
                            final: "n"
                        }, ()=>this.setgLevel(2)), this._parser.registerEscHandler({
                            final: "o"
                        }, ()=>this.setgLevel(3)), this._parser.registerEscHandler({
                            final: "|"
                        }, ()=>this.setgLevel(3)), this._parser.registerEscHandler({
                            final: "}"
                        }, ()=>this.setgLevel(2)), this._parser.registerEscHandler({
                            final: "~"
                        }, ()=>this.setgLevel(1)), this._parser.registerEscHandler({
                            intermediates: "%",
                            final: "@"
                        }, ()=>this.selectDefaultCharset()), this._parser.registerEscHandler({
                            intermediates: "%",
                            final: "G"
                        }, ()=>this.selectDefaultCharset());
                        for(const e in o.CHARSETS)this._parser.registerEscHandler({
                            intermediates: "(",
                            final: e
                        }, ()=>this.selectCharset("(" + e)), this._parser.registerEscHandler({
                            intermediates: ")",
                            final: e
                        }, ()=>this.selectCharset(")" + e)), this._parser.registerEscHandler({
                            intermediates: "*",
                            final: e
                        }, ()=>this.selectCharset("*" + e)), this._parser.registerEscHandler({
                            intermediates: "+",
                            final: e
                        }, ()=>this.selectCharset("+" + e)), this._parser.registerEscHandler({
                            intermediates: "-",
                            final: e
                        }, ()=>this.selectCharset("-" + e)), this._parser.registerEscHandler({
                            intermediates: ".",
                            final: e
                        }, ()=>this.selectCharset("." + e)), this._parser.registerEscHandler({
                            intermediates: "/",
                            final: e
                        }, ()=>this.selectCharset("/" + e));
                        this._parser.registerEscHandler({
                            intermediates: "#",
                            final: "8"
                        }, ()=>this.screenAlignmentPattern()), this._parser.setErrorHandler((e)=>(this._logService.error("Parsing error: ", e), e)), this._parser.registerDcsHandler({
                            intermediates: "$",
                            final: "q"
                        }, new p.DcsHandler((e, t)=>this.requestStatusString(e, t)));
                    }
                    getAttrData() {
                        return this._curAttrData;
                    }
                    _preserveStack(e, t, i, s) {
                        this._parseStack.paused = !0, this._parseStack.cursorStartX = e, this._parseStack.cursorStartY = t, this._parseStack.decodedLength = i, this._parseStack.position = s;
                    }
                    _logSlowResolvingAsync(e) {
                        this._logService.logLevel <= v.LogLevelEnum.WARN && Promise.race([
                            e,
                            new Promise((e, t)=>setTimeout(()=>t("#SLOW_TIMEOUT"), 5e3))
                        ]).catch((e)=>{
                            if ("#SLOW_TIMEOUT" !== e) throw e;
                            console.warn("async parser handler taking longer than 5000 ms");
                        });
                    }
                    _getCurrentLinkId() {
                        return this._curAttrData.extended.urlId;
                    }
                    parse(e, t) {
                        let i, s = this._activeBuffer.x, r = this._activeBuffer.y, n = 0;
                        const o = this._parseStack.paused;
                        if (o) {
                            if (i = this._parser.parse(this._parseBuffer, this._parseStack.decodedLength, t)) return this._logSlowResolvingAsync(i), i;
                            s = this._parseStack.cursorStartX, r = this._parseStack.cursorStartY, this._parseStack.paused = !1, e.length > C && (n = this._parseStack.position + C);
                        }
                        if (this._logService.logLevel <= v.LogLevelEnum.DEBUG && this._logService.debug("parsing data" + ("string" == typeof e ? ` "${e}"` : ` "${Array.prototype.map.call(e, (e)=>String.fromCharCode(e)).join("")}"`), "string" == typeof e ? e.split("").map((e)=>e.charCodeAt(0)) : e), this._parseBuffer.length < e.length && this._parseBuffer.length < C && (this._parseBuffer = new Uint32Array(Math.min(e.length, C))), o || this._dirtyRowTracker.clearRange(), e.length > C) for(let t = n; t < e.length; t += C){
                            const n = t + C < e.length ? t + C : e.length, o = "string" == typeof e ? this._stringDecoder.decode(e.substring(t, n), this._parseBuffer) : this._utf8Decoder.decode(e.subarray(t, n), this._parseBuffer);
                            if (i = this._parser.parse(this._parseBuffer, o)) return this._preserveStack(s, r, o, t), this._logSlowResolvingAsync(i), i;
                        }
                        else if (!o) {
                            const t = "string" == typeof e ? this._stringDecoder.decode(e, this._parseBuffer) : this._utf8Decoder.decode(e, this._parseBuffer);
                            if (i = this._parser.parse(this._parseBuffer, t)) return this._preserveStack(s, r, t, 0), this._logSlowResolvingAsync(i), i;
                        }
                        this._activeBuffer.x === s && this._activeBuffer.y === r || this._onCursorMove.fire(), this._onRequestRefreshRows.fire(this._dirtyRowTracker.start, this._dirtyRowTracker.end);
                    }
                    print(e, t, i) {
                        let s, r;
                        const n = this._charsetService.charset, o = this._optionsService.rawOptions.screenReaderMode, a = this._bufferService.cols, h = this._coreService.decPrivateModes.wraparound, l = this._coreService.modes.insertMode, d = this._curAttrData;
                        let u = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);
                        this._dirtyRowTracker.markDirty(this._activeBuffer.y), this._activeBuffer.x && i - t > 0 && 2 === u.getWidth(this._activeBuffer.x - 1) && u.setCellFromCodePoint(this._activeBuffer.x - 1, 0, 1, d.fg, d.bg, d.extended);
                        for(let f = t; f < i; ++f){
                            if (s = e[f], r = this._unicodeService.wcwidth(s), s < 127 && n) {
                                const e = n[String.fromCharCode(s)];
                                e && (s = e.charCodeAt(0));
                            }
                            if (o && this._onA11yChar.fire((0, c.stringFromCodePoint)(s)), this._getCurrentLinkId() && this._oscLinkService.addLineToLink(this._getCurrentLinkId(), this._activeBuffer.ybase + this._activeBuffer.y), r || !this._activeBuffer.x) {
                                if (this._activeBuffer.x + r - 1 >= a) {
                                    if (h) {
                                        for(; this._activeBuffer.x < a;)u.setCellFromCodePoint(this._activeBuffer.x++, 0, 1, d.fg, d.bg, d.extended);
                                        this._activeBuffer.x = 0, this._activeBuffer.y++, this._activeBuffer.y === this._activeBuffer.scrollBottom + 1 ? (this._activeBuffer.y--, this._bufferService.scroll(this._eraseAttrData(), !0)) : (this._activeBuffer.y >= this._bufferService.rows && (this._activeBuffer.y = this._bufferService.rows - 1), this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y).isWrapped = !0), u = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);
                                    } else if (this._activeBuffer.x = a - 1, 2 === r) continue;
                                }
                                if (l && (u.insertCells(this._activeBuffer.x, r, this._activeBuffer.getNullCell(d), d), 2 === u.getWidth(a - 1) && u.setCellFromCodePoint(a - 1, _.NULL_CELL_CODE, _.NULL_CELL_WIDTH, d.fg, d.bg, d.extended)), u.setCellFromCodePoint(this._activeBuffer.x++, s, r, d.fg, d.bg, d.extended), r > 0) for(; --r;)u.setCellFromCodePoint(this._activeBuffer.x++, 0, 0, d.fg, d.bg, d.extended);
                            } else u.getWidth(this._activeBuffer.x - 1) ? u.addCodepointToCell(this._activeBuffer.x - 1, s) : u.addCodepointToCell(this._activeBuffer.x - 2, s);
                        }
                        i - t > 0 && (u.loadCell(this._activeBuffer.x - 1, this._workCell), 2 === this._workCell.getWidth() || this._workCell.getCode() > 65535 ? this._parser.precedingCodepoint = 0 : this._workCell.isCombined() ? this._parser.precedingCodepoint = this._workCell.getChars().charCodeAt(0) : this._parser.precedingCodepoint = this._workCell.content), this._activeBuffer.x < a && i - t > 0 && 0 === u.getWidth(this._activeBuffer.x) && !u.hasContent(this._activeBuffer.x) && u.setCellFromCodePoint(this._activeBuffer.x, 0, 1, d.fg, d.bg, d.extended), this._dirtyRowTracker.markDirty(this._activeBuffer.y);
                    }
                    registerCsiHandler(e, t) {
                        return "t" !== e.final || e.prefix || e.intermediates ? this._parser.registerCsiHandler(e, t) : this._parser.registerCsiHandler(e, (e)=>!b(e.params[0], this._optionsService.rawOptions.windowOptions) || t(e));
                    }
                    registerDcsHandler(e, t) {
                        return this._parser.registerDcsHandler(e, new p.DcsHandler(t));
                    }
                    registerEscHandler(e, t) {
                        return this._parser.registerEscHandler(e, t);
                    }
                    registerOscHandler(e, t) {
                        return this._parser.registerOscHandler(e, new g.OscHandler(t));
                    }
                    bell() {
                        return this._onRequestBell.fire(), !0;
                    }
                    lineFeed() {
                        return this._dirtyRowTracker.markDirty(this._activeBuffer.y), this._optionsService.rawOptions.convertEol && (this._activeBuffer.x = 0), this._activeBuffer.y++, this._activeBuffer.y === this._activeBuffer.scrollBottom + 1 ? (this._activeBuffer.y--, this._bufferService.scroll(this._eraseAttrData())) : this._activeBuffer.y >= this._bufferService.rows && (this._activeBuffer.y = this._bufferService.rows - 1), this._activeBuffer.x >= this._bufferService.cols && this._activeBuffer.x--, this._dirtyRowTracker.markDirty(this._activeBuffer.y), this._onLineFeed.fire(), !0;
                    }
                    carriageReturn() {
                        return this._activeBuffer.x = 0, !0;
                    }
                    backspace() {
                        var e;
                        if (!this._coreService.decPrivateModes.reverseWraparound) return this._restrictCursor(), this._activeBuffer.x > 0 && this._activeBuffer.x--, !0;
                        if (this._restrictCursor(this._bufferService.cols), this._activeBuffer.x > 0) this._activeBuffer.x--;
                        else if (0 === this._activeBuffer.x && this._activeBuffer.y > this._activeBuffer.scrollTop && this._activeBuffer.y <= this._activeBuffer.scrollBottom && (null === (e = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)) || void 0 === e ? void 0 : e.isWrapped)) {
                            this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y).isWrapped = !1, this._activeBuffer.y--, this._activeBuffer.x = this._bufferService.cols - 1;
                            const e = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);
                            e.hasWidth(this._activeBuffer.x) && !e.hasContent(this._activeBuffer.x) && this._activeBuffer.x--;
                        }
                        return this._restrictCursor(), !0;
                    }
                    tab() {
                        if (this._activeBuffer.x >= this._bufferService.cols) return !0;
                        const e = this._activeBuffer.x;
                        return this._activeBuffer.x = this._activeBuffer.nextStop(), this._optionsService.rawOptions.screenReaderMode && this._onA11yTab.fire(this._activeBuffer.x - e), !0;
                    }
                    shiftOut() {
                        return this._charsetService.setgLevel(1), !0;
                    }
                    shiftIn() {
                        return this._charsetService.setgLevel(0), !0;
                    }
                    _restrictCursor(e = this._bufferService.cols - 1) {
                        this._activeBuffer.x = Math.min(e, Math.max(0, this._activeBuffer.x)), this._activeBuffer.y = this._coreService.decPrivateModes.origin ? Math.min(this._activeBuffer.scrollBottom, Math.max(this._activeBuffer.scrollTop, this._activeBuffer.y)) : Math.min(this._bufferService.rows - 1, Math.max(0, this._activeBuffer.y)), this._dirtyRowTracker.markDirty(this._activeBuffer.y);
                    }
                    _setCursor(e, t) {
                        this._dirtyRowTracker.markDirty(this._activeBuffer.y), this._coreService.decPrivateModes.origin ? (this._activeBuffer.x = e, this._activeBuffer.y = this._activeBuffer.scrollTop + t) : (this._activeBuffer.x = e, this._activeBuffer.y = t), this._restrictCursor(), this._dirtyRowTracker.markDirty(this._activeBuffer.y);
                    }
                    _moveCursor(e, t) {
                        this._restrictCursor(), this._setCursor(this._activeBuffer.x + e, this._activeBuffer.y + t);
                    }
                    cursorUp(e) {
                        const t = this._activeBuffer.y - this._activeBuffer.scrollTop;
                        return t >= 0 ? this._moveCursor(0, -Math.min(t, e.params[0] || 1)) : this._moveCursor(0, -(e.params[0] || 1)), !0;
                    }
                    cursorDown(e) {
                        const t = this._activeBuffer.scrollBottom - this._activeBuffer.y;
                        return t >= 0 ? this._moveCursor(0, Math.min(t, e.params[0] || 1)) : this._moveCursor(0, e.params[0] || 1), !0;
                    }
                    cursorForward(e) {
                        return this._moveCursor(e.params[0] || 1, 0), !0;
                    }
                    cursorBackward(e) {
                        return this._moveCursor(-(e.params[0] || 1), 0), !0;
                    }
                    cursorNextLine(e) {
                        return this.cursorDown(e), this._activeBuffer.x = 0, !0;
                    }
                    cursorPrecedingLine(e) {
                        return this.cursorUp(e), this._activeBuffer.x = 0, !0;
                    }
                    cursorCharAbsolute(e) {
                        return this._setCursor((e.params[0] || 1) - 1, this._activeBuffer.y), !0;
                    }
                    cursorPosition(e) {
                        return this._setCursor(e.length >= 2 ? (e.params[1] || 1) - 1 : 0, (e.params[0] || 1) - 1), !0;
                    }
                    charPosAbsolute(e) {
                        return this._setCursor((e.params[0] || 1) - 1, this._activeBuffer.y), !0;
                    }
                    hPositionRelative(e) {
                        return this._moveCursor(e.params[0] || 1, 0), !0;
                    }
                    linePosAbsolute(e) {
                        return this._setCursor(this._activeBuffer.x, (e.params[0] || 1) - 1), !0;
                    }
                    vPositionRelative(e) {
                        return this._moveCursor(0, e.params[0] || 1), !0;
                    }
                    hVPosition(e) {
                        return this.cursorPosition(e), !0;
                    }
                    tabClear(e) {
                        const t = e.params[0];
                        return 0 === t ? delete this._activeBuffer.tabs[this._activeBuffer.x] : 3 === t && (this._activeBuffer.tabs = {}), !0;
                    }
                    cursorForwardTab(e) {
                        if (this._activeBuffer.x >= this._bufferService.cols) return !0;
                        let t = e.params[0] || 1;
                        for(; t--;)this._activeBuffer.x = this._activeBuffer.nextStop();
                        return !0;
                    }
                    cursorBackwardTab(e) {
                        if (this._activeBuffer.x >= this._bufferService.cols) return !0;
                        let t = e.params[0] || 1;
                        for(; t--;)this._activeBuffer.x = this._activeBuffer.prevStop();
                        return !0;
                    }
                    selectProtected(e) {
                        const t = e.params[0];
                        return 1 === t && (this._curAttrData.bg |= 536870912), 2 !== t && 0 !== t || (this._curAttrData.bg &= -536870913), !0;
                    }
                    _eraseInBufferLine(e, t, i, s = !1, r = !1) {
                        const n = this._activeBuffer.lines.get(this._activeBuffer.ybase + e);
                        n.replaceCells(t, i, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData(), r), s && (n.isWrapped = !1);
                    }
                    _resetBufferLine(e, t = !1) {
                        const i = this._activeBuffer.lines.get(this._activeBuffer.ybase + e);
                        i.fill(this._activeBuffer.getNullCell(this._eraseAttrData()), t), this._bufferService.buffer.clearMarkers(this._activeBuffer.ybase + e), i.isWrapped = !1;
                    }
                    eraseInDisplay(e, t = !1) {
                        let i;
                        switch(this._restrictCursor(this._bufferService.cols), e.params[0]){
                            case 0:
                                for(i = this._activeBuffer.y, this._dirtyRowTracker.markDirty(i), this._eraseInBufferLine(i++, this._activeBuffer.x, this._bufferService.cols, 0 === this._activeBuffer.x, t); i < this._bufferService.rows; i++)this._resetBufferLine(i, t);
                                this._dirtyRowTracker.markDirty(i);
                                break;
                            case 1:
                                for(i = this._activeBuffer.y, this._dirtyRowTracker.markDirty(i), this._eraseInBufferLine(i, 0, this._activeBuffer.x + 1, !0, t), this._activeBuffer.x + 1 >= this._bufferService.cols && (this._activeBuffer.lines.get(i + 1).isWrapped = !1); i--;)this._resetBufferLine(i, t);
                                this._dirtyRowTracker.markDirty(0);
                                break;
                            case 2:
                                for(i = this._bufferService.rows, this._dirtyRowTracker.markDirty(i - 1); i--;)this._resetBufferLine(i, t);
                                this._dirtyRowTracker.markDirty(0);
                                break;
                            case 3:
                                const e1 = this._activeBuffer.lines.length - this._bufferService.rows;
                                e1 > 0 && (this._activeBuffer.lines.trimStart(e1), this._activeBuffer.ybase = Math.max(this._activeBuffer.ybase - e1, 0), this._activeBuffer.ydisp = Math.max(this._activeBuffer.ydisp - e1, 0), this._onScroll.fire(0));
                        }
                        return !0;
                    }
                    eraseInLine(e, t = !1) {
                        switch(this._restrictCursor(this._bufferService.cols), e.params[0]){
                            case 0:
                                this._eraseInBufferLine(this._activeBuffer.y, this._activeBuffer.x, this._bufferService.cols, 0 === this._activeBuffer.x, t);
                                break;
                            case 1:
                                this._eraseInBufferLine(this._activeBuffer.y, 0, this._activeBuffer.x + 1, !1, t);
                                break;
                            case 2:
                                this._eraseInBufferLine(this._activeBuffer.y, 0, this._bufferService.cols, !0, t);
                        }
                        return this._dirtyRowTracker.markDirty(this._activeBuffer.y), !0;
                    }
                    insertLines(e) {
                        this._restrictCursor();
                        let t = e.params[0] || 1;
                        if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return !0;
                        const i = this._activeBuffer.ybase + this._activeBuffer.y, s = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom, r = this._bufferService.rows - 1 + this._activeBuffer.ybase - s + 1;
                        for(; t--;)this._activeBuffer.lines.splice(r - 1, 1), this._activeBuffer.lines.splice(i, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));
                        return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom), this._activeBuffer.x = 0, !0;
                    }
                    deleteLines(e) {
                        this._restrictCursor();
                        let t = e.params[0] || 1;
                        if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return !0;
                        const i = this._activeBuffer.ybase + this._activeBuffer.y;
                        let s;
                        for(s = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom, s = this._bufferService.rows - 1 + this._activeBuffer.ybase - s; t--;)this._activeBuffer.lines.splice(i, 1), this._activeBuffer.lines.splice(s, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));
                        return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom), this._activeBuffer.x = 0, !0;
                    }
                    insertChars(e) {
                        this._restrictCursor();
                        const t = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);
                        return t && (t.insertCells(this._activeBuffer.x, e.params[0] || 1, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), this._dirtyRowTracker.markDirty(this._activeBuffer.y)), !0;
                    }
                    deleteChars(e) {
                        this._restrictCursor();
                        const t = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);
                        return t && (t.deleteCells(this._activeBuffer.x, e.params[0] || 1, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), this._dirtyRowTracker.markDirty(this._activeBuffer.y)), !0;
                    }
                    scrollUp(e) {
                        let t = e.params[0] || 1;
                        for(; t--;)this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 1), this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));
                        return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), !0;
                    }
                    scrollDown(e) {
                        let t = e.params[0] || 1;
                        for(; t--;)this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 1), this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 0, this._activeBuffer.getBlankLine(l.DEFAULT_ATTR_DATA));
                        return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), !0;
                    }
                    scrollLeft(e) {
                        if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return !0;
                        const t = e.params[0] || 1;
                        for(let e = this._activeBuffer.scrollTop; e <= this._activeBuffer.scrollBottom; ++e){
                            const i = this._activeBuffer.lines.get(this._activeBuffer.ybase + e);
                            i.deleteCells(0, t, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), i.isWrapped = !1;
                        }
                        return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), !0;
                    }
                    scrollRight(e) {
                        if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return !0;
                        const t = e.params[0] || 1;
                        for(let e = this._activeBuffer.scrollTop; e <= this._activeBuffer.scrollBottom; ++e){
                            const i = this._activeBuffer.lines.get(this._activeBuffer.ybase + e);
                            i.insertCells(0, t, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), i.isWrapped = !1;
                        }
                        return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), !0;
                    }
                    insertColumns(e) {
                        if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return !0;
                        const t = e.params[0] || 1;
                        for(let e = this._activeBuffer.scrollTop; e <= this._activeBuffer.scrollBottom; ++e){
                            const i = this._activeBuffer.lines.get(this._activeBuffer.ybase + e);
                            i.insertCells(this._activeBuffer.x, t, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), i.isWrapped = !1;
                        }
                        return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), !0;
                    }
                    deleteColumns(e) {
                        if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return !0;
                        const t = e.params[0] || 1;
                        for(let e = this._activeBuffer.scrollTop; e <= this._activeBuffer.scrollBottom; ++e){
                            const i = this._activeBuffer.lines.get(this._activeBuffer.ybase + e);
                            i.deleteCells(this._activeBuffer.x, t, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), i.isWrapped = !1;
                        }
                        return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), !0;
                    }
                    eraseChars(e) {
                        this._restrictCursor();
                        const t = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);
                        return t && (t.replaceCells(this._activeBuffer.x, this._activeBuffer.x + (e.params[0] || 1), this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData()), this._dirtyRowTracker.markDirty(this._activeBuffer.y)), !0;
                    }
                    repeatPrecedingCharacter(e) {
                        if (!this._parser.precedingCodepoint) return !0;
                        const t = e.params[0] || 1, i = new Uint32Array(t);
                        for(let e = 0; e < t; ++e)i[e] = this._parser.precedingCodepoint;
                        return this.print(i, 0, i.length), !0;
                    }
                    sendDeviceAttributesPrimary(e) {
                        return e.params[0] > 0 || (this._is("xterm") || this._is("rxvt-unicode") || this._is("screen") ? this._coreService.triggerDataEvent(n.C0.ESC + "[?1;2c") : this._is("linux") && this._coreService.triggerDataEvent(n.C0.ESC + "[?6c")), !0;
                    }
                    sendDeviceAttributesSecondary(e) {
                        return e.params[0] > 0 || (this._is("xterm") ? this._coreService.triggerDataEvent(n.C0.ESC + "[>0;276;0c") : this._is("rxvt-unicode") ? this._coreService.triggerDataEvent(n.C0.ESC + "[>85;95;0c") : this._is("linux") ? this._coreService.triggerDataEvent(e.params[0] + "c") : this._is("screen") && this._coreService.triggerDataEvent(n.C0.ESC + "[>83;40003;0c")), !0;
                    }
                    _is(e) {
                        return 0 === (this._optionsService.rawOptions.termName + "").indexOf(e);
                    }
                    setMode(e) {
                        for(let t = 0; t < e.length; t++)switch(e.params[t]){
                            case 4:
                                this._coreService.modes.insertMode = !0;
                                break;
                            case 20:
                                this._optionsService.options.convertEol = !0;
                        }
                        return !0;
                    }
                    setModePrivate(e) {
                        for(let t = 0; t < e.length; t++)switch(e.params[t]){
                            case 1:
                                this._coreService.decPrivateModes.applicationCursorKeys = !0;
                                break;
                            case 2:
                                this._charsetService.setgCharset(0, o.DEFAULT_CHARSET), this._charsetService.setgCharset(1, o.DEFAULT_CHARSET), this._charsetService.setgCharset(2, o.DEFAULT_CHARSET), this._charsetService.setgCharset(3, o.DEFAULT_CHARSET);
                                break;
                            case 3:
                                this._optionsService.rawOptions.windowOptions.setWinLines && (this._bufferService.resize(132, this._bufferService.rows), this._onRequestReset.fire());
                                break;
                            case 6:
                                this._coreService.decPrivateModes.origin = !0, this._setCursor(0, 0);
                                break;
                            case 7:
                                this._coreService.decPrivateModes.wraparound = !0;
                                break;
                            case 12:
                                this._optionsService.options.cursorBlink = !0;
                                break;
                            case 45:
                                this._coreService.decPrivateModes.reverseWraparound = !0;
                                break;
                            case 66:
                                this._logService.debug("Serial port requested application keypad."), this._coreService.decPrivateModes.applicationKeypad = !0, this._onRequestSyncScrollBar.fire();
                                break;
                            case 9:
                                this._coreMouseService.activeProtocol = "X10";
                                break;
                            case 1e3:
                                this._coreMouseService.activeProtocol = "VT200";
                                break;
                            case 1002:
                                this._coreMouseService.activeProtocol = "DRAG";
                                break;
                            case 1003:
                                this._coreMouseService.activeProtocol = "ANY";
                                break;
                            case 1004:
                                this._coreService.decPrivateModes.sendFocus = !0, this._onRequestSendFocus.fire();
                                break;
                            case 1005:
                                this._logService.debug("DECSET 1005 not supported (see #2507)");
                                break;
                            case 1006:
                                this._coreMouseService.activeEncoding = "SGR";
                                break;
                            case 1015:
                                this._logService.debug("DECSET 1015 not supported (see #2507)");
                                break;
                            case 1016:
                                this._coreMouseService.activeEncoding = "SGR_PIXELS";
                                break;
                            case 25:
                                this._coreService.isCursorHidden = !1;
                                break;
                            case 1048:
                                this.saveCursor();
                                break;
                            case 1049:
                                this.saveCursor();
                            case 47:
                            case 1047:
                                this._bufferService.buffers.activateAltBuffer(this._eraseAttrData()), this._coreService.isCursorInitialized = !0, this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1), this._onRequestSyncScrollBar.fire();
                                break;
                            case 2004:
                                this._coreService.decPrivateModes.bracketedPasteMode = !0;
                        }
                        return !0;
                    }
                    resetMode(e) {
                        for(let t = 0; t < e.length; t++)switch(e.params[t]){
                            case 4:
                                this._coreService.modes.insertMode = !1;
                                break;
                            case 20:
                                this._optionsService.options.convertEol = !1;
                        }
                        return !0;
                    }
                    resetModePrivate(e) {
                        for(let t = 0; t < e.length; t++)switch(e.params[t]){
                            case 1:
                                this._coreService.decPrivateModes.applicationCursorKeys = !1;
                                break;
                            case 3:
                                this._optionsService.rawOptions.windowOptions.setWinLines && (this._bufferService.resize(80, this._bufferService.rows), this._onRequestReset.fire());
                                break;
                            case 6:
                                this._coreService.decPrivateModes.origin = !1, this._setCursor(0, 0);
                                break;
                            case 7:
                                this._coreService.decPrivateModes.wraparound = !1;
                                break;
                            case 12:
                                this._optionsService.options.cursorBlink = !1;
                                break;
                            case 45:
                                this._coreService.decPrivateModes.reverseWraparound = !1;
                                break;
                            case 66:
                                this._logService.debug("Switching back to normal keypad."), this._coreService.decPrivateModes.applicationKeypad = !1, this._onRequestSyncScrollBar.fire();
                                break;
                            case 9:
                            case 1e3:
                            case 1002:
                            case 1003:
                                this._coreMouseService.activeProtocol = "NONE";
                                break;
                            case 1004:
                                this._coreService.decPrivateModes.sendFocus = !1;
                                break;
                            case 1005:
                                this._logService.debug("DECRST 1005 not supported (see #2507)");
                                break;
                            case 1006:
                            case 1016:
                                this._coreMouseService.activeEncoding = "DEFAULT";
                                break;
                            case 1015:
                                this._logService.debug("DECRST 1015 not supported (see #2507)");
                                break;
                            case 25:
                                this._coreService.isCursorHidden = !0;
                                break;
                            case 1048:
                                this.restoreCursor();
                                break;
                            case 1049:
                            case 47:
                            case 1047:
                                this._bufferService.buffers.activateNormalBuffer(), 1049 === e.params[t] && this.restoreCursor(), this._coreService.isCursorInitialized = !0, this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1), this._onRequestSyncScrollBar.fire();
                                break;
                            case 2004:
                                this._coreService.decPrivateModes.bracketedPasteMode = !1;
                        }
                        return !0;
                    }
                    requestMode(e, t) {
                        const i = this._coreService.decPrivateModes, { activeProtocol: s , activeEncoding: r  } = this._coreMouseService, o = this._coreService, { buffers: a , cols: h  } = this._bufferService, { active: c , alt: l  } = a, d = this._optionsService.rawOptions, _ = (e)=>e ? 1 : 2, u = e.params[0];
                        var f, v;
                        return f = u, v = t ? 2 === u ? 3 : 4 === u ? _(o.modes.insertMode) : 12 === u ? 4 : 20 === u ? _(d.convertEol) : 0 : 1 === u ? _(i.applicationCursorKeys) : 3 === u ? d.windowOptions.setWinLines ? 80 === h ? 2 : 132 === h ? 1 : 0 : 0 : 6 === u ? _(i.origin) : 7 === u ? _(i.wraparound) : 8 === u ? 3 : 9 === u ? _("X10" === s) : 12 === u ? _(d.cursorBlink) : 25 === u ? _(!o.isCursorHidden) : 45 === u ? _(i.reverseWraparound) : 66 === u ? _(i.applicationKeypad) : 1e3 === u ? _("VT200" === s) : 1002 === u ? _("DRAG" === s) : 1003 === u ? _("ANY" === s) : 1004 === u ? _(i.sendFocus) : 1005 === u ? 4 : 1006 === u ? _("SGR" === r) : 1015 === u ? 4 : 1016 === u ? _("SGR_PIXELS" === r) : 1048 === u ? 1 : 47 === u || 1047 === u || 1049 === u ? _(c === l) : 2004 === u ? _(i.bracketedPasteMode) : 0, o.triggerDataEvent(`${n.C0.ESC}[${t ? "" : "?"}${f};${v}$y`), !0;
                    }
                    _updateAttrColor(e, t, i, s, r) {
                        return 2 === t ? (e |= 50331648, e &= -16777216, e |= f.AttributeData.fromColorRGB([
                            i,
                            s,
                            r
                        ])) : 5 === t && (e &= -50331904, e |= 33554432 | 255 & i), e;
                    }
                    _extractColor(e, t, i) {
                        const s = [
                            0,
                            0,
                            -1,
                            0,
                            0,
                            0
                        ];
                        let r = 0, n = 0;
                        do {
                            if (s[n + r] = e.params[t + n], e.hasSubParams(t + n)) {
                                const i = e.getSubParams(t + n);
                                let o = 0;
                                do 5 === s[1] && (r = 1), s[n + o + 1 + r] = i[o];
                                while (++o < i.length && o + n + 1 + r < s.length);
                                break;
                            }
                            if (5 === s[1] && n + r >= 2 || 2 === s[1] && n + r >= 5) break;
                            s[1] && (r = 1);
                        }while (++n + t < e.length && n + r < s.length);
                        for(let e = 2; e < s.length; ++e)-1 === s[e] && (s[e] = 0);
                        switch(s[0]){
                            case 38:
                                i.fg = this._updateAttrColor(i.fg, s[1], s[3], s[4], s[5]);
                                break;
                            case 48:
                                i.bg = this._updateAttrColor(i.bg, s[1], s[3], s[4], s[5]);
                                break;
                            case 58:
                                i.extended = i.extended.clone(), i.extended.underlineColor = this._updateAttrColor(i.extended.underlineColor, s[1], s[3], s[4], s[5]);
                        }
                        return n;
                    }
                    _processUnderline(e, t) {
                        t.extended = t.extended.clone(), (!~e || e > 5) && (e = 1), t.extended.underlineStyle = e, t.fg |= 268435456, 0 === e && (t.fg &= -268435457), t.updateExtended();
                    }
                    _processSGR0(e) {
                        e.fg = l.DEFAULT_ATTR_DATA.fg, e.bg = l.DEFAULT_ATTR_DATA.bg, e.extended = e.extended.clone(), e.extended.underlineStyle = 0, e.extended.underlineColor &= -67108864, e.updateExtended();
                    }
                    charAttributes(e) {
                        if (1 === e.length && 0 === e.params[0]) return this._processSGR0(this._curAttrData), !0;
                        const t = e.length;
                        let i;
                        const s = this._curAttrData;
                        for(let r = 0; r < t; r++)i = e.params[r], i >= 30 && i <= 37 ? (s.fg &= -50331904, s.fg |= 16777216 | i - 30) : i >= 40 && i <= 47 ? (s.bg &= -50331904, s.bg |= 16777216 | i - 40) : i >= 90 && i <= 97 ? (s.fg &= -50331904, s.fg |= 16777224 | i - 90) : i >= 100 && i <= 107 ? (s.bg &= -50331904, s.bg |= 16777224 | i - 100) : 0 === i ? this._processSGR0(s) : 1 === i ? s.fg |= 134217728 : 3 === i ? s.bg |= 67108864 : 4 === i ? (s.fg |= 268435456, this._processUnderline(e.hasSubParams(r) ? e.getSubParams(r)[0] : 1, s)) : 5 === i ? s.fg |= 536870912 : 7 === i ? s.fg |= 67108864 : 8 === i ? s.fg |= 1073741824 : 9 === i ? s.fg |= 2147483648 : 2 === i ? s.bg |= 134217728 : 21 === i ? this._processUnderline(2, s) : 22 === i ? (s.fg &= -134217729, s.bg &= -134217729) : 23 === i ? s.bg &= -67108865 : 24 === i ? (s.fg &= -268435457, this._processUnderline(0, s)) : 25 === i ? s.fg &= -536870913 : 27 === i ? s.fg &= -67108865 : 28 === i ? s.fg &= -1073741825 : 29 === i ? s.fg &= 2147483647 : 39 === i ? (s.fg &= -67108864, s.fg |= 16777215 & l.DEFAULT_ATTR_DATA.fg) : 49 === i ? (s.bg &= -67108864, s.bg |= 16777215 & l.DEFAULT_ATTR_DATA.bg) : 38 === i || 48 === i || 58 === i ? r += this._extractColor(e, r, s) : 59 === i ? (s.extended = s.extended.clone(), s.extended.underlineColor = -1, s.updateExtended()) : 100 === i ? (s.fg &= -67108864, s.fg |= 16777215 & l.DEFAULT_ATTR_DATA.fg, s.bg &= -67108864, s.bg |= 16777215 & l.DEFAULT_ATTR_DATA.bg) : this._logService.debug("Unknown SGR attribute: %d.", i);
                        return !0;
                    }
                    deviceStatus(e) {
                        switch(e.params[0]){
                            case 5:
                                this._coreService.triggerDataEvent(`${n.C0.ESC}[0n`);
                                break;
                            case 6:
                                const e1 = this._activeBuffer.y + 1, t = this._activeBuffer.x + 1;
                                this._coreService.triggerDataEvent(`${n.C0.ESC}[${e1};${t}R`);
                        }
                        return !0;
                    }
                    deviceStatusPrivate(e) {
                        if (6 === e.params[0]) {
                            const e = this._activeBuffer.y + 1, t = this._activeBuffer.x + 1;
                            this._coreService.triggerDataEvent(`${n.C0.ESC}[?${e};${t}R`);
                        }
                        return !0;
                    }
                    softReset(e) {
                        return this._coreService.isCursorHidden = !1, this._onRequestSyncScrollBar.fire(), this._activeBuffer.scrollTop = 0, this._activeBuffer.scrollBottom = this._bufferService.rows - 1, this._curAttrData = l.DEFAULT_ATTR_DATA.clone(), this._coreService.reset(), this._charsetService.reset(), this._activeBuffer.savedX = 0, this._activeBuffer.savedY = this._activeBuffer.ybase, this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg, this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg, this._activeBuffer.savedCharset = this._charsetService.charset, this._coreService.decPrivateModes.origin = !1, !0;
                    }
                    setCursorStyle(e) {
                        const t = e.params[0] || 1;
                        switch(t){
                            case 1:
                            case 2:
                                this._optionsService.options.cursorStyle = "block";
                                break;
                            case 3:
                            case 4:
                                this._optionsService.options.cursorStyle = "underline";
                                break;
                            case 5:
                            case 6:
                                this._optionsService.options.cursorStyle = "bar";
                        }
                        const i = t % 2 == 1;
                        return this._optionsService.options.cursorBlink = i, !0;
                    }
                    setScrollRegion(e) {
                        const t = e.params[0] || 1;
                        let i;
                        return (e.length < 2 || (i = e.params[1]) > this._bufferService.rows || 0 === i) && (i = this._bufferService.rows), i > t && (this._activeBuffer.scrollTop = t - 1, this._activeBuffer.scrollBottom = i - 1, this._setCursor(0, 0)), !0;
                    }
                    windowOptions(e) {
                        if (!b(e.params[0], this._optionsService.rawOptions.windowOptions)) return !0;
                        const t = e.length > 1 ? e.params[1] : 0;
                        switch(e.params[0]){
                            case 14:
                                2 !== t && this._onRequestWindowsOptionsReport.fire(y.GET_WIN_SIZE_PIXELS);
                                break;
                            case 16:
                                this._onRequestWindowsOptionsReport.fire(y.GET_CELL_SIZE_PIXELS);
                                break;
                            case 18:
                                this._bufferService && this._coreService.triggerDataEvent(`${n.C0.ESC}[8;${this._bufferService.rows};${this._bufferService.cols}t`);
                                break;
                            case 22:
                                0 !== t && 2 !== t || (this._windowTitleStack.push(this._windowTitle), this._windowTitleStack.length > 10 && this._windowTitleStack.shift()), 0 !== t && 1 !== t || (this._iconNameStack.push(this._iconName), this._iconNameStack.length > 10 && this._iconNameStack.shift());
                                break;
                            case 23:
                                0 !== t && 2 !== t || this._windowTitleStack.length && this.setTitle(this._windowTitleStack.pop()), 0 !== t && 1 !== t || this._iconNameStack.length && this.setIconName(this._iconNameStack.pop());
                        }
                        return !0;
                    }
                    saveCursor(e) {
                        return this._activeBuffer.savedX = this._activeBuffer.x, this._activeBuffer.savedY = this._activeBuffer.ybase + this._activeBuffer.y, this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg, this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg, this._activeBuffer.savedCharset = this._charsetService.charset, !0;
                    }
                    restoreCursor(e) {
                        return this._activeBuffer.x = this._activeBuffer.savedX || 0, this._activeBuffer.y = Math.max(this._activeBuffer.savedY - this._activeBuffer.ybase, 0), this._curAttrData.fg = this._activeBuffer.savedCurAttrData.fg, this._curAttrData.bg = this._activeBuffer.savedCurAttrData.bg, this._charsetService.charset = this._savedCharset, this._activeBuffer.savedCharset && (this._charsetService.charset = this._activeBuffer.savedCharset), this._restrictCursor(), !0;
                    }
                    setTitle(e) {
                        return this._windowTitle = e, this._onTitleChange.fire(e), !0;
                    }
                    setIconName(e) {
                        return this._iconName = e, !0;
                    }
                    setOrReportIndexedColor(e) {
                        const t = [], i = e.split(";");
                        for(; i.length > 1;){
                            const e = i.shift(), s = i.shift();
                            if (/^\d+$/.exec(e)) {
                                const i = parseInt(e);
                                if (0 <= i && i < 256) {
                                    if ("?" === s) t.push({
                                        type: 0,
                                        index: i
                                    });
                                    else {
                                        const e = (0, S.parseColor)(s);
                                        e && t.push({
                                            type: 1,
                                            index: i,
                                            color: e
                                        });
                                    }
                                }
                            }
                        }
                        return t.length && this._onColor.fire(t), !0;
                    }
                    setHyperlink(e) {
                        const t = e.split(";");
                        return !(t.length < 2) && (t[1] ? this._createHyperlink(t[0], t[1]) : !t[0] && this._finishHyperlink());
                    }
                    _createHyperlink(e, t) {
                        this._getCurrentLinkId() && this._finishHyperlink();
                        const i = e.split(":");
                        let s;
                        const r = i.findIndex((e)=>e.startsWith("id="));
                        return -1 !== r && (s = i[r].slice(3) || void 0), this._curAttrData.extended = this._curAttrData.extended.clone(), this._curAttrData.extended.urlId = this._oscLinkService.registerLink({
                            id: s,
                            uri: t
                        }), this._curAttrData.updateExtended(), !0;
                    }
                    _finishHyperlink() {
                        return this._curAttrData.extended = this._curAttrData.extended.clone(), this._curAttrData.extended.urlId = 0, this._curAttrData.updateExtended(), !0;
                    }
                    _setOrReportSpecialColor(e, t) {
                        const i = e.split(";");
                        for(let e = 0; e < i.length && !(t >= this._specialColors.length); ++e, ++t)if ("?" === i[e]) this._onColor.fire([
                            {
                                type: 0,
                                index: this._specialColors[t]
                            }
                        ]);
                        else {
                            const s = (0, S.parseColor)(i[e]);
                            s && this._onColor.fire([
                                {
                                    type: 1,
                                    index: this._specialColors[t],
                                    color: s
                                }
                            ]);
                        }
                        return !0;
                    }
                    setOrReportFgColor(e) {
                        return this._setOrReportSpecialColor(e, 0);
                    }
                    setOrReportBgColor(e) {
                        return this._setOrReportSpecialColor(e, 1);
                    }
                    setOrReportCursorColor(e) {
                        return this._setOrReportSpecialColor(e, 2);
                    }
                    restoreIndexedColor(e) {
                        if (!e) return this._onColor.fire([
                            {
                                type: 2
                            }
                        ]), !0;
                        const t = [], i = e.split(";");
                        for(let e = 0; e < i.length; ++e)if (/^\d+$/.exec(i[e])) {
                            const s = parseInt(i[e]);
                            0 <= s && s < 256 && t.push({
                                type: 2,
                                index: s
                            });
                        }
                        return t.length && this._onColor.fire(t), !0;
                    }
                    restoreFgColor(e) {
                        return this._onColor.fire([
                            {
                                type: 2,
                                index: 256
                            }
                        ]), !0;
                    }
                    restoreBgColor(e) {
                        return this._onColor.fire([
                            {
                                type: 2,
                                index: 257
                            }
                        ]), !0;
                    }
                    restoreCursorColor(e) {
                        return this._onColor.fire([
                            {
                                type: 2,
                                index: 258
                            }
                        ]), !0;
                    }
                    nextLine() {
                        return this._activeBuffer.x = 0, this.index(), !0;
                    }
                    keypadApplicationMode() {
                        return this._logService.debug("Serial port requested application keypad."), this._coreService.decPrivateModes.applicationKeypad = !0, this._onRequestSyncScrollBar.fire(), !0;
                    }
                    keypadNumericMode() {
                        return this._logService.debug("Switching back to normal keypad."), this._coreService.decPrivateModes.applicationKeypad = !1, this._onRequestSyncScrollBar.fire(), !0;
                    }
                    selectDefaultCharset() {
                        return this._charsetService.setgLevel(0), this._charsetService.setgCharset(0, o.DEFAULT_CHARSET), !0;
                    }
                    selectCharset(e) {
                        return 2 !== e.length ? (this.selectDefaultCharset(), !0) : ("/" === e[0] || this._charsetService.setgCharset(m[e[0]], o.CHARSETS[e[1]] || o.DEFAULT_CHARSET), !0);
                    }
                    index() {
                        return this._restrictCursor(), this._activeBuffer.y++, this._activeBuffer.y === this._activeBuffer.scrollBottom + 1 ? (this._activeBuffer.y--, this._bufferService.scroll(this._eraseAttrData())) : this._activeBuffer.y >= this._bufferService.rows && (this._activeBuffer.y = this._bufferService.rows - 1), this._restrictCursor(), !0;
                    }
                    tabSet() {
                        return this._activeBuffer.tabs[this._activeBuffer.x] = !0, !0;
                    }
                    reverseIndex() {
                        if (this._restrictCursor(), this._activeBuffer.y === this._activeBuffer.scrollTop) {
                            const e = this._activeBuffer.scrollBottom - this._activeBuffer.scrollTop;
                            this._activeBuffer.lines.shiftElements(this._activeBuffer.ybase + this._activeBuffer.y, e, 1), this._activeBuffer.lines.set(this._activeBuffer.ybase + this._activeBuffer.y, this._activeBuffer.getBlankLine(this._eraseAttrData())), this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);
                        } else this._activeBuffer.y--, this._restrictCursor();
                        return !0;
                    }
                    fullReset() {
                        return this._parser.reset(), this._onRequestReset.fire(), !0;
                    }
                    reset() {
                        this._curAttrData = l.DEFAULT_ATTR_DATA.clone(), this._eraseAttrDataInternal = l.DEFAULT_ATTR_DATA.clone();
                    }
                    _eraseAttrData() {
                        return this._eraseAttrDataInternal.bg &= -67108864, this._eraseAttrDataInternal.bg |= 67108863 & this._curAttrData.bg, this._eraseAttrDataInternal;
                    }
                    setgLevel(e) {
                        return this._charsetService.setgLevel(e), !0;
                    }
                    screenAlignmentPattern() {
                        const e = new u.CellData;
                        e.content = 4194304 | "E".charCodeAt(0), e.fg = this._curAttrData.fg, e.bg = this._curAttrData.bg, this._setCursor(0, 0);
                        for(let t = 0; t < this._bufferService.rows; ++t){
                            const i = this._activeBuffer.ybase + this._activeBuffer.y + t, s = this._activeBuffer.lines.get(i);
                            s && (s.fill(e), s.isWrapped = !1);
                        }
                        return this._dirtyRowTracker.markAllDirty(), this._setCursor(0, 0), !0;
                    }
                    requestStatusString(e, t) {
                        const i = this._bufferService.buffer, s = this._optionsService.rawOptions;
                        return ((e)=>(this._coreService.triggerDataEvent(`${n.C0.ESC}${e}${n.C0.ESC}\\`), !0))('"q' === e ? `P1$r${this._curAttrData.isProtected() ? 1 : 0}"q` : '"p' === e ? 'P1$r61;1"p' : "r" === e ? `P1$r${i.scrollTop + 1};${i.scrollBottom + 1}r` : "m" === e ? "P1$r0m" : " q" === e ? `P1$r${({
                            block: 2,
                            underline: 4,
                            bar: 6
                        })[s.cursorStyle] - (s.cursorBlink ? 1 : 0)} q` : "P0$r");
                    }
                    markRangeDirty(e, t) {
                        this._dirtyRowTracker.markRangeDirty(e, t);
                    }
                }
                t.InputHandler = E;
                let L = class {
                    constructor(e){
                        this._bufferService = e, this.clearRange();
                    }
                    clearRange() {
                        this.start = this._bufferService.buffer.y, this.end = this._bufferService.buffer.y;
                    }
                    markDirty(e) {
                        e < this.start ? this.start = e : e > this.end && (this.end = e);
                    }
                    markRangeDirty(e, t) {
                        e > t && (w = e, e = t, t = w), e < this.start && (this.start = e), t > this.end && (this.end = t);
                    }
                    markAllDirty() {
                        this.markRangeDirty(0, this._bufferService.rows - 1);
                    }
                };
                L = s([
                    r(0, v.IBufferService)
                ], L);
            },
            844: (e, t)=>{
                function i(e) {
                    for (const t of e)t.dispose();
                    e.length = 0;
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.getDisposeArrayDisposable = t.disposeArray = t.toDisposable = t.Disposable = void 0, t.Disposable = class {
                    constructor(){
                        this._disposables = [], this._isDisposed = !1;
                    }
                    dispose() {
                        this._isDisposed = !0;
                        for (const e of this._disposables)e.dispose();
                        this._disposables.length = 0;
                    }
                    register(e) {
                        return this._disposables.push(e), e;
                    }
                    unregister(e) {
                        const t = this._disposables.indexOf(e);
                        -1 !== t && this._disposables.splice(t, 1);
                    }
                }, t.toDisposable = function(e) {
                    return {
                        dispose: e
                    };
                }, t.disposeArray = i, t.getDisposeArrayDisposable = function(e) {
                    return {
                        dispose: ()=>i(e)
                    };
                };
            },
            1505: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.FourKeyMap = t.TwoKeyMap = void 0;
                class i {
                    constructor(){
                        this._data = {};
                    }
                    set(e, t, i) {
                        this._data[e] || (this._data[e] = {}), this._data[e][t] = i;
                    }
                    get(e, t) {
                        return this._data[e] ? this._data[e][t] : void 0;
                    }
                    clear() {
                        this._data = {};
                    }
                }
                t.TwoKeyMap = i, t.FourKeyMap = class {
                    constructor(){
                        this._data = new i;
                    }
                    set(e, t, s, r, n) {
                        this._data.get(e, t) || this._data.set(e, t, new i), this._data.get(e, t).set(s, r, n);
                    }
                    get(e, t, i, s) {
                        var r;
                        return null === (r = this._data.get(e, t)) || void 0 === r ? void 0 : r.get(i, s);
                    }
                    clear() {
                        this._data.clear();
                    }
                };
            },
            6114: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.isChromeOS = t.isLinux = t.isWindows = t.isIphone = t.isIpad = t.isMac = t.getSafariVersion = t.isSafari = t.isLegacyEdge = t.isFirefox = t.isNode = void 0, t.isNode = "undefined" == typeof navigator;
                const i = t.isNode ? "node" : navigator.userAgent, s = t.isNode ? "node" : navigator.platform;
                t.isFirefox = i.includes("Firefox"), t.isLegacyEdge = i.includes("Edge"), t.isSafari = /^((?!chrome|android).)*safari/i.test(i), t.getSafariVersion = function() {
                    if (!t.isSafari) return 0;
                    const e = i.match(/Version\/(\d+)/);
                    return null === e || e.length < 2 ? 0 : parseInt(e[1]);
                }, t.isMac = [
                    "Macintosh",
                    "MacIntel",
                    "MacPPC",
                    "Mac68K"
                ].includes(s), t.isIpad = "iPad" === s, t.isIphone = "iPhone" === s, t.isWindows = [
                    "Windows",
                    "Win16",
                    "Win32",
                    "WinCE"
                ].includes(s), t.isLinux = s.indexOf("Linux") >= 0, t.isChromeOS = /\bCrOS\b/.test(i);
            },
            6106: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.SortedList = void 0;
                let i = 0;
                t.SortedList = class {
                    constructor(e){
                        this._getKey = e, this._array = [];
                    }
                    clear() {
                        this._array.length = 0;
                    }
                    insert(e) {
                        0 !== this._array.length ? (i = this._search(this._getKey(e), 0, this._array.length - 1), this._array.splice(i, 0, e)) : this._array.push(e);
                    }
                    delete(e) {
                        if (0 === this._array.length) return !1;
                        const t = this._getKey(e);
                        if (void 0 === t) return !1;
                        if (i = this._search(t, 0, this._array.length - 1), -1 === i) return !1;
                        if (this._getKey(this._array[i]) !== t) return !1;
                        do {
                            if (this._array[i] === e) return this._array.splice(i, 1), !0;
                        }while (++i < this._array.length && this._getKey(this._array[i]) === t);
                        return !1;
                    }
                    *getKeyIterator(e) {
                        if (0 !== this._array.length && (i = this._search(e, 0, this._array.length - 1), !(i < 0 || i >= this._array.length) && this._getKey(this._array[i]) === e)) do yield this._array[i];
                        while (++i < this._array.length && this._getKey(this._array[i]) === e);
                    }
                    forEachByKey(e, t) {
                        if (0 !== this._array.length && (i = this._search(e, 0, this._array.length - 1), !(i < 0 || i >= this._array.length) && this._getKey(this._array[i]) === e)) do t(this._array[i]);
                        while (++i < this._array.length && this._getKey(this._array[i]) === e);
                    }
                    values() {
                        return this._array.values();
                    }
                    _search(e, t, i) {
                        if (i < t) return t;
                        let s = Math.floor((t + i) / 2);
                        const r = this._getKey(this._array[s]);
                        if (r > e) return this._search(e, t, s - 1);
                        if (r < e) return this._search(e, s + 1, i);
                        for(; s > 0 && this._getKey(this._array[s - 1]) === e;)s--;
                        return s;
                    }
                };
            },
            7226: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.DebouncedIdleTask = t.IdleTaskQueue = t.PriorityTaskQueue = void 0;
                const s = i(6114);
                class r {
                    constructor(){
                        this._tasks = [], this._i = 0;
                    }
                    enqueue(e) {
                        this._tasks.push(e), this._start();
                    }
                    flush() {
                        for(; this._i < this._tasks.length;)this._tasks[this._i]() || this._i++;
                        this.clear();
                    }
                    clear() {
                        this._idleCallback && (this._cancelCallback(this._idleCallback), this._idleCallback = void 0), this._i = 0, this._tasks.length = 0;
                    }
                    _start() {
                        this._idleCallback || (this._idleCallback = this._requestCallback(this._process.bind(this)));
                    }
                    _process(e) {
                        this._idleCallback = void 0;
                        let t = 0, i = 0, s = e.timeRemaining(), r = 0;
                        for(; this._i < this._tasks.length;){
                            if (t = Date.now(), this._tasks[this._i]() || this._i++, t = Math.max(1, Date.now() - t), i = Math.max(t, i), r = e.timeRemaining(), 1.5 * i > r) return s - t < -20 && console.warn(`task queue exceeded allotted deadline by ${Math.abs(Math.round(s - t))}ms`), void this._start();
                            s = r;
                        }
                        this.clear();
                    }
                }
                class n extends r {
                    _requestCallback(e) {
                        return setTimeout(()=>e(this._createDeadline(16)));
                    }
                    _cancelCallback(e) {
                        clearTimeout(e);
                    }
                    _createDeadline(e) {
                        const t = Date.now() + e;
                        return {
                            timeRemaining: ()=>Math.max(0, t - Date.now())
                        };
                    }
                }
                t.PriorityTaskQueue = n, t.IdleTaskQueue = !s.isNode && "requestIdleCallback" in window ? class extends r {
                    _requestCallback(e) {
                        return requestIdleCallback(e);
                    }
                    _cancelCallback(e) {
                        cancelIdleCallback(e);
                    }
                } : n, t.DebouncedIdleTask = class {
                    constructor(){
                        this._queue = new t.IdleTaskQueue;
                    }
                    set(e) {
                        this._queue.clear(), this._queue.enqueue(e);
                    }
                    flush() {
                        this._queue.flush();
                    }
                };
            },
            9282: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.updateWindowsModeWrappedState = void 0;
                const s = i(643);
                t.updateWindowsModeWrappedState = function(e) {
                    const t = e.buffer.lines.get(e.buffer.ybase + e.buffer.y - 1), i = null == t ? void 0 : t.get(e.cols - 1), r = e.buffer.lines.get(e.buffer.ybase + e.buffer.y);
                    r && i && (r.isWrapped = i[s.CHAR_DATA_CODE_INDEX] !== s.NULL_CELL_CODE && i[s.CHAR_DATA_CODE_INDEX] !== s.WHITESPACE_CELL_CODE);
                };
            },
            3734: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.ExtendedAttrs = t.AttributeData = void 0;
                class i {
                    constructor(){
                        this.fg = 0, this.bg = 0, this.extended = new s;
                    }
                    static toColorRGB(e) {
                        return [
                            e >>> 16 & 255,
                            e >>> 8 & 255,
                            255 & e
                        ];
                    }
                    static fromColorRGB(e) {
                        return (255 & e[0]) << 16 | (255 & e[1]) << 8 | 255 & e[2];
                    }
                    clone() {
                        const e = new i;
                        return e.fg = this.fg, e.bg = this.bg, e.extended = this.extended.clone(), e;
                    }
                    isInverse() {
                        return 67108864 & this.fg;
                    }
                    isBold() {
                        return 134217728 & this.fg;
                    }
                    isUnderline() {
                        return this.hasExtendedAttrs() && 0 !== this.extended.underlineStyle ? 1 : 268435456 & this.fg;
                    }
                    isBlink() {
                        return 536870912 & this.fg;
                    }
                    isInvisible() {
                        return 1073741824 & this.fg;
                    }
                    isItalic() {
                        return 67108864 & this.bg;
                    }
                    isDim() {
                        return 134217728 & this.bg;
                    }
                    isStrikethrough() {
                        return 2147483648 & this.fg;
                    }
                    isProtected() {
                        return 536870912 & this.bg;
                    }
                    getFgColorMode() {
                        return 50331648 & this.fg;
                    }
                    getBgColorMode() {
                        return 50331648 & this.bg;
                    }
                    isFgRGB() {
                        return 50331648 == (50331648 & this.fg);
                    }
                    isBgRGB() {
                        return 50331648 == (50331648 & this.bg);
                    }
                    isFgPalette() {
                        return 16777216 == (50331648 & this.fg) || 33554432 == (50331648 & this.fg);
                    }
                    isBgPalette() {
                        return 16777216 == (50331648 & this.bg) || 33554432 == (50331648 & this.bg);
                    }
                    isFgDefault() {
                        return 0 == (50331648 & this.fg);
                    }
                    isBgDefault() {
                        return 0 == (50331648 & this.bg);
                    }
                    isAttributeDefault() {
                        return 0 === this.fg && 0 === this.bg;
                    }
                    getFgColor() {
                        switch(50331648 & this.fg){
                            case 16777216:
                            case 33554432:
                                return 255 & this.fg;
                            case 50331648:
                                return 16777215 & this.fg;
                            default:
                                return -1;
                        }
                    }
                    getBgColor() {
                        switch(50331648 & this.bg){
                            case 16777216:
                            case 33554432:
                                return 255 & this.bg;
                            case 50331648:
                                return 16777215 & this.bg;
                            default:
                                return -1;
                        }
                    }
                    hasExtendedAttrs() {
                        return 268435456 & this.bg;
                    }
                    updateExtended() {
                        this.extended.isEmpty() ? this.bg &= -268435457 : this.bg |= 268435456;
                    }
                    getUnderlineColor() {
                        if (268435456 & this.bg && ~this.extended.underlineColor) switch(50331648 & this.extended.underlineColor){
                            case 16777216:
                            case 33554432:
                                return 255 & this.extended.underlineColor;
                            case 50331648:
                                return 16777215 & this.extended.underlineColor;
                            default:
                                return this.getFgColor();
                        }
                        return this.getFgColor();
                    }
                    getUnderlineColorMode() {
                        return 268435456 & this.bg && ~this.extended.underlineColor ? 50331648 & this.extended.underlineColor : this.getFgColorMode();
                    }
                    isUnderlineColorRGB() {
                        return 268435456 & this.bg && ~this.extended.underlineColor ? 50331648 == (50331648 & this.extended.underlineColor) : this.isFgRGB();
                    }
                    isUnderlineColorPalette() {
                        return 268435456 & this.bg && ~this.extended.underlineColor ? 16777216 == (50331648 & this.extended.underlineColor) || 33554432 == (50331648 & this.extended.underlineColor) : this.isFgPalette();
                    }
                    isUnderlineColorDefault() {
                        return 268435456 & this.bg && ~this.extended.underlineColor ? 0 == (50331648 & this.extended.underlineColor) : this.isFgDefault();
                    }
                    getUnderlineStyle() {
                        return 268435456 & this.fg ? 268435456 & this.bg ? this.extended.underlineStyle : 1 : 0;
                    }
                }
                t.AttributeData = i;
                class s {
                    constructor(e = 0, t = 0){
                        this._ext = 0, this._urlId = 0, this._ext = e, this._urlId = t;
                    }
                    get ext() {
                        return this._urlId ? -469762049 & this._ext | this.underlineStyle << 26 : this._ext;
                    }
                    set ext(e) {
                        this._ext = e;
                    }
                    get underlineStyle() {
                        return this._urlId ? 5 : (469762048 & this._ext) >> 26;
                    }
                    set underlineStyle(e) {
                        this._ext &= -469762049, this._ext |= e << 26 & 469762048;
                    }
                    get underlineColor() {
                        return 67108863 & this._ext;
                    }
                    set underlineColor(e) {
                        this._ext &= -67108864, this._ext |= 67108863 & e;
                    }
                    get urlId() {
                        return this._urlId;
                    }
                    set urlId(e) {
                        this._urlId = e;
                    }
                    clone() {
                        return new s(this._ext, this._urlId);
                    }
                    isEmpty() {
                        return 0 === this.underlineStyle && 0 === this._urlId;
                    }
                }
                t.ExtendedAttrs = s;
            },
            9092: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.BufferStringIterator = t.Buffer = t.MAX_BUFFER_SIZE = void 0;
                const s = i(6349), r = i(8437), n = i(511), o = i(643), a = i(4634), h = i(4863), c = i(7116), l = i(3734), d = i(7226);
                t.MAX_BUFFER_SIZE = 4294967295, t.Buffer = class {
                    constructor(e, t, i){
                        this._hasScrollback = e, this._optionsService = t, this._bufferService = i, this.ydisp = 0, this.ybase = 0, this.y = 0, this.x = 0, this.tabs = {}, this.savedY = 0, this.savedX = 0, this.savedCurAttrData = r.DEFAULT_ATTR_DATA.clone(), this.savedCharset = c.DEFAULT_CHARSET, this.markers = [], this._nullCell = n.CellData.fromCharData([
                            0,
                            o.NULL_CELL_CHAR,
                            o.NULL_CELL_WIDTH,
                            o.NULL_CELL_CODE
                        ]), this._whitespaceCell = n.CellData.fromCharData([
                            0,
                            o.WHITESPACE_CELL_CHAR,
                            o.WHITESPACE_CELL_WIDTH,
                            o.WHITESPACE_CELL_CODE
                        ]), this._isClearing = !1, this._memoryCleanupQueue = new d.IdleTaskQueue, this._memoryCleanupPosition = 0, this._cols = this._bufferService.cols, this._rows = this._bufferService.rows, this.lines = new s.CircularList(this._getCorrectBufferLength(this._rows)), this.scrollTop = 0, this.scrollBottom = this._rows - 1, this.setupTabStops();
                    }
                    getNullCell(e) {
                        return e ? (this._nullCell.fg = e.fg, this._nullCell.bg = e.bg, this._nullCell.extended = e.extended) : (this._nullCell.fg = 0, this._nullCell.bg = 0, this._nullCell.extended = new l.ExtendedAttrs), this._nullCell;
                    }
                    getWhitespaceCell(e) {
                        return e ? (this._whitespaceCell.fg = e.fg, this._whitespaceCell.bg = e.bg, this._whitespaceCell.extended = e.extended) : (this._whitespaceCell.fg = 0, this._whitespaceCell.bg = 0, this._whitespaceCell.extended = new l.ExtendedAttrs), this._whitespaceCell;
                    }
                    getBlankLine(e, t) {
                        return new r.BufferLine(this._bufferService.cols, this.getNullCell(e), t);
                    }
                    get hasScrollback() {
                        return this._hasScrollback && this.lines.maxLength > this._rows;
                    }
                    get isCursorInViewport() {
                        const e = this.ybase + this.y - this.ydisp;
                        return e >= 0 && e < this._rows;
                    }
                    _getCorrectBufferLength(e) {
                        if (!this._hasScrollback) return e;
                        const i = e + this._optionsService.rawOptions.scrollback;
                        return i > t.MAX_BUFFER_SIZE ? t.MAX_BUFFER_SIZE : i;
                    }
                    fillViewportRows(e) {
                        if (0 === this.lines.length) {
                            void 0 === e && (e = r.DEFAULT_ATTR_DATA);
                            let t = this._rows;
                            for(; t--;)this.lines.push(this.getBlankLine(e));
                        }
                    }
                    clear() {
                        this.ydisp = 0, this.ybase = 0, this.y = 0, this.x = 0, this.lines = new s.CircularList(this._getCorrectBufferLength(this._rows)), this.scrollTop = 0, this.scrollBottom = this._rows - 1, this.setupTabStops();
                    }
                    resize(e, t) {
                        const i = this.getNullCell(r.DEFAULT_ATTR_DATA);
                        let s = 0;
                        const n = this._getCorrectBufferLength(t);
                        if (n > this.lines.maxLength && (this.lines.maxLength = n), this.lines.length > 0) {
                            if (this._cols < e) for(let t = 0; t < this.lines.length; t++)s += +this.lines.get(t).resize(e, i);
                            let o = 0;
                            if (this._rows < t) for(let s = this._rows; s < t; s++)this.lines.length < t + this.ybase && (this._optionsService.rawOptions.windowsMode ? this.lines.push(new r.BufferLine(e, i)) : this.ybase > 0 && this.lines.length <= this.ybase + this.y + o + 1 ? (this.ybase--, o++, this.ydisp > 0 && this.ydisp--) : this.lines.push(new r.BufferLine(e, i)));
                            else for(let e = this._rows; e > t; e--)this.lines.length > t + this.ybase && (this.lines.length > this.ybase + this.y + 1 ? this.lines.pop() : (this.ybase++, this.ydisp++));
                            if (n < this.lines.maxLength) {
                                const e = this.lines.length - n;
                                e > 0 && (this.lines.trimStart(e), this.ybase = Math.max(this.ybase - e, 0), this.ydisp = Math.max(this.ydisp - e, 0), this.savedY = Math.max(this.savedY - e, 0)), this.lines.maxLength = n;
                            }
                            this.x = Math.min(this.x, e - 1), this.y = Math.min(this.y, t - 1), o && (this.y += o), this.savedX = Math.min(this.savedX, e - 1), this.scrollTop = 0;
                        }
                        if (this.scrollBottom = t - 1, this._isReflowEnabled && (this._reflow(e, t), this._cols > e)) for(let t = 0; t < this.lines.length; t++)s += +this.lines.get(t).resize(e, i);
                        this._cols = e, this._rows = t, this._memoryCleanupQueue.clear(), s > .1 * this.lines.length && (this._memoryCleanupPosition = 0, this._memoryCleanupQueue.enqueue(()=>this._batchedMemoryCleanup()));
                    }
                    _batchedMemoryCleanup() {
                        let e = !0;
                        this._memoryCleanupPosition >= this.lines.length && (this._memoryCleanupPosition = 0, e = !1);
                        let t = 0;
                        for(; this._memoryCleanupPosition < this.lines.length;)if (t += this.lines.get(this._memoryCleanupPosition++).cleanupMemory(), t > 100) return !0;
                        return e;
                    }
                    get _isReflowEnabled() {
                        return this._hasScrollback && !this._optionsService.rawOptions.windowsMode;
                    }
                    _reflow(e, t) {
                        this._cols !== e && (e > this._cols ? this._reflowLarger(e, t) : this._reflowSmaller(e, t));
                    }
                    _reflowLarger(e, t) {
                        const i = (0, a.reflowLargerGetLinesToRemove)(this.lines, this._cols, e, this.ybase + this.y, this.getNullCell(r.DEFAULT_ATTR_DATA));
                        if (i.length > 0) {
                            const s = (0, a.reflowLargerCreateNewLayout)(this.lines, i);
                            (0, a.reflowLargerApplyNewLayout)(this.lines, s.layout), this._reflowLargerAdjustViewport(e, t, s.countRemoved);
                        }
                    }
                    _reflowLargerAdjustViewport(e, t, i) {
                        const s = this.getNullCell(r.DEFAULT_ATTR_DATA);
                        let n = i;
                        for(; n-- > 0;)0 === this.ybase ? (this.y > 0 && this.y--, this.lines.length < t && this.lines.push(new r.BufferLine(e, s))) : (this.ydisp === this.ybase && this.ydisp--, this.ybase--);
                        this.savedY = Math.max(this.savedY - i, 0);
                    }
                    _reflowSmaller(e, t) {
                        const i = this.getNullCell(r.DEFAULT_ATTR_DATA), s = [];
                        let n = 0;
                        for(let o = this.lines.length - 1; o >= 0; o--){
                            let h = this.lines.get(o);
                            if (!h || !h.isWrapped && h.getTrimmedLength() <= e) continue;
                            const c = [
                                h
                            ];
                            for(; h.isWrapped && o > 0;)h = this.lines.get(--o), c.unshift(h);
                            const l = this.ybase + this.y;
                            if (l >= o && l < o + c.length) continue;
                            const d = c[c.length - 1].getTrimmedLength(), _ = (0, a.reflowSmallerGetNewLineLengths)(c, this._cols, e), u = _.length - c.length;
                            let f;
                            f = 0 === this.ybase && this.y !== this.lines.length - 1 ? Math.max(0, this.y - this.lines.maxLength + u) : Math.max(0, this.lines.length - this.lines.maxLength + u);
                            const v = [];
                            for(let e = 0; e < u; e++){
                                const e = this.getBlankLine(r.DEFAULT_ATTR_DATA, !0);
                                v.push(e);
                            }
                            v.length > 0 && (s.push({
                                start: o + c.length + n,
                                newLines: v
                            }), n += v.length), c.push(...v);
                            let g = _.length - 1, p = _[g];
                            0 === p && (g--, p = _[g]);
                            let S = c.length - u - 1, m = d;
                            for(; S >= 0;){
                                const e = Math.min(m, p);
                                if (void 0 === c[g]) break;
                                if (c[g].copyCellsFrom(c[S], m - e, p - e, e, !0), p -= e, 0 === p && (g--, p = _[g]), m -= e, 0 === m) {
                                    S--;
                                    const e = Math.max(S, 0);
                                    m = (0, a.getWrappedLineTrimmedLength)(c, e, this._cols);
                                }
                            }
                            for(let t = 0; t < c.length; t++)_[t] < e && c[t].setCell(_[t], i);
                            let C = u - f;
                            for(; C-- > 0;)0 === this.ybase ? this.y < t - 1 ? (this.y++, this.lines.pop()) : (this.ybase++, this.ydisp++) : this.ybase < Math.min(this.lines.maxLength, this.lines.length + n) - t && (this.ybase === this.ydisp && this.ydisp++, this.ybase++);
                            this.savedY = Math.min(this.savedY + u, this.ybase + t - 1);
                        }
                        if (s.length > 0) {
                            const e = [], t = [];
                            for(let e = 0; e < this.lines.length; e++)t.push(this.lines.get(e));
                            const i = this.lines.length;
                            let r = i - 1, o = 0, a = s[o];
                            this.lines.length = Math.min(this.lines.maxLength, this.lines.length + n);
                            let h = 0;
                            for(let c = Math.min(this.lines.maxLength - 1, i + n - 1); c >= 0; c--)if (a && a.start > r + h) {
                                for(let e = a.newLines.length - 1; e >= 0; e--)this.lines.set(c--, a.newLines[e]);
                                c++, e.push({
                                    index: r + 1,
                                    amount: a.newLines.length
                                }), h += a.newLines.length, a = s[++o];
                            } else this.lines.set(c, t[r--]);
                            let c = 0;
                            for(let t = e.length - 1; t >= 0; t--)e[t].index += c, this.lines.onInsertEmitter.fire(e[t]), c += e[t].amount;
                            const l = Math.max(0, i + n - this.lines.maxLength);
                            l > 0 && this.lines.onTrimEmitter.fire(l);
                        }
                    }
                    stringIndexToBufferIndex(e, t, i = !1) {
                        for(; t;){
                            const s = this.lines.get(e);
                            if (!s) return [
                                -1,
                                -1
                            ];
                            const r = i ? s.getTrimmedLength() : s.length;
                            for(let i = 0; i < r; ++i)if (s.get(i)[o.CHAR_DATA_WIDTH_INDEX] && (t -= s.get(i)[o.CHAR_DATA_CHAR_INDEX].length || 1), t < 0) return [
                                e,
                                i
                            ];
                            e++;
                        }
                        return [
                            e,
                            0
                        ];
                    }
                    translateBufferLineToString(e, t, i = 0, s) {
                        const r = this.lines.get(e);
                        return r ? r.translateToString(t, i, s) : "";
                    }
                    getWrappedRangeForLine(e) {
                        let t = e, i = e;
                        for(; t > 0 && this.lines.get(t).isWrapped;)t--;
                        for(; i + 1 < this.lines.length && this.lines.get(i + 1).isWrapped;)i++;
                        return {
                            first: t,
                            last: i
                        };
                    }
                    setupTabStops(e) {
                        for(null != e ? this.tabs[e] || (e = this.prevStop(e)) : (this.tabs = {}, e = 0); e < this._cols; e += this._optionsService.rawOptions.tabStopWidth)this.tabs[e] = !0;
                    }
                    prevStop(e) {
                        for(null == e && (e = this.x); !this.tabs[--e] && e > 0;);
                        return e >= this._cols ? this._cols - 1 : e < 0 ? 0 : e;
                    }
                    nextStop(e) {
                        for(null == e && (e = this.x); !this.tabs[++e] && e < this._cols;);
                        return e >= this._cols ? this._cols - 1 : e < 0 ? 0 : e;
                    }
                    clearMarkers(e) {
                        this._isClearing = !0;
                        for(let t = 0; t < this.markers.length; t++)this.markers[t].line === e && (this.markers[t].dispose(), this.markers.splice(t--, 1));
                        this._isClearing = !1;
                    }
                    clearAllMarkers() {
                        this._isClearing = !0;
                        for(let e = 0; e < this.markers.length; e++)this.markers[e].dispose(), this.markers.splice(e--, 1);
                        this._isClearing = !1;
                    }
                    addMarker(e) {
                        const t = new h.Marker(e);
                        return this.markers.push(t), t.register(this.lines.onTrim((e)=>{
                            t.line -= e, t.line < 0 && t.dispose();
                        })), t.register(this.lines.onInsert((e)=>{
                            t.line >= e.index && (t.line += e.amount);
                        })), t.register(this.lines.onDelete((e)=>{
                            t.line >= e.index && t.line < e.index + e.amount && t.dispose(), t.line > e.index && (t.line -= e.amount);
                        })), t.register(t.onDispose(()=>this._removeMarker(t))), t;
                    }
                    _removeMarker(e) {
                        this._isClearing || this.markers.splice(this.markers.indexOf(e), 1);
                    }
                    iterator(e, t, i, s, r) {
                        return new _(this, e, t, i, s, r);
                    }
                };
                class _ {
                    constructor(e, t, i = 0, s = e.lines.length, r = 0, n = 0){
                        this._buffer = e, this._trimRight = t, this._startIndex = i, this._endIndex = s, this._startOverscan = r, this._endOverscan = n, this._startIndex < 0 && (this._startIndex = 0), this._endIndex > this._buffer.lines.length && (this._endIndex = this._buffer.lines.length), this._current = this._startIndex;
                    }
                    hasNext() {
                        return this._current < this._endIndex;
                    }
                    next() {
                        const e = this._buffer.getWrappedRangeForLine(this._current);
                        e.first < this._startIndex - this._startOverscan && (e.first = this._startIndex - this._startOverscan), e.last > this._endIndex + this._endOverscan && (e.last = this._endIndex + this._endOverscan), e.first = Math.max(e.first, 0), e.last = Math.min(e.last, this._buffer.lines.length);
                        let t = "";
                        for(let i = e.first; i <= e.last; ++i)t += this._buffer.translateBufferLineToString(i, this._trimRight);
                        return this._current = e.last + 1, {
                            range: e,
                            content: t
                        };
                    }
                }
                t.BufferStringIterator = _;
            },
            8437: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.BufferLine = t.DEFAULT_ATTR_DATA = void 0;
                const s = i(482), r = i(643), n = i(511), o = i(3734);
                t.DEFAULT_ATTR_DATA = Object.freeze(new o.AttributeData);
                let a = 0;
                class h {
                    constructor(e, t, i = !1){
                        this.isWrapped = i, this._combined = {}, this._extendedAttrs = {}, this._data = new Uint32Array(3 * e);
                        const s = t || n.CellData.fromCharData([
                            0,
                            r.NULL_CELL_CHAR,
                            r.NULL_CELL_WIDTH,
                            r.NULL_CELL_CODE
                        ]);
                        for(let t = 0; t < e; ++t)this.setCell(t, s);
                        this.length = e;
                    }
                    get(e) {
                        const t = this._data[3 * e + 0], i = 2097151 & t;
                        return [
                            this._data[3 * e + 1],
                            2097152 & t ? this._combined[e] : i ? (0, s.stringFromCodePoint)(i) : "",
                            t >> 22,
                            2097152 & t ? this._combined[e].charCodeAt(this._combined[e].length - 1) : i
                        ];
                    }
                    set(e, t) {
                        this._data[3 * e + 1] = t[r.CHAR_DATA_ATTR_INDEX], t[r.CHAR_DATA_CHAR_INDEX].length > 1 ? (this._combined[e] = t[1], this._data[3 * e + 0] = 2097152 | e | t[r.CHAR_DATA_WIDTH_INDEX] << 22) : this._data[3 * e + 0] = t[r.CHAR_DATA_CHAR_INDEX].charCodeAt(0) | t[r.CHAR_DATA_WIDTH_INDEX] << 22;
                    }
                    getWidth(e) {
                        return this._data[3 * e + 0] >> 22;
                    }
                    hasWidth(e) {
                        return 12582912 & this._data[3 * e + 0];
                    }
                    getFg(e) {
                        return this._data[3 * e + 1];
                    }
                    getBg(e) {
                        return this._data[3 * e + 2];
                    }
                    hasContent(e) {
                        return 4194303 & this._data[3 * e + 0];
                    }
                    getCodePoint(e) {
                        const t = this._data[3 * e + 0];
                        return 2097152 & t ? this._combined[e].charCodeAt(this._combined[e].length - 1) : 2097151 & t;
                    }
                    isCombined(e) {
                        return 2097152 & this._data[3 * e + 0];
                    }
                    getString(e) {
                        const t = this._data[3 * e + 0];
                        return 2097152 & t ? this._combined[e] : 2097151 & t ? (0, s.stringFromCodePoint)(2097151 & t) : "";
                    }
                    isProtected(e) {
                        return 536870912 & this._data[3 * e + 2];
                    }
                    loadCell(e, t) {
                        return a = 3 * e, t.content = this._data[a + 0], t.fg = this._data[a + 1], t.bg = this._data[a + 2], 2097152 & t.content && (t.combinedData = this._combined[e]), 268435456 & t.bg && (t.extended = this._extendedAttrs[e]), t;
                    }
                    setCell(e, t) {
                        2097152 & t.content && (this._combined[e] = t.combinedData), 268435456 & t.bg && (this._extendedAttrs[e] = t.extended), this._data[3 * e + 0] = t.content, this._data[3 * e + 1] = t.fg, this._data[3 * e + 2] = t.bg;
                    }
                    setCellFromCodePoint(e, t, i, s, r, n) {
                        268435456 & r && (this._extendedAttrs[e] = n), this._data[3 * e + 0] = t | i << 22, this._data[3 * e + 1] = s, this._data[3 * e + 2] = r;
                    }
                    addCodepointToCell(e, t) {
                        let i = this._data[3 * e + 0];
                        2097152 & i ? this._combined[e] += (0, s.stringFromCodePoint)(t) : (2097151 & i ? (this._combined[e] = (0, s.stringFromCodePoint)(2097151 & i) + (0, s.stringFromCodePoint)(t), i &= -2097152, i |= 2097152) : i = t | 4194304, this._data[3 * e + 0] = i);
                    }
                    insertCells(e, t, i, s) {
                        if ((e %= this.length) && 2 === this.getWidth(e - 1) && this.setCellFromCodePoint(e - 1, 0, 1, (null == s ? void 0 : s.fg) || 0, (null == s ? void 0 : s.bg) || 0, (null == s ? void 0 : s.extended) || new o.ExtendedAttrs), t < this.length - e) {
                            const s = new n.CellData;
                            for(let i = this.length - e - t - 1; i >= 0; --i)this.setCell(e + t + i, this.loadCell(e + i, s));
                            for(let s = 0; s < t; ++s)this.setCell(e + s, i);
                        } else for(let t = e; t < this.length; ++t)this.setCell(t, i);
                        2 === this.getWidth(this.length - 1) && this.setCellFromCodePoint(this.length - 1, 0, 1, (null == s ? void 0 : s.fg) || 0, (null == s ? void 0 : s.bg) || 0, (null == s ? void 0 : s.extended) || new o.ExtendedAttrs);
                    }
                    deleteCells(e, t, i, s) {
                        if (e %= this.length, t < this.length - e) {
                            const s = new n.CellData;
                            for(let i = 0; i < this.length - e - t; ++i)this.setCell(e + i, this.loadCell(e + t + i, s));
                            for(let e = this.length - t; e < this.length; ++e)this.setCell(e, i);
                        } else for(let t = e; t < this.length; ++t)this.setCell(t, i);
                        e && 2 === this.getWidth(e - 1) && this.setCellFromCodePoint(e - 1, 0, 1, (null == s ? void 0 : s.fg) || 0, (null == s ? void 0 : s.bg) || 0, (null == s ? void 0 : s.extended) || new o.ExtendedAttrs), 0 !== this.getWidth(e) || this.hasContent(e) || this.setCellFromCodePoint(e, 0, 1, (null == s ? void 0 : s.fg) || 0, (null == s ? void 0 : s.bg) || 0, (null == s ? void 0 : s.extended) || new o.ExtendedAttrs);
                    }
                    replaceCells(e, t, i, s, r = !1) {
                        if (r) for(e && 2 === this.getWidth(e - 1) && !this.isProtected(e - 1) && this.setCellFromCodePoint(e - 1, 0, 1, (null == s ? void 0 : s.fg) || 0, (null == s ? void 0 : s.bg) || 0, (null == s ? void 0 : s.extended) || new o.ExtendedAttrs), t < this.length && 2 === this.getWidth(t - 1) && !this.isProtected(t) && this.setCellFromCodePoint(t, 0, 1, (null == s ? void 0 : s.fg) || 0, (null == s ? void 0 : s.bg) || 0, (null == s ? void 0 : s.extended) || new o.ExtendedAttrs); e < t && e < this.length;)this.isProtected(e) || this.setCell(e, i), e++;
                        else for(e && 2 === this.getWidth(e - 1) && this.setCellFromCodePoint(e - 1, 0, 1, (null == s ? void 0 : s.fg) || 0, (null == s ? void 0 : s.bg) || 0, (null == s ? void 0 : s.extended) || new o.ExtendedAttrs), t < this.length && 2 === this.getWidth(t - 1) && this.setCellFromCodePoint(t, 0, 1, (null == s ? void 0 : s.fg) || 0, (null == s ? void 0 : s.bg) || 0, (null == s ? void 0 : s.extended) || new o.ExtendedAttrs); e < t && e < this.length;)this.setCell(e++, i);
                    }
                    resize(e, t) {
                        if (e === this.length) return 4 * this._data.length * 2 < this._data.buffer.byteLength;
                        const i = 3 * e;
                        if (e > this.length) {
                            if (this._data.buffer.byteLength >= 4 * i) this._data = new Uint32Array(this._data.buffer, 0, i);
                            else {
                                const e = new Uint32Array(i);
                                e.set(this._data), this._data = e;
                            }
                            for(let i = this.length; i < e; ++i)this.setCell(i, t);
                        } else {
                            this._data = this._data.subarray(0, i);
                            const t = Object.keys(this._combined);
                            for(let i = 0; i < t.length; i++){
                                const s = parseInt(t[i], 10);
                                s >= e && delete this._combined[s];
                            }
                            const s = Object.keys(this._extendedAttrs);
                            for(let t = 0; t < s.length; t++){
                                const i = parseInt(s[t], 10);
                                i >= e && delete this._extendedAttrs[i];
                            }
                        }
                        return this.length = e, 4 * i * 2 < this._data.buffer.byteLength;
                    }
                    cleanupMemory() {
                        if (4 * this._data.length * 2 < this._data.buffer.byteLength) {
                            const e = new Uint32Array(this._data.length);
                            return e.set(this._data), this._data = e, 1;
                        }
                        return 0;
                    }
                    fill(e, t = !1) {
                        if (t) for(let t = 0; t < this.length; ++t)this.isProtected(t) || this.setCell(t, e);
                        else {
                            this._combined = {}, this._extendedAttrs = {};
                            for(let t = 0; t < this.length; ++t)this.setCell(t, e);
                        }
                    }
                    copyFrom(e) {
                        this.length !== e.length ? this._data = new Uint32Array(e._data) : this._data.set(e._data), this.length = e.length, this._combined = {};
                        for(const t in e._combined)this._combined[t] = e._combined[t];
                        this._extendedAttrs = {};
                        for(const t in e._extendedAttrs)this._extendedAttrs[t] = e._extendedAttrs[t];
                        this.isWrapped = e.isWrapped;
                    }
                    clone() {
                        const e = new h(0);
                        e._data = new Uint32Array(this._data), e.length = this.length;
                        for(const t in this._combined)e._combined[t] = this._combined[t];
                        for(const t in this._extendedAttrs)e._extendedAttrs[t] = this._extendedAttrs[t];
                        return e.isWrapped = this.isWrapped, e;
                    }
                    getTrimmedLength() {
                        for(let e = this.length - 1; e >= 0; --e)if (4194303 & this._data[3 * e + 0]) return e + (this._data[3 * e + 0] >> 22);
                        return 0;
                    }
                    copyCellsFrom(e, t, i, s, r) {
                        const n = e._data;
                        if (r) for(let r = s - 1; r >= 0; r--){
                            for(let e = 0; e < 3; e++)this._data[3 * (i + r) + e] = n[3 * (t + r) + e];
                            268435456 & n[3 * (t + r) + 2] && (this._extendedAttrs[i + r] = e._extendedAttrs[t + r]);
                        }
                        else for(let r = 0; r < s; r++){
                            for(let e = 0; e < 3; e++)this._data[3 * (i + r) + e] = n[3 * (t + r) + e];
                            268435456 & n[3 * (t + r) + 2] && (this._extendedAttrs[i + r] = e._extendedAttrs[t + r]);
                        }
                        const o = Object.keys(e._combined);
                        for(let s = 0; s < o.length; s++){
                            const r = parseInt(o[s], 10);
                            r >= t && (this._combined[r - t + i] = e._combined[r]);
                        }
                    }
                    translateToString(e = !1, t = 0, i = this.length) {
                        e && (i = Math.min(i, this.getTrimmedLength()));
                        let n = "";
                        for(; t < i;){
                            const e = this._data[3 * t + 0], i = 2097151 & e;
                            n += 2097152 & e ? this._combined[t] : i ? (0, s.stringFromCodePoint)(i) : r.WHITESPACE_CELL_CHAR, t += e >> 22 || 1;
                        }
                        return n;
                    }
                }
                t.BufferLine = h;
            },
            4841: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.getRangeLength = void 0, t.getRangeLength = function(e, t) {
                    if (e.start.y > e.end.y) throw new Error(`Buffer range end (${e.end.x}, ${e.end.y}) cannot be before start (${e.start.x}, ${e.start.y})`);
                    return t * (e.end.y - e.start.y) + (e.end.x - e.start.x + 1);
                };
            },
            4634: (e, t)=>{
                function i(e, t, i) {
                    if (t === e.length - 1) return e[t].getTrimmedLength();
                    const s = !e[t].hasContent(i - 1) && 1 === e[t].getWidth(i - 1), r = 2 === e[t + 1].getWidth(0);
                    return s && r ? i - 1 : i;
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.getWrappedLineTrimmedLength = t.reflowSmallerGetNewLineLengths = t.reflowLargerApplyNewLayout = t.reflowLargerCreateNewLayout = t.reflowLargerGetLinesToRemove = void 0, t.reflowLargerGetLinesToRemove = function(e, t, s, r, n) {
                    const o = [];
                    for(let a = 0; a < e.length - 1; a++){
                        let h = a, c = e.get(++h);
                        if (!c.isWrapped) continue;
                        const l = [
                            e.get(a)
                        ];
                        for(; h < e.length && c.isWrapped;)l.push(c), c = e.get(++h);
                        if (r >= a && r < h) {
                            a += l.length - 1;
                            continue;
                        }
                        let d = 0, _ = i(l, d, t), u = 1, f = 0;
                        for(; u < l.length;){
                            const e = i(l, u, t), r = e - f, o = s - _, a = Math.min(r, o);
                            l[d].copyCellsFrom(l[u], f, _, a, !1), _ += a, _ === s && (d++, _ = 0), f += a, f === e && (u++, f = 0), 0 === _ && 0 !== d && 2 === l[d - 1].getWidth(s - 1) && (l[d].copyCellsFrom(l[d - 1], s - 1, _++, 1, !1), l[d - 1].setCell(s - 1, n));
                        }
                        l[d].replaceCells(_, s, n);
                        let v = 0;
                        for(let e = l.length - 1; e > 0 && (e > d || 0 === l[e].getTrimmedLength()); e--)v++;
                        v > 0 && (o.push(a + l.length - v), o.push(v)), a += l.length - 1;
                    }
                    return o;
                }, t.reflowLargerCreateNewLayout = function(e, t) {
                    const i = [];
                    let s = 0, r = t[s], n = 0;
                    for(let o = 0; o < e.length; o++)if (r === o) {
                        const i = t[++s];
                        e.onDeleteEmitter.fire({
                            index: o - n,
                            amount: i
                        }), o += i - 1, n += i, r = t[++s];
                    } else i.push(o);
                    return {
                        layout: i,
                        countRemoved: n
                    };
                }, t.reflowLargerApplyNewLayout = function(e, t) {
                    const i = [];
                    for(let s = 0; s < t.length; s++)i.push(e.get(t[s]));
                    for(let t = 0; t < i.length; t++)e.set(t, i[t]);
                    e.length = t.length;
                }, t.reflowSmallerGetNewLineLengths = function(e, t, s) {
                    const r = [], n = e.map((s, r)=>i(e, r, t)).reduce((e, t)=>e + t);
                    let o = 0, a = 0, h = 0;
                    for(; h < n;){
                        if (n - h < s) {
                            r.push(n - h);
                            break;
                        }
                        o += s;
                        const c = i(e, a, t);
                        o > c && (o -= c, a++);
                        const l = 2 === e[a].getWidth(o - 1);
                        l && o--;
                        const d = l ? s - 1 : s;
                        r.push(d), h += d;
                    }
                    return r;
                }, t.getWrappedLineTrimmedLength = i;
            },
            5295: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.BufferSet = void 0;
                const s = i(9092), r = i(8460), n = i(844);
                class o extends n.Disposable {
                    constructor(e, t){
                        super(), this._optionsService = e, this._bufferService = t, this._onBufferActivate = this.register(new r.EventEmitter), this.onBufferActivate = this._onBufferActivate.event, this.reset(), this.register(this._optionsService.onSpecificOptionChange("scrollback", ()=>this.resize(this._bufferService.cols, this._bufferService.rows))), this.register(this._optionsService.onSpecificOptionChange("tabStopWidth", ()=>this.setupTabStops()));
                    }
                    reset() {
                        this._normal = new s.Buffer(!0, this._optionsService, this._bufferService), this._normal.fillViewportRows(), this._alt = new s.Buffer(!1, this._optionsService, this._bufferService), this._activeBuffer = this._normal, this._onBufferActivate.fire({
                            activeBuffer: this._normal,
                            inactiveBuffer: this._alt
                        }), this.setupTabStops();
                    }
                    get alt() {
                        return this._alt;
                    }
                    get active() {
                        return this._activeBuffer;
                    }
                    get normal() {
                        return this._normal;
                    }
                    activateNormalBuffer() {
                        this._activeBuffer !== this._normal && (this._normal.x = this._alt.x, this._normal.y = this._alt.y, this._alt.clearAllMarkers(), this._alt.clear(), this._activeBuffer = this._normal, this._onBufferActivate.fire({
                            activeBuffer: this._normal,
                            inactiveBuffer: this._alt
                        }));
                    }
                    activateAltBuffer(e) {
                        this._activeBuffer !== this._alt && (this._alt.fillViewportRows(e), this._alt.x = this._normal.x, this._alt.y = this._normal.y, this._activeBuffer = this._alt, this._onBufferActivate.fire({
                            activeBuffer: this._alt,
                            inactiveBuffer: this._normal
                        }));
                    }
                    resize(e, t) {
                        this._normal.resize(e, t), this._alt.resize(e, t), this.setupTabStops(e);
                    }
                    setupTabStops(e) {
                        this._normal.setupTabStops(e), this._alt.setupTabStops(e);
                    }
                }
                t.BufferSet = o;
            },
            511: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.CellData = void 0;
                const s = i(482), r = i(643), n = i(3734);
                class o extends n.AttributeData {
                    constructor(){
                        super(...arguments), this.content = 0, this.fg = 0, this.bg = 0, this.extended = new n.ExtendedAttrs, this.combinedData = "";
                    }
                    static fromCharData(e) {
                        const t = new o;
                        return t.setFromCharData(e), t;
                    }
                    isCombined() {
                        return 2097152 & this.content;
                    }
                    getWidth() {
                        return this.content >> 22;
                    }
                    getChars() {
                        return 2097152 & this.content ? this.combinedData : 2097151 & this.content ? (0, s.stringFromCodePoint)(2097151 & this.content) : "";
                    }
                    getCode() {
                        return this.isCombined() ? this.combinedData.charCodeAt(this.combinedData.length - 1) : 2097151 & this.content;
                    }
                    setFromCharData(e) {
                        this.fg = e[r.CHAR_DATA_ATTR_INDEX], this.bg = 0;
                        let t = !1;
                        if (e[r.CHAR_DATA_CHAR_INDEX].length > 2) t = !0;
                        else if (2 === e[r.CHAR_DATA_CHAR_INDEX].length) {
                            const i = e[r.CHAR_DATA_CHAR_INDEX].charCodeAt(0);
                            if (55296 <= i && i <= 56319) {
                                const s = e[r.CHAR_DATA_CHAR_INDEX].charCodeAt(1);
                                56320 <= s && s <= 57343 ? this.content = 1024 * (i - 55296) + s - 56320 + 65536 | e[r.CHAR_DATA_WIDTH_INDEX] << 22 : t = !0;
                            } else t = !0;
                        } else this.content = e[r.CHAR_DATA_CHAR_INDEX].charCodeAt(0) | e[r.CHAR_DATA_WIDTH_INDEX] << 22;
                        t && (this.combinedData = e[r.CHAR_DATA_CHAR_INDEX], this.content = 2097152 | e[r.CHAR_DATA_WIDTH_INDEX] << 22);
                    }
                    getAsCharData() {
                        return [
                            this.fg,
                            this.getChars(),
                            this.getWidth(),
                            this.getCode()
                        ];
                    }
                }
                t.CellData = o;
            },
            643: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.WHITESPACE_CELL_CODE = t.WHITESPACE_CELL_WIDTH = t.WHITESPACE_CELL_CHAR = t.NULL_CELL_CODE = t.NULL_CELL_WIDTH = t.NULL_CELL_CHAR = t.CHAR_DATA_CODE_INDEX = t.CHAR_DATA_WIDTH_INDEX = t.CHAR_DATA_CHAR_INDEX = t.CHAR_DATA_ATTR_INDEX = t.DEFAULT_EXT = t.DEFAULT_ATTR = t.DEFAULT_COLOR = void 0, t.DEFAULT_COLOR = 0, t.DEFAULT_ATTR = 256 | t.DEFAULT_COLOR << 9, t.DEFAULT_EXT = 0, t.CHAR_DATA_ATTR_INDEX = 0, t.CHAR_DATA_CHAR_INDEX = 1, t.CHAR_DATA_WIDTH_INDEX = 2, t.CHAR_DATA_CODE_INDEX = 3, t.NULL_CELL_CHAR = "", t.NULL_CELL_WIDTH = 1, t.NULL_CELL_CODE = 0, t.WHITESPACE_CELL_CHAR = " ", t.WHITESPACE_CELL_WIDTH = 1, t.WHITESPACE_CELL_CODE = 32;
            },
            4863: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.Marker = void 0;
                const s = i(8460), r = i(844);
                class n {
                    constructor(e){
                        this.line = e, this.isDisposed = !1, this._disposables = [], this._id = n._nextId++, this._onDispose = this.register(new s.EventEmitter), this.onDispose = this._onDispose.event;
                    }
                    get id() {
                        return this._id;
                    }
                    dispose() {
                        this.isDisposed || (this.isDisposed = !0, this.line = -1, this._onDispose.fire(), (0, r.disposeArray)(this._disposables), this._disposables.length = 0);
                    }
                    register(e) {
                        return this._disposables.push(e), e;
                    }
                }
                t.Marker = n, n._nextId = 1;
            },
            7116: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.DEFAULT_CHARSET = t.CHARSETS = void 0, t.CHARSETS = {}, t.DEFAULT_CHARSET = t.CHARSETS.B, t.CHARSETS[0] = {
                    "`": "◆",
                    a: "▒",
                    b: "␉",
                    c: "␌",
                    d: "␍",
                    e: "␊",
                    f: "\xb0",
                    g: "\xb1",
                    h: "␤",
                    i: "␋",
                    j: "┘",
                    k: "┐",
                    l: "┌",
                    m: "└",
                    n: "┼",
                    o: "⎺",
                    p: "⎻",
                    q: "─",
                    r: "⎼",
                    s: "⎽",
                    t: "├",
                    u: "┤",
                    v: "┴",
                    w: "┬",
                    x: "│",
                    y: "≤",
                    z: "≥",
                    "{": "π",
                    "|": "≠",
                    "}": "\xa3",
                    "~": "\xb7"
                }, t.CHARSETS.A = {
                    "#": "\xa3"
                }, t.CHARSETS.B = void 0, t.CHARSETS[4] = {
                    "#": "\xa3",
                    "@": "\xbe",
                    "[": "ij",
                    "\\": "\xbd",
                    "]": "|",
                    "{": "\xa8",
                    "|": "f",
                    "}": "\xbc",
                    "~": "\xb4"
                }, t.CHARSETS.C = t.CHARSETS[5] = {
                    "[": "\xc4",
                    "\\": "\xd6",
                    "]": "\xc5",
                    "^": "\xdc",
                    "`": "\xe9",
                    "{": "\xe4",
                    "|": "\xf6",
                    "}": "\xe5",
                    "~": "\xfc"
                }, t.CHARSETS.R = {
                    "#": "\xa3",
                    "@": "\xe0",
                    "[": "\xb0",
                    "\\": "\xe7",
                    "]": "\xa7",
                    "{": "\xe9",
                    "|": "\xf9",
                    "}": "\xe8",
                    "~": "\xa8"
                }, t.CHARSETS.Q = {
                    "@": "\xe0",
                    "[": "\xe2",
                    "\\": "\xe7",
                    "]": "\xea",
                    "^": "\xee",
                    "`": "\xf4",
                    "{": "\xe9",
                    "|": "\xf9",
                    "}": "\xe8",
                    "~": "\xfb"
                }, t.CHARSETS.K = {
                    "@": "\xa7",
                    "[": "\xc4",
                    "\\": "\xd6",
                    "]": "\xdc",
                    "{": "\xe4",
                    "|": "\xf6",
                    "}": "\xfc",
                    "~": "\xdf"
                }, t.CHARSETS.Y = {
                    "#": "\xa3",
                    "@": "\xa7",
                    "[": "\xb0",
                    "\\": "\xe7",
                    "]": "\xe9",
                    "`": "\xf9",
                    "{": "\xe0",
                    "|": "\xf2",
                    "}": "\xe8",
                    "~": "\xec"
                }, t.CHARSETS.E = t.CHARSETS[6] = {
                    "@": "\xc4",
                    "[": "\xc6",
                    "\\": "\xd8",
                    "]": "\xc5",
                    "^": "\xdc",
                    "`": "\xe4",
                    "{": "\xe6",
                    "|": "\xf8",
                    "}": "\xe5",
                    "~": "\xfc"
                }, t.CHARSETS.Z = {
                    "#": "\xa3",
                    "@": "\xa7",
                    "[": "\xa1",
                    "\\": "\xd1",
                    "]": "\xbf",
                    "{": "\xb0",
                    "|": "\xf1",
                    "}": "\xe7"
                }, t.CHARSETS.H = t.CHARSETS[7] = {
                    "@": "\xc9",
                    "[": "\xc4",
                    "\\": "\xd6",
                    "]": "\xc5",
                    "^": "\xdc",
                    "`": "\xe9",
                    "{": "\xe4",
                    "|": "\xf6",
                    "}": "\xe5",
                    "~": "\xfc"
                }, t.CHARSETS["="] = {
                    "#": "\xf9",
                    "@": "\xe0",
                    "[": "\xe9",
                    "\\": "\xe7",
                    "]": "\xea",
                    "^": "\xee",
                    _: "\xe8",
                    "`": "\xf4",
                    "{": "\xe4",
                    "|": "\xf6",
                    "}": "\xfc",
                    "~": "\xfb"
                };
            },
            2584: (e, t)=>{
                var i, s;
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.C1_ESCAPED = t.C1 = t.C0 = void 0, function(e) {
                    e.NUL = "\0", e.SOH = "\x01", e.STX = "\x02", e.ETX = "\x03", e.EOT = "\x04", e.ENQ = "\x05", e.ACK = "\x06", e.BEL = "\x07", e.BS = "\b", e.HT = "	", e.LF = "\n", e.VT = "\v", e.FF = "\f", e.CR = "\r", e.SO = "\x0e", e.SI = "\x0f", e.DLE = "\x10", e.DC1 = "\x11", e.DC2 = "\x12", e.DC3 = "\x13", e.DC4 = "\x14", e.NAK = "\x15", e.SYN = "\x16", e.ETB = "\x17", e.CAN = "\x18", e.EM = "\x19", e.SUB = "\x1a", e.ESC = "\x1b", e.FS = "\x1c", e.GS = "\x1d", e.RS = "\x1e", e.US = "\x1f", e.SP = " ", e.DEL = "\x7f";
                }(i = t.C0 || (t.C0 = {})), (s = t.C1 || (t.C1 = {})).PAD = "\x80", s.HOP = "\x81", s.BPH = "\x82", s.NBH = "\x83", s.IND = "\x84", s.NEL = "\x85", s.SSA = "\x86", s.ESA = "\x87", s.HTS = "\x88", s.HTJ = "\x89", s.VTS = "\x8a", s.PLD = "\x8b", s.PLU = "\x8c", s.RI = "\x8d", s.SS2 = "\x8e", s.SS3 = "\x8f", s.DCS = "\x90", s.PU1 = "\x91", s.PU2 = "\x92", s.STS = "\x93", s.CCH = "\x94", s.MW = "\x95", s.SPA = "\x96", s.EPA = "\x97", s.SOS = "\x98", s.SGCI = "\x99", s.SCI = "\x9a", s.CSI = "\x9b", s.ST = "\x9c", s.OSC = "\x9d", s.PM = "\x9e", s.APC = "\x9f", (t.C1_ESCAPED || (t.C1_ESCAPED = {})).ST = `${i.ESC}\\`;
            },
            7399: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.evaluateKeyboardEvent = void 0;
                const s = i(2584), r = {
                    48: [
                        "0",
                        ")"
                    ],
                    49: [
                        "1",
                        "!"
                    ],
                    50: [
                        "2",
                        "@"
                    ],
                    51: [
                        "3",
                        "#"
                    ],
                    52: [
                        "4",
                        "$"
                    ],
                    53: [
                        "5",
                        "%"
                    ],
                    54: [
                        "6",
                        "^"
                    ],
                    55: [
                        "7",
                        "&"
                    ],
                    56: [
                        "8",
                        "*"
                    ],
                    57: [
                        "9",
                        "("
                    ],
                    186: [
                        ";",
                        ":"
                    ],
                    187: [
                        "=",
                        "+"
                    ],
                    188: [
                        ",",
                        "<"
                    ],
                    189: [
                        "-",
                        "_"
                    ],
                    190: [
                        ".",
                        ">"
                    ],
                    191: [
                        "/",
                        "?"
                    ],
                    192: [
                        "`",
                        "~"
                    ],
                    219: [
                        "[",
                        "{"
                    ],
                    220: [
                        "\\",
                        "|"
                    ],
                    221: [
                        "]",
                        "}"
                    ],
                    222: [
                        "'",
                        '"'
                    ]
                };
                t.evaluateKeyboardEvent = function(e, t, i, n) {
                    const o = {
                        type: 0,
                        cancel: !1,
                        key: void 0
                    }, a = (e.shiftKey ? 1 : 0) | (e.altKey ? 2 : 0) | (e.ctrlKey ? 4 : 0) | (e.metaKey ? 8 : 0);
                    switch(e.keyCode){
                        case 0:
                            "UIKeyInputUpArrow" === e.key ? o.key = t ? s.C0.ESC + "OA" : s.C0.ESC + "[A" : "UIKeyInputLeftArrow" === e.key ? o.key = t ? s.C0.ESC + "OD" : s.C0.ESC + "[D" : "UIKeyInputRightArrow" === e.key ? o.key = t ? s.C0.ESC + "OC" : s.C0.ESC + "[C" : "UIKeyInputDownArrow" === e.key && (o.key = t ? s.C0.ESC + "OB" : s.C0.ESC + "[B");
                            break;
                        case 8:
                            if (e.altKey) {
                                o.key = s.C0.ESC + s.C0.DEL;
                                break;
                            }
                            o.key = s.C0.DEL;
                            break;
                        case 9:
                            if (e.shiftKey) {
                                o.key = s.C0.ESC + "[Z";
                                break;
                            }
                            o.key = s.C0.HT, o.cancel = !0;
                            break;
                        case 13:
                            o.key = e.altKey ? s.C0.ESC + s.C0.CR : s.C0.CR, o.cancel = !0;
                            break;
                        case 27:
                            o.key = s.C0.ESC, e.altKey && (o.key = s.C0.ESC + s.C0.ESC), o.cancel = !0;
                            break;
                        case 37:
                            if (e.metaKey) break;
                            a ? (o.key = s.C0.ESC + "[1;" + (a + 1) + "D", o.key === s.C0.ESC + "[1;3D" && (o.key = s.C0.ESC + (i ? "b" : "[1;5D"))) : o.key = t ? s.C0.ESC + "OD" : s.C0.ESC + "[D";
                            break;
                        case 39:
                            if (e.metaKey) break;
                            a ? (o.key = s.C0.ESC + "[1;" + (a + 1) + "C", o.key === s.C0.ESC + "[1;3C" && (o.key = s.C0.ESC + (i ? "f" : "[1;5C"))) : o.key = t ? s.C0.ESC + "OC" : s.C0.ESC + "[C";
                            break;
                        case 38:
                            if (e.metaKey) break;
                            a ? (o.key = s.C0.ESC + "[1;" + (a + 1) + "A", i || o.key !== s.C0.ESC + "[1;3A" || (o.key = s.C0.ESC + "[1;5A")) : o.key = t ? s.C0.ESC + "OA" : s.C0.ESC + "[A";
                            break;
                        case 40:
                            if (e.metaKey) break;
                            a ? (o.key = s.C0.ESC + "[1;" + (a + 1) + "B", i || o.key !== s.C0.ESC + "[1;3B" || (o.key = s.C0.ESC + "[1;5B")) : o.key = t ? s.C0.ESC + "OB" : s.C0.ESC + "[B";
                            break;
                        case 45:
                            e.shiftKey || e.ctrlKey || (o.key = s.C0.ESC + "[2~");
                            break;
                        case 46:
                            o.key = a ? s.C0.ESC + "[3;" + (a + 1) + "~" : s.C0.ESC + "[3~";
                            break;
                        case 36:
                            o.key = a ? s.C0.ESC + "[1;" + (a + 1) + "H" : t ? s.C0.ESC + "OH" : s.C0.ESC + "[H";
                            break;
                        case 35:
                            o.key = a ? s.C0.ESC + "[1;" + (a + 1) + "F" : t ? s.C0.ESC + "OF" : s.C0.ESC + "[F";
                            break;
                        case 33:
                            e.shiftKey ? o.type = 2 : e.ctrlKey ? o.key = s.C0.ESC + "[5;" + (a + 1) + "~" : o.key = s.C0.ESC + "[5~";
                            break;
                        case 34:
                            e.shiftKey ? o.type = 3 : e.ctrlKey ? o.key = s.C0.ESC + "[6;" + (a + 1) + "~" : o.key = s.C0.ESC + "[6~";
                            break;
                        case 112:
                            o.key = a ? s.C0.ESC + "[1;" + (a + 1) + "P" : s.C0.ESC + "OP";
                            break;
                        case 113:
                            o.key = a ? s.C0.ESC + "[1;" + (a + 1) + "Q" : s.C0.ESC + "OQ";
                            break;
                        case 114:
                            o.key = a ? s.C0.ESC + "[1;" + (a + 1) + "R" : s.C0.ESC + "OR";
                            break;
                        case 115:
                            o.key = a ? s.C0.ESC + "[1;" + (a + 1) + "S" : s.C0.ESC + "OS";
                            break;
                        case 116:
                            o.key = a ? s.C0.ESC + "[15;" + (a + 1) + "~" : s.C0.ESC + "[15~";
                            break;
                        case 117:
                            o.key = a ? s.C0.ESC + "[17;" + (a + 1) + "~" : s.C0.ESC + "[17~";
                            break;
                        case 118:
                            o.key = a ? s.C0.ESC + "[18;" + (a + 1) + "~" : s.C0.ESC + "[18~";
                            break;
                        case 119:
                            o.key = a ? s.C0.ESC + "[19;" + (a + 1) + "~" : s.C0.ESC + "[19~";
                            break;
                        case 120:
                            o.key = a ? s.C0.ESC + "[20;" + (a + 1) + "~" : s.C0.ESC + "[20~";
                            break;
                        case 121:
                            o.key = a ? s.C0.ESC + "[21;" + (a + 1) + "~" : s.C0.ESC + "[21~";
                            break;
                        case 122:
                            o.key = a ? s.C0.ESC + "[23;" + (a + 1) + "~" : s.C0.ESC + "[23~";
                            break;
                        case 123:
                            o.key = a ? s.C0.ESC + "[24;" + (a + 1) + "~" : s.C0.ESC + "[24~";
                            break;
                        default:
                            if (!e.ctrlKey || e.shiftKey || e.altKey || e.metaKey) {
                                if (i && !n || !e.altKey || e.metaKey) !i || e.altKey || e.ctrlKey || e.shiftKey || !e.metaKey ? e.key && !e.ctrlKey && !e.altKey && !e.metaKey && e.keyCode >= 48 && 1 === e.key.length ? o.key = e.key : e.key && e.ctrlKey && ("_" === e.key && (o.key = s.C0.US), "@" === e.key && (o.key = s.C0.NUL)) : 65 === e.keyCode && (o.type = 1);
                                else {
                                    const t = r[e.keyCode], i = null == t ? void 0 : t[e.shiftKey ? 1 : 0];
                                    if (i) o.key = s.C0.ESC + i;
                                    else if (e.keyCode >= 65 && e.keyCode <= 90) {
                                        const t = e.ctrlKey ? e.keyCode - 64 : e.keyCode + 32;
                                        let i = String.fromCharCode(t);
                                        e.shiftKey && (i = i.toUpperCase()), o.key = s.C0.ESC + i;
                                    } else if (32 === e.keyCode) o.key = s.C0.ESC + (e.ctrlKey ? s.C0.NUL : " ");
                                    else if ("Dead" === e.key && e.code.startsWith("Key")) {
                                        let t = e.code.slice(3, 4);
                                        e.shiftKey || (t = t.toLowerCase()), o.key = s.C0.ESC + t, o.cancel = !0;
                                    }
                                }
                            } else e.keyCode >= 65 && e.keyCode <= 90 ? o.key = String.fromCharCode(e.keyCode - 64) : 32 === e.keyCode ? o.key = s.C0.NUL : e.keyCode >= 51 && e.keyCode <= 55 ? o.key = String.fromCharCode(e.keyCode - 51 + 27) : 56 === e.keyCode ? o.key = s.C0.DEL : 219 === e.keyCode ? o.key = s.C0.ESC : 220 === e.keyCode ? o.key = s.C0.FS : 221 === e.keyCode && (o.key = s.C0.GS);
                    }
                    return o;
                };
            },
            482: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.Utf8ToUtf32 = t.StringToUtf32 = t.utf32ToString = t.stringFromCodePoint = void 0, t.stringFromCodePoint = function(e) {
                    return e > 65535 ? (e -= 65536, String.fromCharCode(55296 + (e >> 10)) + String.fromCharCode(e % 1024 + 56320)) : String.fromCharCode(e);
                }, t.utf32ToString = function(e, t = 0, i = e.length) {
                    let s = "";
                    for(let r = t; r < i; ++r){
                        let t = e[r];
                        t > 65535 ? (t -= 65536, s += String.fromCharCode(55296 + (t >> 10)) + String.fromCharCode(t % 1024 + 56320)) : s += String.fromCharCode(t);
                    }
                    return s;
                }, t.StringToUtf32 = class {
                    constructor(){
                        this._interim = 0;
                    }
                    clear() {
                        this._interim = 0;
                    }
                    decode(e, t) {
                        const i = e.length;
                        if (!i) return 0;
                        let s = 0, r = 0;
                        if (this._interim) {
                            const i = e.charCodeAt(r++);
                            56320 <= i && i <= 57343 ? t[s++] = 1024 * (this._interim - 55296) + i - 56320 + 65536 : (t[s++] = this._interim, t[s++] = i), this._interim = 0;
                        }
                        for(let n = r; n < i; ++n){
                            const r = e.charCodeAt(n);
                            if (55296 <= r && r <= 56319) {
                                if (++n >= i) return this._interim = r, s;
                                const o = e.charCodeAt(n);
                                56320 <= o && o <= 57343 ? t[s++] = 1024 * (r - 55296) + o - 56320 + 65536 : (t[s++] = r, t[s++] = o);
                            } else 65279 !== r && (t[s++] = r);
                        }
                        return s;
                    }
                }, t.Utf8ToUtf32 = class {
                    constructor(){
                        this.interim = new Uint8Array(3);
                    }
                    clear() {
                        this.interim.fill(0);
                    }
                    decode(e, t) {
                        const i = e.length;
                        if (!i) return 0;
                        let s, r, n, o, a = 0, h = 0, c = 0;
                        if (this.interim[0]) {
                            let s = !1, r = this.interim[0];
                            r &= 192 == (224 & r) ? 31 : 224 == (240 & r) ? 15 : 7;
                            let n, o = 0;
                            for(; (n = 63 & this.interim[++o]) && o < 4;)r <<= 6, r |= n;
                            const h = 192 == (224 & this.interim[0]) ? 2 : 224 == (240 & this.interim[0]) ? 3 : 4, l = h - o;
                            for(; c < l;){
                                if (c >= i) return 0;
                                if (n = e[c++], 128 != (192 & n)) {
                                    c--, s = !0;
                                    break;
                                }
                                this.interim[o++] = n, r <<= 6, r |= 63 & n;
                            }
                            s || (2 === h ? r < 128 ? c-- : t[a++] = r : 3 === h ? r < 2048 || r >= 55296 && r <= 57343 || 65279 === r || (t[a++] = r) : r < 65536 || r > 1114111 || (t[a++] = r)), this.interim.fill(0);
                        }
                        const l = i - 4;
                        let d = c;
                        for(; d < i;){
                            for(; !(!(d < l) || 128 & (s = e[d]) || 128 & (r = e[d + 1]) || 128 & (n = e[d + 2]) || 128 & (o = e[d + 3]));)t[a++] = s, t[a++] = r, t[a++] = n, t[a++] = o, d += 4;
                            if (s = e[d++], s < 128) t[a++] = s;
                            else if (192 == (224 & s)) {
                                if (d >= i) return this.interim[0] = s, a;
                                if (r = e[d++], 128 != (192 & r)) {
                                    d--;
                                    continue;
                                }
                                if (h = (31 & s) << 6 | 63 & r, h < 128) {
                                    d--;
                                    continue;
                                }
                                t[a++] = h;
                            } else if (224 == (240 & s)) {
                                if (d >= i) return this.interim[0] = s, a;
                                if (r = e[d++], 128 != (192 & r)) {
                                    d--;
                                    continue;
                                }
                                if (d >= i) return this.interim[0] = s, this.interim[1] = r, a;
                                if (n = e[d++], 128 != (192 & n)) {
                                    d--;
                                    continue;
                                }
                                if (h = (15 & s) << 12 | (63 & r) << 6 | 63 & n, h < 2048 || h >= 55296 && h <= 57343 || 65279 === h) continue;
                                t[a++] = h;
                            } else if (240 == (248 & s)) {
                                if (d >= i) return this.interim[0] = s, a;
                                if (r = e[d++], 128 != (192 & r)) {
                                    d--;
                                    continue;
                                }
                                if (d >= i) return this.interim[0] = s, this.interim[1] = r, a;
                                if (n = e[d++], 128 != (192 & n)) {
                                    d--;
                                    continue;
                                }
                                if (d >= i) return this.interim[0] = s, this.interim[1] = r, this.interim[2] = n, a;
                                if (o = e[d++], 128 != (192 & o)) {
                                    d--;
                                    continue;
                                }
                                if (h = (7 & s) << 18 | (63 & r) << 12 | (63 & n) << 6 | 63 & o, h < 65536 || h > 1114111) continue;
                                t[a++] = h;
                            }
                        }
                        return a;
                    }
                };
            },
            225: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.UnicodeV6 = void 0;
                const i = [
                    [
                        768,
                        879
                    ],
                    [
                        1155,
                        1158
                    ],
                    [
                        1160,
                        1161
                    ],
                    [
                        1425,
                        1469
                    ],
                    [
                        1471,
                        1471
                    ],
                    [
                        1473,
                        1474
                    ],
                    [
                        1476,
                        1477
                    ],
                    [
                        1479,
                        1479
                    ],
                    [
                        1536,
                        1539
                    ],
                    [
                        1552,
                        1557
                    ],
                    [
                        1611,
                        1630
                    ],
                    [
                        1648,
                        1648
                    ],
                    [
                        1750,
                        1764
                    ],
                    [
                        1767,
                        1768
                    ],
                    [
                        1770,
                        1773
                    ],
                    [
                        1807,
                        1807
                    ],
                    [
                        1809,
                        1809
                    ],
                    [
                        1840,
                        1866
                    ],
                    [
                        1958,
                        1968
                    ],
                    [
                        2027,
                        2035
                    ],
                    [
                        2305,
                        2306
                    ],
                    [
                        2364,
                        2364
                    ],
                    [
                        2369,
                        2376
                    ],
                    [
                        2381,
                        2381
                    ],
                    [
                        2385,
                        2388
                    ],
                    [
                        2402,
                        2403
                    ],
                    [
                        2433,
                        2433
                    ],
                    [
                        2492,
                        2492
                    ],
                    [
                        2497,
                        2500
                    ],
                    [
                        2509,
                        2509
                    ],
                    [
                        2530,
                        2531
                    ],
                    [
                        2561,
                        2562
                    ],
                    [
                        2620,
                        2620
                    ],
                    [
                        2625,
                        2626
                    ],
                    [
                        2631,
                        2632
                    ],
                    [
                        2635,
                        2637
                    ],
                    [
                        2672,
                        2673
                    ],
                    [
                        2689,
                        2690
                    ],
                    [
                        2748,
                        2748
                    ],
                    [
                        2753,
                        2757
                    ],
                    [
                        2759,
                        2760
                    ],
                    [
                        2765,
                        2765
                    ],
                    [
                        2786,
                        2787
                    ],
                    [
                        2817,
                        2817
                    ],
                    [
                        2876,
                        2876
                    ],
                    [
                        2879,
                        2879
                    ],
                    [
                        2881,
                        2883
                    ],
                    [
                        2893,
                        2893
                    ],
                    [
                        2902,
                        2902
                    ],
                    [
                        2946,
                        2946
                    ],
                    [
                        3008,
                        3008
                    ],
                    [
                        3021,
                        3021
                    ],
                    [
                        3134,
                        3136
                    ],
                    [
                        3142,
                        3144
                    ],
                    [
                        3146,
                        3149
                    ],
                    [
                        3157,
                        3158
                    ],
                    [
                        3260,
                        3260
                    ],
                    [
                        3263,
                        3263
                    ],
                    [
                        3270,
                        3270
                    ],
                    [
                        3276,
                        3277
                    ],
                    [
                        3298,
                        3299
                    ],
                    [
                        3393,
                        3395
                    ],
                    [
                        3405,
                        3405
                    ],
                    [
                        3530,
                        3530
                    ],
                    [
                        3538,
                        3540
                    ],
                    [
                        3542,
                        3542
                    ],
                    [
                        3633,
                        3633
                    ],
                    [
                        3636,
                        3642
                    ],
                    [
                        3655,
                        3662
                    ],
                    [
                        3761,
                        3761
                    ],
                    [
                        3764,
                        3769
                    ],
                    [
                        3771,
                        3772
                    ],
                    [
                        3784,
                        3789
                    ],
                    [
                        3864,
                        3865
                    ],
                    [
                        3893,
                        3893
                    ],
                    [
                        3895,
                        3895
                    ],
                    [
                        3897,
                        3897
                    ],
                    [
                        3953,
                        3966
                    ],
                    [
                        3968,
                        3972
                    ],
                    [
                        3974,
                        3975
                    ],
                    [
                        3984,
                        3991
                    ],
                    [
                        3993,
                        4028
                    ],
                    [
                        4038,
                        4038
                    ],
                    [
                        4141,
                        4144
                    ],
                    [
                        4146,
                        4146
                    ],
                    [
                        4150,
                        4151
                    ],
                    [
                        4153,
                        4153
                    ],
                    [
                        4184,
                        4185
                    ],
                    [
                        4448,
                        4607
                    ],
                    [
                        4959,
                        4959
                    ],
                    [
                        5906,
                        5908
                    ],
                    [
                        5938,
                        5940
                    ],
                    [
                        5970,
                        5971
                    ],
                    [
                        6002,
                        6003
                    ],
                    [
                        6068,
                        6069
                    ],
                    [
                        6071,
                        6077
                    ],
                    [
                        6086,
                        6086
                    ],
                    [
                        6089,
                        6099
                    ],
                    [
                        6109,
                        6109
                    ],
                    [
                        6155,
                        6157
                    ],
                    [
                        6313,
                        6313
                    ],
                    [
                        6432,
                        6434
                    ],
                    [
                        6439,
                        6440
                    ],
                    [
                        6450,
                        6450
                    ],
                    [
                        6457,
                        6459
                    ],
                    [
                        6679,
                        6680
                    ],
                    [
                        6912,
                        6915
                    ],
                    [
                        6964,
                        6964
                    ],
                    [
                        6966,
                        6970
                    ],
                    [
                        6972,
                        6972
                    ],
                    [
                        6978,
                        6978
                    ],
                    [
                        7019,
                        7027
                    ],
                    [
                        7616,
                        7626
                    ],
                    [
                        7678,
                        7679
                    ],
                    [
                        8203,
                        8207
                    ],
                    [
                        8234,
                        8238
                    ],
                    [
                        8288,
                        8291
                    ],
                    [
                        8298,
                        8303
                    ],
                    [
                        8400,
                        8431
                    ],
                    [
                        12330,
                        12335
                    ],
                    [
                        12441,
                        12442
                    ],
                    [
                        43014,
                        43014
                    ],
                    [
                        43019,
                        43019
                    ],
                    [
                        43045,
                        43046
                    ],
                    [
                        64286,
                        64286
                    ],
                    [
                        65024,
                        65039
                    ],
                    [
                        65056,
                        65059
                    ],
                    [
                        65279,
                        65279
                    ],
                    [
                        65529,
                        65531
                    ]
                ], s = [
                    [
                        68097,
                        68099
                    ],
                    [
                        68101,
                        68102
                    ],
                    [
                        68108,
                        68111
                    ],
                    [
                        68152,
                        68154
                    ],
                    [
                        68159,
                        68159
                    ],
                    [
                        119143,
                        119145
                    ],
                    [
                        119155,
                        119170
                    ],
                    [
                        119173,
                        119179
                    ],
                    [
                        119210,
                        119213
                    ],
                    [
                        119362,
                        119364
                    ],
                    [
                        917505,
                        917505
                    ],
                    [
                        917536,
                        917631
                    ],
                    [
                        917760,
                        917999
                    ]
                ];
                let r;
                t.UnicodeV6 = class {
                    constructor(){
                        if (this.version = "6", !r) {
                            r = new Uint8Array(65536), r.fill(1), r[0] = 0, r.fill(0, 1, 32), r.fill(0, 127, 160), r.fill(2, 4352, 4448), r[9001] = 2, r[9002] = 2, r.fill(2, 11904, 42192), r[12351] = 1, r.fill(2, 44032, 55204), r.fill(2, 63744, 64256), r.fill(2, 65040, 65050), r.fill(2, 65072, 65136), r.fill(2, 65280, 65377), r.fill(2, 65504, 65511);
                            for(let e = 0; e < i.length; ++e)r.fill(0, i[e][0], i[e][1] + 1);
                        }
                    }
                    wcwidth(e) {
                        return e < 32 ? 0 : e < 127 ? 1 : e < 65536 ? r[e] : function(e, t) {
                            let i, s = 0, r = t.length - 1;
                            if (e < t[0][0] || e > t[r][1]) return !1;
                            for(; r >= s;)if (i = s + r >> 1, e > t[i][1]) s = i + 1;
                            else {
                                if (!(e < t[i][0])) return !0;
                                r = i - 1;
                            }
                            return !1;
                        }(e, s) ? 0 : e >= 131072 && e <= 196605 || e >= 196608 && e <= 262141 ? 2 : 1;
                    }
                };
            },
            5981: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.WriteBuffer = void 0;
                const s = i(8460), r = i(844);
                class n extends r.Disposable {
                    constructor(e){
                        super(), this._action = e, this._writeBuffer = [], this._callbacks = [], this._pendingData = 0, this._bufferOffset = 0, this._isSyncWriting = !1, this._syncCalls = 0, this._didUserInput = !1, this._onWriteParsed = this.register(new s.EventEmitter), this.onWriteParsed = this._onWriteParsed.event;
                    }
                    handleUserInput() {
                        this._didUserInput = !0;
                    }
                    writeSync(e, t) {
                        if (void 0 !== t && this._syncCalls > t) return void (this._syncCalls = 0);
                        if (this._pendingData += e.length, this._writeBuffer.push(e), this._callbacks.push(void 0), this._syncCalls++, this._isSyncWriting) return;
                        let i;
                        for(this._isSyncWriting = !0; i = this._writeBuffer.shift();){
                            this._action(i);
                            const e = this._callbacks.shift();
                            e && e();
                        }
                        this._pendingData = 0, this._bufferOffset = 2147483647, this._isSyncWriting = !1, this._syncCalls = 0;
                    }
                    write(e, t) {
                        if (this._pendingData > 5e7) throw new Error("write data discarded, use flow control to avoid losing data");
                        if (!this._writeBuffer.length) {
                            if (this._bufferOffset = 0, this._didUserInput) return this._didUserInput = !1, this._pendingData += e.length, this._writeBuffer.push(e), this._callbacks.push(t), void this._innerWrite();
                            setTimeout(()=>this._innerWrite());
                        }
                        this._pendingData += e.length, this._writeBuffer.push(e), this._callbacks.push(t);
                    }
                    _innerWrite(e = 0, t = !0) {
                        const i = e || Date.now();
                        for(; this._writeBuffer.length > this._bufferOffset;){
                            const e = this._writeBuffer[this._bufferOffset], s = this._action(e, t);
                            if (s) {
                                const e = (e)=>Date.now() - i >= 12 ? setTimeout(()=>this._innerWrite(0, e)) : this._innerWrite(i, e);
                                return void s.catch((e)=>(queueMicrotask(()=>{
                                        throw e;
                                    }), Promise.resolve(!1))).then(e);
                            }
                            const r = this._callbacks[this._bufferOffset];
                            if (r && r(), this._bufferOffset++, this._pendingData -= e.length, Date.now() - i >= 12) break;
                        }
                        this._writeBuffer.length > this._bufferOffset ? (this._bufferOffset > 50 && (this._writeBuffer = this._writeBuffer.slice(this._bufferOffset), this._callbacks = this._callbacks.slice(this._bufferOffset), this._bufferOffset = 0), setTimeout(()=>this._innerWrite())) : (this._writeBuffer.length = 0, this._callbacks.length = 0, this._pendingData = 0, this._bufferOffset = 0), this._onWriteParsed.fire();
                    }
                }
                t.WriteBuffer = n;
            },
            5941: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.toRgbString = t.parseColor = void 0;
                const i = /^([\da-f])\/([\da-f])\/([\da-f])$|^([\da-f]{2})\/([\da-f]{2})\/([\da-f]{2})$|^([\da-f]{3})\/([\da-f]{3})\/([\da-f]{3})$|^([\da-f]{4})\/([\da-f]{4})\/([\da-f]{4})$/, s = /^[\da-f]+$/;
                function r(e, t) {
                    const i = e.toString(16), s = i.length < 2 ? "0" + i : i;
                    switch(t){
                        case 4:
                            return i[0];
                        case 8:
                            return s;
                        case 12:
                            return (s + s).slice(0, 3);
                        default:
                            return s + s;
                    }
                }
                t.parseColor = function(e) {
                    if (!e) return;
                    let t = e.toLowerCase();
                    if (0 === t.indexOf("rgb:")) {
                        t = t.slice(4);
                        const e = i.exec(t);
                        if (e) {
                            const t = e[1] ? 15 : e[4] ? 255 : e[7] ? 4095 : 65535;
                            return [
                                Math.round(parseInt(e[1] || e[4] || e[7] || e[10], 16) / t * 255),
                                Math.round(parseInt(e[2] || e[5] || e[8] || e[11], 16) / t * 255),
                                Math.round(parseInt(e[3] || e[6] || e[9] || e[12], 16) / t * 255)
                            ];
                        }
                    } else if (0 === t.indexOf("#") && (t = t.slice(1), s.exec(t) && [
                        3,
                        6,
                        9,
                        12
                    ].includes(t.length))) {
                        const e = t.length / 3, i = [
                            0,
                            0,
                            0
                        ];
                        for(let s = 0; s < 3; ++s){
                            const r = parseInt(t.slice(e * s, e * s + e), 16);
                            i[s] = 1 === e ? r << 4 : 2 === e ? r : 3 === e ? r >> 4 : r >> 8;
                        }
                        return i;
                    }
                }, t.toRgbString = function(e, t = 16) {
                    const [i, s, n] = e;
                    return `rgb:${r(i, t)}/${r(s, t)}/${r(n, t)}`;
                };
            },
            5770: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.PAYLOAD_LIMIT = void 0, t.PAYLOAD_LIMIT = 1e7;
            },
            6351: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.DcsHandler = t.DcsParser = void 0;
                const s = i(482), r = i(8742), n = i(5770), o = [];
                t.DcsParser = class {
                    constructor(){
                        this._handlers = Object.create(null), this._active = o, this._ident = 0, this._handlerFb = ()=>{}, this._stack = {
                            paused: !1,
                            loopPosition: 0,
                            fallThrough: !1
                        };
                    }
                    dispose() {
                        this._handlers = Object.create(null), this._handlerFb = ()=>{}, this._active = o;
                    }
                    registerHandler(e, t) {
                        void 0 === this._handlers[e] && (this._handlers[e] = []);
                        const i = this._handlers[e];
                        return i.push(t), {
                            dispose: ()=>{
                                const e = i.indexOf(t);
                                -1 !== e && i.splice(e, 1);
                            }
                        };
                    }
                    clearHandler(e) {
                        this._handlers[e] && delete this._handlers[e];
                    }
                    setHandlerFallback(e) {
                        this._handlerFb = e;
                    }
                    reset() {
                        if (this._active.length) for(let e = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; e >= 0; --e)this._active[e].unhook(!1);
                        this._stack.paused = !1, this._active = o, this._ident = 0;
                    }
                    hook(e, t) {
                        if (this.reset(), this._ident = e, this._active = this._handlers[e] || o, this._active.length) for(let e = this._active.length - 1; e >= 0; e--)this._active[e].hook(t);
                        else this._handlerFb(this._ident, "HOOK", t);
                    }
                    put(e, t, i) {
                        if (this._active.length) for(let s = this._active.length - 1; s >= 0; s--)this._active[s].put(e, t, i);
                        else this._handlerFb(this._ident, "PUT", (0, s.utf32ToString)(e, t, i));
                    }
                    unhook(e, t = !0) {
                        if (this._active.length) {
                            let i = !1, s = this._active.length - 1, r = !1;
                            if (this._stack.paused && (s = this._stack.loopPosition - 1, i = t, r = this._stack.fallThrough, this._stack.paused = !1), !r && !1 === i) {
                                for(; s >= 0 && (i = this._active[s].unhook(e), !0 !== i); s--)if (i instanceof Promise) return this._stack.paused = !0, this._stack.loopPosition = s, this._stack.fallThrough = !1, i;
                                s--;
                            }
                            for(; s >= 0; s--)if (i = this._active[s].unhook(!1), i instanceof Promise) return this._stack.paused = !0, this._stack.loopPosition = s, this._stack.fallThrough = !0, i;
                        } else this._handlerFb(this._ident, "UNHOOK", e);
                        this._active = o, this._ident = 0;
                    }
                };
                const a = new r.Params;
                a.addParam(0), t.DcsHandler = class {
                    constructor(e){
                        this._handler = e, this._data = "", this._params = a, this._hitLimit = !1;
                    }
                    hook(e) {
                        this._params = e.length > 1 || e.params[0] ? e.clone() : a, this._data = "", this._hitLimit = !1;
                    }
                    put(e, t, i) {
                        this._hitLimit || (this._data += (0, s.utf32ToString)(e, t, i), this._data.length > n.PAYLOAD_LIMIT && (this._data = "", this._hitLimit = !0));
                    }
                    unhook(e) {
                        let t = !1;
                        if (this._hitLimit) t = !1;
                        else if (e && (t = this._handler(this._data, this._params), t instanceof Promise)) return t.then((e)=>(this._params = a, this._data = "", this._hitLimit = !1, e));
                        return this._params = a, this._data = "", this._hitLimit = !1, t;
                    }
                };
            },
            2015: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.EscapeSequenceParser = t.VT500_TRANSITION_TABLE = t.TransitionTable = void 0;
                const s = i(844), r = i(8742), n = i(6242), o = i(6351);
                class a {
                    constructor(e){
                        this.table = new Uint8Array(e);
                    }
                    setDefault(e, t) {
                        this.table.fill(e << 4 | t);
                    }
                    add(e, t, i, s) {
                        this.table[t << 8 | e] = i << 4 | s;
                    }
                    addMany(e, t, i, s) {
                        for(let r = 0; r < e.length; r++)this.table[t << 8 | e[r]] = i << 4 | s;
                    }
                }
                t.TransitionTable = a;
                const h = 160;
                t.VT500_TRANSITION_TABLE = function() {
                    const e = new a(4095), t = Array.apply(null, Array(256)).map((e, t)=>t), i = (e, i)=>t.slice(e, i), s = i(32, 127), r = i(0, 24);
                    r.push(25), r.push.apply(r, i(28, 32));
                    const n = i(0, 14);
                    let o;
                    for(o in e.setDefault(1, 0), e.addMany(s, 0, 2, 0), n)e.addMany([
                        24,
                        26,
                        153,
                        154
                    ], o, 3, 0), e.addMany(i(128, 144), o, 3, 0), e.addMany(i(144, 152), o, 3, 0), e.add(156, o, 0, 0), e.add(27, o, 11, 1), e.add(157, o, 4, 8), e.addMany([
                        152,
                        158,
                        159
                    ], o, 0, 7), e.add(155, o, 11, 3), e.add(144, o, 11, 9);
                    return e.addMany(r, 0, 3, 0), e.addMany(r, 1, 3, 1), e.add(127, 1, 0, 1), e.addMany(r, 8, 0, 8), e.addMany(r, 3, 3, 3), e.add(127, 3, 0, 3), e.addMany(r, 4, 3, 4), e.add(127, 4, 0, 4), e.addMany(r, 6, 3, 6), e.addMany(r, 5, 3, 5), e.add(127, 5, 0, 5), e.addMany(r, 2, 3, 2), e.add(127, 2, 0, 2), e.add(93, 1, 4, 8), e.addMany(s, 8, 5, 8), e.add(127, 8, 5, 8), e.addMany([
                        156,
                        27,
                        24,
                        26,
                        7
                    ], 8, 6, 0), e.addMany(i(28, 32), 8, 0, 8), e.addMany([
                        88,
                        94,
                        95
                    ], 1, 0, 7), e.addMany(s, 7, 0, 7), e.addMany(r, 7, 0, 7), e.add(156, 7, 0, 0), e.add(127, 7, 0, 7), e.add(91, 1, 11, 3), e.addMany(i(64, 127), 3, 7, 0), e.addMany(i(48, 60), 3, 8, 4), e.addMany([
                        60,
                        61,
                        62,
                        63
                    ], 3, 9, 4), e.addMany(i(48, 60), 4, 8, 4), e.addMany(i(64, 127), 4, 7, 0), e.addMany([
                        60,
                        61,
                        62,
                        63
                    ], 4, 0, 6), e.addMany(i(32, 64), 6, 0, 6), e.add(127, 6, 0, 6), e.addMany(i(64, 127), 6, 0, 0), e.addMany(i(32, 48), 3, 9, 5), e.addMany(i(32, 48), 5, 9, 5), e.addMany(i(48, 64), 5, 0, 6), e.addMany(i(64, 127), 5, 7, 0), e.addMany(i(32, 48), 4, 9, 5), e.addMany(i(32, 48), 1, 9, 2), e.addMany(i(32, 48), 2, 9, 2), e.addMany(i(48, 127), 2, 10, 0), e.addMany(i(48, 80), 1, 10, 0), e.addMany(i(81, 88), 1, 10, 0), e.addMany([
                        89,
                        90,
                        92
                    ], 1, 10, 0), e.addMany(i(96, 127), 1, 10, 0), e.add(80, 1, 11, 9), e.addMany(r, 9, 0, 9), e.add(127, 9, 0, 9), e.addMany(i(28, 32), 9, 0, 9), e.addMany(i(32, 48), 9, 9, 12), e.addMany(i(48, 60), 9, 8, 10), e.addMany([
                        60,
                        61,
                        62,
                        63
                    ], 9, 9, 10), e.addMany(r, 11, 0, 11), e.addMany(i(32, 128), 11, 0, 11), e.addMany(i(28, 32), 11, 0, 11), e.addMany(r, 10, 0, 10), e.add(127, 10, 0, 10), e.addMany(i(28, 32), 10, 0, 10), e.addMany(i(48, 60), 10, 8, 10), e.addMany([
                        60,
                        61,
                        62,
                        63
                    ], 10, 0, 11), e.addMany(i(32, 48), 10, 9, 12), e.addMany(r, 12, 0, 12), e.add(127, 12, 0, 12), e.addMany(i(28, 32), 12, 0, 12), e.addMany(i(32, 48), 12, 9, 12), e.addMany(i(48, 64), 12, 0, 11), e.addMany(i(64, 127), 12, 12, 13), e.addMany(i(64, 127), 10, 12, 13), e.addMany(i(64, 127), 9, 12, 13), e.addMany(r, 13, 13, 13), e.addMany(s, 13, 13, 13), e.add(127, 13, 0, 13), e.addMany([
                        27,
                        156,
                        24,
                        26
                    ], 13, 14, 0), e.add(h, 0, 2, 0), e.add(h, 8, 5, 8), e.add(h, 6, 0, 6), e.add(h, 11, 0, 11), e.add(h, 13, 13, 13), e;
                }();
                class c extends s.Disposable {
                    constructor(e = t.VT500_TRANSITION_TABLE){
                        super(), this._transitions = e, this._parseStack = {
                            state: 0,
                            handlers: [],
                            handlerPos: 0,
                            transition: 0,
                            chunkPos: 0
                        }, this.initialState = 0, this.currentState = this.initialState, this._params = new r.Params, this._params.addParam(0), this._collect = 0, this.precedingCodepoint = 0, this._printHandlerFb = (e, t, i)=>{}, this._executeHandlerFb = (e)=>{}, this._csiHandlerFb = (e, t)=>{}, this._escHandlerFb = (e)=>{}, this._errorHandlerFb = (e)=>e, this._printHandler = this._printHandlerFb, this._executeHandlers = Object.create(null), this._csiHandlers = Object.create(null), this._escHandlers = Object.create(null), this.register((0, s.toDisposable)(()=>{
                            this._csiHandlers = Object.create(null), this._executeHandlers = Object.create(null), this._escHandlers = Object.create(null);
                        })), this._oscParser = this.register(new n.OscParser), this._dcsParser = this.register(new o.DcsParser), this._errorHandler = this._errorHandlerFb, this.registerEscHandler({
                            final: "\\"
                        }, ()=>!0);
                    }
                    _identifier(e, t = [
                        64,
                        126
                    ]) {
                        let i = 0;
                        if (e.prefix) {
                            if (e.prefix.length > 1) throw new Error("only one byte as prefix supported");
                            if (i = e.prefix.charCodeAt(0), i && 60 > i || i > 63) throw new Error("prefix must be in range 0x3c .. 0x3f");
                        }
                        if (e.intermediates) {
                            if (e.intermediates.length > 2) throw new Error("only two bytes as intermediates are supported");
                            for(let t = 0; t < e.intermediates.length; ++t){
                                const s = e.intermediates.charCodeAt(t);
                                if (32 > s || s > 47) throw new Error("intermediate must be in range 0x20 .. 0x2f");
                                i <<= 8, i |= s;
                            }
                        }
                        if (1 !== e.final.length) throw new Error("final must be a single byte");
                        const s = e.final.charCodeAt(0);
                        if (t[0] > s || s > t[1]) throw new Error(`final must be in range ${t[0]} .. ${t[1]}`);
                        return i <<= 8, i |= s, i;
                    }
                    identToString(e) {
                        const t = [];
                        for(; e;)t.push(String.fromCharCode(255 & e)), e >>= 8;
                        return t.reverse().join("");
                    }
                    setPrintHandler(e) {
                        this._printHandler = e;
                    }
                    clearPrintHandler() {
                        this._printHandler = this._printHandlerFb;
                    }
                    registerEscHandler(e, t) {
                        const i = this._identifier(e, [
                            48,
                            126
                        ]);
                        void 0 === this._escHandlers[i] && (this._escHandlers[i] = []);
                        const s = this._escHandlers[i];
                        return s.push(t), {
                            dispose: ()=>{
                                const e = s.indexOf(t);
                                -1 !== e && s.splice(e, 1);
                            }
                        };
                    }
                    clearEscHandler(e) {
                        this._escHandlers[this._identifier(e, [
                            48,
                            126
                        ])] && delete this._escHandlers[this._identifier(e, [
                            48,
                            126
                        ])];
                    }
                    setEscHandlerFallback(e) {
                        this._escHandlerFb = e;
                    }
                    setExecuteHandler(e, t) {
                        this._executeHandlers[e.charCodeAt(0)] = t;
                    }
                    clearExecuteHandler(e) {
                        this._executeHandlers[e.charCodeAt(0)] && delete this._executeHandlers[e.charCodeAt(0)];
                    }
                    setExecuteHandlerFallback(e) {
                        this._executeHandlerFb = e;
                    }
                    registerCsiHandler(e, t) {
                        const i = this._identifier(e);
                        void 0 === this._csiHandlers[i] && (this._csiHandlers[i] = []);
                        const s = this._csiHandlers[i];
                        return s.push(t), {
                            dispose: ()=>{
                                const e = s.indexOf(t);
                                -1 !== e && s.splice(e, 1);
                            }
                        };
                    }
                    clearCsiHandler(e) {
                        this._csiHandlers[this._identifier(e)] && delete this._csiHandlers[this._identifier(e)];
                    }
                    setCsiHandlerFallback(e) {
                        this._csiHandlerFb = e;
                    }
                    registerDcsHandler(e, t) {
                        return this._dcsParser.registerHandler(this._identifier(e), t);
                    }
                    clearDcsHandler(e) {
                        this._dcsParser.clearHandler(this._identifier(e));
                    }
                    setDcsHandlerFallback(e) {
                        this._dcsParser.setHandlerFallback(e);
                    }
                    registerOscHandler(e, t) {
                        return this._oscParser.registerHandler(e, t);
                    }
                    clearOscHandler(e) {
                        this._oscParser.clearHandler(e);
                    }
                    setOscHandlerFallback(e) {
                        this._oscParser.setHandlerFallback(e);
                    }
                    setErrorHandler(e) {
                        this._errorHandler = e;
                    }
                    clearErrorHandler() {
                        this._errorHandler = this._errorHandlerFb;
                    }
                    reset() {
                        this.currentState = this.initialState, this._oscParser.reset(), this._dcsParser.reset(), this._params.reset(), this._params.addParam(0), this._collect = 0, this.precedingCodepoint = 0, 0 !== this._parseStack.state && (this._parseStack.state = 2, this._parseStack.handlers = []);
                    }
                    _preserveStack(e, t, i, s, r) {
                        this._parseStack.state = e, this._parseStack.handlers = t, this._parseStack.handlerPos = i, this._parseStack.transition = s, this._parseStack.chunkPos = r;
                    }
                    parse(e, t, i) {
                        let s, r = 0, n = 0, o = 0;
                        if (this._parseStack.state) {
                            if (2 === this._parseStack.state) this._parseStack.state = 0, o = this._parseStack.chunkPos + 1;
                            else {
                                if (void 0 === i || 1 === this._parseStack.state) throw this._parseStack.state = 1, new Error("improper continuation due to previous async handler, giving up parsing");
                                const t = this._parseStack.handlers;
                                let n = this._parseStack.handlerPos - 1;
                                switch(this._parseStack.state){
                                    case 3:
                                        if (!1 === i && n > -1) {
                                            for(; n >= 0 && (s = t[n](this._params), !0 !== s); n--)if (s instanceof Promise) return this._parseStack.handlerPos = n, s;
                                        }
                                        this._parseStack.handlers = [];
                                        break;
                                    case 4:
                                        if (!1 === i && n > -1) {
                                            for(; n >= 0 && (s = t[n](), !0 !== s); n--)if (s instanceof Promise) return this._parseStack.handlerPos = n, s;
                                        }
                                        this._parseStack.handlers = [];
                                        break;
                                    case 6:
                                        if (r = e[this._parseStack.chunkPos], s = this._dcsParser.unhook(24 !== r && 26 !== r, i), s) return s;
                                        27 === r && (this._parseStack.transition |= 1), this._params.reset(), this._params.addParam(0), this._collect = 0;
                                        break;
                                    case 5:
                                        if (r = e[this._parseStack.chunkPos], s = this._oscParser.end(24 !== r && 26 !== r, i), s) return s;
                                        27 === r && (this._parseStack.transition |= 1), this._params.reset(), this._params.addParam(0), this._collect = 0;
                                }
                                this._parseStack.state = 0, o = this._parseStack.chunkPos + 1, this.precedingCodepoint = 0, this.currentState = 15 & this._parseStack.transition;
                            }
                        }
                        for(let i = o; i < t; ++i){
                            switch(r = e[i], n = this._transitions.table[this.currentState << 8 | (r < 160 ? r : h)], n >> 4){
                                case 2:
                                    for(let s = i + 1;; ++s){
                                        if (s >= t || (r = e[s]) < 32 || r > 126 && r < h) {
                                            this._printHandler(e, i, s), i = s - 1;
                                            break;
                                        }
                                        if (++s >= t || (r = e[s]) < 32 || r > 126 && r < h) {
                                            this._printHandler(e, i, s), i = s - 1;
                                            break;
                                        }
                                        if (++s >= t || (r = e[s]) < 32 || r > 126 && r < h) {
                                            this._printHandler(e, i, s), i = s - 1;
                                            break;
                                        }
                                        if (++s >= t || (r = e[s]) < 32 || r > 126 && r < h) {
                                            this._printHandler(e, i, s), i = s - 1;
                                            break;
                                        }
                                    }
                                    break;
                                case 3:
                                    this._executeHandlers[r] ? this._executeHandlers[r]() : this._executeHandlerFb(r), this.precedingCodepoint = 0;
                                    break;
                                case 0:
                                    break;
                                case 1:
                                    if (this._errorHandler({
                                        position: i,
                                        code: r,
                                        currentState: this.currentState,
                                        collect: this._collect,
                                        params: this._params,
                                        abort: !1
                                    }).abort) return;
                                    break;
                                case 7:
                                    const o = this._csiHandlers[this._collect << 8 | r];
                                    let a = o ? o.length - 1 : -1;
                                    for(; a >= 0 && (s = o[a](this._params), !0 !== s); a--)if (s instanceof Promise) return this._preserveStack(3, o, a, n, i), s;
                                    a < 0 && this._csiHandlerFb(this._collect << 8 | r, this._params), this.precedingCodepoint = 0;
                                    break;
                                case 8:
                                    do switch(r){
                                        case 59:
                                            this._params.addParam(0);
                                            break;
                                        case 58:
                                            this._params.addSubParam(-1);
                                            break;
                                        default:
                                            this._params.addDigit(r - 48);
                                    }
                                    while (++i < t && (r = e[i]) > 47 && r < 60);
                                    i--;
                                    break;
                                case 9:
                                    this._collect <<= 8, this._collect |= r;
                                    break;
                                case 10:
                                    const c = this._escHandlers[this._collect << 8 | r];
                                    let l = c ? c.length - 1 : -1;
                                    for(; l >= 0 && (s = c[l](), !0 !== s); l--)if (s instanceof Promise) return this._preserveStack(4, c, l, n, i), s;
                                    l < 0 && this._escHandlerFb(this._collect << 8 | r), this.precedingCodepoint = 0;
                                    break;
                                case 11:
                                    this._params.reset(), this._params.addParam(0), this._collect = 0;
                                    break;
                                case 12:
                                    this._dcsParser.hook(this._collect << 8 | r, this._params);
                                    break;
                                case 13:
                                    for(let s = i + 1;; ++s)if (s >= t || 24 === (r = e[s]) || 26 === r || 27 === r || r > 127 && r < h) {
                                        this._dcsParser.put(e, i, s), i = s - 1;
                                        break;
                                    }
                                    break;
                                case 14:
                                    if (s = this._dcsParser.unhook(24 !== r && 26 !== r), s) return this._preserveStack(6, [], 0, n, i), s;
                                    27 === r && (n |= 1), this._params.reset(), this._params.addParam(0), this._collect = 0, this.precedingCodepoint = 0;
                                    break;
                                case 4:
                                    this._oscParser.start();
                                    break;
                                case 5:
                                    for(let s = i + 1;; s++)if (s >= t || (r = e[s]) < 32 || r > 127 && r < h) {
                                        this._oscParser.put(e, i, s), i = s - 1;
                                        break;
                                    }
                                    break;
                                case 6:
                                    if (s = this._oscParser.end(24 !== r && 26 !== r), s) return this._preserveStack(5, [], 0, n, i), s;
                                    27 === r && (n |= 1), this._params.reset(), this._params.addParam(0), this._collect = 0, this.precedingCodepoint = 0;
                            }
                            this.currentState = 15 & n;
                        }
                    }
                }
                t.EscapeSequenceParser = c;
            },
            6242: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.OscHandler = t.OscParser = void 0;
                const s = i(5770), r = i(482), n = [];
                t.OscParser = class {
                    constructor(){
                        this._state = 0, this._active = n, this._id = -1, this._handlers = Object.create(null), this._handlerFb = ()=>{}, this._stack = {
                            paused: !1,
                            loopPosition: 0,
                            fallThrough: !1
                        };
                    }
                    registerHandler(e, t) {
                        void 0 === this._handlers[e] && (this._handlers[e] = []);
                        const i = this._handlers[e];
                        return i.push(t), {
                            dispose: ()=>{
                                const e = i.indexOf(t);
                                -1 !== e && i.splice(e, 1);
                            }
                        };
                    }
                    clearHandler(e) {
                        this._handlers[e] && delete this._handlers[e];
                    }
                    setHandlerFallback(e) {
                        this._handlerFb = e;
                    }
                    dispose() {
                        this._handlers = Object.create(null), this._handlerFb = ()=>{}, this._active = n;
                    }
                    reset() {
                        if (2 === this._state) for(let e = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; e >= 0; --e)this._active[e].end(!1);
                        this._stack.paused = !1, this._active = n, this._id = -1, this._state = 0;
                    }
                    _start() {
                        if (this._active = this._handlers[this._id] || n, this._active.length) for(let e = this._active.length - 1; e >= 0; e--)this._active[e].start();
                        else this._handlerFb(this._id, "START");
                    }
                    _put(e, t, i) {
                        if (this._active.length) for(let s = this._active.length - 1; s >= 0; s--)this._active[s].put(e, t, i);
                        else this._handlerFb(this._id, "PUT", (0, r.utf32ToString)(e, t, i));
                    }
                    start() {
                        this.reset(), this._state = 1;
                    }
                    put(e, t, i) {
                        if (3 !== this._state) {
                            if (1 === this._state) for(; t < i;){
                                const i = e[t++];
                                if (59 === i) {
                                    this._state = 2, this._start();
                                    break;
                                }
                                if (i < 48 || 57 < i) return void (this._state = 3);
                                -1 === this._id && (this._id = 0), this._id = 10 * this._id + i - 48;
                            }
                            2 === this._state && i - t > 0 && this._put(e, t, i);
                        }
                    }
                    end(e, t = !0) {
                        if (0 !== this._state) {
                            if (3 !== this._state) {
                                if (1 === this._state && this._start(), this._active.length) {
                                    let i = !1, s = this._active.length - 1, r = !1;
                                    if (this._stack.paused && (s = this._stack.loopPosition - 1, i = t, r = this._stack.fallThrough, this._stack.paused = !1), !r && !1 === i) {
                                        for(; s >= 0 && (i = this._active[s].end(e), !0 !== i); s--)if (i instanceof Promise) return this._stack.paused = !0, this._stack.loopPosition = s, this._stack.fallThrough = !1, i;
                                        s--;
                                    }
                                    for(; s >= 0; s--)if (i = this._active[s].end(!1), i instanceof Promise) return this._stack.paused = !0, this._stack.loopPosition = s, this._stack.fallThrough = !0, i;
                                } else this._handlerFb(this._id, "END", e);
                            }
                            this._active = n, this._id = -1, this._state = 0;
                        }
                    }
                }, t.OscHandler = class {
                    constructor(e){
                        this._handler = e, this._data = "", this._hitLimit = !1;
                    }
                    start() {
                        this._data = "", this._hitLimit = !1;
                    }
                    put(e, t, i) {
                        this._hitLimit || (this._data += (0, r.utf32ToString)(e, t, i), this._data.length > s.PAYLOAD_LIMIT && (this._data = "", this._hitLimit = !0));
                    }
                    end(e) {
                        let t = !1;
                        if (this._hitLimit) t = !1;
                        else if (e && (t = this._handler(this._data), t instanceof Promise)) return t.then((e)=>(this._data = "", this._hitLimit = !1, e));
                        return this._data = "", this._hitLimit = !1, t;
                    }
                };
            },
            8742: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.Params = void 0;
                const i = 2147483647;
                class s {
                    constructor(e = 32, t = 32){
                        if (this.maxLength = e, this.maxSubParamsLength = t, t > 256) throw new Error("maxSubParamsLength must not be greater than 256");
                        this.params = new Int32Array(e), this.length = 0, this._subParams = new Int32Array(t), this._subParamsLength = 0, this._subParamsIdx = new Uint16Array(e), this._rejectDigits = !1, this._rejectSubDigits = !1, this._digitIsSub = !1;
                    }
                    static fromArray(e) {
                        const t = new s;
                        if (!e.length) return t;
                        for(let i = Array.isArray(e[0]) ? 1 : 0; i < e.length; ++i){
                            const s = e[i];
                            if (Array.isArray(s)) for(let e = 0; e < s.length; ++e)t.addSubParam(s[e]);
                            else t.addParam(s);
                        }
                        return t;
                    }
                    clone() {
                        const e = new s(this.maxLength, this.maxSubParamsLength);
                        return e.params.set(this.params), e.length = this.length, e._subParams.set(this._subParams), e._subParamsLength = this._subParamsLength, e._subParamsIdx.set(this._subParamsIdx), e._rejectDigits = this._rejectDigits, e._rejectSubDigits = this._rejectSubDigits, e._digitIsSub = this._digitIsSub, e;
                    }
                    toArray() {
                        const e = [];
                        for(let t = 0; t < this.length; ++t){
                            e.push(this.params[t]);
                            const i = this._subParamsIdx[t] >> 8, s = 255 & this._subParamsIdx[t];
                            s - i > 0 && e.push(Array.prototype.slice.call(this._subParams, i, s));
                        }
                        return e;
                    }
                    reset() {
                        this.length = 0, this._subParamsLength = 0, this._rejectDigits = !1, this._rejectSubDigits = !1, this._digitIsSub = !1;
                    }
                    addParam(e) {
                        if (this._digitIsSub = !1, this.length >= this.maxLength) this._rejectDigits = !0;
                        else {
                            if (e < -1) throw new Error("values lesser than -1 are not allowed");
                            this._subParamsIdx[this.length] = this._subParamsLength << 8 | this._subParamsLength, this.params[this.length++] = e > i ? i : e;
                        }
                    }
                    addSubParam(e) {
                        if (this._digitIsSub = !0, this.length) {
                            if (this._rejectDigits || this._subParamsLength >= this.maxSubParamsLength) this._rejectSubDigits = !0;
                            else {
                                if (e < -1) throw new Error("values lesser than -1 are not allowed");
                                this._subParams[this._subParamsLength++] = e > i ? i : e, this._subParamsIdx[this.length - 1]++;
                            }
                        }
                    }
                    hasSubParams(e) {
                        return (255 & this._subParamsIdx[e]) - (this._subParamsIdx[e] >> 8) > 0;
                    }
                    getSubParams(e) {
                        const t = this._subParamsIdx[e] >> 8, i = 255 & this._subParamsIdx[e];
                        return i - t > 0 ? this._subParams.subarray(t, i) : null;
                    }
                    getSubParamsAll() {
                        const e = {};
                        for(let t = 0; t < this.length; ++t){
                            const i = this._subParamsIdx[t] >> 8, s = 255 & this._subParamsIdx[t];
                            s - i > 0 && (e[t] = this._subParams.slice(i, s));
                        }
                        return e;
                    }
                    addDigit(e) {
                        let t;
                        if (this._rejectDigits || !(t = this._digitIsSub ? this._subParamsLength : this.length) || this._digitIsSub && this._rejectSubDigits) return;
                        const s = this._digitIsSub ? this._subParams : this.params, r = s[t - 1];
                        s[t - 1] = ~r ? Math.min(10 * r + e, i) : e;
                    }
                }
                t.Params = s;
            },
            5741: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.AddonManager = void 0, t.AddonManager = class {
                    constructor(){
                        this._addons = [];
                    }
                    dispose() {
                        for(let e = this._addons.length - 1; e >= 0; e--)this._addons[e].instance.dispose();
                    }
                    loadAddon(e, t) {
                        const i = {
                            instance: t,
                            dispose: t.dispose,
                            isDisposed: !1
                        };
                        this._addons.push(i), t.dispose = ()=>this._wrappedAddonDispose(i), t.activate(e);
                    }
                    _wrappedAddonDispose(e) {
                        if (e.isDisposed) return;
                        let t = -1;
                        for(let i = 0; i < this._addons.length; i++)if (this._addons[i] === e) {
                            t = i;
                            break;
                        }
                        if (-1 === t) throw new Error("Could not dispose an addon that has not been loaded");
                        e.isDisposed = !0, e.dispose.apply(e.instance), this._addons.splice(t, 1);
                    }
                };
            },
            8771: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.BufferApiView = void 0;
                const s = i(3785), r = i(511);
                t.BufferApiView = class {
                    constructor(e, t){
                        this._buffer = e, this.type = t;
                    }
                    init(e) {
                        return this._buffer = e, this;
                    }
                    get cursorY() {
                        return this._buffer.y;
                    }
                    get cursorX() {
                        return this._buffer.x;
                    }
                    get viewportY() {
                        return this._buffer.ydisp;
                    }
                    get baseY() {
                        return this._buffer.ybase;
                    }
                    get length() {
                        return this._buffer.lines.length;
                    }
                    getLine(e) {
                        const t = this._buffer.lines.get(e);
                        if (t) return new s.BufferLineApiView(t);
                    }
                    getNullCell() {
                        return new r.CellData;
                    }
                };
            },
            3785: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.BufferLineApiView = void 0;
                const s = i(511);
                t.BufferLineApiView = class {
                    constructor(e){
                        this._line = e;
                    }
                    get isWrapped() {
                        return this._line.isWrapped;
                    }
                    get length() {
                        return this._line.length;
                    }
                    getCell(e, t) {
                        if (!(e < 0 || e >= this._line.length)) return t ? (this._line.loadCell(e, t), t) : this._line.loadCell(e, new s.CellData);
                    }
                    translateToString(e, t, i) {
                        return this._line.translateToString(e, t, i);
                    }
                };
            },
            8285: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.BufferNamespaceApi = void 0;
                const s = i(8771), r = i(8460);
                t.BufferNamespaceApi = class {
                    constructor(e){
                        this._core = e, this._onBufferChange = new r.EventEmitter, this.onBufferChange = this._onBufferChange.event, this._normal = new s.BufferApiView(this._core.buffers.normal, "normal"), this._alternate = new s.BufferApiView(this._core.buffers.alt, "alternate"), this._core.buffers.onBufferActivate(()=>this._onBufferChange.fire(this.active));
                    }
                    get active() {
                        if (this._core.buffers.active === this._core.buffers.normal) return this.normal;
                        if (this._core.buffers.active === this._core.buffers.alt) return this.alternate;
                        throw new Error("Active buffer is neither normal nor alternate");
                    }
                    get normal() {
                        return this._normal.init(this._core.buffers.normal);
                    }
                    get alternate() {
                        return this._alternate.init(this._core.buffers.alt);
                    }
                };
            },
            7975: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.ParserApi = void 0, t.ParserApi = class {
                    constructor(e){
                        this._core = e;
                    }
                    registerCsiHandler(e, t) {
                        return this._core.registerCsiHandler(e, (e)=>t(e.toArray()));
                    }
                    addCsiHandler(e, t) {
                        return this.registerCsiHandler(e, t);
                    }
                    registerDcsHandler(e, t) {
                        return this._core.registerDcsHandler(e, (e, i)=>t(e, i.toArray()));
                    }
                    addDcsHandler(e, t) {
                        return this.registerDcsHandler(e, t);
                    }
                    registerEscHandler(e, t) {
                        return this._core.registerEscHandler(e, t);
                    }
                    addEscHandler(e, t) {
                        return this.registerEscHandler(e, t);
                    }
                    registerOscHandler(e, t) {
                        return this._core.registerOscHandler(e, t);
                    }
                    addOscHandler(e, t) {
                        return this.registerOscHandler(e, t);
                    }
                };
            },
            7090: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.UnicodeApi = void 0, t.UnicodeApi = class {
                    constructor(e){
                        this._core = e;
                    }
                    register(e) {
                        this._core.unicodeService.register(e);
                    }
                    get versions() {
                        return this._core.unicodeService.versions;
                    }
                    get activeVersion() {
                        return this._core.unicodeService.activeVersion;
                    }
                    set activeVersion(e) {
                        this._core.unicodeService.activeVersion = e;
                    }
                };
            },
            744: function(e, t, i) {
                var s = this && this.__decorate || function(e, t, i, s) {
                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);
                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);
                    return n > 3 && o && Object.defineProperty(t, i, o), o;
                }, r = this && this.__param || function(e, t) {
                    return function(i, s) {
                        t(i, s, e);
                    };
                };
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.BufferService = t.MINIMUM_ROWS = t.MINIMUM_COLS = void 0;
                const n = i(2585), o = i(5295), a = i(8460), h = i(844);
                t.MINIMUM_COLS = 2, t.MINIMUM_ROWS = 1;
                let c = class extends h.Disposable {
                    constructor(e){
                        super(), this.isUserScrolling = !1, this._onResize = this.register(new a.EventEmitter), this.onResize = this._onResize.event, this._onScroll = this.register(new a.EventEmitter), this.onScroll = this._onScroll.event, this.cols = Math.max(e.rawOptions.cols || 0, t.MINIMUM_COLS), this.rows = Math.max(e.rawOptions.rows || 0, t.MINIMUM_ROWS), this.buffers = this.register(new o.BufferSet(e, this));
                    }
                    get buffer() {
                        return this.buffers.active;
                    }
                    resize(e, t) {
                        this.cols = e, this.rows = t, this.buffers.resize(e, t), this._onResize.fire({
                            cols: e,
                            rows: t
                        });
                    }
                    reset() {
                        this.buffers.reset(), this.isUserScrolling = !1;
                    }
                    scroll(e, t = !1) {
                        const i = this.buffer;
                        let s;
                        s = this._cachedBlankLine, s && s.length === this.cols && s.getFg(0) === e.fg && s.getBg(0) === e.bg || (s = i.getBlankLine(e, t), this._cachedBlankLine = s), s.isWrapped = t;
                        const r = i.ybase + i.scrollTop, n = i.ybase + i.scrollBottom;
                        if (0 === i.scrollTop) {
                            const e = i.lines.isFull;
                            n === i.lines.length - 1 ? e ? i.lines.recycle().copyFrom(s) : i.lines.push(s.clone()) : i.lines.splice(n + 1, 0, s.clone()), e ? this.isUserScrolling && (i.ydisp = Math.max(i.ydisp - 1, 0)) : (i.ybase++, this.isUserScrolling || i.ydisp++);
                        } else {
                            const e = n - r + 1;
                            i.lines.shiftElements(r + 1, e - 1, -1), i.lines.set(n, s.clone());
                        }
                        this.isUserScrolling || (i.ydisp = i.ybase), this._onScroll.fire(i.ydisp);
                    }
                    scrollLines(e, t, i) {
                        const s = this.buffer;
                        if (e < 0) {
                            if (0 === s.ydisp) return;
                            this.isUserScrolling = !0;
                        } else e + s.ydisp >= s.ybase && (this.isUserScrolling = !1);
                        const r = s.ydisp;
                        s.ydisp = Math.max(Math.min(s.ydisp + e, s.ybase), 0), r !== s.ydisp && (t || this._onScroll.fire(s.ydisp));
                    }
                    scrollPages(e) {
                        this.scrollLines(e * (this.rows - 1));
                    }
                    scrollToTop() {
                        this.scrollLines(-this.buffer.ydisp);
                    }
                    scrollToBottom() {
                        this.scrollLines(this.buffer.ybase - this.buffer.ydisp);
                    }
                    scrollToLine(e) {
                        const t = e - this.buffer.ydisp;
                        0 !== t && this.scrollLines(t);
                    }
                };
                c = s([
                    r(0, n.IOptionsService)
                ], c), t.BufferService = c;
            },
            7994: (e, t)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.CharsetService = void 0, t.CharsetService = class {
                    constructor(){
                        this.glevel = 0, this._charsets = [];
                    }
                    reset() {
                        this.charset = void 0, this._charsets = [], this.glevel = 0;
                    }
                    setgLevel(e) {
                        this.glevel = e, this.charset = this._charsets[e];
                    }
                    setgCharset(e, t) {
                        this._charsets[e] = t, this.glevel === e && (this.charset = t);
                    }
                };
            },
            1753: function(e, t, i) {
                var s = this && this.__decorate || function(e, t, i, s) {
                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);
                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);
                    return n > 3 && o && Object.defineProperty(t, i, o), o;
                }, r = this && this.__param || function(e, t) {
                    return function(i, s) {
                        t(i, s, e);
                    };
                };
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.CoreMouseService = void 0;
                const n = i(2585), o = i(8460), a = i(844), h = {
                    NONE: {
                        events: 0,
                        restrict: ()=>!1
                    },
                    X10: {
                        events: 1,
                        restrict: (e)=>4 !== e.button && 1 === e.action && (e.ctrl = !1, e.alt = !1, e.shift = !1, !0)
                    },
                    VT200: {
                        events: 19,
                        restrict: (e)=>32 !== e.action
                    },
                    DRAG: {
                        events: 23,
                        restrict: (e)=>32 !== e.action || 3 !== e.button
                    },
                    ANY: {
                        events: 31,
                        restrict: (e)=>!0
                    }
                };
                function c(e, t) {
                    let i = (e.ctrl ? 16 : 0) | (e.shift ? 4 : 0) | (e.alt ? 8 : 0);
                    return 4 === e.button ? (i |= 64, i |= e.action) : (i |= 3 & e.button, 4 & e.button && (i |= 64), 8 & e.button && (i |= 128), 32 === e.action ? i |= 32 : 0 !== e.action || t || (i |= 3)), i;
                }
                const l = String.fromCharCode, d = {
                    DEFAULT: (e)=>{
                        const t = [
                            c(e, !1) + 32,
                            e.col + 32,
                            e.row + 32
                        ];
                        return t[0] > 255 || t[1] > 255 || t[2] > 255 ? "" : `[M${l(t[0])}${l(t[1])}${l(t[2])}`;
                    },
                    SGR: (e)=>{
                        const t = 0 === e.action && 4 !== e.button ? "m" : "M";
                        return `[<${c(e, !0)};${e.col};${e.row}${t}`;
                    },
                    SGR_PIXELS: (e)=>{
                        const t = 0 === e.action && 4 !== e.button ? "m" : "M";
                        return `[<${c(e, !0)};${e.x};${e.y}${t}`;
                    }
                };
                let _ = class extends a.Disposable {
                    constructor(e, t){
                        super(), this._bufferService = e, this._coreService = t, this._protocols = {}, this._encodings = {}, this._activeProtocol = "", this._activeEncoding = "", this._lastEvent = null, this._onProtocolChange = this.register(new o.EventEmitter), this.onProtocolChange = this._onProtocolChange.event;
                        for (const e of Object.keys(h))this.addProtocol(e, h[e]);
                        for (const e of Object.keys(d))this.addEncoding(e, d[e]);
                        this.reset();
                    }
                    addProtocol(e, t) {
                        this._protocols[e] = t;
                    }
                    addEncoding(e, t) {
                        this._encodings[e] = t;
                    }
                    get activeProtocol() {
                        return this._activeProtocol;
                    }
                    get areMouseEventsActive() {
                        return 0 !== this._protocols[this._activeProtocol].events;
                    }
                    set activeProtocol(e) {
                        if (!this._protocols[e]) throw new Error(`unknown protocol "${e}"`);
                        this._activeProtocol = e, this._onProtocolChange.fire(this._protocols[e].events);
                    }
                    get activeEncoding() {
                        return this._activeEncoding;
                    }
                    set activeEncoding(e) {
                        if (!this._encodings[e]) throw new Error(`unknown encoding "${e}"`);
                        this._activeEncoding = e;
                    }
                    reset() {
                        this.activeProtocol = "NONE", this.activeEncoding = "DEFAULT", this._lastEvent = null;
                    }
                    triggerMouseEvent(e) {
                        if (e.col < 0 || e.col >= this._bufferService.cols || e.row < 0 || e.row >= this._bufferService.rows) return !1;
                        if (4 === e.button && 32 === e.action) return !1;
                        if (3 === e.button && 32 !== e.action) return !1;
                        if (4 !== e.button && (2 === e.action || 3 === e.action)) return !1;
                        if (e.col++, e.row++, 32 === e.action && this._lastEvent && this._equalEvents(this._lastEvent, e, "SGR_PIXELS" === this._activeEncoding)) return !1;
                        if (!this._protocols[this._activeProtocol].restrict(e)) return !1;
                        const t = this._encodings[this._activeEncoding](e);
                        return t && ("DEFAULT" === this._activeEncoding ? this._coreService.triggerBinaryEvent(t) : this._coreService.triggerDataEvent(t, !0)), this._lastEvent = e, !0;
                    }
                    explainEvents(e) {
                        return {
                            down: !!(1 & e),
                            up: !!(2 & e),
                            drag: !!(4 & e),
                            move: !!(8 & e),
                            wheel: !!(16 & e)
                        };
                    }
                    _equalEvents(e, t, i) {
                        if (i) {
                            if (e.x !== t.x) return !1;
                            if (e.y !== t.y) return !1;
                        } else {
                            if (e.col !== t.col) return !1;
                            if (e.row !== t.row) return !1;
                        }
                        return e.button === t.button && e.action === t.action && e.ctrl === t.ctrl && e.alt === t.alt && e.shift === t.shift;
                    }
                };
                _ = s([
                    r(0, n.IBufferService),
                    r(1, n.ICoreService)
                ], _), t.CoreMouseService = _;
            },
            6975: function(e, t, i) {
                var s = this && this.__decorate || function(e, t, i, s) {
                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);
                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);
                    return n > 3 && o && Object.defineProperty(t, i, o), o;
                }, r = this && this.__param || function(e, t) {
                    return function(i, s) {
                        t(i, s, e);
                    };
                };
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.CoreService = void 0;
                const n = i(2585), o = i(8460), a = i(1439), h = i(844), c = Object.freeze({
                    insertMode: !1
                }), l = Object.freeze({
                    applicationCursorKeys: !1,
                    applicationKeypad: !1,
                    bracketedPasteMode: !1,
                    origin: !1,
                    reverseWraparound: !1,
                    sendFocus: !1,
                    wraparound: !0
                });
                let d = class extends h.Disposable {
                    constructor(e, t, i){
                        super(), this._bufferService = e, this._logService = t, this._optionsService = i, this.isCursorInitialized = !1, this.isCursorHidden = !1, this._onData = this.register(new o.EventEmitter), this.onData = this._onData.event, this._onUserInput = this.register(new o.EventEmitter), this.onUserInput = this._onUserInput.event, this._onBinary = this.register(new o.EventEmitter), this.onBinary = this._onBinary.event, this._onRequestScrollToBottom = this.register(new o.EventEmitter), this.onRequestScrollToBottom = this._onRequestScrollToBottom.event, this.modes = (0, a.clone)(c), this.decPrivateModes = (0, a.clone)(l);
                    }
                    reset() {
                        this.modes = (0, a.clone)(c), this.decPrivateModes = (0, a.clone)(l);
                    }
                    triggerDataEvent(e, t = !1) {
                        if (this._optionsService.rawOptions.disableStdin) return;
                        const i = this._bufferService.buffer;
                        t && this._optionsService.rawOptions.scrollOnUserInput && i.ybase !== i.ydisp && this._onRequestScrollToBottom.fire(), t && this._onUserInput.fire(), this._logService.debug(`sending data "${e}"`, ()=>e.split("").map((e)=>e.charCodeAt(0))), this._onData.fire(e);
                    }
                    triggerBinaryEvent(e) {
                        this._optionsService.rawOptions.disableStdin || (this._logService.debug(`sending binary "${e}"`, ()=>e.split("").map((e)=>e.charCodeAt(0))), this._onBinary.fire(e));
                    }
                };
                d = s([
                    r(0, n.IBufferService),
                    r(1, n.ILogService),
                    r(2, n.IOptionsService)
                ], d), t.CoreService = d;
            },
            9074: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.DecorationService = void 0;
                const s = i(8055), r = i(8460), n = i(844), o = i(6106);
                let a = 0, h = 0;
                class c extends n.Disposable {
                    constructor(){
                        super(), this._decorations = new o.SortedList((e)=>null == e ? void 0 : e.marker.line), this._onDecorationRegistered = this.register(new r.EventEmitter), this.onDecorationRegistered = this._onDecorationRegistered.event, this._onDecorationRemoved = this.register(new r.EventEmitter), this.onDecorationRemoved = this._onDecorationRemoved.event, this.register((0, n.toDisposable)(()=>{
                            for (const e of this._decorations.values())this._onDecorationRemoved.fire(e);
                            this.reset();
                        }));
                    }
                    get decorations() {
                        return this._decorations.values();
                    }
                    registerDecoration(e) {
                        if (e.marker.isDisposed) return;
                        const t = new l(e);
                        if (t) {
                            const e = t.marker.onDispose(()=>t.dispose());
                            t.onDispose(()=>{
                                t && (this._decorations.delete(t) && this._onDecorationRemoved.fire(t), e.dispose());
                            }), this._decorations.insert(t), this._onDecorationRegistered.fire(t);
                        }
                        return t;
                    }
                    reset() {
                        for (const e of this._decorations.values())e.dispose();
                        this._decorations.clear();
                    }
                    *getDecorationsAtCell(e, t, i) {
                        var s, r, n;
                        let o = 0, a = 0;
                        for (const h of this._decorations.getKeyIterator(t))o = null !== (s = h.options.x) && void 0 !== s ? s : 0, a = o + (null !== (r = h.options.width) && void 0 !== r ? r : 1), e >= o && e < a && (!i || (null !== (n = h.options.layer) && void 0 !== n ? n : "bottom") === i) && (yield h);
                    }
                    forEachDecorationAtCell(e, t, i, s) {
                        this._decorations.forEachByKey(t, (t)=>{
                            var r, n, o;
                            a = null !== (r = t.options.x) && void 0 !== r ? r : 0, h = a + (null !== (n = t.options.width) && void 0 !== n ? n : 1), e >= a && e < h && (!i || (null !== (o = t.options.layer) && void 0 !== o ? o : "bottom") === i) && s(t);
                        });
                    }
                    dispose() {
                        for (const e of this._decorations.values())this._onDecorationRemoved.fire(e);
                        this.reset();
                    }
                }
                t.DecorationService = c;
                class l extends n.Disposable {
                    constructor(e){
                        super(), this.options = e, this.isDisposed = !1, this.onRenderEmitter = this.register(new r.EventEmitter), this.onRender = this.onRenderEmitter.event, this._onDispose = this.register(new r.EventEmitter), this.onDispose = this._onDispose.event, this._cachedBg = null, this._cachedFg = null, this.marker = e.marker, this.options.overviewRulerOptions && !this.options.overviewRulerOptions.position && (this.options.overviewRulerOptions.position = "full");
                    }
                    get backgroundColorRGB() {
                        return null === this._cachedBg && (this.options.backgroundColor ? this._cachedBg = s.css.toColor(this.options.backgroundColor) : this._cachedBg = void 0), this._cachedBg;
                    }
                    get foregroundColorRGB() {
                        return null === this._cachedFg && (this.options.foregroundColor ? this._cachedFg = s.css.toColor(this.options.foregroundColor) : this._cachedFg = void 0), this._cachedFg;
                    }
                    dispose() {
                        this._onDispose.fire(), super.dispose();
                    }
                }
            },
            4348: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.InstantiationService = t.ServiceCollection = void 0;
                const s = i(2585), r = i(8343);
                class n {
                    constructor(...e){
                        this._entries = new Map;
                        for (const [t, i] of e)this.set(t, i);
                    }
                    set(e, t) {
                        const i = this._entries.get(e);
                        return this._entries.set(e, t), i;
                    }
                    forEach(e) {
                        for (const [t, i] of this._entries.entries())e(t, i);
                    }
                    has(e) {
                        return this._entries.has(e);
                    }
                    get(e) {
                        return this._entries.get(e);
                    }
                }
                t.ServiceCollection = n, t.InstantiationService = class {
                    constructor(){
                        this._services = new n, this._services.set(s.IInstantiationService, this);
                    }
                    setService(e, t) {
                        this._services.set(e, t);
                    }
                    getService(e) {
                        return this._services.get(e);
                    }
                    createInstance(e, ...t) {
                        const i = (0, r.getServiceDependencies)(e).sort((e, t)=>e.index - t.index), s = [];
                        for (const t of i){
                            const i = this._services.get(t.id);
                            if (!i) throw new Error(`[createInstance] ${e.name} depends on UNKNOWN service ${t.id}.`);
                            s.push(i);
                        }
                        const n = i.length > 0 ? i[0].index : t.length;
                        if (t.length !== n) throw new Error(`[createInstance] First service dependency of ${e.name} at position ${n + 1} conflicts with ${t.length} static arguments`);
                        return new e(...[
                            ...t,
                            ...s
                        ]);
                    }
                };
            },
            7866: function(e, t, i) {
                var s = this && this.__decorate || function(e, t, i, s) {
                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);
                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);
                    return n > 3 && o && Object.defineProperty(t, i, o), o;
                }, r = this && this.__param || function(e, t) {
                    return function(i, s) {
                        t(i, s, e);
                    };
                };
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.LogService = void 0;
                const n = i(844), o = i(2585), a = {
                    debug: o.LogLevelEnum.DEBUG,
                    info: o.LogLevelEnum.INFO,
                    warn: o.LogLevelEnum.WARN,
                    error: o.LogLevelEnum.ERROR,
                    off: o.LogLevelEnum.OFF
                };
                let h = class extends n.Disposable {
                    constructor(e){
                        super(), this._optionsService = e, this.logLevel = o.LogLevelEnum.OFF, this._updateLogLevel(), this.register(this._optionsService.onSpecificOptionChange("logLevel", ()=>this._updateLogLevel()));
                    }
                    _updateLogLevel() {
                        this.logLevel = a[this._optionsService.rawOptions.logLevel];
                    }
                    _evalLazyOptionalParams(e) {
                        for(let t = 0; t < e.length; t++)"function" == typeof e[t] && (e[t] = e[t]());
                    }
                    _log(e, t, i) {
                        this._evalLazyOptionalParams(i), e.call(console, "xterm.js: " + t, ...i);
                    }
                    debug(e, ...t) {
                        this.logLevel <= o.LogLevelEnum.DEBUG && this._log(console.log, e, t);
                    }
                    info(e, ...t) {
                        this.logLevel <= o.LogLevelEnum.INFO && this._log(console.info, e, t);
                    }
                    warn(e, ...t) {
                        this.logLevel <= o.LogLevelEnum.WARN && this._log(console.warn, e, t);
                    }
                    error(e, ...t) {
                        this.logLevel <= o.LogLevelEnum.ERROR && this._log(console.error, e, t);
                    }
                };
                h = s([
                    r(0, o.IOptionsService)
                ], h), t.LogService = h;
            },
            7302: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.OptionsService = t.DEFAULT_OPTIONS = void 0;
                const s = i(8460), r = i(6114), n = i(844);
                t.DEFAULT_OPTIONS = {
                    cols: 80,
                    rows: 24,
                    cursorBlink: !1,
                    cursorStyle: "block",
                    cursorWidth: 1,
                    customGlyphs: !0,
                    drawBoldTextInBrightColors: !0,
                    fastScrollModifier: "alt",
                    fastScrollSensitivity: 5,
                    fontFamily: "courier-new, courier, monospace",
                    fontSize: 15,
                    fontWeight: "normal",
                    fontWeightBold: "bold",
                    lineHeight: 1,
                    letterSpacing: 0,
                    linkHandler: null,
                    logLevel: "info",
                    scrollback: 1e3,
                    scrollOnUserInput: !0,
                    scrollSensitivity: 1,
                    screenReaderMode: !1,
                    smoothScrollDuration: 0,
                    macOptionIsMeta: !1,
                    macOptionClickForcesSelection: !1,
                    minimumContrastRatio: 1,
                    disableStdin: !1,
                    allowProposedApi: !1,
                    allowTransparency: !1,
                    tabStopWidth: 8,
                    theme: {},
                    rightClickSelectsWord: r.isMac,
                    windowOptions: {},
                    windowsMode: !1,
                    wordSeparator: " ()[]{}',\"`",
                    altClickMovesCursor: !0,
                    convertEol: !1,
                    termName: "xterm",
                    cancelEvents: !1,
                    overviewRulerWidth: 0
                };
                const o = [
                    "normal",
                    "bold",
                    "100",
                    "200",
                    "300",
                    "400",
                    "500",
                    "600",
                    "700",
                    "800",
                    "900"
                ];
                class a extends n.Disposable {
                    constructor(e){
                        super(), this._onOptionChange = this.register(new s.EventEmitter), this.onOptionChange = this._onOptionChange.event;
                        const i = Object.assign({}, t.DEFAULT_OPTIONS);
                        for(const t in e)if (t in i) try {
                            const s = e[t];
                            i[t] = this._sanitizeAndValidateOption(t, s);
                        } catch (e) {
                            console.error(e);
                        }
                        this.rawOptions = i, this.options = Object.assign({}, i), this._setupOptions();
                    }
                    onSpecificOptionChange(e, t) {
                        return this.onOptionChange((i)=>{
                            i === e && t(this.rawOptions[e]);
                        });
                    }
                    onMultipleOptionChange(e, t) {
                        return this.onOptionChange((i)=>{
                            -1 !== e.indexOf(i) && t();
                        });
                    }
                    _setupOptions() {
                        const e = (e)=>{
                            if (!(e in t.DEFAULT_OPTIONS)) throw new Error(`No option with key "${e}"`);
                            return this.rawOptions[e];
                        }, i = (e, i)=>{
                            if (!(e in t.DEFAULT_OPTIONS)) throw new Error(`No option with key "${e}"`);
                            i = this._sanitizeAndValidateOption(e, i), this.rawOptions[e] !== i && (this.rawOptions[e] = i, this._onOptionChange.fire(e));
                        };
                        for(const t in this.rawOptions){
                            const s = {
                                get: e.bind(this, t),
                                set: i.bind(this, t)
                            };
                            Object.defineProperty(this.options, t, s);
                        }
                    }
                    _sanitizeAndValidateOption(e, i) {
                        switch(e){
                            case "cursorStyle":
                                if (i || (i = t.DEFAULT_OPTIONS[e]), !function(e) {
                                    return "block" === e || "underline" === e || "bar" === e;
                                }(i)) throw new Error(`"${i}" is not a valid value for ${e}`);
                                break;
                            case "wordSeparator":
                                i || (i = t.DEFAULT_OPTIONS[e]);
                                break;
                            case "fontWeight":
                            case "fontWeightBold":
                                if ("number" == typeof i && 1 <= i && i <= 1e3) break;
                                i = o.includes(i) ? i : t.DEFAULT_OPTIONS[e];
                                break;
                            case "cursorWidth":
                                i = Math.floor(i);
                            case "lineHeight":
                            case "tabStopWidth":
                                if (i < 1) throw new Error(`${e} cannot be less than 1, value: ${i}`);
                                break;
                            case "minimumContrastRatio":
                                i = Math.max(1, Math.min(21, Math.round(10 * i) / 10));
                                break;
                            case "scrollback":
                                if ((i = Math.min(i, 4294967295)) < 0) throw new Error(`${e} cannot be less than 0, value: ${i}`);
                                break;
                            case "fastScrollSensitivity":
                            case "scrollSensitivity":
                                if (i <= 0) throw new Error(`${e} cannot be less than or equal to 0, value: ${i}`);
                            case "rows":
                            case "cols":
                                if (!i && 0 !== i) throw new Error(`${e} must be numeric, value: ${i}`);
                        }
                        return i;
                    }
                }
                t.OptionsService = a;
            },
            2660: function(e, t, i) {
                var s = this && this.__decorate || function(e, t, i, s) {
                    var r, n = arguments.length, o = n < 3 ? t : null === s ? s = Object.getOwnPropertyDescriptor(t, i) : s;
                    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) o = Reflect.decorate(e, t, i, s);
                    else for(var a = e.length - 1; a >= 0; a--)(r = e[a]) && (o = (n < 3 ? r(o) : n > 3 ? r(t, i, o) : r(t, i)) || o);
                    return n > 3 && o && Object.defineProperty(t, i, o), o;
                }, r = this && this.__param || function(e, t) {
                    return function(i, s) {
                        t(i, s, e);
                    };
                };
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.OscLinkService = void 0;
                const n = i(2585);
                let o = class {
                    constructor(e){
                        this._bufferService = e, this._nextId = 1, this._entriesWithId = new Map, this._dataByLinkId = new Map;
                    }
                    registerLink(e) {
                        const t = this._bufferService.buffer;
                        if (void 0 === e.id) {
                            const i = t.addMarker(t.ybase + t.y), s = {
                                data: e,
                                id: this._nextId++,
                                lines: [
                                    i
                                ]
                            };
                            return i.onDispose(()=>this._removeMarkerFromLink(s, i)), this._dataByLinkId.set(s.id, s), s.id;
                        }
                        const i = e, s = this._getEntryIdKey(i), r = this._entriesWithId.get(s);
                        if (r) return this.addLineToLink(r.id, t.ybase + t.y), r.id;
                        const n = t.addMarker(t.ybase + t.y), o = {
                            id: this._nextId++,
                            key: this._getEntryIdKey(i),
                            data: i,
                            lines: [
                                n
                            ]
                        };
                        return n.onDispose(()=>this._removeMarkerFromLink(o, n)), this._entriesWithId.set(o.key, o), this._dataByLinkId.set(o.id, o), o.id;
                    }
                    addLineToLink(e, t) {
                        const i = this._dataByLinkId.get(e);
                        if (i && i.lines.every((e)=>e.line !== t)) {
                            const e = this._bufferService.buffer.addMarker(t);
                            i.lines.push(e), e.onDispose(()=>this._removeMarkerFromLink(i, e));
                        }
                    }
                    getLinkData(e) {
                        var t;
                        return null === (t = this._dataByLinkId.get(e)) || void 0 === t ? void 0 : t.data;
                    }
                    _getEntryIdKey(e) {
                        return `${e.id};;${e.uri}`;
                    }
                    _removeMarkerFromLink(e, t) {
                        const i = e.lines.indexOf(t);
                        -1 !== i && (e.lines.splice(i, 1), 0 === e.lines.length && (void 0 !== e.data.id && this._entriesWithId.delete(e.key), this._dataByLinkId.delete(e.id)));
                    }
                };
                o = s([
                    r(0, n.IBufferService)
                ], o), t.OscLinkService = o;
            },
            8343: (e, t)=>{
                function i(e, t, i) {
                    t.di$target === t ? t.di$dependencies.push({
                        id: e,
                        index: i
                    }) : (t.di$dependencies = [
                        {
                            id: e,
                            index: i
                        }
                    ], t.di$target = t);
                }
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.createDecorator = t.getServiceDependencies = t.serviceRegistry = void 0, t.serviceRegistry = new Map, t.getServiceDependencies = function(e) {
                    return e.di$dependencies || [];
                }, t.createDecorator = function(e) {
                    if (t.serviceRegistry.has(e)) return t.serviceRegistry.get(e);
                    const s = function(e, t, r) {
                        if (3 !== arguments.length) throw new Error("@IServiceName-decorator can only be used to decorate a parameter");
                        i(s, e, r);
                    };
                    return s.toString = ()=>e, t.serviceRegistry.set(e, s), s;
                };
            },
            2585: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.IDecorationService = t.IUnicodeService = t.IOscLinkService = t.IOptionsService = t.ILogService = t.LogLevelEnum = t.IInstantiationService = t.ICharsetService = t.ICoreService = t.ICoreMouseService = t.IBufferService = void 0;
                const s = i(8343);
                var r;
                t.IBufferService = (0, s.createDecorator)("BufferService"), t.ICoreMouseService = (0, s.createDecorator)("CoreMouseService"), t.ICoreService = (0, s.createDecorator)("CoreService"), t.ICharsetService = (0, s.createDecorator)("CharsetService"), t.IInstantiationService = (0, s.createDecorator)("InstantiationService"), (r = t.LogLevelEnum || (t.LogLevelEnum = {}))[r.DEBUG = 0] = "DEBUG", r[r.INFO = 1] = "INFO", r[r.WARN = 2] = "WARN", r[r.ERROR = 3] = "ERROR", r[r.OFF = 4] = "OFF", t.ILogService = (0, s.createDecorator)("LogService"), t.IOptionsService = (0, s.createDecorator)("OptionsService"), t.IOscLinkService = (0, s.createDecorator)("OscLinkService"), t.IUnicodeService = (0, s.createDecorator)("UnicodeService"), t.IDecorationService = (0, s.createDecorator)("DecorationService");
            },
            1480: (e, t, i)=>{
                Object.defineProperty(t, "__esModule", {
                    value: !0
                }), t.UnicodeService = void 0;
                const s = i(8460), r = i(225);
                t.UnicodeService = class {
                    constructor(){
                        this._providers = Object.create(null), this._active = "", this._onChange = new s.EventEmitter, this.onChange = this._onChange.event;
                        const e = new r.UnicodeV6;
                        this.register(e), this._active = e.version, this._activeProvider = e;
                    }
                    dispose() {
                        this._onChange.dispose();
                    }
                    get versions() {
                        return Object.keys(this._providers);
                    }
                    get activeVersion() {
                        return this._active;
                    }
                    set activeVersion(e) {
                        if (!this._providers[e]) throw new Error(`unknown Unicode version "${e}"`);
                        this._active = e, this._activeProvider = this._providers[e], this._onChange.fire(e);
                    }
                    register(e) {
                        this._providers[e.version] = e;
                    }
                    wcwidth(e) {
                        return this._activeProvider.wcwidth(e);
                    }
                    getStringCellWidth(e) {
                        let t = 0;
                        const i = e.length;
                        for(let s = 0; s < i; ++s){
                            let r = e.charCodeAt(s);
                            if (55296 <= r && r <= 56319) {
                                if (++s >= i) return t + this.wcwidth(r);
                                const n = e.charCodeAt(s);
                                56320 <= n && n <= 57343 ? r = 1024 * (r - 55296) + n - 56320 + 65536 : t += this.wcwidth(n);
                            }
                            t += this.wcwidth(r);
                        }
                        return t;
                    }
                };
            }
        }, t = {};
        function i(s) {
            var r = t[s];
            if (void 0 !== r) return r.exports;
            var n = t[s] = {
                exports: {}
            };
            return e[s].call(n.exports, n, n.exports, i), n.exports;
        }
        var s = {};
        return (()=>{
            var e = s;
            Object.defineProperty(e, "__esModule", {
                value: !0
            }), e.Terminal = void 0;
            const t = i(3236), r = i(9042), n = i(7975), o = i(7090), a = i(5741), h = i(8285), c = [
                "cols",
                "rows"
            ];
            e.Terminal = class {
                constructor(e){
                    this._core = new t.Terminal(e), this._addonManager = new a.AddonManager, this._publicOptions = Object.assign({}, this._core.options);
                    const i = (e)=>this._core.options[e], s = (e, t)=>{
                        this._checkReadonlyOptions(e), this._core.options[e] = t;
                    };
                    for(const e in this._core.options){
                        const t = {
                            get: i.bind(this, e),
                            set: s.bind(this, e)
                        };
                        Object.defineProperty(this._publicOptions, e, t);
                    }
                }
                _checkReadonlyOptions(e) {
                    if (c.includes(e)) throw new Error(`Option "${e}" can only be set in the constructor`);
                }
                _checkProposedApi() {
                    if (!this._core.optionsService.rawOptions.allowProposedApi) throw new Error("You must set the allowProposedApi option to true to use proposed API");
                }
                get onBell() {
                    return this._core.onBell;
                }
                get onBinary() {
                    return this._core.onBinary;
                }
                get onCursorMove() {
                    return this._core.onCursorMove;
                }
                get onData() {
                    return this._core.onData;
                }
                get onKey() {
                    return this._core.onKey;
                }
                get onLineFeed() {
                    return this._core.onLineFeed;
                }
                get onRender() {
                    return this._core.onRender;
                }
                get onResize() {
                    return this._core.onResize;
                }
                get onScroll() {
                    return this._core.onScroll;
                }
                get onSelectionChange() {
                    return this._core.onSelectionChange;
                }
                get onTitleChange() {
                    return this._core.onTitleChange;
                }
                get onWriteParsed() {
                    return this._core.onWriteParsed;
                }
                get element() {
                    return this._core.element;
                }
                get parser() {
                    return this._parser || (this._parser = new n.ParserApi(this._core)), this._parser;
                }
                get unicode() {
                    return this._checkProposedApi(), new o.UnicodeApi(this._core);
                }
                get textarea() {
                    return this._core.textarea;
                }
                get rows() {
                    return this._core.rows;
                }
                get cols() {
                    return this._core.cols;
                }
                get buffer() {
                    return this._buffer || (this._buffer = new h.BufferNamespaceApi(this._core)), this._buffer;
                }
                get markers() {
                    return this._checkProposedApi(), this._core.markers;
                }
                get modes() {
                    const e = this._core.coreService.decPrivateModes;
                    let t = "none";
                    switch(this._core.coreMouseService.activeProtocol){
                        case "X10":
                            t = "x10";
                            break;
                        case "VT200":
                            t = "vt200";
                            break;
                        case "DRAG":
                            t = "drag";
                            break;
                        case "ANY":
                            t = "any";
                    }
                    return {
                        applicationCursorKeysMode: e.applicationCursorKeys,
                        applicationKeypadMode: e.applicationKeypad,
                        bracketedPasteMode: e.bracketedPasteMode,
                        insertMode: this._core.coreService.modes.insertMode,
                        mouseTrackingMode: t,
                        originMode: e.origin,
                        reverseWraparoundMode: e.reverseWraparound,
                        sendFocusMode: e.sendFocus,
                        wraparoundMode: e.wraparound
                    };
                }
                get options() {
                    return this._publicOptions;
                }
                set options(e) {
                    for(const t in e)this._publicOptions[t] = e[t];
                }
                blur() {
                    this._core.blur();
                }
                focus() {
                    this._core.focus();
                }
                resize(e, t) {
                    this._verifyIntegers(e, t), this._core.resize(e, t);
                }
                open(e) {
                    this._core.open(e);
                }
                attachCustomKeyEventHandler(e) {
                    this._core.attachCustomKeyEventHandler(e);
                }
                registerLinkProvider(e) {
                    return this._core.registerLinkProvider(e);
                }
                registerCharacterJoiner(e) {
                    return this._checkProposedApi(), this._core.registerCharacterJoiner(e);
                }
                deregisterCharacterJoiner(e) {
                    this._checkProposedApi(), this._core.deregisterCharacterJoiner(e);
                }
                registerMarker(e = 0) {
                    return this._verifyIntegers(e), this._core.addMarker(e);
                }
                registerDecoration(e) {
                    var t, i, s;
                    return this._checkProposedApi(), this._verifyPositiveIntegers(null !== (t = e.x) && void 0 !== t ? t : 0, null !== (i = e.width) && void 0 !== i ? i : 0, null !== (s = e.height) && void 0 !== s ? s : 0), this._core.registerDecoration(e);
                }
                hasSelection() {
                    return this._core.hasSelection();
                }
                select(e, t, i) {
                    this._verifyIntegers(e, t, i), this._core.select(e, t, i);
                }
                getSelection() {
                    return this._core.getSelection();
                }
                getSelectionPosition() {
                    return this._core.getSelectionPosition();
                }
                clearSelection() {
                    this._core.clearSelection();
                }
                selectAll() {
                    this._core.selectAll();
                }
                selectLines(e, t) {
                    this._verifyIntegers(e, t), this._core.selectLines(e, t);
                }
                dispose() {
                    this._addonManager.dispose(), this._core.dispose();
                }
                scrollLines(e) {
                    this._verifyIntegers(e), this._core.scrollLines(e);
                }
                scrollPages(e) {
                    this._verifyIntegers(e), this._core.scrollPages(e);
                }
                scrollToTop() {
                    this._core.scrollToTop();
                }
                scrollToBottom() {
                    this._core.scrollToBottom();
                }
                scrollToLine(e) {
                    this._verifyIntegers(e), this._core.scrollToLine(e);
                }
                clear() {
                    this._core.clear();
                }
                write(e, t) {
                    this._core.write(e, t);
                }
                writeln(e, t) {
                    this._core.write(e), this._core.write("\r\n", t);
                }
                paste(e) {
                    this._core.paste(e);
                }
                refresh(e, t) {
                    this._verifyIntegers(e, t), this._core.refresh(e, t);
                }
                reset() {
                    this._core.reset();
                }
                clearTextureAtlas() {
                    this._core.clearTextureAtlas();
                }
                loadAddon(e) {
                    return this._addonManager.loadAddon(this, e);
                }
                static get strings() {
                    return r;
                }
                _verifyIntegers(...e) {
                    for (const t of e)if (t === 1 / 0 || isNaN(t) || t % 1 != 0) throw new Error("This API only accepts integers");
                }
                _verifyPositiveIntegers(...e) {
                    for (const t of e)if (t && (t === 1 / 0 || isNaN(t) || t % 1 != 0 || t < 0)) throw new Error("This API only accepts positive integers");
                }
            };
        })(), s;
    })();
});


var $7fc71f98aa33c694$exports = {};
!function(e, t) {
    $7fc71f98aa33c694$exports = t();
}(self, function() {
    return (()=>{
        "use strict";
        var e = {};
        return (()=>{
            var t = e;
            Object.defineProperty(t, "__esModule", {
                value: !0
            }), t.FitAddon = void 0, t.FitAddon = class {
                constructor(){}
                activate(e) {
                    this._terminal = e;
                }
                dispose() {}
                fit() {
                    const e = this.proposeDimensions();
                    if (!e || !this._terminal || isNaN(e.cols) || isNaN(e.rows)) return;
                    const t = this._terminal._core;
                    this._terminal.rows === e.rows && this._terminal.cols === e.cols || (t._renderService.clear(), this._terminal.resize(e.cols, e.rows));
                }
                proposeDimensions() {
                    if (!this._terminal) return;
                    if (!this._terminal.element || !this._terminal.element.parentElement) return;
                    const e = this._terminal._core, t = e._renderService.dimensions;
                    if (0 === t.css.cell.width || 0 === t.css.cell.height) return;
                    const r = 0 === this._terminal.options.scrollback ? 0 : e.viewport.scrollBarWidth, i = window.getComputedStyle(this._terminal.element.parentElement), o = parseInt(i.getPropertyValue("height")), s = Math.max(0, parseInt(i.getPropertyValue("width"))), n = window.getComputedStyle(this._terminal.element), l = o - (parseInt(n.getPropertyValue("padding-top")) + parseInt(n.getPropertyValue("padding-bottom"))), a = s - (parseInt(n.getPropertyValue("padding-right")) + parseInt(n.getPropertyValue("padding-left"))) - r;
                    return {
                        cols: Math.max(2, Math.floor(a / t.css.cell.width)),
                        rows: Math.max(1, Math.floor(l / t.css.cell.height))
                    };
                }
            };
        })(), e;
    })();
});



var $bqCSz = parcelRequire("bqCSz");

var $6kwtT = parcelRequire("6kwtT");
// import { frenchWordDatabase } from '../singletons/Singletons';// FIXME : use dependency injection instead ?

var $bqCSz = parcelRequire("bqCSz");
class $0ecdc2575819a6ae$export$d7a37541bc9e9a3e extends (0, $bqCSz.Command) {
    constructor(logger){
        super();
        this.logger = logger;
    }
    setup() {}
}


class $d8508523bf6d8690$export$731654b94c24c6ec extends (0, $0ecdc2575819a6ae$export$d7a37541bc9e9a3e) {
    constructor(frenchWordDatabase, configureCommand, logger){
        super(logger);
        this.frenchWordDatabase = frenchWordDatabase;
        this.configureCommand = configureCommand;
    }
    setup() {
        this.name("database");
        this.alias("db");
        const wasmCommand = this.command("wasm");
        this.configureCommand(wasmCommand);
        wasmCommand// .alias('wasm')
        .description("Indicate the status of the loading of the WASM").action(()=>{
            this.logger.info("Not implemented");
        });
        const statusCommand = this.command("status");
        this.configureCommand(statusCommand);
        statusCommand// .alias('status')
        .description("Indicate the status of database").action(()=>{
            // TODO : this should be computed
            // TODO : check multiple status (WASM etc)
            if (this.frenchWordDatabase.wasInit === true) this.logger.info("The database was initialized");
            else this.logger.info("The database was not initialized");
        });
        const countCommand = this.command("count");
        this.configureCommand(countCommand);
        countCommand// .alias('status')
        .description("Indicate word and sequence of letters count").action(()=>{
            this.logger.newLine();
            const wordCount = this.frenchWordDatabase.countWords();
            const sequenceCount = this.frenchWordDatabase.countSequences();
            this.logger.writeLn(`Word count is ${wordCount}`);
            this.logger.writeLn(`Sequences count is ${sequenceCount}`);
            this.logger.prompt();
        });
        const dropCommand = this.command("drop");
        this.configureCommand(dropCommand);
        dropCommand// .alias('status')
        .description("Drop the database").action(async ()=>{
            this.logger.newLine();
            this.logger.writeLn(`Dropping the database`);
            await this.frenchWordDatabase.delete();
            this.logger.writeLn(`Database was dropped`);
            this.logger.prompt();
        });
    // TODO : init (using a factory)
    }
}



let $1a88d18c4cbab4bd$export$bfc465b73e2e08a6;
(function(GuessResult) {
    GuessResult[GuessResult["WORD_DO_NOT_MATCH_SEQUENCE"] = 0] = "WORD_DO_NOT_MATCH_SEQUENCE";
    GuessResult[GuessResult["WORD_DO_NOT_EXIST"] = 1] = "WORD_DO_NOT_EXIST";
    GuessResult[GuessResult["SUCCESSFUL_GUESS"] = 2] = "SUCCESSFUL_GUESS";
})($1a88d18c4cbab4bd$export$bfc465b73e2e08a6 || ($1a88d18c4cbab4bd$export$bfc465b73e2e08a6 = {}));



class $abd5fd0e49b44b89$export$b6924ebf3ecaeccf {
    currentSequence = "";
    isGuessing = false;
    attempts = 0;
    constructor(wordDatabase, wordGameOptions){
        this.wordDatabase = wordDatabase;
        this.wordGameOptions = wordGameOptions;
    }
    getNewSequence() {
        this.currentSequence = this.wordDatabase.getSequence(this.wordGameOptions.minOccurences, this.wordGameOptions.maxOccurences);
        if (this.wordGameOptions.guessAsSession) this.isGuessing = true;
        this.attempts = 0;
        return this.currentSequence;
    }
    verifyGuess(word) {
        this.attempts += 1;
        // FIXME
        // Property 'normalize' does not exist on type 'string'. Do you need to change your target library? Try changing the `lib` compiler option to 'es2015' or later.
        // When building with npm
        const normalizedWord = word.normalize("NFD").replace(/\p{Diacritic}/gu, "").toLowerCase() // TODO : locale lower case ?
        ;
        if (normalizedWord.search(new RegExp(this.currentSequence, "i")) === -1) return (0, $1a88d18c4cbab4bd$export$bfc465b73e2e08a6).WORD_DO_NOT_MATCH_SEQUENCE;
        // FIXME : should I use normalizedWord here ? 
        const wordExists = this.wordDatabase.wordExists(word);
        if (wordExists) {
            if (this.wordGameOptions.guessAsSession) {
                this.isGuessing = false;
                this.currentSequence = "";
            }
            this.attempts = 0;
            return (0, $1a88d18c4cbab4bd$export$bfc465b73e2e08a6).SUCCESSFUL_GUESS;
        }
        return (0, $1a88d18c4cbab4bd$export$bfc465b73e2e08a6).WORD_DO_NOT_EXIST;
    }
    getExampleForSequence() {
        if (this.currentSequence === "") throw new Error("You need to generate a sequence before calling this method.");
        return this.wordDatabase.getWord(this.currentSequence);
    }
    maxAttemptReached() {
        if (this.wordGameOptions.maxAttempts <= 0) return false;
        return this.attempts >= this.wordGameOptions.maxAttempts;
    }
    remainingAttempts() {
        if (this.wordGameOptions.maxAttempts <= 0) return -1;
        return this.wordGameOptions.maxAttempts - this.attempts;
    }
    reset() {
        this.isGuessing = false;
        this.currentSequence = "";
        this.attempts = 0;
    }
}




class $231a46fb2d0d27c3$export$6f18ceaacd1d0e31 extends (0, $0ecdc2575819a6ae$export$d7a37541bc9e9a3e) {
    constructor(wordGame, configureCommand, logger){
        super(logger);
        this.wordGame = wordGame;
        this.configureCommand = configureCommand;
    }
    setup() {
        this.name("word-game");
        this.alias("wg");
        // TODO : the logic should not be dependent on commander
        // TODO : command with a sequence as a parameter assign, new with option ?
        this.command("new-sequence").alias("new").description("Generate a new sequence").action(()=>{
            this.logger.newLine();
            this.logger.writeLn("New sequence: " + this.wordGame.getNewSequence());
            if (this.wordGame.wordGameOptions.maxAttempts > 0) this.logger.writeLn(`You have ${this.wordGame.remainingAttempts()} attempts to find a word containing this sequence of letters.`);
            else this.logger.writeLn("You have unlimited attempts to find a word containing this sequence of letters.");
            this.logger.prompt();
        });
        const exampleCommand = this.command("example");
        this.configureCommand(exampleCommand); // FIXME : this is called but not used
        exampleCommand.alias("ex").description("Provide an example based on the current sequence").argument("[sequence]", "the sequence to use").action((sequence)=>{
            if (sequence != undefined) this.wordGame.currentSequence = sequence;
            try {
                this.logger.info("Example: " + this.wordGame.getExampleForSequence());
            } catch (error) {
                this.logger.error(error);
            }
        });
        this.command("verify").description("Verify a word and a sequence").argument("<sequence>", "the sequence to use").argument("<word>", "the word to verify").action((sequence, word)=>{
            this.logger.newLine();
            const actualSequence = sequence.toUpperCase();
            this.logger.writeLn("Verifying " + word + " against " + actualSequence);
            this.wordGame.currentSequence = actualSequence;
            const result = this.wordGame.verifyGuess(word);
            switch(result){
                case (0, $1a88d18c4cbab4bd$export$bfc465b73e2e08a6).SUCCESSFUL_GUESS:
                    this.logger.writeLn("Success !");
                    break;
                case (0, $1a88d18c4cbab4bd$export$bfc465b73e2e08a6).WORD_DO_NOT_EXIST:
                    this.logger.writeLn("This word do not exist in the database.");
                    break;
                case (0, $1a88d18c4cbab4bd$export$bfc465b73e2e08a6).WORD_DO_NOT_MATCH_SEQUENCE:
                    this.logger.writeLn(`This word do not match the current sequence ('${this.wordGame.currentSequence}').`);
                    break;
                default:
                    this.logger.writeLn("Internal error");
                    console.error(`GuessResult '${result} is unknown`);
            }
            this.wordGame.reset();
            this.logger.prompt();
        });
        const setMinOccurencesCommand = this.command("set-min-occurences");
        this.configureCommand(setMinOccurencesCommand);
        setMinOccurencesCommand.alias("set-min").description("Set the minimum of occurences of the sequences searched. It will not search for sequence of letters with a number of word lesser than this value.").argument("<min-occurences>", "minimum of occurences").action((minOccurences)=>{
            this.wordGame.wordGameOptions.minOccurences = minOccurences;
            this.logger.info("Configuration modified");
        });
        const setMaxOccurencesCommand = this.command("set-max-occurences");
        this.configureCommand(setMaxOccurencesCommand);
        setMaxOccurencesCommand.alias("set-max").description("Set the maximum of occurences of the sequences searched. It will not search for sequence of letters with a number of word superior to this value.").argument("<max-occurences>", "maximum of occurences").action((maxOccurences)=>{
            this.wordGame.wordGameOptions.maxOccurences = maxOccurences;
            this.logger.info("Configuration modified");
        });
        const printConfigurationCommand = this.command("print-configuration");
        this.configureCommand(printConfigurationCommand);
        printConfigurationCommand.aliases([
            "print-conf",
            "conf"
        ]).description("Display the configuration of the game.").action(()=>{
            this.logger.newLine();
            this.logger.writeLn("Configuration:");
            this.logger.writeLn(JSON.stringify(this.wordGame.wordGameOptions));
            this.logger.prompt();
        });
        const setMaxAttemptsCommand = this.command("set-max-attempts");
        this.configureCommand(setMaxAttemptsCommand);
        setMaxAttemptsCommand.aliases([
            "attempts"
        ]).description("Set the maximum number of attempts to find a word containing the sequence of letters.").argument("<max-attempts>", "maximum of number of attempts").action((maxAttempts)=>{
            this.wordGame.wordGameOptions.maxAttempts = maxAttempts;
            this.logger.info("Configuration modified");
        });
    }
}



/*
 * Dexie.js - a minimalistic wrapper for IndexedDB
 * ===============================================
 *
 * By David Fahlander, david.fahlander@gmail.com
 *
 * Version 3.2.3, Mon Jan 23 2023
 *
 * https://dexie.org
 *
 * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/
 */ /*! *****************************************************************************
Copyright (c) Microsoft Corporation.
Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.
THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ var $16271588ada7e89d$var$__assign = function() {
    $16271588ada7e89d$var$__assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $16271588ada7e89d$var$__assign.apply(this, arguments);
};
function $16271588ada7e89d$var$__spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
var $16271588ada7e89d$var$_global = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : $parcel$global;
var $16271588ada7e89d$var$keys = Object.keys;
var $16271588ada7e89d$var$isArray = Array.isArray;
if (typeof Promise !== "undefined" && !$16271588ada7e89d$var$_global.Promise) $16271588ada7e89d$var$_global.Promise = Promise;
function $16271588ada7e89d$var$extend(obj, extension) {
    if (typeof extension !== "object") return obj;
    $16271588ada7e89d$var$keys(extension).forEach(function(key) {
        obj[key] = extension[key];
    });
    return obj;
}
var $16271588ada7e89d$var$getProto = Object.getPrototypeOf;
var $16271588ada7e89d$var$_hasOwn = {}.hasOwnProperty;
function $16271588ada7e89d$var$hasOwn(obj, prop) {
    return $16271588ada7e89d$var$_hasOwn.call(obj, prop);
}
function $16271588ada7e89d$var$props(proto, extension) {
    if (typeof extension === "function") extension = extension($16271588ada7e89d$var$getProto(proto));
    (typeof Reflect === "undefined" ? $16271588ada7e89d$var$keys : Reflect.ownKeys)(extension).forEach(function(key) {
        $16271588ada7e89d$var$setProp(proto, key, extension[key]);
    });
}
var $16271588ada7e89d$var$defineProperty = Object.defineProperty;
function $16271588ada7e89d$var$setProp(obj, prop, functionOrGetSet, options) {
    $16271588ada7e89d$var$defineProperty(obj, prop, $16271588ada7e89d$var$extend(functionOrGetSet && $16271588ada7e89d$var$hasOwn(functionOrGetSet, "get") && typeof functionOrGetSet.get === "function" ? {
        get: functionOrGetSet.get,
        set: functionOrGetSet.set,
        configurable: true
    } : {
        value: functionOrGetSet,
        configurable: true,
        writable: true
    }, options));
}
function $16271588ada7e89d$var$derive(Child) {
    return {
        from: function(Parent) {
            Child.prototype = Object.create(Parent.prototype);
            $16271588ada7e89d$var$setProp(Child.prototype, "constructor", Child);
            return {
                extend: $16271588ada7e89d$var$props.bind(null, Child.prototype)
            };
        }
    };
}
var $16271588ada7e89d$var$getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
function $16271588ada7e89d$var$getPropertyDescriptor(obj, prop) {
    var pd = $16271588ada7e89d$var$getOwnPropertyDescriptor(obj, prop);
    var proto;
    return pd || (proto = $16271588ada7e89d$var$getProto(obj)) && $16271588ada7e89d$var$getPropertyDescriptor(proto, prop);
}
var $16271588ada7e89d$var$_slice = [].slice;
function $16271588ada7e89d$var$slice(args, start, end) {
    return $16271588ada7e89d$var$_slice.call(args, start, end);
}
function $16271588ada7e89d$var$override(origFunc, overridedFactory) {
    return overridedFactory(origFunc);
}
function $16271588ada7e89d$var$assert(b) {
    if (!b) throw new Error("Assertion Failed");
}
function $16271588ada7e89d$var$asap$1(fn) {
    if ($16271588ada7e89d$var$_global.setImmediate) setImmediate(fn);
    else setTimeout(fn, 0);
}
function $16271588ada7e89d$var$arrayToObject(array, extractor) {
    return array.reduce(function(result, item, i) {
        var nameAndValue = extractor(item, i);
        if (nameAndValue) result[nameAndValue[0]] = nameAndValue[1];
        return result;
    }, {});
}
function $16271588ada7e89d$var$tryCatch(fn, onerror, args) {
    try {
        fn.apply(null, args);
    } catch (ex) {
        onerror && onerror(ex);
    }
}
function $16271588ada7e89d$var$getByKeyPath(obj, keyPath) {
    if ($16271588ada7e89d$var$hasOwn(obj, keyPath)) return obj[keyPath];
    if (!keyPath) return obj;
    if (typeof keyPath !== "string") {
        var rv = [];
        for(var i = 0, l = keyPath.length; i < l; ++i){
            var val = $16271588ada7e89d$var$getByKeyPath(obj, keyPath[i]);
            rv.push(val);
        }
        return rv;
    }
    var period = keyPath.indexOf(".");
    if (period !== -1) {
        var innerObj = obj[keyPath.substr(0, period)];
        return innerObj === undefined ? undefined : $16271588ada7e89d$var$getByKeyPath(innerObj, keyPath.substr(period + 1));
    }
    return undefined;
}
function $16271588ada7e89d$var$setByKeyPath(obj, keyPath, value) {
    if (!obj || keyPath === undefined) return;
    if ("isFrozen" in Object && Object.isFrozen(obj)) return;
    if (typeof keyPath !== "string" && "length" in keyPath) {
        $16271588ada7e89d$var$assert(typeof value !== "string" && "length" in value);
        for(var i = 0, l = keyPath.length; i < l; ++i)$16271588ada7e89d$var$setByKeyPath(obj, keyPath[i], value[i]);
    } else {
        var period = keyPath.indexOf(".");
        if (period !== -1) {
            var currentKeyPath = keyPath.substr(0, period);
            var remainingKeyPath = keyPath.substr(period + 1);
            if (remainingKeyPath === "") {
                if (value === undefined) {
                    if ($16271588ada7e89d$var$isArray(obj) && !isNaN(parseInt(currentKeyPath))) obj.splice(currentKeyPath, 1);
                    else delete obj[currentKeyPath];
                } else obj[currentKeyPath] = value;
            } else {
                var innerObj = obj[currentKeyPath];
                if (!innerObj || !$16271588ada7e89d$var$hasOwn(obj, currentKeyPath)) innerObj = obj[currentKeyPath] = {};
                $16271588ada7e89d$var$setByKeyPath(innerObj, remainingKeyPath, value);
            }
        } else if (value === undefined) {
            if ($16271588ada7e89d$var$isArray(obj) && !isNaN(parseInt(keyPath))) obj.splice(keyPath, 1);
            else delete obj[keyPath];
        } else obj[keyPath] = value;
    }
}
function $16271588ada7e89d$var$delByKeyPath(obj, keyPath) {
    if (typeof keyPath === "string") $16271588ada7e89d$var$setByKeyPath(obj, keyPath, undefined);
    else if ("length" in keyPath) [].map.call(keyPath, function(kp) {
        $16271588ada7e89d$var$setByKeyPath(obj, kp, undefined);
    });
}
function $16271588ada7e89d$var$shallowClone(obj) {
    var rv = {};
    for(var m in obj)if ($16271588ada7e89d$var$hasOwn(obj, m)) rv[m] = obj[m];
    return rv;
}
var $16271588ada7e89d$var$concat = [].concat;
function $16271588ada7e89d$var$flatten(a) {
    return $16271588ada7e89d$var$concat.apply([], a);
}
var $16271588ada7e89d$var$intrinsicTypeNames = "Boolean,String,Date,RegExp,Blob,File,FileList,FileSystemFileHandle,ArrayBuffer,DataView,Uint8ClampedArray,ImageBitmap,ImageData,Map,Set,CryptoKey".split(",").concat($16271588ada7e89d$var$flatten([
    8,
    16,
    32,
    64
].map(function(num) {
    return [
        "Int",
        "Uint",
        "Float"
    ].map(function(t) {
        return t + num + "Array";
    });
}))).filter(function(t) {
    return $16271588ada7e89d$var$_global[t];
});
var $16271588ada7e89d$var$intrinsicTypes = $16271588ada7e89d$var$intrinsicTypeNames.map(function(t) {
    return $16271588ada7e89d$var$_global[t];
});
$16271588ada7e89d$var$arrayToObject($16271588ada7e89d$var$intrinsicTypeNames, function(x) {
    return [
        x,
        true
    ];
});
var $16271588ada7e89d$var$circularRefs = null;
function $16271588ada7e89d$var$deepClone(any) {
    $16271588ada7e89d$var$circularRefs = typeof WeakMap !== "undefined" && new WeakMap();
    var rv = $16271588ada7e89d$var$innerDeepClone(any);
    $16271588ada7e89d$var$circularRefs = null;
    return rv;
}
function $16271588ada7e89d$var$innerDeepClone(any) {
    if (!any || typeof any !== "object") return any;
    var rv = $16271588ada7e89d$var$circularRefs && $16271588ada7e89d$var$circularRefs.get(any);
    if (rv) return rv;
    if ($16271588ada7e89d$var$isArray(any)) {
        rv = [];
        $16271588ada7e89d$var$circularRefs && $16271588ada7e89d$var$circularRefs.set(any, rv);
        for(var i = 0, l = any.length; i < l; ++i)rv.push($16271588ada7e89d$var$innerDeepClone(any[i]));
    } else if ($16271588ada7e89d$var$intrinsicTypes.indexOf(any.constructor) >= 0) rv = any;
    else {
        var proto = $16271588ada7e89d$var$getProto(any);
        rv = proto === Object.prototype ? {} : Object.create(proto);
        $16271588ada7e89d$var$circularRefs && $16271588ada7e89d$var$circularRefs.set(any, rv);
        for(var prop in any)if ($16271588ada7e89d$var$hasOwn(any, prop)) rv[prop] = $16271588ada7e89d$var$innerDeepClone(any[prop]);
    }
    return rv;
}
var $16271588ada7e89d$var$toString = {}.toString;
function $16271588ada7e89d$var$toStringTag(o) {
    return $16271588ada7e89d$var$toString.call(o).slice(8, -1);
}
var $16271588ada7e89d$var$iteratorSymbol = typeof Symbol !== "undefined" ? Symbol.iterator : "@@iterator";
var $16271588ada7e89d$var$getIteratorOf = typeof $16271588ada7e89d$var$iteratorSymbol === "symbol" ? function(x) {
    var i;
    return x != null && (i = x[$16271588ada7e89d$var$iteratorSymbol]) && i.apply(x);
} : function() {
    return null;
};
var $16271588ada7e89d$var$NO_CHAR_ARRAY = {};
function $16271588ada7e89d$var$getArrayOf(arrayLike) {
    var i, a, x, it;
    if (arguments.length === 1) {
        if ($16271588ada7e89d$var$isArray(arrayLike)) return arrayLike.slice();
        if (this === $16271588ada7e89d$var$NO_CHAR_ARRAY && typeof arrayLike === "string") return [
            arrayLike
        ];
        if (it = $16271588ada7e89d$var$getIteratorOf(arrayLike)) {
            a = [];
            while(x = it.next(), !x.done)a.push(x.value);
            return a;
        }
        if (arrayLike == null) return [
            arrayLike
        ];
        i = arrayLike.length;
        if (typeof i === "number") {
            a = new Array(i);
            while(i--)a[i] = arrayLike[i];
            return a;
        }
        return [
            arrayLike
        ];
    }
    i = arguments.length;
    a = new Array(i);
    while(i--)a[i] = arguments[i];
    return a;
}
var $16271588ada7e89d$var$isAsyncFunction = typeof Symbol !== "undefined" ? function(fn) {
    return fn[Symbol.toStringTag] === "AsyncFunction";
} : function() {
    return false;
};
var $16271588ada7e89d$var$debug = typeof location !== "undefined" && /^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);
function $16271588ada7e89d$var$setDebug(value, filter) {
    $16271588ada7e89d$var$debug = value;
    $16271588ada7e89d$var$libraryFilter = filter;
}
var $16271588ada7e89d$var$libraryFilter = function() {
    return true;
};
var $16271588ada7e89d$var$NEEDS_THROW_FOR_STACK = !new Error("").stack;
function $16271588ada7e89d$var$getErrorWithStack() {
    if ($16271588ada7e89d$var$NEEDS_THROW_FOR_STACK) try {
        $16271588ada7e89d$var$getErrorWithStack.arguments;
        throw new Error();
    } catch (e) {
        return e;
    }
    return new Error();
}
function $16271588ada7e89d$var$prettyStack(exception, numIgnoredFrames) {
    var stack = exception.stack;
    if (!stack) return "";
    numIgnoredFrames = numIgnoredFrames || 0;
    if (stack.indexOf(exception.name) === 0) numIgnoredFrames += (exception.name + exception.message).split("\n").length;
    return stack.split("\n").slice(numIgnoredFrames).filter($16271588ada7e89d$var$libraryFilter).map(function(frame) {
        return "\n" + frame;
    }).join("");
}
var $16271588ada7e89d$var$dexieErrorNames = [
    "Modify",
    "Bulk",
    "OpenFailed",
    "VersionChange",
    "Schema",
    "Upgrade",
    "InvalidTable",
    "MissingAPI",
    "NoSuchDatabase",
    "InvalidArgument",
    "SubTransaction",
    "Unsupported",
    "Internal",
    "DatabaseClosed",
    "PrematureCommit",
    "ForeignAwait"
];
var $16271588ada7e89d$var$idbDomErrorNames = [
    "Unknown",
    "Constraint",
    "Data",
    "TransactionInactive",
    "ReadOnly",
    "Version",
    "NotFound",
    "InvalidState",
    "InvalidAccess",
    "Abort",
    "Timeout",
    "QuotaExceeded",
    "Syntax",
    "DataClone"
];
var $16271588ada7e89d$var$errorList = $16271588ada7e89d$var$dexieErrorNames.concat($16271588ada7e89d$var$idbDomErrorNames);
var $16271588ada7e89d$var$defaultTexts = {
    VersionChanged: "Database version changed by other database connection",
    DatabaseClosed: "Database has been closed",
    Abort: "Transaction aborted",
    TransactionInactive: "Transaction has already completed or failed",
    MissingAPI: "IndexedDB API missing. Please visit https://tinyurl.com/y2uuvskb"
};
function $16271588ada7e89d$var$DexieError(name, msg) {
    this._e = $16271588ada7e89d$var$getErrorWithStack();
    this.name = name;
    this.message = msg;
}
$16271588ada7e89d$var$derive($16271588ada7e89d$var$DexieError).from(Error).extend({
    stack: {
        get: function() {
            return this._stack || (this._stack = this.name + ": " + this.message + $16271588ada7e89d$var$prettyStack(this._e, 2));
        }
    },
    toString: function() {
        return this.name + ": " + this.message;
    }
});
function $16271588ada7e89d$var$getMultiErrorMessage(msg, failures) {
    return msg + ". Errors: " + Object.keys(failures).map(function(key) {
        return failures[key].toString();
    }).filter(function(v, i, s) {
        return s.indexOf(v) === i;
    }).join("\n");
}
function $16271588ada7e89d$var$ModifyError(msg, failures, successCount, failedKeys) {
    this._e = $16271588ada7e89d$var$getErrorWithStack();
    this.failures = failures;
    this.failedKeys = failedKeys;
    this.successCount = successCount;
    this.message = $16271588ada7e89d$var$getMultiErrorMessage(msg, failures);
}
$16271588ada7e89d$var$derive($16271588ada7e89d$var$ModifyError).from($16271588ada7e89d$var$DexieError);
function $16271588ada7e89d$var$BulkError(msg, failures) {
    this._e = $16271588ada7e89d$var$getErrorWithStack();
    this.name = "BulkError";
    this.failures = Object.keys(failures).map(function(pos) {
        return failures[pos];
    });
    this.failuresByPos = failures;
    this.message = $16271588ada7e89d$var$getMultiErrorMessage(msg, failures);
}
$16271588ada7e89d$var$derive($16271588ada7e89d$var$BulkError).from($16271588ada7e89d$var$DexieError);
var $16271588ada7e89d$var$errnames = $16271588ada7e89d$var$errorList.reduce(function(obj, name) {
    return obj[name] = name + "Error", obj;
}, {});
var $16271588ada7e89d$var$BaseException = $16271588ada7e89d$var$DexieError;
var $16271588ada7e89d$var$exceptions = $16271588ada7e89d$var$errorList.reduce(function(obj, name) {
    var fullName = name + "Error";
    function DexieError(msgOrInner, inner) {
        this._e = $16271588ada7e89d$var$getErrorWithStack();
        this.name = fullName;
        if (!msgOrInner) {
            this.message = $16271588ada7e89d$var$defaultTexts[name] || fullName;
            this.inner = null;
        } else if (typeof msgOrInner === "string") {
            this.message = "" + msgOrInner + (!inner ? "" : "\n " + inner);
            this.inner = inner || null;
        } else if (typeof msgOrInner === "object") {
            this.message = msgOrInner.name + " " + msgOrInner.message;
            this.inner = msgOrInner;
        }
    }
    $16271588ada7e89d$var$derive(DexieError).from($16271588ada7e89d$var$BaseException);
    obj[name] = DexieError;
    return obj;
}, {});
$16271588ada7e89d$var$exceptions.Syntax = SyntaxError;
$16271588ada7e89d$var$exceptions.Type = TypeError;
$16271588ada7e89d$var$exceptions.Range = RangeError;
var $16271588ada7e89d$var$exceptionMap = $16271588ada7e89d$var$idbDomErrorNames.reduce(function(obj, name) {
    obj[name + "Error"] = $16271588ada7e89d$var$exceptions[name];
    return obj;
}, {});
function $16271588ada7e89d$var$mapError(domError, message) {
    if (!domError || domError instanceof $16271588ada7e89d$var$DexieError || domError instanceof TypeError || domError instanceof SyntaxError || !domError.name || !$16271588ada7e89d$var$exceptionMap[domError.name]) return domError;
    var rv = new $16271588ada7e89d$var$exceptionMap[domError.name](message || domError.message, domError);
    if ("stack" in domError) $16271588ada7e89d$var$setProp(rv, "stack", {
        get: function() {
            return this.inner.stack;
        }
    });
    return rv;
}
var $16271588ada7e89d$var$fullNameExceptions = $16271588ada7e89d$var$errorList.reduce(function(obj, name) {
    if ([
        "Syntax",
        "Type",
        "Range"
    ].indexOf(name) === -1) obj[name + "Error"] = $16271588ada7e89d$var$exceptions[name];
    return obj;
}, {});
$16271588ada7e89d$var$fullNameExceptions.ModifyError = $16271588ada7e89d$var$ModifyError;
$16271588ada7e89d$var$fullNameExceptions.DexieError = $16271588ada7e89d$var$DexieError;
$16271588ada7e89d$var$fullNameExceptions.BulkError = $16271588ada7e89d$var$BulkError;
function $16271588ada7e89d$var$nop() {}
function $16271588ada7e89d$var$mirror(val) {
    return val;
}
function $16271588ada7e89d$var$pureFunctionChain(f1, f2) {
    if (f1 == null || f1 === $16271588ada7e89d$var$mirror) return f2;
    return function(val) {
        return f2(f1(val));
    };
}
function $16271588ada7e89d$var$callBoth(on1, on2) {
    return function() {
        on1.apply(this, arguments);
        on2.apply(this, arguments);
    };
}
function $16271588ada7e89d$var$hookCreatingChain(f1, f2) {
    if (f1 === $16271588ada7e89d$var$nop) return f2;
    return function() {
        var res = f1.apply(this, arguments);
        if (res !== undefined) arguments[0] = res;
        var onsuccess = this.onsuccess, onerror = this.onerror;
        this.onsuccess = null;
        this.onerror = null;
        var res2 = f2.apply(this, arguments);
        if (onsuccess) this.onsuccess = this.onsuccess ? $16271588ada7e89d$var$callBoth(onsuccess, this.onsuccess) : onsuccess;
        if (onerror) this.onerror = this.onerror ? $16271588ada7e89d$var$callBoth(onerror, this.onerror) : onerror;
        return res2 !== undefined ? res2 : res;
    };
}
function $16271588ada7e89d$var$hookDeletingChain(f1, f2) {
    if (f1 === $16271588ada7e89d$var$nop) return f2;
    return function() {
        f1.apply(this, arguments);
        var onsuccess = this.onsuccess, onerror = this.onerror;
        this.onsuccess = this.onerror = null;
        f2.apply(this, arguments);
        if (onsuccess) this.onsuccess = this.onsuccess ? $16271588ada7e89d$var$callBoth(onsuccess, this.onsuccess) : onsuccess;
        if (onerror) this.onerror = this.onerror ? $16271588ada7e89d$var$callBoth(onerror, this.onerror) : onerror;
    };
}
function $16271588ada7e89d$var$hookUpdatingChain(f1, f2) {
    if (f1 === $16271588ada7e89d$var$nop) return f2;
    return function(modifications) {
        var res = f1.apply(this, arguments);
        $16271588ada7e89d$var$extend(modifications, res);
        var onsuccess = this.onsuccess, onerror = this.onerror;
        this.onsuccess = null;
        this.onerror = null;
        var res2 = f2.apply(this, arguments);
        if (onsuccess) this.onsuccess = this.onsuccess ? $16271588ada7e89d$var$callBoth(onsuccess, this.onsuccess) : onsuccess;
        if (onerror) this.onerror = this.onerror ? $16271588ada7e89d$var$callBoth(onerror, this.onerror) : onerror;
        return res === undefined ? res2 === undefined ? undefined : res2 : $16271588ada7e89d$var$extend(res, res2);
    };
}
function $16271588ada7e89d$var$reverseStoppableEventChain(f1, f2) {
    if (f1 === $16271588ada7e89d$var$nop) return f2;
    return function() {
        if (f2.apply(this, arguments) === false) return false;
        return f1.apply(this, arguments);
    };
}
function $16271588ada7e89d$var$promisableChain(f1, f2) {
    if (f1 === $16271588ada7e89d$var$nop) return f2;
    return function() {
        var res = f1.apply(this, arguments);
        if (res && typeof res.then === "function") {
            var thiz = this, i = arguments.length, args = new Array(i);
            while(i--)args[i] = arguments[i];
            return res.then(function() {
                return f2.apply(thiz, args);
            });
        }
        return f2.apply(this, arguments);
    };
}
var $16271588ada7e89d$var$INTERNAL = {};
var $16271588ada7e89d$var$LONG_STACKS_CLIP_LIMIT = 100, $16271588ada7e89d$var$MAX_LONG_STACKS = 20, $16271588ada7e89d$var$ZONE_ECHO_LIMIT = 100, $16271588ada7e89d$var$_a$1 = typeof Promise === "undefined" ? [] : function() {
    var globalP = Promise.resolve();
    if (typeof crypto === "undefined" || !crypto.subtle) return [
        globalP,
        $16271588ada7e89d$var$getProto(globalP),
        globalP
    ];
    var nativeP = crypto.subtle.digest("SHA-512", new Uint8Array([
        0
    ]));
    return [
        nativeP,
        $16271588ada7e89d$var$getProto(nativeP),
        globalP
    ];
}(), $16271588ada7e89d$var$resolvedNativePromise = $16271588ada7e89d$var$_a$1[0], $16271588ada7e89d$var$nativePromiseProto = $16271588ada7e89d$var$_a$1[1], $16271588ada7e89d$var$resolvedGlobalPromise = $16271588ada7e89d$var$_a$1[2], $16271588ada7e89d$var$nativePromiseThen = $16271588ada7e89d$var$nativePromiseProto && $16271588ada7e89d$var$nativePromiseProto.then;
var $16271588ada7e89d$var$NativePromise = $16271588ada7e89d$var$resolvedNativePromise && $16271588ada7e89d$var$resolvedNativePromise.constructor;
var $16271588ada7e89d$var$patchGlobalPromise = !!$16271588ada7e89d$var$resolvedGlobalPromise;
var $16271588ada7e89d$var$stack_being_generated = false;
var $16271588ada7e89d$var$schedulePhysicalTick = $16271588ada7e89d$var$resolvedGlobalPromise ? function() {
    $16271588ada7e89d$var$resolvedGlobalPromise.then($16271588ada7e89d$var$physicalTick);
} : $16271588ada7e89d$var$_global.setImmediate ? setImmediate.bind(null, $16271588ada7e89d$var$physicalTick) : $16271588ada7e89d$var$_global.MutationObserver ? function() {
    var hiddenDiv = document.createElement("div");
    new MutationObserver(function() {
        $16271588ada7e89d$var$physicalTick();
        hiddenDiv = null;
    }).observe(hiddenDiv, {
        attributes: true
    });
    hiddenDiv.setAttribute("i", "1");
} : function() {
    setTimeout($16271588ada7e89d$var$physicalTick, 0);
};
var $16271588ada7e89d$var$asap = function(callback, args) {
    $16271588ada7e89d$var$microtickQueue.push([
        callback,
        args
    ]);
    if ($16271588ada7e89d$var$needsNewPhysicalTick) {
        $16271588ada7e89d$var$schedulePhysicalTick();
        $16271588ada7e89d$var$needsNewPhysicalTick = false;
    }
};
var $16271588ada7e89d$var$isOutsideMicroTick = true, $16271588ada7e89d$var$needsNewPhysicalTick = true, $16271588ada7e89d$var$unhandledErrors = [], $16271588ada7e89d$var$rejectingErrors = [], $16271588ada7e89d$var$currentFulfiller = null, $16271588ada7e89d$var$rejectionMapper = $16271588ada7e89d$var$mirror;
var $16271588ada7e89d$var$globalPSD = {
    id: "global",
    global: true,
    ref: 0,
    unhandleds: [],
    onunhandled: $16271588ada7e89d$var$globalError,
    pgp: false,
    env: {},
    finalize: function() {
        this.unhandleds.forEach(function(uh) {
            try {
                $16271588ada7e89d$var$globalError(uh[0], uh[1]);
            } catch (e) {}
        });
    }
};
var $16271588ada7e89d$var$PSD = $16271588ada7e89d$var$globalPSD;
var $16271588ada7e89d$var$microtickQueue = [];
var $16271588ada7e89d$var$numScheduledCalls = 0;
var $16271588ada7e89d$var$tickFinalizers = [];
function $16271588ada7e89d$var$DexiePromise(fn) {
    if (typeof this !== "object") throw new TypeError("Promises must be constructed via new");
    this._listeners = [];
    this.onuncatched = $16271588ada7e89d$var$nop;
    this._lib = false;
    var psd = this._PSD = $16271588ada7e89d$var$PSD;
    if ($16271588ada7e89d$var$debug) {
        this._stackHolder = $16271588ada7e89d$var$getErrorWithStack();
        this._prev = null;
        this._numPrev = 0;
    }
    if (typeof fn !== "function") {
        if (fn !== $16271588ada7e89d$var$INTERNAL) throw new TypeError("Not a function");
        this._state = arguments[1];
        this._value = arguments[2];
        if (this._state === false) $16271588ada7e89d$var$handleRejection(this, this._value);
        return;
    }
    this._state = null;
    this._value = null;
    ++psd.ref;
    $16271588ada7e89d$var$executePromiseTask(this, fn);
}
var $16271588ada7e89d$var$thenProp = {
    get: function() {
        var psd = $16271588ada7e89d$var$PSD, microTaskId = $16271588ada7e89d$var$totalEchoes;
        function then(onFulfilled, onRejected) {
            var _this = this;
            var possibleAwait = !psd.global && (psd !== $16271588ada7e89d$var$PSD || microTaskId !== $16271588ada7e89d$var$totalEchoes);
            var cleanup = possibleAwait && !$16271588ada7e89d$var$decrementExpectedAwaits();
            var rv = new $16271588ada7e89d$var$DexiePromise(function(resolve, reject) {
                $16271588ada7e89d$var$propagateToListener(_this, new $16271588ada7e89d$var$Listener($16271588ada7e89d$var$nativeAwaitCompatibleWrap(onFulfilled, psd, possibleAwait, cleanup), $16271588ada7e89d$var$nativeAwaitCompatibleWrap(onRejected, psd, possibleAwait, cleanup), resolve, reject, psd));
            });
            $16271588ada7e89d$var$debug && $16271588ada7e89d$var$linkToPreviousPromise(rv, this);
            return rv;
        }
        then.prototype = $16271588ada7e89d$var$INTERNAL;
        return then;
    },
    set: function(value) {
        $16271588ada7e89d$var$setProp(this, "then", value && value.prototype === $16271588ada7e89d$var$INTERNAL ? $16271588ada7e89d$var$thenProp : {
            get: function() {
                return value;
            },
            set: $16271588ada7e89d$var$thenProp.set
        });
    }
};
$16271588ada7e89d$var$props($16271588ada7e89d$var$DexiePromise.prototype, {
    then: $16271588ada7e89d$var$thenProp,
    _then: function(onFulfilled, onRejected) {
        $16271588ada7e89d$var$propagateToListener(this, new $16271588ada7e89d$var$Listener(null, null, onFulfilled, onRejected, $16271588ada7e89d$var$PSD));
    },
    catch: function(onRejected) {
        if (arguments.length === 1) return this.then(null, onRejected);
        var type = arguments[0], handler = arguments[1];
        return typeof type === "function" ? this.then(null, function(err) {
            return err instanceof type ? handler(err) : $16271588ada7e89d$var$PromiseReject(err);
        }) : this.then(null, function(err) {
            return err && err.name === type ? handler(err) : $16271588ada7e89d$var$PromiseReject(err);
        });
    },
    finally: function(onFinally) {
        return this.then(function(value) {
            onFinally();
            return value;
        }, function(err) {
            onFinally();
            return $16271588ada7e89d$var$PromiseReject(err);
        });
    },
    stack: {
        get: function() {
            if (this._stack) return this._stack;
            try {
                $16271588ada7e89d$var$stack_being_generated = true;
                var stacks = $16271588ada7e89d$var$getStack(this, [], $16271588ada7e89d$var$MAX_LONG_STACKS);
                var stack = stacks.join("\nFrom previous: ");
                if (this._state !== null) this._stack = stack;
                return stack;
            } finally{
                $16271588ada7e89d$var$stack_being_generated = false;
            }
        }
    },
    timeout: function(ms, msg) {
        var _this = this;
        return ms < Infinity ? new $16271588ada7e89d$var$DexiePromise(function(resolve, reject) {
            var handle = setTimeout(function() {
                return reject(new $16271588ada7e89d$var$exceptions.Timeout(msg));
            }, ms);
            _this.then(resolve, reject).finally(clearTimeout.bind(null, handle));
        }) : this;
    }
});
if (typeof Symbol !== "undefined" && Symbol.toStringTag) $16271588ada7e89d$var$setProp($16271588ada7e89d$var$DexiePromise.prototype, Symbol.toStringTag, "Dexie.Promise");
$16271588ada7e89d$var$globalPSD.env = $16271588ada7e89d$var$snapShot();
function $16271588ada7e89d$var$Listener(onFulfilled, onRejected, resolve, reject, zone) {
    this.onFulfilled = typeof onFulfilled === "function" ? onFulfilled : null;
    this.onRejected = typeof onRejected === "function" ? onRejected : null;
    this.resolve = resolve;
    this.reject = reject;
    this.psd = zone;
}
$16271588ada7e89d$var$props($16271588ada7e89d$var$DexiePromise, {
    all: function() {
        var values = $16271588ada7e89d$var$getArrayOf.apply(null, arguments).map($16271588ada7e89d$var$onPossibleParallellAsync);
        return new $16271588ada7e89d$var$DexiePromise(function(resolve, reject) {
            if (values.length === 0) resolve([]);
            var remaining = values.length;
            values.forEach(function(a, i) {
                return $16271588ada7e89d$var$DexiePromise.resolve(a).then(function(x) {
                    values[i] = x;
                    if (!--remaining) resolve(values);
                }, reject);
            });
        });
    },
    resolve: function(value) {
        if (value instanceof $16271588ada7e89d$var$DexiePromise) return value;
        if (value && typeof value.then === "function") return new $16271588ada7e89d$var$DexiePromise(function(resolve, reject) {
            value.then(resolve, reject);
        });
        var rv = new $16271588ada7e89d$var$DexiePromise($16271588ada7e89d$var$INTERNAL, true, value);
        $16271588ada7e89d$var$linkToPreviousPromise(rv, $16271588ada7e89d$var$currentFulfiller);
        return rv;
    },
    reject: $16271588ada7e89d$var$PromiseReject,
    race: function() {
        var values = $16271588ada7e89d$var$getArrayOf.apply(null, arguments).map($16271588ada7e89d$var$onPossibleParallellAsync);
        return new $16271588ada7e89d$var$DexiePromise(function(resolve, reject) {
            values.map(function(value) {
                return $16271588ada7e89d$var$DexiePromise.resolve(value).then(resolve, reject);
            });
        });
    },
    PSD: {
        get: function() {
            return $16271588ada7e89d$var$PSD;
        },
        set: function(value) {
            return $16271588ada7e89d$var$PSD = value;
        }
    },
    totalEchoes: {
        get: function() {
            return $16271588ada7e89d$var$totalEchoes;
        }
    },
    newPSD: $16271588ada7e89d$var$newScope,
    usePSD: $16271588ada7e89d$var$usePSD,
    scheduler: {
        get: function() {
            return $16271588ada7e89d$var$asap;
        },
        set: function(value) {
            $16271588ada7e89d$var$asap = value;
        }
    },
    rejectionMapper: {
        get: function() {
            return $16271588ada7e89d$var$rejectionMapper;
        },
        set: function(value) {
            $16271588ada7e89d$var$rejectionMapper = value;
        }
    },
    follow: function(fn, zoneProps) {
        return new $16271588ada7e89d$var$DexiePromise(function(resolve, reject) {
            return $16271588ada7e89d$var$newScope(function(resolve, reject) {
                var psd = $16271588ada7e89d$var$PSD;
                psd.unhandleds = [];
                psd.onunhandled = reject;
                psd.finalize = $16271588ada7e89d$var$callBoth(function() {
                    var _this = this;
                    $16271588ada7e89d$var$run_at_end_of_this_or_next_physical_tick(function() {
                        _this.unhandleds.length === 0 ? resolve() : reject(_this.unhandleds[0]);
                    });
                }, psd.finalize);
                fn();
            }, zoneProps, resolve, reject);
        });
    }
});
if ($16271588ada7e89d$var$NativePromise) {
    if ($16271588ada7e89d$var$NativePromise.allSettled) $16271588ada7e89d$var$setProp($16271588ada7e89d$var$DexiePromise, "allSettled", function() {
        var possiblePromises = $16271588ada7e89d$var$getArrayOf.apply(null, arguments).map($16271588ada7e89d$var$onPossibleParallellAsync);
        return new $16271588ada7e89d$var$DexiePromise(function(resolve) {
            if (possiblePromises.length === 0) resolve([]);
            var remaining = possiblePromises.length;
            var results = new Array(remaining);
            possiblePromises.forEach(function(p, i) {
                return $16271588ada7e89d$var$DexiePromise.resolve(p).then(function(value) {
                    return results[i] = {
                        status: "fulfilled",
                        value: value
                    };
                }, function(reason) {
                    return results[i] = {
                        status: "rejected",
                        reason: reason
                    };
                }).then(function() {
                    return --remaining || resolve(results);
                });
            });
        });
    });
    if ($16271588ada7e89d$var$NativePromise.any && typeof AggregateError !== "undefined") $16271588ada7e89d$var$setProp($16271588ada7e89d$var$DexiePromise, "any", function() {
        var possiblePromises = $16271588ada7e89d$var$getArrayOf.apply(null, arguments).map($16271588ada7e89d$var$onPossibleParallellAsync);
        return new $16271588ada7e89d$var$DexiePromise(function(resolve, reject) {
            if (possiblePromises.length === 0) reject(new AggregateError([]));
            var remaining = possiblePromises.length;
            var failures = new Array(remaining);
            possiblePromises.forEach(function(p, i) {
                return $16271588ada7e89d$var$DexiePromise.resolve(p).then(function(value) {
                    return resolve(value);
                }, function(failure) {
                    failures[i] = failure;
                    if (!--remaining) reject(new AggregateError(failures));
                });
            });
        });
    });
}
function $16271588ada7e89d$var$executePromiseTask(promise, fn) {
    try {
        fn(function(value) {
            if (promise._state !== null) return;
            if (value === promise) throw new TypeError("A promise cannot be resolved with itself.");
            var shouldExecuteTick = promise._lib && $16271588ada7e89d$var$beginMicroTickScope();
            if (value && typeof value.then === "function") $16271588ada7e89d$var$executePromiseTask(promise, function(resolve, reject) {
                value instanceof $16271588ada7e89d$var$DexiePromise ? value._then(resolve, reject) : value.then(resolve, reject);
            });
            else {
                promise._state = true;
                promise._value = value;
                $16271588ada7e89d$var$propagateAllListeners(promise);
            }
            if (shouldExecuteTick) $16271588ada7e89d$var$endMicroTickScope();
        }, $16271588ada7e89d$var$handleRejection.bind(null, promise));
    } catch (ex) {
        $16271588ada7e89d$var$handleRejection(promise, ex);
    }
}
function $16271588ada7e89d$var$handleRejection(promise, reason) {
    $16271588ada7e89d$var$rejectingErrors.push(reason);
    if (promise._state !== null) return;
    var shouldExecuteTick = promise._lib && $16271588ada7e89d$var$beginMicroTickScope();
    reason = $16271588ada7e89d$var$rejectionMapper(reason);
    promise._state = false;
    promise._value = reason;
    $16271588ada7e89d$var$debug && reason !== null && typeof reason === "object" && !reason._promise && $16271588ada7e89d$var$tryCatch(function() {
        var origProp = $16271588ada7e89d$var$getPropertyDescriptor(reason, "stack");
        reason._promise = promise;
        $16271588ada7e89d$var$setProp(reason, "stack", {
            get: function() {
                return $16271588ada7e89d$var$stack_being_generated ? origProp && (origProp.get ? origProp.get.apply(reason) : origProp.value) : promise.stack;
            }
        });
    });
    $16271588ada7e89d$var$addPossiblyUnhandledError(promise);
    $16271588ada7e89d$var$propagateAllListeners(promise);
    if (shouldExecuteTick) $16271588ada7e89d$var$endMicroTickScope();
}
function $16271588ada7e89d$var$propagateAllListeners(promise) {
    var listeners = promise._listeners;
    promise._listeners = [];
    for(var i = 0, len = listeners.length; i < len; ++i)$16271588ada7e89d$var$propagateToListener(promise, listeners[i]);
    var psd = promise._PSD;
    --psd.ref || psd.finalize();
    if ($16271588ada7e89d$var$numScheduledCalls === 0) {
        ++$16271588ada7e89d$var$numScheduledCalls;
        $16271588ada7e89d$var$asap(function() {
            if (--$16271588ada7e89d$var$numScheduledCalls === 0) $16271588ada7e89d$var$finalizePhysicalTick();
        }, []);
    }
}
function $16271588ada7e89d$var$propagateToListener(promise, listener) {
    if (promise._state === null) {
        promise._listeners.push(listener);
        return;
    }
    var cb = promise._state ? listener.onFulfilled : listener.onRejected;
    if (cb === null) return (promise._state ? listener.resolve : listener.reject)(promise._value);
    ++listener.psd.ref;
    ++$16271588ada7e89d$var$numScheduledCalls;
    $16271588ada7e89d$var$asap($16271588ada7e89d$var$callListener, [
        cb,
        promise,
        listener
    ]);
}
function $16271588ada7e89d$var$callListener(cb, promise, listener) {
    try {
        $16271588ada7e89d$var$currentFulfiller = promise;
        var ret, value = promise._value;
        if (promise._state) ret = cb(value);
        else {
            if ($16271588ada7e89d$var$rejectingErrors.length) $16271588ada7e89d$var$rejectingErrors = [];
            ret = cb(value);
            if ($16271588ada7e89d$var$rejectingErrors.indexOf(value) === -1) $16271588ada7e89d$var$markErrorAsHandled(promise);
        }
        listener.resolve(ret);
    } catch (e) {
        listener.reject(e);
    } finally{
        $16271588ada7e89d$var$currentFulfiller = null;
        if (--$16271588ada7e89d$var$numScheduledCalls === 0) $16271588ada7e89d$var$finalizePhysicalTick();
        --listener.psd.ref || listener.psd.finalize();
    }
}
function $16271588ada7e89d$var$getStack(promise, stacks, limit) {
    if (stacks.length === limit) return stacks;
    var stack = "";
    if (promise._state === false) {
        var failure = promise._value, errorName, message;
        if (failure != null) {
            errorName = failure.name || "Error";
            message = failure.message || failure;
            stack = $16271588ada7e89d$var$prettyStack(failure, 0);
        } else {
            errorName = failure;
            message = "";
        }
        stacks.push(errorName + (message ? ": " + message : "") + stack);
    }
    if ($16271588ada7e89d$var$debug) {
        stack = $16271588ada7e89d$var$prettyStack(promise._stackHolder, 2);
        if (stack && stacks.indexOf(stack) === -1) stacks.push(stack);
        if (promise._prev) $16271588ada7e89d$var$getStack(promise._prev, stacks, limit);
    }
    return stacks;
}
function $16271588ada7e89d$var$linkToPreviousPromise(promise, prev) {
    var numPrev = prev ? prev._numPrev + 1 : 0;
    if (numPrev < $16271588ada7e89d$var$LONG_STACKS_CLIP_LIMIT) {
        promise._prev = prev;
        promise._numPrev = numPrev;
    }
}
function $16271588ada7e89d$var$physicalTick() {
    $16271588ada7e89d$var$beginMicroTickScope() && $16271588ada7e89d$var$endMicroTickScope();
}
function $16271588ada7e89d$var$beginMicroTickScope() {
    var wasRootExec = $16271588ada7e89d$var$isOutsideMicroTick;
    $16271588ada7e89d$var$isOutsideMicroTick = false;
    $16271588ada7e89d$var$needsNewPhysicalTick = false;
    return wasRootExec;
}
function $16271588ada7e89d$var$endMicroTickScope() {
    var callbacks, i, l;
    do while($16271588ada7e89d$var$microtickQueue.length > 0){
        callbacks = $16271588ada7e89d$var$microtickQueue;
        $16271588ada7e89d$var$microtickQueue = [];
        l = callbacks.length;
        for(i = 0; i < l; ++i){
            var item = callbacks[i];
            item[0].apply(null, item[1]);
        }
    }
    while ($16271588ada7e89d$var$microtickQueue.length > 0);
    $16271588ada7e89d$var$isOutsideMicroTick = true;
    $16271588ada7e89d$var$needsNewPhysicalTick = true;
}
function $16271588ada7e89d$var$finalizePhysicalTick() {
    var unhandledErrs = $16271588ada7e89d$var$unhandledErrors;
    $16271588ada7e89d$var$unhandledErrors = [];
    unhandledErrs.forEach(function(p) {
        p._PSD.onunhandled.call(null, p._value, p);
    });
    var finalizers = $16271588ada7e89d$var$tickFinalizers.slice(0);
    var i = finalizers.length;
    while(i)finalizers[--i]();
}
function $16271588ada7e89d$var$run_at_end_of_this_or_next_physical_tick(fn) {
    function finalizer() {
        fn();
        $16271588ada7e89d$var$tickFinalizers.splice($16271588ada7e89d$var$tickFinalizers.indexOf(finalizer), 1);
    }
    $16271588ada7e89d$var$tickFinalizers.push(finalizer);
    ++$16271588ada7e89d$var$numScheduledCalls;
    $16271588ada7e89d$var$asap(function() {
        if (--$16271588ada7e89d$var$numScheduledCalls === 0) $16271588ada7e89d$var$finalizePhysicalTick();
    }, []);
}
function $16271588ada7e89d$var$addPossiblyUnhandledError(promise) {
    if (!$16271588ada7e89d$var$unhandledErrors.some(function(p) {
        return p._value === promise._value;
    })) $16271588ada7e89d$var$unhandledErrors.push(promise);
}
function $16271588ada7e89d$var$markErrorAsHandled(promise) {
    var i = $16271588ada7e89d$var$unhandledErrors.length;
    while(i)if ($16271588ada7e89d$var$unhandledErrors[--i]._value === promise._value) {
        $16271588ada7e89d$var$unhandledErrors.splice(i, 1);
        return;
    }
}
function $16271588ada7e89d$var$PromiseReject(reason) {
    return new $16271588ada7e89d$var$DexiePromise($16271588ada7e89d$var$INTERNAL, false, reason);
}
function $16271588ada7e89d$var$wrap(fn, errorCatcher) {
    var psd = $16271588ada7e89d$var$PSD;
    return function() {
        var wasRootExec = $16271588ada7e89d$var$beginMicroTickScope(), outerScope = $16271588ada7e89d$var$PSD;
        try {
            $16271588ada7e89d$var$switchToZone(psd, true);
            return fn.apply(this, arguments);
        } catch (e) {
            errorCatcher && errorCatcher(e);
        } finally{
            $16271588ada7e89d$var$switchToZone(outerScope, false);
            if (wasRootExec) $16271588ada7e89d$var$endMicroTickScope();
        }
    };
}
var $16271588ada7e89d$var$task = {
    awaits: 0,
    echoes: 0,
    id: 0
};
var $16271588ada7e89d$var$taskCounter = 0;
var $16271588ada7e89d$var$zoneStack = [];
var $16271588ada7e89d$var$zoneEchoes = 0;
var $16271588ada7e89d$var$totalEchoes = 0;
var $16271588ada7e89d$var$zone_id_counter = 0;
function $16271588ada7e89d$var$newScope(fn, props, a1, a2) {
    var parent = $16271588ada7e89d$var$PSD, psd = Object.create(parent);
    psd.parent = parent;
    psd.ref = 0;
    psd.global = false;
    psd.id = ++$16271588ada7e89d$var$zone_id_counter;
    var globalEnv = $16271588ada7e89d$var$globalPSD.env;
    psd.env = $16271588ada7e89d$var$patchGlobalPromise ? {
        Promise: $16271588ada7e89d$var$DexiePromise,
        PromiseProp: {
            value: $16271588ada7e89d$var$DexiePromise,
            configurable: true,
            writable: true
        },
        all: $16271588ada7e89d$var$DexiePromise.all,
        race: $16271588ada7e89d$var$DexiePromise.race,
        allSettled: $16271588ada7e89d$var$DexiePromise.allSettled,
        any: $16271588ada7e89d$var$DexiePromise.any,
        resolve: $16271588ada7e89d$var$DexiePromise.resolve,
        reject: $16271588ada7e89d$var$DexiePromise.reject,
        nthen: $16271588ada7e89d$var$getPatchedPromiseThen(globalEnv.nthen, psd),
        gthen: $16271588ada7e89d$var$getPatchedPromiseThen(globalEnv.gthen, psd)
    } : {};
    if (props) $16271588ada7e89d$var$extend(psd, props);
    ++parent.ref;
    psd.finalize = function() {
        --this.parent.ref || this.parent.finalize();
    };
    var rv = $16271588ada7e89d$var$usePSD(psd, fn, a1, a2);
    if (psd.ref === 0) psd.finalize();
    return rv;
}
function $16271588ada7e89d$var$incrementExpectedAwaits() {
    if (!$16271588ada7e89d$var$task.id) $16271588ada7e89d$var$task.id = ++$16271588ada7e89d$var$taskCounter;
    ++$16271588ada7e89d$var$task.awaits;
    $16271588ada7e89d$var$task.echoes += $16271588ada7e89d$var$ZONE_ECHO_LIMIT;
    return $16271588ada7e89d$var$task.id;
}
function $16271588ada7e89d$var$decrementExpectedAwaits() {
    if (!$16271588ada7e89d$var$task.awaits) return false;
    if (--$16271588ada7e89d$var$task.awaits === 0) $16271588ada7e89d$var$task.id = 0;
    $16271588ada7e89d$var$task.echoes = $16271588ada7e89d$var$task.awaits * $16271588ada7e89d$var$ZONE_ECHO_LIMIT;
    return true;
}
if (("" + $16271588ada7e89d$var$nativePromiseThen).indexOf("[native code]") === -1) $16271588ada7e89d$var$incrementExpectedAwaits = $16271588ada7e89d$var$decrementExpectedAwaits = $16271588ada7e89d$var$nop;
function $16271588ada7e89d$var$onPossibleParallellAsync(possiblePromise) {
    if ($16271588ada7e89d$var$task.echoes && possiblePromise && possiblePromise.constructor === $16271588ada7e89d$var$NativePromise) {
        $16271588ada7e89d$var$incrementExpectedAwaits();
        return possiblePromise.then(function(x) {
            $16271588ada7e89d$var$decrementExpectedAwaits();
            return x;
        }, function(e) {
            $16271588ada7e89d$var$decrementExpectedAwaits();
            return $16271588ada7e89d$var$rejection(e);
        });
    }
    return possiblePromise;
}
function $16271588ada7e89d$var$zoneEnterEcho(targetZone) {
    ++$16271588ada7e89d$var$totalEchoes;
    if (!$16271588ada7e89d$var$task.echoes || --$16271588ada7e89d$var$task.echoes === 0) $16271588ada7e89d$var$task.echoes = $16271588ada7e89d$var$task.id = 0;
    $16271588ada7e89d$var$zoneStack.push($16271588ada7e89d$var$PSD);
    $16271588ada7e89d$var$switchToZone(targetZone, true);
}
function $16271588ada7e89d$var$zoneLeaveEcho() {
    var zone = $16271588ada7e89d$var$zoneStack[$16271588ada7e89d$var$zoneStack.length - 1];
    $16271588ada7e89d$var$zoneStack.pop();
    $16271588ada7e89d$var$switchToZone(zone, false);
}
function $16271588ada7e89d$var$switchToZone(targetZone, bEnteringZone) {
    var currentZone = $16271588ada7e89d$var$PSD;
    if (bEnteringZone ? $16271588ada7e89d$var$task.echoes && (!$16271588ada7e89d$var$zoneEchoes++ || targetZone !== $16271588ada7e89d$var$PSD) : $16271588ada7e89d$var$zoneEchoes && (!--$16271588ada7e89d$var$zoneEchoes || targetZone !== $16271588ada7e89d$var$PSD)) $16271588ada7e89d$var$enqueueNativeMicroTask(bEnteringZone ? $16271588ada7e89d$var$zoneEnterEcho.bind(null, targetZone) : $16271588ada7e89d$var$zoneLeaveEcho);
    if (targetZone === $16271588ada7e89d$var$PSD) return;
    $16271588ada7e89d$var$PSD = targetZone;
    if (currentZone === $16271588ada7e89d$var$globalPSD) $16271588ada7e89d$var$globalPSD.env = $16271588ada7e89d$var$snapShot();
    if ($16271588ada7e89d$var$patchGlobalPromise) {
        var GlobalPromise_1 = $16271588ada7e89d$var$globalPSD.env.Promise;
        var targetEnv = targetZone.env;
        $16271588ada7e89d$var$nativePromiseProto.then = targetEnv.nthen;
        GlobalPromise_1.prototype.then = targetEnv.gthen;
        if (currentZone.global || targetZone.global) {
            Object.defineProperty($16271588ada7e89d$var$_global, "Promise", targetEnv.PromiseProp);
            GlobalPromise_1.all = targetEnv.all;
            GlobalPromise_1.race = targetEnv.race;
            GlobalPromise_1.resolve = targetEnv.resolve;
            GlobalPromise_1.reject = targetEnv.reject;
            if (targetEnv.allSettled) GlobalPromise_1.allSettled = targetEnv.allSettled;
            if (targetEnv.any) GlobalPromise_1.any = targetEnv.any;
        }
    }
}
function $16271588ada7e89d$var$snapShot() {
    var GlobalPromise = $16271588ada7e89d$var$_global.Promise;
    return $16271588ada7e89d$var$patchGlobalPromise ? {
        Promise: GlobalPromise,
        PromiseProp: Object.getOwnPropertyDescriptor($16271588ada7e89d$var$_global, "Promise"),
        all: GlobalPromise.all,
        race: GlobalPromise.race,
        allSettled: GlobalPromise.allSettled,
        any: GlobalPromise.any,
        resolve: GlobalPromise.resolve,
        reject: GlobalPromise.reject,
        nthen: $16271588ada7e89d$var$nativePromiseProto.then,
        gthen: GlobalPromise.prototype.then
    } : {};
}
function $16271588ada7e89d$var$usePSD(psd, fn, a1, a2, a3) {
    var outerScope = $16271588ada7e89d$var$PSD;
    try {
        $16271588ada7e89d$var$switchToZone(psd, true);
        return fn(a1, a2, a3);
    } finally{
        $16271588ada7e89d$var$switchToZone(outerScope, false);
    }
}
function $16271588ada7e89d$var$enqueueNativeMicroTask(job) {
    $16271588ada7e89d$var$nativePromiseThen.call($16271588ada7e89d$var$resolvedNativePromise, job);
}
function $16271588ada7e89d$var$nativeAwaitCompatibleWrap(fn, zone, possibleAwait, cleanup) {
    return typeof fn !== "function" ? fn : function() {
        var outerZone = $16271588ada7e89d$var$PSD;
        if (possibleAwait) $16271588ada7e89d$var$incrementExpectedAwaits();
        $16271588ada7e89d$var$switchToZone(zone, true);
        try {
            return fn.apply(this, arguments);
        } finally{
            $16271588ada7e89d$var$switchToZone(outerZone, false);
            if (cleanup) $16271588ada7e89d$var$enqueueNativeMicroTask($16271588ada7e89d$var$decrementExpectedAwaits);
        }
    };
}
function $16271588ada7e89d$var$getPatchedPromiseThen(origThen, zone) {
    return function(onResolved, onRejected) {
        return origThen.call(this, $16271588ada7e89d$var$nativeAwaitCompatibleWrap(onResolved, zone), $16271588ada7e89d$var$nativeAwaitCompatibleWrap(onRejected, zone));
    };
}
var $16271588ada7e89d$var$UNHANDLEDREJECTION = "unhandledrejection";
function $16271588ada7e89d$var$globalError(err, promise) {
    var rv;
    try {
        rv = promise.onuncatched(err);
    } catch (e) {}
    if (rv !== false) try {
        var event, eventData = {
            promise: promise,
            reason: err
        };
        if ($16271588ada7e89d$var$_global.document && document.createEvent) {
            event = document.createEvent("Event");
            event.initEvent($16271588ada7e89d$var$UNHANDLEDREJECTION, true, true);
            $16271588ada7e89d$var$extend(event, eventData);
        } else if ($16271588ada7e89d$var$_global.CustomEvent) {
            event = new CustomEvent($16271588ada7e89d$var$UNHANDLEDREJECTION, {
                detail: eventData
            });
            $16271588ada7e89d$var$extend(event, eventData);
        }
        if (event && $16271588ada7e89d$var$_global.dispatchEvent) {
            dispatchEvent(event);
            if (!$16271588ada7e89d$var$_global.PromiseRejectionEvent && $16271588ada7e89d$var$_global.onunhandledrejection) try {
                $16271588ada7e89d$var$_global.onunhandledrejection(event);
            } catch (_) {}
        }
        if ($16271588ada7e89d$var$debug && event && !event.defaultPrevented) console.warn("Unhandled rejection: " + (err.stack || err));
    } catch (e) {}
}
var $16271588ada7e89d$var$rejection = $16271588ada7e89d$var$DexiePromise.reject;
function $16271588ada7e89d$var$tempTransaction(db, mode, storeNames, fn) {
    if (!db.idbdb || !db._state.openComplete && !$16271588ada7e89d$var$PSD.letThrough && !db._vip) {
        if (db._state.openComplete) return $16271588ada7e89d$var$rejection(new $16271588ada7e89d$var$exceptions.DatabaseClosed(db._state.dbOpenError));
        if (!db._state.isBeingOpened) {
            if (!db._options.autoOpen) return $16271588ada7e89d$var$rejection(new $16271588ada7e89d$var$exceptions.DatabaseClosed());
            db.open().catch($16271588ada7e89d$var$nop);
        }
        return db._state.dbReadyPromise.then(function() {
            return $16271588ada7e89d$var$tempTransaction(db, mode, storeNames, fn);
        });
    } else {
        var trans = db._createTransaction(mode, storeNames, db._dbSchema);
        try {
            trans.create();
            db._state.PR1398_maxLoop = 3;
        } catch (ex) {
            if (ex.name === $16271588ada7e89d$var$errnames.InvalidState && db.isOpen() && --db._state.PR1398_maxLoop > 0) {
                console.warn("Dexie: Need to reopen db");
                db._close();
                return db.open().then(function() {
                    return $16271588ada7e89d$var$tempTransaction(db, mode, storeNames, fn);
                });
            }
            return $16271588ada7e89d$var$rejection(ex);
        }
        return trans._promise(mode, function(resolve, reject) {
            return $16271588ada7e89d$var$newScope(function() {
                $16271588ada7e89d$var$PSD.trans = trans;
                return fn(resolve, reject, trans);
            });
        }).then(function(result) {
            return trans._completion.then(function() {
                return result;
            });
        });
    }
}
var $16271588ada7e89d$var$DEXIE_VERSION = "3.2.3";
var $16271588ada7e89d$var$maxString = String.fromCharCode(65535);
var $16271588ada7e89d$var$minKey = -Infinity;
var $16271588ada7e89d$var$INVALID_KEY_ARGUMENT = "Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.";
var $16271588ada7e89d$var$STRING_EXPECTED = "String expected.";
var $16271588ada7e89d$var$connections = [];
var $16271588ada7e89d$var$isIEOrEdge = typeof navigator !== "undefined" && /(MSIE|Trident|Edge)/.test(navigator.userAgent);
var $16271588ada7e89d$var$hasIEDeleteObjectStoreBug = $16271588ada7e89d$var$isIEOrEdge;
var $16271588ada7e89d$var$hangsOnDeleteLargeKeyRange = $16271588ada7e89d$var$isIEOrEdge;
var $16271588ada7e89d$var$dexieStackFrameFilter = function(frame) {
    return !/(dexie\.js|dexie\.min\.js)/.test(frame);
};
var $16271588ada7e89d$var$DBNAMES_DB = "__dbnames";
var $16271588ada7e89d$var$READONLY = "readonly";
var $16271588ada7e89d$var$READWRITE = "readwrite";
function $16271588ada7e89d$var$combine(filter1, filter2) {
    return filter1 ? filter2 ? function() {
        return filter1.apply(this, arguments) && filter2.apply(this, arguments);
    } : filter1 : filter2;
}
var $16271588ada7e89d$var$AnyRange = {
    type: 3,
    lower: -Infinity,
    lowerOpen: false,
    upper: [
        []
    ],
    upperOpen: false
};
function $16271588ada7e89d$var$workaroundForUndefinedPrimKey(keyPath) {
    return typeof keyPath === "string" && !/\./.test(keyPath) ? function(obj) {
        if (obj[keyPath] === undefined && keyPath in obj) {
            obj = $16271588ada7e89d$var$deepClone(obj);
            delete obj[keyPath];
        }
        return obj;
    } : function(obj) {
        return obj;
    };
}
var $16271588ada7e89d$var$Table = function() {
    function Table() {}
    Table.prototype._trans = function(mode, fn, writeLocked) {
        var trans = this._tx || $16271588ada7e89d$var$PSD.trans;
        var tableName = this.name;
        function checkTableInTransaction(resolve, reject, trans) {
            if (!trans.schema[tableName]) throw new $16271588ada7e89d$var$exceptions.NotFound("Table " + tableName + " not part of transaction");
            return fn(trans.idbtrans, trans);
        }
        var wasRootExec = $16271588ada7e89d$var$beginMicroTickScope();
        try {
            return trans && trans.db === this.db ? trans === $16271588ada7e89d$var$PSD.trans ? trans._promise(mode, checkTableInTransaction, writeLocked) : $16271588ada7e89d$var$newScope(function() {
                return trans._promise(mode, checkTableInTransaction, writeLocked);
            }, {
                trans: trans,
                transless: $16271588ada7e89d$var$PSD.transless || $16271588ada7e89d$var$PSD
            }) : $16271588ada7e89d$var$tempTransaction(this.db, mode, [
                this.name
            ], checkTableInTransaction);
        } finally{
            if (wasRootExec) $16271588ada7e89d$var$endMicroTickScope();
        }
    };
    Table.prototype.get = function(keyOrCrit, cb) {
        var _this = this;
        if (keyOrCrit && keyOrCrit.constructor === Object) return this.where(keyOrCrit).first(cb);
        return this._trans("readonly", function(trans) {
            return _this.core.get({
                trans: trans,
                key: keyOrCrit
            }).then(function(res) {
                return _this.hook.reading.fire(res);
            });
        }).then(cb);
    };
    Table.prototype.where = function(indexOrCrit) {
        if (typeof indexOrCrit === "string") return new this.db.WhereClause(this, indexOrCrit);
        if ($16271588ada7e89d$var$isArray(indexOrCrit)) return new this.db.WhereClause(this, "[" + indexOrCrit.join("+") + "]");
        var keyPaths = $16271588ada7e89d$var$keys(indexOrCrit);
        if (keyPaths.length === 1) return this.where(keyPaths[0]).equals(indexOrCrit[keyPaths[0]]);
        var compoundIndex = this.schema.indexes.concat(this.schema.primKey).filter(function(ix) {
            return ix.compound && keyPaths.every(function(keyPath) {
                return ix.keyPath.indexOf(keyPath) >= 0;
            }) && ix.keyPath.every(function(keyPath) {
                return keyPaths.indexOf(keyPath) >= 0;
            });
        })[0];
        if (compoundIndex && this.db._maxKey !== $16271588ada7e89d$var$maxString) return this.where(compoundIndex.name).equals(compoundIndex.keyPath.map(function(kp) {
            return indexOrCrit[kp];
        }));
        if (!compoundIndex && $16271588ada7e89d$var$debug) console.warn("The query " + JSON.stringify(indexOrCrit) + " on " + this.name + " would benefit of a " + ("compound index [" + keyPaths.join("+") + "]"));
        var idxByName = this.schema.idxByName;
        var idb = this.db._deps.indexedDB;
        function equals(a, b) {
            try {
                return idb.cmp(a, b) === 0;
            } catch (e) {
                return false;
            }
        }
        var _a = keyPaths.reduce(function(_a, keyPath) {
            var prevIndex = _a[0], prevFilterFn = _a[1];
            var index = idxByName[keyPath];
            var value = indexOrCrit[keyPath];
            return [
                prevIndex || index,
                prevIndex || !index ? $16271588ada7e89d$var$combine(prevFilterFn, index && index.multi ? function(x) {
                    var prop = $16271588ada7e89d$var$getByKeyPath(x, keyPath);
                    return $16271588ada7e89d$var$isArray(prop) && prop.some(function(item) {
                        return equals(value, item);
                    });
                } : function(x) {
                    return equals(value, $16271588ada7e89d$var$getByKeyPath(x, keyPath));
                }) : prevFilterFn
            ];
        }, [
            null,
            null
        ]), idx = _a[0], filterFunction = _a[1];
        return idx ? this.where(idx.name).equals(indexOrCrit[idx.keyPath]).filter(filterFunction) : compoundIndex ? this.filter(filterFunction) : this.where(keyPaths).equals("");
    };
    Table.prototype.filter = function(filterFunction) {
        return this.toCollection().and(filterFunction);
    };
    Table.prototype.count = function(thenShortcut) {
        return this.toCollection().count(thenShortcut);
    };
    Table.prototype.offset = function(offset) {
        return this.toCollection().offset(offset);
    };
    Table.prototype.limit = function(numRows) {
        return this.toCollection().limit(numRows);
    };
    Table.prototype.each = function(callback) {
        return this.toCollection().each(callback);
    };
    Table.prototype.toArray = function(thenShortcut) {
        return this.toCollection().toArray(thenShortcut);
    };
    Table.prototype.toCollection = function() {
        return new this.db.Collection(new this.db.WhereClause(this));
    };
    Table.prototype.orderBy = function(index) {
        return new this.db.Collection(new this.db.WhereClause(this, $16271588ada7e89d$var$isArray(index) ? "[" + index.join("+") + "]" : index));
    };
    Table.prototype.reverse = function() {
        return this.toCollection().reverse();
    };
    Table.prototype.mapToClass = function(constructor) {
        this.schema.mappedClass = constructor;
        var readHook = function(obj) {
            if (!obj) return obj;
            var res = Object.create(constructor.prototype);
            for(var m in obj)if ($16271588ada7e89d$var$hasOwn(obj, m)) try {
                res[m] = obj[m];
            } catch (_) {}
            return res;
        };
        if (this.schema.readHook) this.hook.reading.unsubscribe(this.schema.readHook);
        this.schema.readHook = readHook;
        this.hook("reading", readHook);
        return constructor;
    };
    Table.prototype.defineClass = function() {
        function Class(content) {
            $16271588ada7e89d$var$extend(this, content);
        }
        return this.mapToClass(Class);
    };
    Table.prototype.add = function(obj, key) {
        var _this = this;
        var _a = this.schema.primKey, auto = _a.auto, keyPath = _a.keyPath;
        var objToAdd = obj;
        if (keyPath && auto) objToAdd = $16271588ada7e89d$var$workaroundForUndefinedPrimKey(keyPath)(obj);
        return this._trans("readwrite", function(trans) {
            return _this.core.mutate({
                trans: trans,
                type: "add",
                keys: key != null ? [
                    key
                ] : null,
                values: [
                    objToAdd
                ]
            });
        }).then(function(res) {
            return res.numFailures ? $16271588ada7e89d$var$DexiePromise.reject(res.failures[0]) : res.lastResult;
        }).then(function(lastResult) {
            if (keyPath) try {
                $16271588ada7e89d$var$setByKeyPath(obj, keyPath, lastResult);
            } catch (_) {}
            return lastResult;
        });
    };
    Table.prototype.update = function(keyOrObject, modifications) {
        if (typeof keyOrObject === "object" && !$16271588ada7e89d$var$isArray(keyOrObject)) {
            var key = $16271588ada7e89d$var$getByKeyPath(keyOrObject, this.schema.primKey.keyPath);
            if (key === undefined) return $16271588ada7e89d$var$rejection(new $16271588ada7e89d$var$exceptions.InvalidArgument("Given object does not contain its primary key"));
            try {
                if (typeof modifications !== "function") $16271588ada7e89d$var$keys(modifications).forEach(function(keyPath) {
                    $16271588ada7e89d$var$setByKeyPath(keyOrObject, keyPath, modifications[keyPath]);
                });
                else modifications(keyOrObject, {
                    value: keyOrObject,
                    primKey: key
                });
            } catch (_a) {}
            return this.where(":id").equals(key).modify(modifications);
        } else return this.where(":id").equals(keyOrObject).modify(modifications);
    };
    Table.prototype.put = function(obj, key) {
        var _this = this;
        var _a = this.schema.primKey, auto = _a.auto, keyPath = _a.keyPath;
        var objToAdd = obj;
        if (keyPath && auto) objToAdd = $16271588ada7e89d$var$workaroundForUndefinedPrimKey(keyPath)(obj);
        return this._trans("readwrite", function(trans) {
            return _this.core.mutate({
                trans: trans,
                type: "put",
                values: [
                    objToAdd
                ],
                keys: key != null ? [
                    key
                ] : null
            });
        }).then(function(res) {
            return res.numFailures ? $16271588ada7e89d$var$DexiePromise.reject(res.failures[0]) : res.lastResult;
        }).then(function(lastResult) {
            if (keyPath) try {
                $16271588ada7e89d$var$setByKeyPath(obj, keyPath, lastResult);
            } catch (_) {}
            return lastResult;
        });
    };
    Table.prototype.delete = function(key) {
        var _this = this;
        return this._trans("readwrite", function(trans) {
            return _this.core.mutate({
                trans: trans,
                type: "delete",
                keys: [
                    key
                ]
            });
        }).then(function(res) {
            return res.numFailures ? $16271588ada7e89d$var$DexiePromise.reject(res.failures[0]) : undefined;
        });
    };
    Table.prototype.clear = function() {
        var _this = this;
        return this._trans("readwrite", function(trans) {
            return _this.core.mutate({
                trans: trans,
                type: "deleteRange",
                range: $16271588ada7e89d$var$AnyRange
            });
        }).then(function(res) {
            return res.numFailures ? $16271588ada7e89d$var$DexiePromise.reject(res.failures[0]) : undefined;
        });
    };
    Table.prototype.bulkGet = function(keys) {
        var _this = this;
        return this._trans("readonly", function(trans) {
            return _this.core.getMany({
                keys: keys,
                trans: trans
            }).then(function(result) {
                return result.map(function(res) {
                    return _this.hook.reading.fire(res);
                });
            });
        });
    };
    Table.prototype.bulkAdd = function(objects, keysOrOptions, options) {
        var _this = this;
        var keys = Array.isArray(keysOrOptions) ? keysOrOptions : undefined;
        options = options || (keys ? undefined : keysOrOptions);
        var wantResults = options ? options.allKeys : undefined;
        return this._trans("readwrite", function(trans) {
            var _a = _this.schema.primKey, auto = _a.auto, keyPath = _a.keyPath;
            if (keyPath && keys) throw new $16271588ada7e89d$var$exceptions.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");
            if (keys && keys.length !== objects.length) throw new $16271588ada7e89d$var$exceptions.InvalidArgument("Arguments objects and keys must have the same length");
            var numObjects = objects.length;
            var objectsToAdd = keyPath && auto ? objects.map($16271588ada7e89d$var$workaroundForUndefinedPrimKey(keyPath)) : objects;
            return _this.core.mutate({
                trans: trans,
                type: "add",
                keys: keys,
                values: objectsToAdd,
                wantResults: wantResults
            }).then(function(_a) {
                var numFailures = _a.numFailures, results = _a.results, lastResult = _a.lastResult, failures = _a.failures;
                var result = wantResults ? results : lastResult;
                if (numFailures === 0) return result;
                throw new $16271588ada7e89d$var$BulkError(_this.name + ".bulkAdd(): " + numFailures + " of " + numObjects + " operations failed", failures);
            });
        });
    };
    Table.prototype.bulkPut = function(objects, keysOrOptions, options) {
        var _this = this;
        var keys = Array.isArray(keysOrOptions) ? keysOrOptions : undefined;
        options = options || (keys ? undefined : keysOrOptions);
        var wantResults = options ? options.allKeys : undefined;
        return this._trans("readwrite", function(trans) {
            var _a = _this.schema.primKey, auto = _a.auto, keyPath = _a.keyPath;
            if (keyPath && keys) throw new $16271588ada7e89d$var$exceptions.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");
            if (keys && keys.length !== objects.length) throw new $16271588ada7e89d$var$exceptions.InvalidArgument("Arguments objects and keys must have the same length");
            var numObjects = objects.length;
            var objectsToPut = keyPath && auto ? objects.map($16271588ada7e89d$var$workaroundForUndefinedPrimKey(keyPath)) : objects;
            return _this.core.mutate({
                trans: trans,
                type: "put",
                keys: keys,
                values: objectsToPut,
                wantResults: wantResults
            }).then(function(_a) {
                var numFailures = _a.numFailures, results = _a.results, lastResult = _a.lastResult, failures = _a.failures;
                var result = wantResults ? results : lastResult;
                if (numFailures === 0) return result;
                throw new $16271588ada7e89d$var$BulkError(_this.name + ".bulkPut(): " + numFailures + " of " + numObjects + " operations failed", failures);
            });
        });
    };
    Table.prototype.bulkDelete = function(keys) {
        var _this = this;
        var numKeys = keys.length;
        return this._trans("readwrite", function(trans) {
            return _this.core.mutate({
                trans: trans,
                type: "delete",
                keys: keys
            });
        }).then(function(_a) {
            var numFailures = _a.numFailures, lastResult = _a.lastResult, failures = _a.failures;
            if (numFailures === 0) return lastResult;
            throw new $16271588ada7e89d$var$BulkError(_this.name + ".bulkDelete(): " + numFailures + " of " + numKeys + " operations failed", failures);
        });
    };
    return Table;
}();
function $16271588ada7e89d$var$Events(ctx) {
    var evs = {};
    var rv = function(eventName, subscriber) {
        if (subscriber) {
            var i = arguments.length, args = new Array(i - 1);
            while(--i)args[i - 1] = arguments[i];
            evs[eventName].subscribe.apply(null, args);
            return ctx;
        } else if (typeof eventName === "string") return evs[eventName];
    };
    rv.addEventType = add;
    for(var i = 1, l = arguments.length; i < l; ++i)add(arguments[i]);
    return rv;
    function add(eventName, chainFunction, defaultFunction) {
        if (typeof eventName === "object") return addConfiguredEvents(eventName);
        if (!chainFunction) chainFunction = $16271588ada7e89d$var$reverseStoppableEventChain;
        if (!defaultFunction) defaultFunction = $16271588ada7e89d$var$nop;
        var context = {
            subscribers: [],
            fire: defaultFunction,
            subscribe: function(cb) {
                if (context.subscribers.indexOf(cb) === -1) {
                    context.subscribers.push(cb);
                    context.fire = chainFunction(context.fire, cb);
                }
            },
            unsubscribe: function(cb) {
                context.subscribers = context.subscribers.filter(function(fn) {
                    return fn !== cb;
                });
                context.fire = context.subscribers.reduce(chainFunction, defaultFunction);
            }
        };
        evs[eventName] = rv[eventName] = context;
        return context;
    }
    function addConfiguredEvents(cfg) {
        $16271588ada7e89d$var$keys(cfg).forEach(function(eventName) {
            var args = cfg[eventName];
            if ($16271588ada7e89d$var$isArray(args)) add(eventName, cfg[eventName][0], cfg[eventName][1]);
            else if (args === "asap") var context = add(eventName, $16271588ada7e89d$var$mirror, function fire() {
                var i = arguments.length, args = new Array(i);
                while(i--)args[i] = arguments[i];
                context.subscribers.forEach(function(fn) {
                    $16271588ada7e89d$var$asap$1(function fireEvent() {
                        fn.apply(null, args);
                    });
                });
            });
            else throw new $16271588ada7e89d$var$exceptions.InvalidArgument("Invalid event config");
        });
    }
}
function $16271588ada7e89d$var$makeClassConstructor(prototype, constructor) {
    $16271588ada7e89d$var$derive(constructor).from({
        prototype: prototype
    });
    return constructor;
}
function $16271588ada7e89d$var$createTableConstructor(db) {
    return $16271588ada7e89d$var$makeClassConstructor($16271588ada7e89d$var$Table.prototype, function Table(name, tableSchema, trans) {
        this.db = db;
        this._tx = trans;
        this.name = name;
        this.schema = tableSchema;
        this.hook = db._allTables[name] ? db._allTables[name].hook : $16271588ada7e89d$var$Events(null, {
            "creating": [
                $16271588ada7e89d$var$hookCreatingChain,
                $16271588ada7e89d$var$nop
            ],
            "reading": [
                $16271588ada7e89d$var$pureFunctionChain,
                $16271588ada7e89d$var$mirror
            ],
            "updating": [
                $16271588ada7e89d$var$hookUpdatingChain,
                $16271588ada7e89d$var$nop
            ],
            "deleting": [
                $16271588ada7e89d$var$hookDeletingChain,
                $16271588ada7e89d$var$nop
            ]
        });
    });
}
function $16271588ada7e89d$var$isPlainKeyRange(ctx, ignoreLimitFilter) {
    return !(ctx.filter || ctx.algorithm || ctx.or) && (ignoreLimitFilter ? ctx.justLimit : !ctx.replayFilter);
}
function $16271588ada7e89d$var$addFilter(ctx, fn) {
    ctx.filter = $16271588ada7e89d$var$combine(ctx.filter, fn);
}
function $16271588ada7e89d$var$addReplayFilter(ctx, factory, isLimitFilter) {
    var curr = ctx.replayFilter;
    ctx.replayFilter = curr ? function() {
        return $16271588ada7e89d$var$combine(curr(), factory());
    } : factory;
    ctx.justLimit = isLimitFilter && !curr;
}
function $16271588ada7e89d$var$addMatchFilter(ctx, fn) {
    ctx.isMatch = $16271588ada7e89d$var$combine(ctx.isMatch, fn);
}
function $16271588ada7e89d$var$getIndexOrStore(ctx, coreSchema) {
    if (ctx.isPrimKey) return coreSchema.primaryKey;
    var index = coreSchema.getIndexByKeyPath(ctx.index);
    if (!index) throw new $16271588ada7e89d$var$exceptions.Schema("KeyPath " + ctx.index + " on object store " + coreSchema.name + " is not indexed");
    return index;
}
function $16271588ada7e89d$var$openCursor(ctx, coreTable, trans) {
    var index = $16271588ada7e89d$var$getIndexOrStore(ctx, coreTable.schema);
    return coreTable.openCursor({
        trans: trans,
        values: !ctx.keysOnly,
        reverse: ctx.dir === "prev",
        unique: !!ctx.unique,
        query: {
            index: index,
            range: ctx.range
        }
    });
}
function $16271588ada7e89d$var$iter(ctx, fn, coreTrans, coreTable) {
    var filter = ctx.replayFilter ? $16271588ada7e89d$var$combine(ctx.filter, ctx.replayFilter()) : ctx.filter;
    if (!ctx.or) return $16271588ada7e89d$var$iterate($16271588ada7e89d$var$openCursor(ctx, coreTable, coreTrans), $16271588ada7e89d$var$combine(ctx.algorithm, filter), fn, !ctx.keysOnly && ctx.valueMapper);
    else {
        var set_1 = {};
        var union = function(item, cursor, advance) {
            if (!filter || filter(cursor, advance, function(result) {
                return cursor.stop(result);
            }, function(err) {
                return cursor.fail(err);
            })) {
                var primaryKey = cursor.primaryKey;
                var key = "" + primaryKey;
                if (key === "[object ArrayBuffer]") key = "" + new Uint8Array(primaryKey);
                if (!$16271588ada7e89d$var$hasOwn(set_1, key)) {
                    set_1[key] = true;
                    fn(item, cursor, advance);
                }
            }
        };
        return Promise.all([
            ctx.or._iterate(union, coreTrans),
            $16271588ada7e89d$var$iterate($16271588ada7e89d$var$openCursor(ctx, coreTable, coreTrans), ctx.algorithm, union, !ctx.keysOnly && ctx.valueMapper)
        ]);
    }
}
function $16271588ada7e89d$var$iterate(cursorPromise, filter, fn, valueMapper) {
    var mappedFn = valueMapper ? function(x, c, a) {
        return fn(valueMapper(x), c, a);
    } : fn;
    var wrappedFn = $16271588ada7e89d$var$wrap(mappedFn);
    return cursorPromise.then(function(cursor) {
        if (cursor) return cursor.start(function() {
            var c = function() {
                return cursor.continue();
            };
            if (!filter || filter(cursor, function(advancer) {
                return c = advancer;
            }, function(val) {
                cursor.stop(val);
                c = $16271588ada7e89d$var$nop;
            }, function(e) {
                cursor.fail(e);
                c = $16271588ada7e89d$var$nop;
            })) wrappedFn(cursor.value, cursor, function(advancer) {
                return c = advancer;
            });
            c();
        });
    });
}
function $16271588ada7e89d$var$cmp(a, b) {
    try {
        var ta = $16271588ada7e89d$var$type(a);
        var tb = $16271588ada7e89d$var$type(b);
        if (ta !== tb) {
            if (ta === "Array") return 1;
            if (tb === "Array") return -1;
            if (ta === "binary") return 1;
            if (tb === "binary") return -1;
            if (ta === "string") return 1;
            if (tb === "string") return -1;
            if (ta === "Date") return 1;
            if (tb !== "Date") return NaN;
            return -1;
        }
        switch(ta){
            case "number":
            case "Date":
            case "string":
                return a > b ? 1 : a < b ? -1 : 0;
            case "binary":
                return $16271588ada7e89d$var$compareUint8Arrays($16271588ada7e89d$var$getUint8Array(a), $16271588ada7e89d$var$getUint8Array(b));
            case "Array":
                return $16271588ada7e89d$var$compareArrays(a, b);
        }
    } catch (_a) {}
    return NaN;
}
function $16271588ada7e89d$var$compareArrays(a, b) {
    var al = a.length;
    var bl = b.length;
    var l = al < bl ? al : bl;
    for(var i = 0; i < l; ++i){
        var res = $16271588ada7e89d$var$cmp(a[i], b[i]);
        if (res !== 0) return res;
    }
    return al === bl ? 0 : al < bl ? -1 : 1;
}
function $16271588ada7e89d$var$compareUint8Arrays(a, b) {
    var al = a.length;
    var bl = b.length;
    var l = al < bl ? al : bl;
    for(var i = 0; i < l; ++i){
        if (a[i] !== b[i]) return a[i] < b[i] ? -1 : 1;
    }
    return al === bl ? 0 : al < bl ? -1 : 1;
}
function $16271588ada7e89d$var$type(x) {
    var t = typeof x;
    if (t !== "object") return t;
    if (ArrayBuffer.isView(x)) return "binary";
    var tsTag = $16271588ada7e89d$var$toStringTag(x);
    return tsTag === "ArrayBuffer" ? "binary" : tsTag;
}
function $16271588ada7e89d$var$getUint8Array(a) {
    if (a instanceof Uint8Array) return a;
    if (ArrayBuffer.isView(a)) return new Uint8Array(a.buffer, a.byteOffset, a.byteLength);
    return new Uint8Array(a);
}
var $16271588ada7e89d$var$Collection = function() {
    function Collection() {}
    Collection.prototype._read = function(fn, cb) {
        var ctx = this._ctx;
        return ctx.error ? ctx.table._trans(null, $16271588ada7e89d$var$rejection.bind(null, ctx.error)) : ctx.table._trans("readonly", fn).then(cb);
    };
    Collection.prototype._write = function(fn) {
        var ctx = this._ctx;
        return ctx.error ? ctx.table._trans(null, $16271588ada7e89d$var$rejection.bind(null, ctx.error)) : ctx.table._trans("readwrite", fn, "locked");
    };
    Collection.prototype._addAlgorithm = function(fn) {
        var ctx = this._ctx;
        ctx.algorithm = $16271588ada7e89d$var$combine(ctx.algorithm, fn);
    };
    Collection.prototype._iterate = function(fn, coreTrans) {
        return $16271588ada7e89d$var$iter(this._ctx, fn, coreTrans, this._ctx.table.core);
    };
    Collection.prototype.clone = function(props) {
        var rv = Object.create(this.constructor.prototype), ctx = Object.create(this._ctx);
        if (props) $16271588ada7e89d$var$extend(ctx, props);
        rv._ctx = ctx;
        return rv;
    };
    Collection.prototype.raw = function() {
        this._ctx.valueMapper = null;
        return this;
    };
    Collection.prototype.each = function(fn) {
        var ctx = this._ctx;
        return this._read(function(trans) {
            return $16271588ada7e89d$var$iter(ctx, fn, trans, ctx.table.core);
        });
    };
    Collection.prototype.count = function(cb) {
        var _this = this;
        return this._read(function(trans) {
            var ctx = _this._ctx;
            var coreTable = ctx.table.core;
            if ($16271588ada7e89d$var$isPlainKeyRange(ctx, true)) return coreTable.count({
                trans: trans,
                query: {
                    index: $16271588ada7e89d$var$getIndexOrStore(ctx, coreTable.schema),
                    range: ctx.range
                }
            }).then(function(count) {
                return Math.min(count, ctx.limit);
            });
            else {
                var count = 0;
                return $16271588ada7e89d$var$iter(ctx, function() {
                    ++count;
                    return false;
                }, trans, coreTable).then(function() {
                    return count;
                });
            }
        }).then(cb);
    };
    Collection.prototype.sortBy = function(keyPath, cb) {
        var parts = keyPath.split(".").reverse(), lastPart = parts[0], lastIndex = parts.length - 1;
        function getval(obj, i) {
            if (i) return getval(obj[parts[i]], i - 1);
            return obj[lastPart];
        }
        var order = this._ctx.dir === "next" ? 1 : -1;
        function sorter(a, b) {
            var aVal = getval(a, lastIndex), bVal = getval(b, lastIndex);
            return aVal < bVal ? -order : aVal > bVal ? order : 0;
        }
        return this.toArray(function(a) {
            return a.sort(sorter);
        }).then(cb);
    };
    Collection.prototype.toArray = function(cb) {
        var _this = this;
        return this._read(function(trans) {
            var ctx = _this._ctx;
            if (ctx.dir === "next" && $16271588ada7e89d$var$isPlainKeyRange(ctx, true) && ctx.limit > 0) {
                var valueMapper_1 = ctx.valueMapper;
                var index = $16271588ada7e89d$var$getIndexOrStore(ctx, ctx.table.core.schema);
                return ctx.table.core.query({
                    trans: trans,
                    limit: ctx.limit,
                    values: true,
                    query: {
                        index: index,
                        range: ctx.range
                    }
                }).then(function(_a) {
                    var result = _a.result;
                    return valueMapper_1 ? result.map(valueMapper_1) : result;
                });
            } else {
                var a_1 = [];
                return $16271588ada7e89d$var$iter(ctx, function(item) {
                    return a_1.push(item);
                }, trans, ctx.table.core).then(function() {
                    return a_1;
                });
            }
        }, cb);
    };
    Collection.prototype.offset = function(offset) {
        var ctx = this._ctx;
        if (offset <= 0) return this;
        ctx.offset += offset;
        if ($16271588ada7e89d$var$isPlainKeyRange(ctx)) $16271588ada7e89d$var$addReplayFilter(ctx, function() {
            var offsetLeft = offset;
            return function(cursor, advance) {
                if (offsetLeft === 0) return true;
                if (offsetLeft === 1) {
                    --offsetLeft;
                    return false;
                }
                advance(function() {
                    cursor.advance(offsetLeft);
                    offsetLeft = 0;
                });
                return false;
            };
        });
        else $16271588ada7e89d$var$addReplayFilter(ctx, function() {
            var offsetLeft = offset;
            return function() {
                return --offsetLeft < 0;
            };
        });
        return this;
    };
    Collection.prototype.limit = function(numRows) {
        this._ctx.limit = Math.min(this._ctx.limit, numRows);
        $16271588ada7e89d$var$addReplayFilter(this._ctx, function() {
            var rowsLeft = numRows;
            return function(cursor, advance, resolve) {
                if (--rowsLeft <= 0) advance(resolve);
                return rowsLeft >= 0;
            };
        }, true);
        return this;
    };
    Collection.prototype.until = function(filterFunction, bIncludeStopEntry) {
        $16271588ada7e89d$var$addFilter(this._ctx, function(cursor, advance, resolve) {
            if (filterFunction(cursor.value)) {
                advance(resolve);
                return bIncludeStopEntry;
            } else return true;
        });
        return this;
    };
    Collection.prototype.first = function(cb) {
        return this.limit(1).toArray(function(a) {
            return a[0];
        }).then(cb);
    };
    Collection.prototype.last = function(cb) {
        return this.reverse().first(cb);
    };
    Collection.prototype.filter = function(filterFunction) {
        $16271588ada7e89d$var$addFilter(this._ctx, function(cursor) {
            return filterFunction(cursor.value);
        });
        $16271588ada7e89d$var$addMatchFilter(this._ctx, filterFunction);
        return this;
    };
    Collection.prototype.and = function(filter) {
        return this.filter(filter);
    };
    Collection.prototype.or = function(indexName) {
        return new this.db.WhereClause(this._ctx.table, indexName, this);
    };
    Collection.prototype.reverse = function() {
        this._ctx.dir = this._ctx.dir === "prev" ? "next" : "prev";
        if (this._ondirectionchange) this._ondirectionchange(this._ctx.dir);
        return this;
    };
    Collection.prototype.desc = function() {
        return this.reverse();
    };
    Collection.prototype.eachKey = function(cb) {
        var ctx = this._ctx;
        ctx.keysOnly = !ctx.isMatch;
        return this.each(function(val, cursor) {
            cb(cursor.key, cursor);
        });
    };
    Collection.prototype.eachUniqueKey = function(cb) {
        this._ctx.unique = "unique";
        return this.eachKey(cb);
    };
    Collection.prototype.eachPrimaryKey = function(cb) {
        var ctx = this._ctx;
        ctx.keysOnly = !ctx.isMatch;
        return this.each(function(val, cursor) {
            cb(cursor.primaryKey, cursor);
        });
    };
    Collection.prototype.keys = function(cb) {
        var ctx = this._ctx;
        ctx.keysOnly = !ctx.isMatch;
        var a = [];
        return this.each(function(item, cursor) {
            a.push(cursor.key);
        }).then(function() {
            return a;
        }).then(cb);
    };
    Collection.prototype.primaryKeys = function(cb) {
        var ctx = this._ctx;
        if (ctx.dir === "next" && $16271588ada7e89d$var$isPlainKeyRange(ctx, true) && ctx.limit > 0) return this._read(function(trans) {
            var index = $16271588ada7e89d$var$getIndexOrStore(ctx, ctx.table.core.schema);
            return ctx.table.core.query({
                trans: trans,
                values: false,
                limit: ctx.limit,
                query: {
                    index: index,
                    range: ctx.range
                }
            });
        }).then(function(_a) {
            var result = _a.result;
            return result;
        }).then(cb);
        ctx.keysOnly = !ctx.isMatch;
        var a = [];
        return this.each(function(item, cursor) {
            a.push(cursor.primaryKey);
        }).then(function() {
            return a;
        }).then(cb);
    };
    Collection.prototype.uniqueKeys = function(cb) {
        this._ctx.unique = "unique";
        return this.keys(cb);
    };
    Collection.prototype.firstKey = function(cb) {
        return this.limit(1).keys(function(a) {
            return a[0];
        }).then(cb);
    };
    Collection.prototype.lastKey = function(cb) {
        return this.reverse().firstKey(cb);
    };
    Collection.prototype.distinct = function() {
        var ctx = this._ctx, idx = ctx.index && ctx.table.schema.idxByName[ctx.index];
        if (!idx || !idx.multi) return this;
        var set = {};
        $16271588ada7e89d$var$addFilter(this._ctx, function(cursor) {
            var strKey = cursor.primaryKey.toString();
            var found = $16271588ada7e89d$var$hasOwn(set, strKey);
            set[strKey] = true;
            return !found;
        });
        return this;
    };
    Collection.prototype.modify = function(changes) {
        var _this = this;
        var ctx = this._ctx;
        return this._write(function(trans) {
            var modifyer;
            if (typeof changes === "function") modifyer = changes;
            else {
                var keyPaths = $16271588ada7e89d$var$keys(changes);
                var numKeys = keyPaths.length;
                modifyer = function(item) {
                    var anythingModified = false;
                    for(var i = 0; i < numKeys; ++i){
                        var keyPath = keyPaths[i], val = changes[keyPath];
                        if ($16271588ada7e89d$var$getByKeyPath(item, keyPath) !== val) {
                            $16271588ada7e89d$var$setByKeyPath(item, keyPath, val);
                            anythingModified = true;
                        }
                    }
                    return anythingModified;
                };
            }
            var coreTable = ctx.table.core;
            var _a = coreTable.schema.primaryKey, outbound = _a.outbound, extractKey = _a.extractKey;
            var limit = _this.db._options.modifyChunkSize || 200;
            var totalFailures = [];
            var successCount = 0;
            var failedKeys = [];
            var applyMutateResult = function(expectedCount, res) {
                var failures = res.failures, numFailures = res.numFailures;
                successCount += expectedCount - numFailures;
                for(var _i = 0, _a = $16271588ada7e89d$var$keys(failures); _i < _a.length; _i++){
                    var pos = _a[_i];
                    totalFailures.push(failures[pos]);
                }
            };
            return _this.clone().primaryKeys().then(function(keys) {
                var nextChunk = function(offset) {
                    var count = Math.min(limit, keys.length - offset);
                    return coreTable.getMany({
                        trans: trans,
                        keys: keys.slice(offset, offset + count),
                        cache: "immutable"
                    }).then(function(values) {
                        var addValues = [];
                        var putValues = [];
                        var putKeys = outbound ? [] : null;
                        var deleteKeys = [];
                        for(var i = 0; i < count; ++i){
                            var origValue = values[i];
                            var ctx_1 = {
                                value: $16271588ada7e89d$var$deepClone(origValue),
                                primKey: keys[offset + i]
                            };
                            if (modifyer.call(ctx_1, ctx_1.value, ctx_1) !== false) {
                                if (ctx_1.value == null) deleteKeys.push(keys[offset + i]);
                                else if (!outbound && $16271588ada7e89d$var$cmp(extractKey(origValue), extractKey(ctx_1.value)) !== 0) {
                                    deleteKeys.push(keys[offset + i]);
                                    addValues.push(ctx_1.value);
                                } else {
                                    putValues.push(ctx_1.value);
                                    if (outbound) putKeys.push(keys[offset + i]);
                                }
                            }
                        }
                        var criteria = $16271588ada7e89d$var$isPlainKeyRange(ctx) && ctx.limit === Infinity && (typeof changes !== "function" || changes === $16271588ada7e89d$var$deleteCallback) && {
                            index: ctx.index,
                            range: ctx.range
                        };
                        return Promise.resolve(addValues.length > 0 && coreTable.mutate({
                            trans: trans,
                            type: "add",
                            values: addValues
                        }).then(function(res) {
                            for(var pos in res.failures)deleteKeys.splice(parseInt(pos), 1);
                            applyMutateResult(addValues.length, res);
                        })).then(function() {
                            return (putValues.length > 0 || criteria && typeof changes === "object") && coreTable.mutate({
                                trans: trans,
                                type: "put",
                                keys: putKeys,
                                values: putValues,
                                criteria: criteria,
                                changeSpec: typeof changes !== "function" && changes
                            }).then(function(res) {
                                return applyMutateResult(putValues.length, res);
                            });
                        }).then(function() {
                            return (deleteKeys.length > 0 || criteria && changes === $16271588ada7e89d$var$deleteCallback) && coreTable.mutate({
                                trans: trans,
                                type: "delete",
                                keys: deleteKeys,
                                criteria: criteria
                            }).then(function(res) {
                                return applyMutateResult(deleteKeys.length, res);
                            });
                        }).then(function() {
                            return keys.length > offset + count && nextChunk(offset + limit);
                        });
                    });
                };
                return nextChunk(0).then(function() {
                    if (totalFailures.length > 0) throw new $16271588ada7e89d$var$ModifyError("Error modifying one or more objects", totalFailures, successCount, failedKeys);
                    return keys.length;
                });
            });
        });
    };
    Collection.prototype.delete = function() {
        var ctx = this._ctx, range = ctx.range;
        if ($16271588ada7e89d$var$isPlainKeyRange(ctx) && (ctx.isPrimKey && !$16271588ada7e89d$var$hangsOnDeleteLargeKeyRange || range.type === 3)) return this._write(function(trans) {
            var primaryKey = ctx.table.core.schema.primaryKey;
            var coreRange = range;
            return ctx.table.core.count({
                trans: trans,
                query: {
                    index: primaryKey,
                    range: coreRange
                }
            }).then(function(count) {
                return ctx.table.core.mutate({
                    trans: trans,
                    type: "deleteRange",
                    range: coreRange
                }).then(function(_a) {
                    var failures = _a.failures;
                    _a.lastResult;
                    _a.results;
                    var numFailures = _a.numFailures;
                    if (numFailures) throw new $16271588ada7e89d$var$ModifyError("Could not delete some values", Object.keys(failures).map(function(pos) {
                        return failures[pos];
                    }), count - numFailures);
                    return count - numFailures;
                });
            });
        });
        return this.modify($16271588ada7e89d$var$deleteCallback);
    };
    return Collection;
}();
var $16271588ada7e89d$var$deleteCallback = function(value, ctx) {
    return ctx.value = null;
};
function $16271588ada7e89d$var$createCollectionConstructor(db) {
    return $16271588ada7e89d$var$makeClassConstructor($16271588ada7e89d$var$Collection.prototype, function Collection(whereClause, keyRangeGenerator) {
        this.db = db;
        var keyRange = $16271588ada7e89d$var$AnyRange, error = null;
        if (keyRangeGenerator) try {
            keyRange = keyRangeGenerator();
        } catch (ex) {
            error = ex;
        }
        var whereCtx = whereClause._ctx;
        var table = whereCtx.table;
        var readingHook = table.hook.reading.fire;
        this._ctx = {
            table: table,
            index: whereCtx.index,
            isPrimKey: !whereCtx.index || table.schema.primKey.keyPath && whereCtx.index === table.schema.primKey.name,
            range: keyRange,
            keysOnly: false,
            dir: "next",
            unique: "",
            algorithm: null,
            filter: null,
            replayFilter: null,
            justLimit: true,
            isMatch: null,
            offset: 0,
            limit: Infinity,
            error: error,
            or: whereCtx.or,
            valueMapper: readingHook !== $16271588ada7e89d$var$mirror ? readingHook : null
        };
    });
}
function $16271588ada7e89d$var$simpleCompare(a, b) {
    return a < b ? -1 : a === b ? 0 : 1;
}
function $16271588ada7e89d$var$simpleCompareReverse(a, b) {
    return a > b ? -1 : a === b ? 0 : 1;
}
function $16271588ada7e89d$var$fail(collectionOrWhereClause, err, T) {
    var collection = collectionOrWhereClause instanceof $16271588ada7e89d$var$WhereClause ? new collectionOrWhereClause.Collection(collectionOrWhereClause) : collectionOrWhereClause;
    collection._ctx.error = T ? new T(err) : new TypeError(err);
    return collection;
}
function $16271588ada7e89d$var$emptyCollection(whereClause) {
    return new whereClause.Collection(whereClause, function() {
        return $16271588ada7e89d$var$rangeEqual("");
    }).limit(0);
}
function $16271588ada7e89d$var$upperFactory(dir) {
    return dir === "next" ? function(s) {
        return s.toUpperCase();
    } : function(s) {
        return s.toLowerCase();
    };
}
function $16271588ada7e89d$var$lowerFactory(dir) {
    return dir === "next" ? function(s) {
        return s.toLowerCase();
    } : function(s) {
        return s.toUpperCase();
    };
}
function $16271588ada7e89d$var$nextCasing(key, lowerKey, upperNeedle, lowerNeedle, cmp, dir) {
    var length = Math.min(key.length, lowerNeedle.length);
    var llp = -1;
    for(var i = 0; i < length; ++i){
        var lwrKeyChar = lowerKey[i];
        if (lwrKeyChar !== lowerNeedle[i]) {
            if (cmp(key[i], upperNeedle[i]) < 0) return key.substr(0, i) + upperNeedle[i] + upperNeedle.substr(i + 1);
            if (cmp(key[i], lowerNeedle[i]) < 0) return key.substr(0, i) + lowerNeedle[i] + upperNeedle.substr(i + 1);
            if (llp >= 0) return key.substr(0, llp) + lowerKey[llp] + upperNeedle.substr(llp + 1);
            return null;
        }
        if (cmp(key[i], lwrKeyChar) < 0) llp = i;
    }
    if (length < lowerNeedle.length && dir === "next") return key + upperNeedle.substr(key.length);
    if (length < key.length && dir === "prev") return key.substr(0, upperNeedle.length);
    return llp < 0 ? null : key.substr(0, llp) + lowerNeedle[llp] + upperNeedle.substr(llp + 1);
}
function $16271588ada7e89d$var$addIgnoreCaseAlgorithm(whereClause, match, needles, suffix) {
    var upper, lower, compare, upperNeedles, lowerNeedles, direction, nextKeySuffix, needlesLen = needles.length;
    if (!needles.every(function(s) {
        return typeof s === "string";
    })) return $16271588ada7e89d$var$fail(whereClause, $16271588ada7e89d$var$STRING_EXPECTED);
    function initDirection(dir) {
        upper = $16271588ada7e89d$var$upperFactory(dir);
        lower = $16271588ada7e89d$var$lowerFactory(dir);
        compare = dir === "next" ? $16271588ada7e89d$var$simpleCompare : $16271588ada7e89d$var$simpleCompareReverse;
        var needleBounds = needles.map(function(needle) {
            return {
                lower: lower(needle),
                upper: upper(needle)
            };
        }).sort(function(a, b) {
            return compare(a.lower, b.lower);
        });
        upperNeedles = needleBounds.map(function(nb) {
            return nb.upper;
        });
        lowerNeedles = needleBounds.map(function(nb) {
            return nb.lower;
        });
        direction = dir;
        nextKeySuffix = dir === "next" ? "" : suffix;
    }
    initDirection("next");
    var c = new whereClause.Collection(whereClause, function() {
        return $16271588ada7e89d$var$createRange(upperNeedles[0], lowerNeedles[needlesLen - 1] + suffix);
    });
    c._ondirectionchange = function(direction) {
        initDirection(direction);
    };
    var firstPossibleNeedle = 0;
    c._addAlgorithm(function(cursor, advance, resolve) {
        var key = cursor.key;
        if (typeof key !== "string") return false;
        var lowerKey = lower(key);
        if (match(lowerKey, lowerNeedles, firstPossibleNeedle)) return true;
        else {
            var lowestPossibleCasing = null;
            for(var i = firstPossibleNeedle; i < needlesLen; ++i){
                var casing = $16271588ada7e89d$var$nextCasing(key, lowerKey, upperNeedles[i], lowerNeedles[i], compare, direction);
                if (casing === null && lowestPossibleCasing === null) firstPossibleNeedle = i + 1;
                else if (lowestPossibleCasing === null || compare(lowestPossibleCasing, casing) > 0) lowestPossibleCasing = casing;
            }
            if (lowestPossibleCasing !== null) advance(function() {
                cursor.continue(lowestPossibleCasing + nextKeySuffix);
            });
            else advance(resolve);
            return false;
        }
    });
    return c;
}
function $16271588ada7e89d$var$createRange(lower, upper, lowerOpen, upperOpen) {
    return {
        type: 2,
        lower: lower,
        upper: upper,
        lowerOpen: lowerOpen,
        upperOpen: upperOpen
    };
}
function $16271588ada7e89d$var$rangeEqual(value) {
    return {
        type: 1,
        lower: value,
        upper: value
    };
}
var $16271588ada7e89d$var$WhereClause = function() {
    function WhereClause() {}
    Object.defineProperty(WhereClause.prototype, "Collection", {
        get: function() {
            return this._ctx.table.db.Collection;
        },
        enumerable: false,
        configurable: true
    });
    WhereClause.prototype.between = function(lower, upper, includeLower, includeUpper) {
        includeLower = includeLower !== false;
        includeUpper = includeUpper === true;
        try {
            if (this._cmp(lower, upper) > 0 || this._cmp(lower, upper) === 0 && (includeLower || includeUpper) && !(includeLower && includeUpper)) return $16271588ada7e89d$var$emptyCollection(this);
            return new this.Collection(this, function() {
                return $16271588ada7e89d$var$createRange(lower, upper, !includeLower, !includeUpper);
            });
        } catch (e) {
            return $16271588ada7e89d$var$fail(this, $16271588ada7e89d$var$INVALID_KEY_ARGUMENT);
        }
    };
    WhereClause.prototype.equals = function(value) {
        if (value == null) return $16271588ada7e89d$var$fail(this, $16271588ada7e89d$var$INVALID_KEY_ARGUMENT);
        return new this.Collection(this, function() {
            return $16271588ada7e89d$var$rangeEqual(value);
        });
    };
    WhereClause.prototype.above = function(value) {
        if (value == null) return $16271588ada7e89d$var$fail(this, $16271588ada7e89d$var$INVALID_KEY_ARGUMENT);
        return new this.Collection(this, function() {
            return $16271588ada7e89d$var$createRange(value, undefined, true);
        });
    };
    WhereClause.prototype.aboveOrEqual = function(value) {
        if (value == null) return $16271588ada7e89d$var$fail(this, $16271588ada7e89d$var$INVALID_KEY_ARGUMENT);
        return new this.Collection(this, function() {
            return $16271588ada7e89d$var$createRange(value, undefined, false);
        });
    };
    WhereClause.prototype.below = function(value) {
        if (value == null) return $16271588ada7e89d$var$fail(this, $16271588ada7e89d$var$INVALID_KEY_ARGUMENT);
        return new this.Collection(this, function() {
            return $16271588ada7e89d$var$createRange(undefined, value, false, true);
        });
    };
    WhereClause.prototype.belowOrEqual = function(value) {
        if (value == null) return $16271588ada7e89d$var$fail(this, $16271588ada7e89d$var$INVALID_KEY_ARGUMENT);
        return new this.Collection(this, function() {
            return $16271588ada7e89d$var$createRange(undefined, value);
        });
    };
    WhereClause.prototype.startsWith = function(str) {
        if (typeof str !== "string") return $16271588ada7e89d$var$fail(this, $16271588ada7e89d$var$STRING_EXPECTED);
        return this.between(str, str + $16271588ada7e89d$var$maxString, true, true);
    };
    WhereClause.prototype.startsWithIgnoreCase = function(str) {
        if (str === "") return this.startsWith(str);
        return $16271588ada7e89d$var$addIgnoreCaseAlgorithm(this, function(x, a) {
            return x.indexOf(a[0]) === 0;
        }, [
            str
        ], $16271588ada7e89d$var$maxString);
    };
    WhereClause.prototype.equalsIgnoreCase = function(str) {
        return $16271588ada7e89d$var$addIgnoreCaseAlgorithm(this, function(x, a) {
            return x === a[0];
        }, [
            str
        ], "");
    };
    WhereClause.prototype.anyOfIgnoreCase = function() {
        var set = $16271588ada7e89d$var$getArrayOf.apply($16271588ada7e89d$var$NO_CHAR_ARRAY, arguments);
        if (set.length === 0) return $16271588ada7e89d$var$emptyCollection(this);
        return $16271588ada7e89d$var$addIgnoreCaseAlgorithm(this, function(x, a) {
            return a.indexOf(x) !== -1;
        }, set, "");
    };
    WhereClause.prototype.startsWithAnyOfIgnoreCase = function() {
        var set = $16271588ada7e89d$var$getArrayOf.apply($16271588ada7e89d$var$NO_CHAR_ARRAY, arguments);
        if (set.length === 0) return $16271588ada7e89d$var$emptyCollection(this);
        return $16271588ada7e89d$var$addIgnoreCaseAlgorithm(this, function(x, a) {
            return a.some(function(n) {
                return x.indexOf(n) === 0;
            });
        }, set, $16271588ada7e89d$var$maxString);
    };
    WhereClause.prototype.anyOf = function() {
        var _this = this;
        var set = $16271588ada7e89d$var$getArrayOf.apply($16271588ada7e89d$var$NO_CHAR_ARRAY, arguments);
        var compare = this._cmp;
        try {
            set.sort(compare);
        } catch (e) {
            return $16271588ada7e89d$var$fail(this, $16271588ada7e89d$var$INVALID_KEY_ARGUMENT);
        }
        if (set.length === 0) return $16271588ada7e89d$var$emptyCollection(this);
        var c = new this.Collection(this, function() {
            return $16271588ada7e89d$var$createRange(set[0], set[set.length - 1]);
        });
        c._ondirectionchange = function(direction) {
            compare = direction === "next" ? _this._ascending : _this._descending;
            set.sort(compare);
        };
        var i = 0;
        c._addAlgorithm(function(cursor, advance, resolve) {
            var key = cursor.key;
            while(compare(key, set[i]) > 0){
                ++i;
                if (i === set.length) {
                    advance(resolve);
                    return false;
                }
            }
            if (compare(key, set[i]) === 0) return true;
            else {
                advance(function() {
                    cursor.continue(set[i]);
                });
                return false;
            }
        });
        return c;
    };
    WhereClause.prototype.notEqual = function(value) {
        return this.inAnyRange([
            [
                $16271588ada7e89d$var$minKey,
                value
            ],
            [
                value,
                this.db._maxKey
            ]
        ], {
            includeLowers: false,
            includeUppers: false
        });
    };
    WhereClause.prototype.noneOf = function() {
        var set = $16271588ada7e89d$var$getArrayOf.apply($16271588ada7e89d$var$NO_CHAR_ARRAY, arguments);
        if (set.length === 0) return new this.Collection(this);
        try {
            set.sort(this._ascending);
        } catch (e) {
            return $16271588ada7e89d$var$fail(this, $16271588ada7e89d$var$INVALID_KEY_ARGUMENT);
        }
        var ranges = set.reduce(function(res, val) {
            return res ? res.concat([
                [
                    res[res.length - 1][1],
                    val
                ]
            ]) : [
                [
                    $16271588ada7e89d$var$minKey,
                    val
                ]
            ];
        }, null);
        ranges.push([
            set[set.length - 1],
            this.db._maxKey
        ]);
        return this.inAnyRange(ranges, {
            includeLowers: false,
            includeUppers: false
        });
    };
    WhereClause.prototype.inAnyRange = function(ranges, options) {
        var _this = this;
        var cmp = this._cmp, ascending = this._ascending, descending = this._descending, min = this._min, max = this._max;
        if (ranges.length === 0) return $16271588ada7e89d$var$emptyCollection(this);
        if (!ranges.every(function(range) {
            return range[0] !== undefined && range[1] !== undefined && ascending(range[0], range[1]) <= 0;
        })) return $16271588ada7e89d$var$fail(this, "First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower", $16271588ada7e89d$var$exceptions.InvalidArgument);
        var includeLowers = !options || options.includeLowers !== false;
        var includeUppers = options && options.includeUppers === true;
        function addRange(ranges, newRange) {
            var i = 0, l = ranges.length;
            for(; i < l; ++i){
                var range = ranges[i];
                if (cmp(newRange[0], range[1]) < 0 && cmp(newRange[1], range[0]) > 0) {
                    range[0] = min(range[0], newRange[0]);
                    range[1] = max(range[1], newRange[1]);
                    break;
                }
            }
            if (i === l) ranges.push(newRange);
            return ranges;
        }
        var sortDirection = ascending;
        function rangeSorter(a, b) {
            return sortDirection(a[0], b[0]);
        }
        var set;
        try {
            set = ranges.reduce(addRange, []);
            set.sort(rangeSorter);
        } catch (ex) {
            return $16271588ada7e89d$var$fail(this, $16271588ada7e89d$var$INVALID_KEY_ARGUMENT);
        }
        var rangePos = 0;
        var keyIsBeyondCurrentEntry = includeUppers ? function(key) {
            return ascending(key, set[rangePos][1]) > 0;
        } : function(key) {
            return ascending(key, set[rangePos][1]) >= 0;
        };
        var keyIsBeforeCurrentEntry = includeLowers ? function(key) {
            return descending(key, set[rangePos][0]) > 0;
        } : function(key) {
            return descending(key, set[rangePos][0]) >= 0;
        };
        function keyWithinCurrentRange(key) {
            return !keyIsBeyondCurrentEntry(key) && !keyIsBeforeCurrentEntry(key);
        }
        var checkKey = keyIsBeyondCurrentEntry;
        var c = new this.Collection(this, function() {
            return $16271588ada7e89d$var$createRange(set[0][0], set[set.length - 1][1], !includeLowers, !includeUppers);
        });
        c._ondirectionchange = function(direction) {
            if (direction === "next") {
                checkKey = keyIsBeyondCurrentEntry;
                sortDirection = ascending;
            } else {
                checkKey = keyIsBeforeCurrentEntry;
                sortDirection = descending;
            }
            set.sort(rangeSorter);
        };
        c._addAlgorithm(function(cursor, advance, resolve) {
            var key = cursor.key;
            while(checkKey(key)){
                ++rangePos;
                if (rangePos === set.length) {
                    advance(resolve);
                    return false;
                }
            }
            if (keyWithinCurrentRange(key)) return true;
            else if (_this._cmp(key, set[rangePos][1]) === 0 || _this._cmp(key, set[rangePos][0]) === 0) return false;
            else {
                advance(function() {
                    if (sortDirection === ascending) cursor.continue(set[rangePos][0]);
                    else cursor.continue(set[rangePos][1]);
                });
                return false;
            }
        });
        return c;
    };
    WhereClause.prototype.startsWithAnyOf = function() {
        var set = $16271588ada7e89d$var$getArrayOf.apply($16271588ada7e89d$var$NO_CHAR_ARRAY, arguments);
        if (!set.every(function(s) {
            return typeof s === "string";
        })) return $16271588ada7e89d$var$fail(this, "startsWithAnyOf() only works with strings");
        if (set.length === 0) return $16271588ada7e89d$var$emptyCollection(this);
        return this.inAnyRange(set.map(function(str) {
            return [
                str,
                str + $16271588ada7e89d$var$maxString
            ];
        }));
    };
    return WhereClause;
}();
function $16271588ada7e89d$var$createWhereClauseConstructor(db) {
    return $16271588ada7e89d$var$makeClassConstructor($16271588ada7e89d$var$WhereClause.prototype, function WhereClause(table, index, orCollection) {
        this.db = db;
        this._ctx = {
            table: table,
            index: index === ":id" ? null : index,
            or: orCollection
        };
        var indexedDB1 = db._deps.indexedDB;
        if (!indexedDB1) throw new $16271588ada7e89d$var$exceptions.MissingAPI();
        this._cmp = this._ascending = indexedDB1.cmp.bind(indexedDB1);
        this._descending = function(a, b) {
            return indexedDB1.cmp(b, a);
        };
        this._max = function(a, b) {
            return indexedDB1.cmp(a, b) > 0 ? a : b;
        };
        this._min = function(a, b) {
            return indexedDB1.cmp(a, b) < 0 ? a : b;
        };
        this._IDBKeyRange = db._deps.IDBKeyRange;
    });
}
function $16271588ada7e89d$var$eventRejectHandler(reject) {
    return $16271588ada7e89d$var$wrap(function(event) {
        $16271588ada7e89d$var$preventDefault(event);
        reject(event.target.error);
        return false;
    });
}
function $16271588ada7e89d$var$preventDefault(event) {
    if (event.stopPropagation) event.stopPropagation();
    if (event.preventDefault) event.preventDefault();
}
var $16271588ada7e89d$var$DEXIE_STORAGE_MUTATED_EVENT_NAME = "storagemutated";
var $16271588ada7e89d$var$STORAGE_MUTATED_DOM_EVENT_NAME = "x-storagemutated-1";
var $16271588ada7e89d$var$globalEvents = $16271588ada7e89d$var$Events(null, $16271588ada7e89d$var$DEXIE_STORAGE_MUTATED_EVENT_NAME);
var $16271588ada7e89d$var$Transaction = function() {
    function Transaction() {}
    Transaction.prototype._lock = function() {
        $16271588ada7e89d$var$assert(!$16271588ada7e89d$var$PSD.global);
        ++this._reculock;
        if (this._reculock === 1 && !$16271588ada7e89d$var$PSD.global) $16271588ada7e89d$var$PSD.lockOwnerFor = this;
        return this;
    };
    Transaction.prototype._unlock = function() {
        $16271588ada7e89d$var$assert(!$16271588ada7e89d$var$PSD.global);
        if (--this._reculock === 0) {
            if (!$16271588ada7e89d$var$PSD.global) $16271588ada7e89d$var$PSD.lockOwnerFor = null;
            while(this._blockedFuncs.length > 0 && !this._locked()){
                var fnAndPSD = this._blockedFuncs.shift();
                try {
                    $16271588ada7e89d$var$usePSD(fnAndPSD[1], fnAndPSD[0]);
                } catch (e) {}
            }
        }
        return this;
    };
    Transaction.prototype._locked = function() {
        return this._reculock && $16271588ada7e89d$var$PSD.lockOwnerFor !== this;
    };
    Transaction.prototype.create = function(idbtrans) {
        var _this = this;
        if (!this.mode) return this;
        var idbdb = this.db.idbdb;
        var dbOpenError = this.db._state.dbOpenError;
        $16271588ada7e89d$var$assert(!this.idbtrans);
        if (!idbtrans && !idbdb) switch(dbOpenError && dbOpenError.name){
            case "DatabaseClosedError":
                throw new $16271588ada7e89d$var$exceptions.DatabaseClosed(dbOpenError);
            case "MissingAPIError":
                throw new $16271588ada7e89d$var$exceptions.MissingAPI(dbOpenError.message, dbOpenError);
            default:
                throw new $16271588ada7e89d$var$exceptions.OpenFailed(dbOpenError);
        }
        if (!this.active) throw new $16271588ada7e89d$var$exceptions.TransactionInactive();
        $16271588ada7e89d$var$assert(this._completion._state === null);
        idbtrans = this.idbtrans = idbtrans || (this.db.core ? this.db.core.transaction(this.storeNames, this.mode, {
            durability: this.chromeTransactionDurability
        }) : idbdb.transaction(this.storeNames, this.mode, {
            durability: this.chromeTransactionDurability
        }));
        idbtrans.onerror = $16271588ada7e89d$var$wrap(function(ev) {
            $16271588ada7e89d$var$preventDefault(ev);
            _this._reject(idbtrans.error);
        });
        idbtrans.onabort = $16271588ada7e89d$var$wrap(function(ev) {
            $16271588ada7e89d$var$preventDefault(ev);
            _this.active && _this._reject(new $16271588ada7e89d$var$exceptions.Abort(idbtrans.error));
            _this.active = false;
            _this.on("abort").fire(ev);
        });
        idbtrans.oncomplete = $16271588ada7e89d$var$wrap(function() {
            _this.active = false;
            _this._resolve();
            if ("mutatedParts" in idbtrans) $16271588ada7e89d$var$globalEvents.storagemutated.fire(idbtrans["mutatedParts"]);
        });
        return this;
    };
    Transaction.prototype._promise = function(mode, fn, bWriteLock) {
        var _this = this;
        if (mode === "readwrite" && this.mode !== "readwrite") return $16271588ada7e89d$var$rejection(new $16271588ada7e89d$var$exceptions.ReadOnly("Transaction is readonly"));
        if (!this.active) return $16271588ada7e89d$var$rejection(new $16271588ada7e89d$var$exceptions.TransactionInactive());
        if (this._locked()) return new $16271588ada7e89d$var$DexiePromise(function(resolve, reject) {
            _this._blockedFuncs.push([
                function() {
                    _this._promise(mode, fn, bWriteLock).then(resolve, reject);
                },
                $16271588ada7e89d$var$PSD
            ]);
        });
        else if (bWriteLock) return $16271588ada7e89d$var$newScope(function() {
            var p = new $16271588ada7e89d$var$DexiePromise(function(resolve, reject) {
                _this._lock();
                var rv = fn(resolve, reject, _this);
                if (rv && rv.then) rv.then(resolve, reject);
            });
            p.finally(function() {
                return _this._unlock();
            });
            p._lib = true;
            return p;
        });
        else {
            var p = new $16271588ada7e89d$var$DexiePromise(function(resolve, reject) {
                var rv = fn(resolve, reject, _this);
                if (rv && rv.then) rv.then(resolve, reject);
            });
            p._lib = true;
            return p;
        }
    };
    Transaction.prototype._root = function() {
        return this.parent ? this.parent._root() : this;
    };
    Transaction.prototype.waitFor = function(promiseLike) {
        var root = this._root();
        var promise = $16271588ada7e89d$var$DexiePromise.resolve(promiseLike);
        if (root._waitingFor) root._waitingFor = root._waitingFor.then(function() {
            return promise;
        });
        else {
            root._waitingFor = promise;
            root._waitingQueue = [];
            var store = root.idbtrans.objectStore(root.storeNames[0]);
            (function spin() {
                ++root._spinCount;
                while(root._waitingQueue.length)root._waitingQueue.shift()();
                if (root._waitingFor) store.get(-Infinity).onsuccess = spin;
            })();
        }
        var currentWaitPromise = root._waitingFor;
        return new $16271588ada7e89d$var$DexiePromise(function(resolve, reject) {
            promise.then(function(res) {
                return root._waitingQueue.push($16271588ada7e89d$var$wrap(resolve.bind(null, res)));
            }, function(err) {
                return root._waitingQueue.push($16271588ada7e89d$var$wrap(reject.bind(null, err)));
            }).finally(function() {
                if (root._waitingFor === currentWaitPromise) root._waitingFor = null;
            });
        });
    };
    Transaction.prototype.abort = function() {
        if (this.active) {
            this.active = false;
            if (this.idbtrans) this.idbtrans.abort();
            this._reject(new $16271588ada7e89d$var$exceptions.Abort());
        }
    };
    Transaction.prototype.table = function(tableName) {
        var memoizedTables = this._memoizedTables || (this._memoizedTables = {});
        if ($16271588ada7e89d$var$hasOwn(memoizedTables, tableName)) return memoizedTables[tableName];
        var tableSchema = this.schema[tableName];
        if (!tableSchema) throw new $16271588ada7e89d$var$exceptions.NotFound("Table " + tableName + " not part of transaction");
        var transactionBoundTable = new this.db.Table(tableName, tableSchema, this);
        transactionBoundTable.core = this.db.core.table(tableName);
        memoizedTables[tableName] = transactionBoundTable;
        return transactionBoundTable;
    };
    return Transaction;
}();
function $16271588ada7e89d$var$createTransactionConstructor(db) {
    return $16271588ada7e89d$var$makeClassConstructor($16271588ada7e89d$var$Transaction.prototype, function Transaction(mode, storeNames, dbschema, chromeTransactionDurability, parent) {
        var _this = this;
        this.db = db;
        this.mode = mode;
        this.storeNames = storeNames;
        this.schema = dbschema;
        this.chromeTransactionDurability = chromeTransactionDurability;
        this.idbtrans = null;
        this.on = $16271588ada7e89d$var$Events(this, "complete", "error", "abort");
        this.parent = parent || null;
        this.active = true;
        this._reculock = 0;
        this._blockedFuncs = [];
        this._resolve = null;
        this._reject = null;
        this._waitingFor = null;
        this._waitingQueue = null;
        this._spinCount = 0;
        this._completion = new $16271588ada7e89d$var$DexiePromise(function(resolve, reject) {
            _this._resolve = resolve;
            _this._reject = reject;
        });
        this._completion.then(function() {
            _this.active = false;
            _this.on.complete.fire();
        }, function(e) {
            var wasActive = _this.active;
            _this.active = false;
            _this.on.error.fire(e);
            _this.parent ? _this.parent._reject(e) : wasActive && _this.idbtrans && _this.idbtrans.abort();
            return $16271588ada7e89d$var$rejection(e);
        });
    });
}
function $16271588ada7e89d$var$createIndexSpec(name, keyPath, unique, multi, auto, compound, isPrimKey) {
    return {
        name: name,
        keyPath: keyPath,
        unique: unique,
        multi: multi,
        auto: auto,
        compound: compound,
        src: (unique && !isPrimKey ? "&" : "") + (multi ? "*" : "") + (auto ? "++" : "") + $16271588ada7e89d$var$nameFromKeyPath(keyPath)
    };
}
function $16271588ada7e89d$var$nameFromKeyPath(keyPath) {
    return typeof keyPath === "string" ? keyPath : keyPath ? "[" + [].join.call(keyPath, "+") + "]" : "";
}
function $16271588ada7e89d$var$createTableSchema(name, primKey, indexes) {
    return {
        name: name,
        primKey: primKey,
        indexes: indexes,
        mappedClass: null,
        idxByName: $16271588ada7e89d$var$arrayToObject(indexes, function(index) {
            return [
                index.name,
                index
            ];
        })
    };
}
function $16271588ada7e89d$var$safariMultiStoreFix(storeNames) {
    return storeNames.length === 1 ? storeNames[0] : storeNames;
}
var $16271588ada7e89d$var$getMaxKey = function(IdbKeyRange) {
    try {
        IdbKeyRange.only([
            []
        ]);
        $16271588ada7e89d$var$getMaxKey = function() {
            return [
                []
            ];
        };
        return [
            []
        ];
    } catch (e) {
        $16271588ada7e89d$var$getMaxKey = function() {
            return $16271588ada7e89d$var$maxString;
        };
        return $16271588ada7e89d$var$maxString;
    }
};
function $16271588ada7e89d$var$getKeyExtractor(keyPath) {
    if (keyPath == null) return function() {
        return undefined;
    };
    else if (typeof keyPath === "string") return $16271588ada7e89d$var$getSinglePathKeyExtractor(keyPath);
    else return function(obj) {
        return $16271588ada7e89d$var$getByKeyPath(obj, keyPath);
    };
}
function $16271588ada7e89d$var$getSinglePathKeyExtractor(keyPath) {
    var split = keyPath.split(".");
    if (split.length === 1) return function(obj) {
        return obj[keyPath];
    };
    else return function(obj) {
        return $16271588ada7e89d$var$getByKeyPath(obj, keyPath);
    };
}
function $16271588ada7e89d$var$arrayify(arrayLike) {
    return [].slice.call(arrayLike);
}
var $16271588ada7e89d$var$_id_counter = 0;
function $16271588ada7e89d$var$getKeyPathAlias(keyPath) {
    return keyPath == null ? ":id" : typeof keyPath === "string" ? keyPath : "[" + keyPath.join("+") + "]";
}
function $16271588ada7e89d$var$createDBCore(db, IdbKeyRange, tmpTrans) {
    function extractSchema(db, trans) {
        var tables = $16271588ada7e89d$var$arrayify(db.objectStoreNames);
        return {
            schema: {
                name: db.name,
                tables: tables.map(function(table) {
                    return trans.objectStore(table);
                }).map(function(store) {
                    var keyPath = store.keyPath, autoIncrement = store.autoIncrement;
                    var compound = $16271588ada7e89d$var$isArray(keyPath);
                    var outbound = keyPath == null;
                    var indexByKeyPath = {};
                    var result = {
                        name: store.name,
                        primaryKey: {
                            name: null,
                            isPrimaryKey: true,
                            outbound: outbound,
                            compound: compound,
                            keyPath: keyPath,
                            autoIncrement: autoIncrement,
                            unique: true,
                            extractKey: $16271588ada7e89d$var$getKeyExtractor(keyPath)
                        },
                        indexes: $16271588ada7e89d$var$arrayify(store.indexNames).map(function(indexName) {
                            return store.index(indexName);
                        }).map(function(index) {
                            var name = index.name, unique = index.unique, multiEntry = index.multiEntry, keyPath = index.keyPath;
                            var compound = $16271588ada7e89d$var$isArray(keyPath);
                            var result = {
                                name: name,
                                compound: compound,
                                keyPath: keyPath,
                                unique: unique,
                                multiEntry: multiEntry,
                                extractKey: $16271588ada7e89d$var$getKeyExtractor(keyPath)
                            };
                            indexByKeyPath[$16271588ada7e89d$var$getKeyPathAlias(keyPath)] = result;
                            return result;
                        }),
                        getIndexByKeyPath: function(keyPath) {
                            return indexByKeyPath[$16271588ada7e89d$var$getKeyPathAlias(keyPath)];
                        }
                    };
                    indexByKeyPath[":id"] = result.primaryKey;
                    if (keyPath != null) indexByKeyPath[$16271588ada7e89d$var$getKeyPathAlias(keyPath)] = result.primaryKey;
                    return result;
                })
            },
            hasGetAll: tables.length > 0 && "getAll" in trans.objectStore(tables[0]) && !(typeof navigator !== "undefined" && /Safari/.test(navigator.userAgent) && !/(Chrome\/|Edge\/)/.test(navigator.userAgent) && [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604)
        };
    }
    function makeIDBKeyRange(range) {
        if (range.type === 3) return null;
        if (range.type === 4) throw new Error("Cannot convert never type to IDBKeyRange");
        var lower = range.lower, upper = range.upper, lowerOpen = range.lowerOpen, upperOpen = range.upperOpen;
        var idbRange = lower === undefined ? upper === undefined ? null : IdbKeyRange.upperBound(upper, !!upperOpen) : upper === undefined ? IdbKeyRange.lowerBound(lower, !!lowerOpen) : IdbKeyRange.bound(lower, upper, !!lowerOpen, !!upperOpen);
        return idbRange;
    }
    function createDbCoreTable(tableSchema) {
        var tableName = tableSchema.name;
        function mutate(_a) {
            var trans = _a.trans, type = _a.type, keys = _a.keys, values = _a.values, range = _a.range;
            return new Promise(function(resolve, reject) {
                resolve = $16271588ada7e89d$var$wrap(resolve);
                var store = trans.objectStore(tableName);
                var outbound = store.keyPath == null;
                var isAddOrPut = type === "put" || type === "add";
                if (!isAddOrPut && type !== "delete" && type !== "deleteRange") throw new Error("Invalid operation type: " + type);
                var length = (keys || values || {
                    length: 1
                }).length;
                if (keys && values && keys.length !== values.length) throw new Error("Given keys array must have same length as given values array.");
                if (length === 0) return resolve({
                    numFailures: 0,
                    failures: {},
                    results: [],
                    lastResult: undefined
                });
                var req;
                var reqs = [];
                var failures = [];
                var numFailures = 0;
                var errorHandler = function(event) {
                    ++numFailures;
                    $16271588ada7e89d$var$preventDefault(event);
                };
                if (type === "deleteRange") {
                    if (range.type === 4) return resolve({
                        numFailures: numFailures,
                        failures: failures,
                        results: [],
                        lastResult: undefined
                    });
                    if (range.type === 3) reqs.push(req = store.clear());
                    else reqs.push(req = store.delete(makeIDBKeyRange(range)));
                } else {
                    var _a = isAddOrPut ? outbound ? [
                        values,
                        keys
                    ] : [
                        values,
                        null
                    ] : [
                        keys,
                        null
                    ], args1 = _a[0], args2 = _a[1];
                    if (isAddOrPut) for(var i = 0; i < length; ++i){
                        reqs.push(req = args2 && args2[i] !== undefined ? store[type](args1[i], args2[i]) : store[type](args1[i]));
                        req.onerror = errorHandler;
                    }
                    else for(var i = 0; i < length; ++i){
                        reqs.push(req = store[type](args1[i]));
                        req.onerror = errorHandler;
                    }
                }
                var done = function(event) {
                    var lastResult = event.target.result;
                    reqs.forEach(function(req, i) {
                        return req.error != null && (failures[i] = req.error);
                    });
                    resolve({
                        numFailures: numFailures,
                        failures: failures,
                        results: type === "delete" ? keys : reqs.map(function(req) {
                            return req.result;
                        }),
                        lastResult: lastResult
                    });
                };
                req.onerror = function(event) {
                    errorHandler(event);
                    done(event);
                };
                req.onsuccess = done;
            });
        }
        function openCursor(_a) {
            var trans = _a.trans, values = _a.values, query = _a.query, reverse = _a.reverse, unique = _a.unique;
            return new Promise(function(resolve, reject) {
                resolve = $16271588ada7e89d$var$wrap(resolve);
                var index = query.index, range = query.range;
                var store = trans.objectStore(tableName);
                var source = index.isPrimaryKey ? store : store.index(index.name);
                var direction = reverse ? unique ? "prevunique" : "prev" : unique ? "nextunique" : "next";
                var req = values || !("openKeyCursor" in source) ? source.openCursor(makeIDBKeyRange(range), direction) : source.openKeyCursor(makeIDBKeyRange(range), direction);
                req.onerror = $16271588ada7e89d$var$eventRejectHandler(reject);
                req.onsuccess = $16271588ada7e89d$var$wrap(function(ev) {
                    var cursor = req.result;
                    if (!cursor) {
                        resolve(null);
                        return;
                    }
                    cursor.___id = ++$16271588ada7e89d$var$_id_counter;
                    cursor.done = false;
                    var _cursorContinue = cursor.continue.bind(cursor);
                    var _cursorContinuePrimaryKey = cursor.continuePrimaryKey;
                    if (_cursorContinuePrimaryKey) _cursorContinuePrimaryKey = _cursorContinuePrimaryKey.bind(cursor);
                    var _cursorAdvance = cursor.advance.bind(cursor);
                    var doThrowCursorIsNotStarted = function() {
                        throw new Error("Cursor not started");
                    };
                    var doThrowCursorIsStopped = function() {
                        throw new Error("Cursor not stopped");
                    };
                    cursor.trans = trans;
                    cursor.stop = cursor.continue = cursor.continuePrimaryKey = cursor.advance = doThrowCursorIsNotStarted;
                    cursor.fail = $16271588ada7e89d$var$wrap(reject);
                    cursor.next = function() {
                        var _this = this;
                        var gotOne = 1;
                        return this.start(function() {
                            return gotOne-- ? _this.continue() : _this.stop();
                        }).then(function() {
                            return _this;
                        });
                    };
                    cursor.start = function(callback) {
                        var iterationPromise = new Promise(function(resolveIteration, rejectIteration) {
                            resolveIteration = $16271588ada7e89d$var$wrap(resolveIteration);
                            req.onerror = $16271588ada7e89d$var$eventRejectHandler(rejectIteration);
                            cursor.fail = rejectIteration;
                            cursor.stop = function(value) {
                                cursor.stop = cursor.continue = cursor.continuePrimaryKey = cursor.advance = doThrowCursorIsStopped;
                                resolveIteration(value);
                            };
                        });
                        var guardedCallback = function() {
                            if (req.result) try {
                                callback();
                            } catch (err) {
                                cursor.fail(err);
                            }
                            else {
                                cursor.done = true;
                                cursor.start = function() {
                                    throw new Error("Cursor behind last entry");
                                };
                                cursor.stop();
                            }
                        };
                        req.onsuccess = $16271588ada7e89d$var$wrap(function(ev) {
                            req.onsuccess = guardedCallback;
                            guardedCallback();
                        });
                        cursor.continue = _cursorContinue;
                        cursor.continuePrimaryKey = _cursorContinuePrimaryKey;
                        cursor.advance = _cursorAdvance;
                        guardedCallback();
                        return iterationPromise;
                    };
                    resolve(cursor);
                }, reject);
            });
        }
        function query(hasGetAll) {
            return function(request) {
                return new Promise(function(resolve, reject) {
                    resolve = $16271588ada7e89d$var$wrap(resolve);
                    var trans = request.trans, values = request.values, limit = request.limit, query = request.query;
                    var nonInfinitLimit = limit === Infinity ? undefined : limit;
                    var index = query.index, range = query.range;
                    var store = trans.objectStore(tableName);
                    var source = index.isPrimaryKey ? store : store.index(index.name);
                    var idbKeyRange = makeIDBKeyRange(range);
                    if (limit === 0) return resolve({
                        result: []
                    });
                    if (hasGetAll) {
                        var req = values ? source.getAll(idbKeyRange, nonInfinitLimit) : source.getAllKeys(idbKeyRange, nonInfinitLimit);
                        req.onsuccess = function(event) {
                            return resolve({
                                result: event.target.result
                            });
                        };
                        req.onerror = $16271588ada7e89d$var$eventRejectHandler(reject);
                    } else {
                        var count_1 = 0;
                        var req_1 = values || !("openKeyCursor" in source) ? source.openCursor(idbKeyRange) : source.openKeyCursor(idbKeyRange);
                        var result_1 = [];
                        req_1.onsuccess = function(event) {
                            var cursor = req_1.result;
                            if (!cursor) return resolve({
                                result: result_1
                            });
                            result_1.push(values ? cursor.value : cursor.primaryKey);
                            if (++count_1 === limit) return resolve({
                                result: result_1
                            });
                            cursor.continue();
                        };
                        req_1.onerror = $16271588ada7e89d$var$eventRejectHandler(reject);
                    }
                });
            };
        }
        return {
            name: tableName,
            schema: tableSchema,
            mutate: mutate,
            getMany: function(_a) {
                var trans = _a.trans, keys = _a.keys;
                return new Promise(function(resolve, reject) {
                    resolve = $16271588ada7e89d$var$wrap(resolve);
                    var store = trans.objectStore(tableName);
                    var length = keys.length;
                    var result = new Array(length);
                    var keyCount = 0;
                    var callbackCount = 0;
                    var req;
                    var successHandler = function(event) {
                        var req = event.target;
                        result[req._pos] = req.result;
                        if (++callbackCount === keyCount) resolve(result);
                    };
                    var errorHandler = $16271588ada7e89d$var$eventRejectHandler(reject);
                    for(var i = 0; i < length; ++i){
                        var key = keys[i];
                        if (key != null) {
                            req = store.get(keys[i]);
                            req._pos = i;
                            req.onsuccess = successHandler;
                            req.onerror = errorHandler;
                            ++keyCount;
                        }
                    }
                    if (keyCount === 0) resolve(result);
                });
            },
            get: function(_a) {
                var trans = _a.trans, key = _a.key;
                return new Promise(function(resolve, reject) {
                    resolve = $16271588ada7e89d$var$wrap(resolve);
                    var store = trans.objectStore(tableName);
                    var req = store.get(key);
                    req.onsuccess = function(event) {
                        return resolve(event.target.result);
                    };
                    req.onerror = $16271588ada7e89d$var$eventRejectHandler(reject);
                });
            },
            query: query(hasGetAll),
            openCursor: openCursor,
            count: function(_a) {
                var query = _a.query, trans = _a.trans;
                var index = query.index, range = query.range;
                return new Promise(function(resolve, reject) {
                    var store = trans.objectStore(tableName);
                    var source = index.isPrimaryKey ? store : store.index(index.name);
                    var idbKeyRange = makeIDBKeyRange(range);
                    var req = idbKeyRange ? source.count(idbKeyRange) : source.count();
                    req.onsuccess = $16271588ada7e89d$var$wrap(function(ev) {
                        return resolve(ev.target.result);
                    });
                    req.onerror = $16271588ada7e89d$var$eventRejectHandler(reject);
                });
            }
        };
    }
    var _a = extractSchema(db, tmpTrans), schema = _a.schema, hasGetAll = _a.hasGetAll;
    var tables = schema.tables.map(function(tableSchema) {
        return createDbCoreTable(tableSchema);
    });
    var tableMap = {};
    tables.forEach(function(table) {
        return tableMap[table.name] = table;
    });
    return {
        stack: "dbcore",
        transaction: db.transaction.bind(db),
        table: function(name) {
            var result = tableMap[name];
            if (!result) throw new Error("Table '" + name + "' not found");
            return tableMap[name];
        },
        MIN_KEY: -Infinity,
        MAX_KEY: $16271588ada7e89d$var$getMaxKey(IdbKeyRange),
        schema: schema
    };
}
function $16271588ada7e89d$var$createMiddlewareStack(stackImpl, middlewares) {
    return middlewares.reduce(function(down, _a) {
        var create = _a.create;
        return $16271588ada7e89d$var$__assign($16271588ada7e89d$var$__assign({}, down), create(down));
    }, stackImpl);
}
function $16271588ada7e89d$var$createMiddlewareStacks(middlewares, idbdb, _a, tmpTrans) {
    var IDBKeyRange = _a.IDBKeyRange;
    _a.indexedDB;
    var dbcore = $16271588ada7e89d$var$createMiddlewareStack($16271588ada7e89d$var$createDBCore(idbdb, IDBKeyRange, tmpTrans), middlewares.dbcore);
    return {
        dbcore: dbcore
    };
}
function $16271588ada7e89d$var$generateMiddlewareStacks(_a, tmpTrans) {
    var db = _a._novip;
    var idbdb = tmpTrans.db;
    var stacks = $16271588ada7e89d$var$createMiddlewareStacks(db._middlewares, idbdb, db._deps, tmpTrans);
    db.core = stacks.dbcore;
    db.tables.forEach(function(table) {
        var tableName = table.name;
        if (db.core.schema.tables.some(function(tbl) {
            return tbl.name === tableName;
        })) {
            table.core = db.core.table(tableName);
            if (db[tableName] instanceof db.Table) db[tableName].core = table.core;
        }
    });
}
function $16271588ada7e89d$var$setApiOnPlace(_a, objs, tableNames, dbschema) {
    var db = _a._novip;
    tableNames.forEach(function(tableName) {
        var schema = dbschema[tableName];
        objs.forEach(function(obj) {
            var propDesc = $16271588ada7e89d$var$getPropertyDescriptor(obj, tableName);
            if (!propDesc || "value" in propDesc && propDesc.value === undefined) {
                if (obj === db.Transaction.prototype || obj instanceof db.Transaction) $16271588ada7e89d$var$setProp(obj, tableName, {
                    get: function() {
                        return this.table(tableName);
                    },
                    set: function(value) {
                        $16271588ada7e89d$var$defineProperty(this, tableName, {
                            value: value,
                            writable: true,
                            configurable: true,
                            enumerable: true
                        });
                    }
                });
                else obj[tableName] = new db.Table(tableName, schema);
            }
        });
    });
}
function $16271588ada7e89d$var$removeTablesApi(_a, objs) {
    var db = _a._novip;
    objs.forEach(function(obj) {
        for(var key in obj)if (obj[key] instanceof db.Table) delete obj[key];
    });
}
function $16271588ada7e89d$var$lowerVersionFirst(a, b) {
    return a._cfg.version - b._cfg.version;
}
function $16271588ada7e89d$var$runUpgraders(db, oldVersion, idbUpgradeTrans, reject) {
    var globalSchema = db._dbSchema;
    var trans = db._createTransaction("readwrite", db._storeNames, globalSchema);
    trans.create(idbUpgradeTrans);
    trans._completion.catch(reject);
    var rejectTransaction = trans._reject.bind(trans);
    var transless = $16271588ada7e89d$var$PSD.transless || $16271588ada7e89d$var$PSD;
    $16271588ada7e89d$var$newScope(function() {
        $16271588ada7e89d$var$PSD.trans = trans;
        $16271588ada7e89d$var$PSD.transless = transless;
        if (oldVersion === 0) {
            $16271588ada7e89d$var$keys(globalSchema).forEach(function(tableName) {
                $16271588ada7e89d$var$createTable(idbUpgradeTrans, tableName, globalSchema[tableName].primKey, globalSchema[tableName].indexes);
            });
            $16271588ada7e89d$var$generateMiddlewareStacks(db, idbUpgradeTrans);
            $16271588ada7e89d$var$DexiePromise.follow(function() {
                return db.on.populate.fire(trans);
            }).catch(rejectTransaction);
        } else $16271588ada7e89d$var$updateTablesAndIndexes(db, oldVersion, trans, idbUpgradeTrans).catch(rejectTransaction);
    });
}
function $16271588ada7e89d$var$updateTablesAndIndexes(_a, oldVersion, trans, idbUpgradeTrans) {
    var db = _a._novip;
    var queue = [];
    var versions = db._versions;
    var globalSchema = db._dbSchema = $16271588ada7e89d$var$buildGlobalSchema(db, db.idbdb, idbUpgradeTrans);
    var anyContentUpgraderHasRun = false;
    var versToRun = versions.filter(function(v) {
        return v._cfg.version >= oldVersion;
    });
    versToRun.forEach(function(version) {
        queue.push(function() {
            var oldSchema = globalSchema;
            var newSchema = version._cfg.dbschema;
            $16271588ada7e89d$var$adjustToExistingIndexNames(db, oldSchema, idbUpgradeTrans);
            $16271588ada7e89d$var$adjustToExistingIndexNames(db, newSchema, idbUpgradeTrans);
            globalSchema = db._dbSchema = newSchema;
            var diff = $16271588ada7e89d$var$getSchemaDiff(oldSchema, newSchema);
            diff.add.forEach(function(tuple) {
                $16271588ada7e89d$var$createTable(idbUpgradeTrans, tuple[0], tuple[1].primKey, tuple[1].indexes);
            });
            diff.change.forEach(function(change) {
                if (change.recreate) throw new $16271588ada7e89d$var$exceptions.Upgrade("Not yet support for changing primary key");
                else {
                    var store_1 = idbUpgradeTrans.objectStore(change.name);
                    change.add.forEach(function(idx) {
                        return $16271588ada7e89d$var$addIndex(store_1, idx);
                    });
                    change.change.forEach(function(idx) {
                        store_1.deleteIndex(idx.name);
                        $16271588ada7e89d$var$addIndex(store_1, idx);
                    });
                    change.del.forEach(function(idxName) {
                        return store_1.deleteIndex(idxName);
                    });
                }
            });
            var contentUpgrade = version._cfg.contentUpgrade;
            if (contentUpgrade && version._cfg.version > oldVersion) {
                $16271588ada7e89d$var$generateMiddlewareStacks(db, idbUpgradeTrans);
                trans._memoizedTables = {};
                anyContentUpgraderHasRun = true;
                var upgradeSchema_1 = $16271588ada7e89d$var$shallowClone(newSchema);
                diff.del.forEach(function(table) {
                    upgradeSchema_1[table] = oldSchema[table];
                });
                $16271588ada7e89d$var$removeTablesApi(db, [
                    db.Transaction.prototype
                ]);
                $16271588ada7e89d$var$setApiOnPlace(db, [
                    db.Transaction.prototype
                ], $16271588ada7e89d$var$keys(upgradeSchema_1), upgradeSchema_1);
                trans.schema = upgradeSchema_1;
                var contentUpgradeIsAsync_1 = $16271588ada7e89d$var$isAsyncFunction(contentUpgrade);
                if (contentUpgradeIsAsync_1) $16271588ada7e89d$var$incrementExpectedAwaits();
                var returnValue_1;
                var promiseFollowed = $16271588ada7e89d$var$DexiePromise.follow(function() {
                    returnValue_1 = contentUpgrade(trans);
                    if (returnValue_1) {
                        if (contentUpgradeIsAsync_1) {
                            var decrementor = $16271588ada7e89d$var$decrementExpectedAwaits.bind(null, null);
                            returnValue_1.then(decrementor, decrementor);
                        }
                    }
                });
                return returnValue_1 && typeof returnValue_1.then === "function" ? $16271588ada7e89d$var$DexiePromise.resolve(returnValue_1) : promiseFollowed.then(function() {
                    return returnValue_1;
                });
            }
        });
        queue.push(function(idbtrans) {
            if (!anyContentUpgraderHasRun || !$16271588ada7e89d$var$hasIEDeleteObjectStoreBug) {
                var newSchema = version._cfg.dbschema;
                $16271588ada7e89d$var$deleteRemovedTables(newSchema, idbtrans);
            }
            $16271588ada7e89d$var$removeTablesApi(db, [
                db.Transaction.prototype
            ]);
            $16271588ada7e89d$var$setApiOnPlace(db, [
                db.Transaction.prototype
            ], db._storeNames, db._dbSchema);
            trans.schema = db._dbSchema;
        });
    });
    function runQueue() {
        return queue.length ? $16271588ada7e89d$var$DexiePromise.resolve(queue.shift()(trans.idbtrans)).then(runQueue) : $16271588ada7e89d$var$DexiePromise.resolve();
    }
    return runQueue().then(function() {
        $16271588ada7e89d$var$createMissingTables(globalSchema, idbUpgradeTrans);
    });
}
function $16271588ada7e89d$var$getSchemaDiff(oldSchema, newSchema) {
    var diff = {
        del: [],
        add: [],
        change: []
    };
    var table;
    for(table in oldSchema)if (!newSchema[table]) diff.del.push(table);
    for(table in newSchema){
        var oldDef = oldSchema[table], newDef = newSchema[table];
        if (!oldDef) diff.add.push([
            table,
            newDef
        ]);
        else {
            var change = {
                name: table,
                def: newDef,
                recreate: false,
                del: [],
                add: [],
                change: []
            };
            if ("" + (oldDef.primKey.keyPath || "") !== "" + (newDef.primKey.keyPath || "") || oldDef.primKey.auto !== newDef.primKey.auto && !$16271588ada7e89d$var$isIEOrEdge) {
                change.recreate = true;
                diff.change.push(change);
            } else {
                var oldIndexes = oldDef.idxByName;
                var newIndexes = newDef.idxByName;
                var idxName = void 0;
                for(idxName in oldIndexes)if (!newIndexes[idxName]) change.del.push(idxName);
                for(idxName in newIndexes){
                    var oldIdx = oldIndexes[idxName], newIdx = newIndexes[idxName];
                    if (!oldIdx) change.add.push(newIdx);
                    else if (oldIdx.src !== newIdx.src) change.change.push(newIdx);
                }
                if (change.del.length > 0 || change.add.length > 0 || change.change.length > 0) diff.change.push(change);
            }
        }
    }
    return diff;
}
function $16271588ada7e89d$var$createTable(idbtrans, tableName, primKey, indexes) {
    var store = idbtrans.db.createObjectStore(tableName, primKey.keyPath ? {
        keyPath: primKey.keyPath,
        autoIncrement: primKey.auto
    } : {
        autoIncrement: primKey.auto
    });
    indexes.forEach(function(idx) {
        return $16271588ada7e89d$var$addIndex(store, idx);
    });
    return store;
}
function $16271588ada7e89d$var$createMissingTables(newSchema, idbtrans) {
    $16271588ada7e89d$var$keys(newSchema).forEach(function(tableName) {
        if (!idbtrans.db.objectStoreNames.contains(tableName)) $16271588ada7e89d$var$createTable(idbtrans, tableName, newSchema[tableName].primKey, newSchema[tableName].indexes);
    });
}
function $16271588ada7e89d$var$deleteRemovedTables(newSchema, idbtrans) {
    [].slice.call(idbtrans.db.objectStoreNames).forEach(function(storeName) {
        return newSchema[storeName] == null && idbtrans.db.deleteObjectStore(storeName);
    });
}
function $16271588ada7e89d$var$addIndex(store, idx) {
    store.createIndex(idx.name, idx.keyPath, {
        unique: idx.unique,
        multiEntry: idx.multi
    });
}
function $16271588ada7e89d$var$buildGlobalSchema(db, idbdb, tmpTrans) {
    var globalSchema = {};
    var dbStoreNames = $16271588ada7e89d$var$slice(idbdb.objectStoreNames, 0);
    dbStoreNames.forEach(function(storeName) {
        var store = tmpTrans.objectStore(storeName);
        var keyPath = store.keyPath;
        var primKey = $16271588ada7e89d$var$createIndexSpec($16271588ada7e89d$var$nameFromKeyPath(keyPath), keyPath || "", false, false, !!store.autoIncrement, keyPath && typeof keyPath !== "string", true);
        var indexes = [];
        for(var j = 0; j < store.indexNames.length; ++j){
            var idbindex = store.index(store.indexNames[j]);
            keyPath = idbindex.keyPath;
            var index = $16271588ada7e89d$var$createIndexSpec(idbindex.name, keyPath, !!idbindex.unique, !!idbindex.multiEntry, false, keyPath && typeof keyPath !== "string", false);
            indexes.push(index);
        }
        globalSchema[storeName] = $16271588ada7e89d$var$createTableSchema(storeName, primKey, indexes);
    });
    return globalSchema;
}
function $16271588ada7e89d$var$readGlobalSchema(_a, idbdb, tmpTrans) {
    var db = _a._novip;
    db.verno = idbdb.version / 10;
    var globalSchema = db._dbSchema = $16271588ada7e89d$var$buildGlobalSchema(db, idbdb, tmpTrans);
    db._storeNames = $16271588ada7e89d$var$slice(idbdb.objectStoreNames, 0);
    $16271588ada7e89d$var$setApiOnPlace(db, [
        db._allTables
    ], $16271588ada7e89d$var$keys(globalSchema), globalSchema);
}
function $16271588ada7e89d$var$verifyInstalledSchema(db, tmpTrans) {
    var installedSchema = $16271588ada7e89d$var$buildGlobalSchema(db, db.idbdb, tmpTrans);
    var diff = $16271588ada7e89d$var$getSchemaDiff(installedSchema, db._dbSchema);
    return !(diff.add.length || diff.change.some(function(ch) {
        return ch.add.length || ch.change.length;
    }));
}
function $16271588ada7e89d$var$adjustToExistingIndexNames(_a, schema, idbtrans) {
    var db = _a._novip;
    var storeNames = idbtrans.db.objectStoreNames;
    for(var i = 0; i < storeNames.length; ++i){
        var storeName = storeNames[i];
        var store = idbtrans.objectStore(storeName);
        db._hasGetAll = "getAll" in store;
        for(var j = 0; j < store.indexNames.length; ++j){
            var indexName = store.indexNames[j];
            var keyPath = store.index(indexName).keyPath;
            var dexieName = typeof keyPath === "string" ? keyPath : "[" + $16271588ada7e89d$var$slice(keyPath).join("+") + "]";
            if (schema[storeName]) {
                var indexSpec = schema[storeName].idxByName[dexieName];
                if (indexSpec) {
                    indexSpec.name = indexName;
                    delete schema[storeName].idxByName[dexieName];
                    schema[storeName].idxByName[indexName] = indexSpec;
                }
            }
        }
    }
    if (typeof navigator !== "undefined" && /Safari/.test(navigator.userAgent) && !/(Chrome\/|Edge\/)/.test(navigator.userAgent) && $16271588ada7e89d$var$_global.WorkerGlobalScope && $16271588ada7e89d$var$_global instanceof $16271588ada7e89d$var$_global.WorkerGlobalScope && [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604) db._hasGetAll = false;
}
function $16271588ada7e89d$var$parseIndexSyntax(primKeyAndIndexes) {
    return primKeyAndIndexes.split(",").map(function(index, indexNum) {
        index = index.trim();
        var name = index.replace(/([&*]|\+\+)/g, "");
        var keyPath = /^\[/.test(name) ? name.match(/^\[(.*)\]$/)[1].split("+") : name;
        return $16271588ada7e89d$var$createIndexSpec(name, keyPath || null, /\&/.test(index), /\*/.test(index), /\+\+/.test(index), $16271588ada7e89d$var$isArray(keyPath), indexNum === 0);
    });
}
var $16271588ada7e89d$var$Version = function() {
    function Version() {}
    Version.prototype._parseStoresSpec = function(stores, outSchema) {
        $16271588ada7e89d$var$keys(stores).forEach(function(tableName) {
            if (stores[tableName] !== null) {
                var indexes = $16271588ada7e89d$var$parseIndexSyntax(stores[tableName]);
                var primKey = indexes.shift();
                if (primKey.multi) throw new $16271588ada7e89d$var$exceptions.Schema("Primary key cannot be multi-valued");
                indexes.forEach(function(idx) {
                    if (idx.auto) throw new $16271588ada7e89d$var$exceptions.Schema("Only primary key can be marked as autoIncrement (++)");
                    if (!idx.keyPath) throw new $16271588ada7e89d$var$exceptions.Schema("Index must have a name and cannot be an empty string");
                });
                outSchema[tableName] = $16271588ada7e89d$var$createTableSchema(tableName, primKey, indexes);
            }
        });
    };
    Version.prototype.stores = function(stores) {
        var db = this.db;
        this._cfg.storesSource = this._cfg.storesSource ? $16271588ada7e89d$var$extend(this._cfg.storesSource, stores) : stores;
        var versions = db._versions;
        var storesSpec = {};
        var dbschema = {};
        versions.forEach(function(version) {
            $16271588ada7e89d$var$extend(storesSpec, version._cfg.storesSource);
            dbschema = version._cfg.dbschema = {};
            version._parseStoresSpec(storesSpec, dbschema);
        });
        db._dbSchema = dbschema;
        $16271588ada7e89d$var$removeTablesApi(db, [
            db._allTables,
            db,
            db.Transaction.prototype
        ]);
        $16271588ada7e89d$var$setApiOnPlace(db, [
            db._allTables,
            db,
            db.Transaction.prototype,
            this._cfg.tables
        ], $16271588ada7e89d$var$keys(dbschema), dbschema);
        db._storeNames = $16271588ada7e89d$var$keys(dbschema);
        return this;
    };
    Version.prototype.upgrade = function(upgradeFunction) {
        this._cfg.contentUpgrade = $16271588ada7e89d$var$promisableChain(this._cfg.contentUpgrade || $16271588ada7e89d$var$nop, upgradeFunction);
        return this;
    };
    return Version;
}();
function $16271588ada7e89d$var$createVersionConstructor(db) {
    return $16271588ada7e89d$var$makeClassConstructor($16271588ada7e89d$var$Version.prototype, function Version(versionNumber) {
        this.db = db;
        this._cfg = {
            version: versionNumber,
            storesSource: null,
            dbschema: {},
            tables: {},
            contentUpgrade: null
        };
    });
}
function $16271588ada7e89d$var$getDbNamesTable(indexedDB1, IDBKeyRange) {
    var dbNamesDB = indexedDB1["_dbNamesDB"];
    if (!dbNamesDB) {
        dbNamesDB = indexedDB1["_dbNamesDB"] = new $16271588ada7e89d$export$4ece27d405df7279($16271588ada7e89d$var$DBNAMES_DB, {
            addons: [],
            indexedDB: indexedDB1,
            IDBKeyRange: IDBKeyRange
        });
        dbNamesDB.version(1).stores({
            dbnames: "name"
        });
    }
    return dbNamesDB.table("dbnames");
}
function $16271588ada7e89d$var$hasDatabasesNative(indexedDB1) {
    return indexedDB1 && typeof indexedDB1.databases === "function";
}
function $16271588ada7e89d$var$getDatabaseNames(_a) {
    var indexedDB1 = _a.indexedDB, IDBKeyRange = _a.IDBKeyRange;
    return $16271588ada7e89d$var$hasDatabasesNative(indexedDB1) ? Promise.resolve(indexedDB1.databases()).then(function(infos) {
        return infos.map(function(info) {
            return info.name;
        }).filter(function(name) {
            return name !== $16271588ada7e89d$var$DBNAMES_DB;
        });
    }) : $16271588ada7e89d$var$getDbNamesTable(indexedDB1, IDBKeyRange).toCollection().primaryKeys();
}
function $16271588ada7e89d$var$_onDatabaseCreated(_a, name) {
    var indexedDB1 = _a.indexedDB, IDBKeyRange = _a.IDBKeyRange;
    !$16271588ada7e89d$var$hasDatabasesNative(indexedDB1) && name !== $16271588ada7e89d$var$DBNAMES_DB && $16271588ada7e89d$var$getDbNamesTable(indexedDB1, IDBKeyRange).put({
        name: name
    }).catch($16271588ada7e89d$var$nop);
}
function $16271588ada7e89d$var$_onDatabaseDeleted(_a, name) {
    var indexedDB1 = _a.indexedDB, IDBKeyRange = _a.IDBKeyRange;
    !$16271588ada7e89d$var$hasDatabasesNative(indexedDB1) && name !== $16271588ada7e89d$var$DBNAMES_DB && $16271588ada7e89d$var$getDbNamesTable(indexedDB1, IDBKeyRange).delete(name).catch($16271588ada7e89d$var$nop);
}
function $16271588ada7e89d$var$vip(fn) {
    return $16271588ada7e89d$var$newScope(function() {
        $16271588ada7e89d$var$PSD.letThrough = true;
        return fn();
    });
}
function $16271588ada7e89d$var$idbReady() {
    var isSafari = !navigator.userAgentData && /Safari\//.test(navigator.userAgent) && !/Chrom(e|ium)\//.test(navigator.userAgent);
    if (!isSafari || !indexedDB.databases) return Promise.resolve();
    var intervalId;
    return new Promise(function(resolve) {
        var tryIdb = function() {
            return indexedDB.databases().finally(resolve);
        };
        intervalId = setInterval(tryIdb, 100);
        tryIdb();
    }).finally(function() {
        return clearInterval(intervalId);
    });
}
function $16271588ada7e89d$var$dexieOpen(db) {
    var state = db._state;
    var indexedDB1 = db._deps.indexedDB;
    if (state.isBeingOpened || db.idbdb) return state.dbReadyPromise.then(function() {
        return state.dbOpenError ? $16271588ada7e89d$var$rejection(state.dbOpenError) : db;
    });
    $16271588ada7e89d$var$debug && (state.openCanceller._stackHolder = $16271588ada7e89d$var$getErrorWithStack());
    state.isBeingOpened = true;
    state.dbOpenError = null;
    state.openComplete = false;
    var openCanceller = state.openCanceller;
    function throwIfCancelled() {
        if (state.openCanceller !== openCanceller) throw new $16271588ada7e89d$var$exceptions.DatabaseClosed("db.open() was cancelled");
    }
    var resolveDbReady = state.dbReadyResolve, upgradeTransaction = null, wasCreated = false;
    return $16271588ada7e89d$var$DexiePromise.race([
        openCanceller,
        (typeof navigator === "undefined" ? $16271588ada7e89d$var$DexiePromise.resolve() : $16271588ada7e89d$var$idbReady()).then(function() {
            return new $16271588ada7e89d$var$DexiePromise(function(resolve, reject) {
                throwIfCancelled();
                if (!indexedDB1) throw new $16271588ada7e89d$var$exceptions.MissingAPI();
                var dbName = db.name;
                var req = state.autoSchema ? indexedDB1.open(dbName) : indexedDB1.open(dbName, Math.round(db.verno * 10));
                if (!req) throw new $16271588ada7e89d$var$exceptions.MissingAPI();
                req.onerror = $16271588ada7e89d$var$eventRejectHandler(reject);
                req.onblocked = $16271588ada7e89d$var$wrap(db._fireOnBlocked);
                req.onupgradeneeded = $16271588ada7e89d$var$wrap(function(e) {
                    upgradeTransaction = req.transaction;
                    if (state.autoSchema && !db._options.allowEmptyDB) {
                        req.onerror = $16271588ada7e89d$var$preventDefault;
                        upgradeTransaction.abort();
                        req.result.close();
                        var delreq = indexedDB1.deleteDatabase(dbName);
                        delreq.onsuccess = delreq.onerror = $16271588ada7e89d$var$wrap(function() {
                            reject(new $16271588ada7e89d$var$exceptions.NoSuchDatabase("Database " + dbName + " doesnt exist"));
                        });
                    } else {
                        upgradeTransaction.onerror = $16271588ada7e89d$var$eventRejectHandler(reject);
                        var oldVer = e.oldVersion > Math.pow(2, 62) ? 0 : e.oldVersion;
                        wasCreated = oldVer < 1;
                        db._novip.idbdb = req.result;
                        $16271588ada7e89d$var$runUpgraders(db, oldVer / 10, upgradeTransaction, reject);
                    }
                }, reject);
                req.onsuccess = $16271588ada7e89d$var$wrap(function() {
                    upgradeTransaction = null;
                    var idbdb = db._novip.idbdb = req.result;
                    var objectStoreNames = $16271588ada7e89d$var$slice(idbdb.objectStoreNames);
                    if (objectStoreNames.length > 0) try {
                        var tmpTrans = idbdb.transaction($16271588ada7e89d$var$safariMultiStoreFix(objectStoreNames), "readonly");
                        if (state.autoSchema) $16271588ada7e89d$var$readGlobalSchema(db, idbdb, tmpTrans);
                        else {
                            $16271588ada7e89d$var$adjustToExistingIndexNames(db, db._dbSchema, tmpTrans);
                            if (!$16271588ada7e89d$var$verifyInstalledSchema(db, tmpTrans)) console.warn("Dexie SchemaDiff: Schema was extended without increasing the number passed to db.version(). Some queries may fail.");
                        }
                        $16271588ada7e89d$var$generateMiddlewareStacks(db, tmpTrans);
                    } catch (e) {}
                    $16271588ada7e89d$var$connections.push(db);
                    idbdb.onversionchange = $16271588ada7e89d$var$wrap(function(ev) {
                        state.vcFired = true;
                        db.on("versionchange").fire(ev);
                    });
                    idbdb.onclose = $16271588ada7e89d$var$wrap(function(ev) {
                        db.on("close").fire(ev);
                    });
                    if (wasCreated) $16271588ada7e89d$var$_onDatabaseCreated(db._deps, dbName);
                    resolve();
                }, reject);
            });
        })
    ]).then(function() {
        throwIfCancelled();
        state.onReadyBeingFired = [];
        return $16271588ada7e89d$var$DexiePromise.resolve($16271588ada7e89d$var$vip(function() {
            return db.on.ready.fire(db.vip);
        })).then(function fireRemainders() {
            if (state.onReadyBeingFired.length > 0) {
                var remainders_1 = state.onReadyBeingFired.reduce($16271588ada7e89d$var$promisableChain, $16271588ada7e89d$var$nop);
                state.onReadyBeingFired = [];
                return $16271588ada7e89d$var$DexiePromise.resolve($16271588ada7e89d$var$vip(function() {
                    return remainders_1(db.vip);
                })).then(fireRemainders);
            }
        });
    }).finally(function() {
        state.onReadyBeingFired = null;
        state.isBeingOpened = false;
    }).then(function() {
        return db;
    }).catch(function(err) {
        state.dbOpenError = err;
        try {
            upgradeTransaction && upgradeTransaction.abort();
        } catch (_a) {}
        if (openCanceller === state.openCanceller) db._close();
        return $16271588ada7e89d$var$rejection(err);
    }).finally(function() {
        state.openComplete = true;
        resolveDbReady();
    });
}
function $16271588ada7e89d$var$awaitIterator(iterator) {
    var callNext = function(result) {
        return iterator.next(result);
    }, doThrow = function(error) {
        return iterator.throw(error);
    }, onSuccess = step(callNext), onError = step(doThrow);
    function step(getNext) {
        return function(val) {
            var next = getNext(val), value = next.value;
            return next.done ? value : !value || typeof value.then !== "function" ? $16271588ada7e89d$var$isArray(value) ? Promise.all(value).then(onSuccess, onError) : onSuccess(value) : value.then(onSuccess, onError);
        };
    }
    return step(callNext)();
}
function $16271588ada7e89d$var$extractTransactionArgs(mode, _tableArgs_, scopeFunc) {
    var i = arguments.length;
    if (i < 2) throw new $16271588ada7e89d$var$exceptions.InvalidArgument("Too few arguments");
    var args = new Array(i - 1);
    while(--i)args[i - 1] = arguments[i];
    scopeFunc = args.pop();
    var tables = $16271588ada7e89d$var$flatten(args);
    return [
        mode,
        tables,
        scopeFunc
    ];
}
function $16271588ada7e89d$var$enterTransactionScope(db, mode, storeNames, parentTransaction, scopeFunc) {
    return $16271588ada7e89d$var$DexiePromise.resolve().then(function() {
        var transless = $16271588ada7e89d$var$PSD.transless || $16271588ada7e89d$var$PSD;
        var trans = db._createTransaction(mode, storeNames, db._dbSchema, parentTransaction);
        var zoneProps = {
            trans: trans,
            transless: transless
        };
        if (parentTransaction) trans.idbtrans = parentTransaction.idbtrans;
        else try {
            trans.create();
            db._state.PR1398_maxLoop = 3;
        } catch (ex) {
            if (ex.name === $16271588ada7e89d$var$errnames.InvalidState && db.isOpen() && --db._state.PR1398_maxLoop > 0) {
                console.warn("Dexie: Need to reopen db");
                db._close();
                return db.open().then(function() {
                    return $16271588ada7e89d$var$enterTransactionScope(db, mode, storeNames, null, scopeFunc);
                });
            }
            return $16271588ada7e89d$var$rejection(ex);
        }
        var scopeFuncIsAsync = $16271588ada7e89d$var$isAsyncFunction(scopeFunc);
        if (scopeFuncIsAsync) $16271588ada7e89d$var$incrementExpectedAwaits();
        var returnValue;
        var promiseFollowed = $16271588ada7e89d$var$DexiePromise.follow(function() {
            returnValue = scopeFunc.call(trans, trans);
            if (returnValue) {
                if (scopeFuncIsAsync) {
                    var decrementor = $16271588ada7e89d$var$decrementExpectedAwaits.bind(null, null);
                    returnValue.then(decrementor, decrementor);
                } else if (typeof returnValue.next === "function" && typeof returnValue.throw === "function") returnValue = $16271588ada7e89d$var$awaitIterator(returnValue);
            }
        }, zoneProps);
        return (returnValue && typeof returnValue.then === "function" ? $16271588ada7e89d$var$DexiePromise.resolve(returnValue).then(function(x) {
            return trans.active ? x : $16271588ada7e89d$var$rejection(new $16271588ada7e89d$var$exceptions.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn"));
        }) : promiseFollowed.then(function() {
            return returnValue;
        })).then(function(x) {
            if (parentTransaction) trans._resolve();
            return trans._completion.then(function() {
                return x;
            });
        }).catch(function(e) {
            trans._reject(e);
            return $16271588ada7e89d$var$rejection(e);
        });
    });
}
function $16271588ada7e89d$var$pad(a, value, count) {
    var result = $16271588ada7e89d$var$isArray(a) ? a.slice() : [
        a
    ];
    for(var i = 0; i < count; ++i)result.push(value);
    return result;
}
function $16271588ada7e89d$var$createVirtualIndexMiddleware(down) {
    return $16271588ada7e89d$var$__assign($16271588ada7e89d$var$__assign({}, down), {
        table: function(tableName) {
            var table = down.table(tableName);
            var schema = table.schema;
            var indexLookup = {};
            var allVirtualIndexes = [];
            function addVirtualIndexes(keyPath, keyTail, lowLevelIndex) {
                var keyPathAlias = $16271588ada7e89d$var$getKeyPathAlias(keyPath);
                var indexList = indexLookup[keyPathAlias] = indexLookup[keyPathAlias] || [];
                var keyLength = keyPath == null ? 0 : typeof keyPath === "string" ? 1 : keyPath.length;
                var isVirtual = keyTail > 0;
                var virtualIndex = $16271588ada7e89d$var$__assign($16271588ada7e89d$var$__assign({}, lowLevelIndex), {
                    isVirtual: isVirtual,
                    keyTail: keyTail,
                    keyLength: keyLength,
                    extractKey: $16271588ada7e89d$var$getKeyExtractor(keyPath),
                    unique: !isVirtual && lowLevelIndex.unique
                });
                indexList.push(virtualIndex);
                if (!virtualIndex.isPrimaryKey) allVirtualIndexes.push(virtualIndex);
                if (keyLength > 1) {
                    var virtualKeyPath = keyLength === 2 ? keyPath[0] : keyPath.slice(0, keyLength - 1);
                    addVirtualIndexes(virtualKeyPath, keyTail + 1, lowLevelIndex);
                }
                indexList.sort(function(a, b) {
                    return a.keyTail - b.keyTail;
                });
                return virtualIndex;
            }
            var primaryKey = addVirtualIndexes(schema.primaryKey.keyPath, 0, schema.primaryKey);
            indexLookup[":id"] = [
                primaryKey
            ];
            for(var _i = 0, _a = schema.indexes; _i < _a.length; _i++){
                var index = _a[_i];
                addVirtualIndexes(index.keyPath, 0, index);
            }
            function findBestIndex(keyPath) {
                var result = indexLookup[$16271588ada7e89d$var$getKeyPathAlias(keyPath)];
                return result && result[0];
            }
            function translateRange(range, keyTail) {
                return {
                    type: range.type === 1 ? 2 : range.type,
                    lower: $16271588ada7e89d$var$pad(range.lower, range.lowerOpen ? down.MAX_KEY : down.MIN_KEY, keyTail),
                    lowerOpen: true,
                    upper: $16271588ada7e89d$var$pad(range.upper, range.upperOpen ? down.MIN_KEY : down.MAX_KEY, keyTail),
                    upperOpen: true
                };
            }
            function translateRequest(req) {
                var index = req.query.index;
                return index.isVirtual ? $16271588ada7e89d$var$__assign($16271588ada7e89d$var$__assign({}, req), {
                    query: {
                        index: index,
                        range: translateRange(req.query.range, index.keyTail)
                    }
                }) : req;
            }
            var result = $16271588ada7e89d$var$__assign($16271588ada7e89d$var$__assign({}, table), {
                schema: $16271588ada7e89d$var$__assign($16271588ada7e89d$var$__assign({}, schema), {
                    primaryKey: primaryKey,
                    indexes: allVirtualIndexes,
                    getIndexByKeyPath: findBestIndex
                }),
                count: function(req) {
                    return table.count(translateRequest(req));
                },
                query: function(req) {
                    return table.query(translateRequest(req));
                },
                openCursor: function(req) {
                    var _a = req.query.index, keyTail = _a.keyTail, isVirtual = _a.isVirtual, keyLength = _a.keyLength;
                    if (!isVirtual) return table.openCursor(req);
                    function createVirtualCursor(cursor) {
                        function _continue(key) {
                            key != null ? cursor.continue($16271588ada7e89d$var$pad(key, req.reverse ? down.MAX_KEY : down.MIN_KEY, keyTail)) : req.unique ? cursor.continue(cursor.key.slice(0, keyLength).concat(req.reverse ? down.MIN_KEY : down.MAX_KEY, keyTail)) : cursor.continue();
                        }
                        var virtualCursor = Object.create(cursor, {
                            continue: {
                                value: _continue
                            },
                            continuePrimaryKey: {
                                value: function(key, primaryKey) {
                                    cursor.continuePrimaryKey($16271588ada7e89d$var$pad(key, down.MAX_KEY, keyTail), primaryKey);
                                }
                            },
                            primaryKey: {
                                get: function() {
                                    return cursor.primaryKey;
                                }
                            },
                            key: {
                                get: function() {
                                    var key = cursor.key;
                                    return keyLength === 1 ? key[0] : key.slice(0, keyLength);
                                }
                            },
                            value: {
                                get: function() {
                                    return cursor.value;
                                }
                            }
                        });
                        return virtualCursor;
                    }
                    return table.openCursor(translateRequest(req)).then(function(cursor) {
                        return cursor && createVirtualCursor(cursor);
                    });
                }
            });
            return result;
        }
    });
}
var $16271588ada7e89d$var$virtualIndexMiddleware = {
    stack: "dbcore",
    name: "VirtualIndexMiddleware",
    level: 1,
    create: $16271588ada7e89d$var$createVirtualIndexMiddleware
};
function $16271588ada7e89d$var$getObjectDiff(a, b, rv, prfx) {
    rv = rv || {};
    prfx = prfx || "";
    $16271588ada7e89d$var$keys(a).forEach(function(prop) {
        if (!$16271588ada7e89d$var$hasOwn(b, prop)) rv[prfx + prop] = undefined;
        else {
            var ap = a[prop], bp = b[prop];
            if (typeof ap === "object" && typeof bp === "object" && ap && bp) {
                var apTypeName = $16271588ada7e89d$var$toStringTag(ap);
                var bpTypeName = $16271588ada7e89d$var$toStringTag(bp);
                if (apTypeName !== bpTypeName) rv[prfx + prop] = b[prop];
                else if (apTypeName === "Object") $16271588ada7e89d$var$getObjectDiff(ap, bp, rv, prfx + prop + ".");
                else if (ap !== bp) rv[prfx + prop] = b[prop];
            } else if (ap !== bp) rv[prfx + prop] = b[prop];
        }
    });
    $16271588ada7e89d$var$keys(b).forEach(function(prop) {
        if (!$16271588ada7e89d$var$hasOwn(a, prop)) rv[prfx + prop] = b[prop];
    });
    return rv;
}
function $16271588ada7e89d$var$getEffectiveKeys(primaryKey, req) {
    if (req.type === "delete") return req.keys;
    return req.keys || req.values.map(primaryKey.extractKey);
}
var $16271588ada7e89d$var$hooksMiddleware = {
    stack: "dbcore",
    name: "HooksMiddleware",
    level: 2,
    create: function(downCore) {
        return $16271588ada7e89d$var$__assign($16271588ada7e89d$var$__assign({}, downCore), {
            table: function(tableName) {
                var downTable = downCore.table(tableName);
                var primaryKey = downTable.schema.primaryKey;
                var tableMiddleware = $16271588ada7e89d$var$__assign($16271588ada7e89d$var$__assign({}, downTable), {
                    mutate: function(req) {
                        var dxTrans = $16271588ada7e89d$var$PSD.trans;
                        var _a = dxTrans.table(tableName).hook, deleting = _a.deleting, creating = _a.creating, updating = _a.updating;
                        switch(req.type){
                            case "add":
                                if (creating.fire === $16271588ada7e89d$var$nop) break;
                                return dxTrans._promise("readwrite", function() {
                                    return addPutOrDelete(req);
                                }, true);
                            case "put":
                                if (creating.fire === $16271588ada7e89d$var$nop && updating.fire === $16271588ada7e89d$var$nop) break;
                                return dxTrans._promise("readwrite", function() {
                                    return addPutOrDelete(req);
                                }, true);
                            case "delete":
                                if (deleting.fire === $16271588ada7e89d$var$nop) break;
                                return dxTrans._promise("readwrite", function() {
                                    return addPutOrDelete(req);
                                }, true);
                            case "deleteRange":
                                if (deleting.fire === $16271588ada7e89d$var$nop) break;
                                return dxTrans._promise("readwrite", function() {
                                    return deleteRange(req);
                                }, true);
                        }
                        return downTable.mutate(req);
                        function addPutOrDelete(req) {
                            var dxTrans = $16271588ada7e89d$var$PSD.trans;
                            var keys = req.keys || $16271588ada7e89d$var$getEffectiveKeys(primaryKey, req);
                            if (!keys) throw new Error("Keys missing");
                            req = req.type === "add" || req.type === "put" ? $16271588ada7e89d$var$__assign($16271588ada7e89d$var$__assign({}, req), {
                                keys: keys
                            }) : $16271588ada7e89d$var$__assign({}, req);
                            if (req.type !== "delete") req.values = $16271588ada7e89d$var$__spreadArray([], req.values, true);
                            if (req.keys) req.keys = $16271588ada7e89d$var$__spreadArray([], req.keys, true);
                            return $16271588ada7e89d$var$getExistingValues(downTable, req, keys).then(function(existingValues) {
                                var contexts = keys.map(function(key, i) {
                                    var existingValue = existingValues[i];
                                    var ctx = {
                                        onerror: null,
                                        onsuccess: null
                                    };
                                    if (req.type === "delete") deleting.fire.call(ctx, key, existingValue, dxTrans);
                                    else if (req.type === "add" || existingValue === undefined) {
                                        var generatedPrimaryKey = creating.fire.call(ctx, key, req.values[i], dxTrans);
                                        if (key == null && generatedPrimaryKey != null) {
                                            key = generatedPrimaryKey;
                                            req.keys[i] = key;
                                            if (!primaryKey.outbound) $16271588ada7e89d$var$setByKeyPath(req.values[i], primaryKey.keyPath, key);
                                        }
                                    } else {
                                        var objectDiff = $16271588ada7e89d$var$getObjectDiff(existingValue, req.values[i]);
                                        var additionalChanges_1 = updating.fire.call(ctx, objectDiff, key, existingValue, dxTrans);
                                        if (additionalChanges_1) {
                                            var requestedValue_1 = req.values[i];
                                            Object.keys(additionalChanges_1).forEach(function(keyPath) {
                                                if ($16271588ada7e89d$var$hasOwn(requestedValue_1, keyPath)) requestedValue_1[keyPath] = additionalChanges_1[keyPath];
                                                else $16271588ada7e89d$var$setByKeyPath(requestedValue_1, keyPath, additionalChanges_1[keyPath]);
                                            });
                                        }
                                    }
                                    return ctx;
                                });
                                return downTable.mutate(req).then(function(_a) {
                                    var failures = _a.failures, results = _a.results, numFailures = _a.numFailures, lastResult = _a.lastResult;
                                    for(var i = 0; i < keys.length; ++i){
                                        var primKey = results ? results[i] : keys[i];
                                        var ctx = contexts[i];
                                        if (primKey == null) ctx.onerror && ctx.onerror(failures[i]);
                                        else ctx.onsuccess && ctx.onsuccess(req.type === "put" && existingValues[i] ? req.values[i] : primKey);
                                    }
                                    return {
                                        failures: failures,
                                        results: results,
                                        numFailures: numFailures,
                                        lastResult: lastResult
                                    };
                                }).catch(function(error) {
                                    contexts.forEach(function(ctx) {
                                        return ctx.onerror && ctx.onerror(error);
                                    });
                                    return Promise.reject(error);
                                });
                            });
                        }
                        function deleteRange(req) {
                            return deleteNextChunk(req.trans, req.range, 10000);
                        }
                        function deleteNextChunk(trans, range, limit) {
                            return downTable.query({
                                trans: trans,
                                values: false,
                                query: {
                                    index: primaryKey,
                                    range: range
                                },
                                limit: limit
                            }).then(function(_a) {
                                var result = _a.result;
                                return addPutOrDelete({
                                    type: "delete",
                                    keys: result,
                                    trans: trans
                                }).then(function(res) {
                                    if (res.numFailures > 0) return Promise.reject(res.failures[0]);
                                    if (result.length < limit) return {
                                        failures: [],
                                        numFailures: 0,
                                        lastResult: undefined
                                    };
                                    else return deleteNextChunk(trans, $16271588ada7e89d$var$__assign($16271588ada7e89d$var$__assign({}, range), {
                                        lower: result[result.length - 1],
                                        lowerOpen: true
                                    }), limit);
                                });
                            });
                        }
                    }
                });
                return tableMiddleware;
            }
        });
    }
};
function $16271588ada7e89d$var$getExistingValues(table, req, effectiveKeys) {
    return req.type === "add" ? Promise.resolve([]) : table.getMany({
        trans: req.trans,
        keys: effectiveKeys,
        cache: "immutable"
    });
}
function $16271588ada7e89d$var$getFromTransactionCache(keys, cache, clone) {
    try {
        if (!cache) return null;
        if (cache.keys.length < keys.length) return null;
        var result = [];
        for(var i = 0, j = 0; i < cache.keys.length && j < keys.length; ++i){
            if ($16271588ada7e89d$var$cmp(cache.keys[i], keys[j]) !== 0) continue;
            result.push(clone ? $16271588ada7e89d$var$deepClone(cache.values[i]) : cache.values[i]);
            ++j;
        }
        return result.length === keys.length ? result : null;
    } catch (_a) {
        return null;
    }
}
var $16271588ada7e89d$var$cacheExistingValuesMiddleware = {
    stack: "dbcore",
    level: -1,
    create: function(core) {
        return {
            table: function(tableName) {
                var table = core.table(tableName);
                return $16271588ada7e89d$var$__assign($16271588ada7e89d$var$__assign({}, table), {
                    getMany: function(req) {
                        if (!req.cache) return table.getMany(req);
                        var cachedResult = $16271588ada7e89d$var$getFromTransactionCache(req.keys, req.trans["_cache"], req.cache === "clone");
                        if (cachedResult) return $16271588ada7e89d$var$DexiePromise.resolve(cachedResult);
                        return table.getMany(req).then(function(res) {
                            req.trans["_cache"] = {
                                keys: req.keys,
                                values: req.cache === "clone" ? $16271588ada7e89d$var$deepClone(res) : res
                            };
                            return res;
                        });
                    },
                    mutate: function(req) {
                        if (req.type !== "add") req.trans["_cache"] = null;
                        return table.mutate(req);
                    }
                });
            }
        };
    }
};
var $16271588ada7e89d$var$_a;
function $16271588ada7e89d$var$isEmptyRange(node) {
    return !("from" in node);
}
var $16271588ada7e89d$export$34cb5241245008dd = function(fromOrTree, to) {
    if (this) $16271588ada7e89d$var$extend(this, arguments.length ? {
        d: 1,
        from: fromOrTree,
        to: arguments.length > 1 ? to : fromOrTree
    } : {
        d: 0
    });
    else {
        var rv = new $16271588ada7e89d$export$34cb5241245008dd();
        if (fromOrTree && "d" in fromOrTree) $16271588ada7e89d$var$extend(rv, fromOrTree);
        return rv;
    }
};
$16271588ada7e89d$var$props($16271588ada7e89d$export$34cb5241245008dd.prototype, ($16271588ada7e89d$var$_a = {
    add: function(rangeSet) {
        $16271588ada7e89d$export$4876cc3130d3f820(this, rangeSet);
        return this;
    },
    addKey: function(key) {
        $16271588ada7e89d$var$addRange(this, key, key);
        return this;
    },
    addKeys: function(keys) {
        var _this = this;
        keys.forEach(function(key) {
            return $16271588ada7e89d$var$addRange(_this, key, key);
        });
        return this;
    }
}, $16271588ada7e89d$var$_a[$16271588ada7e89d$var$iteratorSymbol] = function() {
    return $16271588ada7e89d$var$getRangeSetIterator(this);
}, $16271588ada7e89d$var$_a));
function $16271588ada7e89d$var$addRange(target, from, to) {
    var diff = $16271588ada7e89d$var$cmp(from, to);
    if (isNaN(diff)) return;
    if (diff > 0) throw RangeError();
    if ($16271588ada7e89d$var$isEmptyRange(target)) return $16271588ada7e89d$var$extend(target, {
        from: from,
        to: to,
        d: 1
    });
    var left = target.l;
    var right = target.r;
    if ($16271588ada7e89d$var$cmp(to, target.from) < 0) {
        left ? $16271588ada7e89d$var$addRange(left, from, to) : target.l = {
            from: from,
            to: to,
            d: 1,
            l: null,
            r: null
        };
        return $16271588ada7e89d$var$rebalance(target);
    }
    if ($16271588ada7e89d$var$cmp(from, target.to) > 0) {
        right ? $16271588ada7e89d$var$addRange(right, from, to) : target.r = {
            from: from,
            to: to,
            d: 1,
            l: null,
            r: null
        };
        return $16271588ada7e89d$var$rebalance(target);
    }
    if ($16271588ada7e89d$var$cmp(from, target.from) < 0) {
        target.from = from;
        target.l = null;
        target.d = right ? right.d + 1 : 1;
    }
    if ($16271588ada7e89d$var$cmp(to, target.to) > 0) {
        target.to = to;
        target.r = null;
        target.d = target.l ? target.l.d + 1 : 1;
    }
    var rightWasCutOff = !target.r;
    if (left && !target.l) $16271588ada7e89d$export$4876cc3130d3f820(target, left);
    if (right && rightWasCutOff) $16271588ada7e89d$export$4876cc3130d3f820(target, right);
}
function $16271588ada7e89d$export$4876cc3130d3f820(target, newSet) {
    function _addRangeSet(target, _a) {
        var from = _a.from, to = _a.to, l = _a.l, r = _a.r;
        $16271588ada7e89d$var$addRange(target, from, to);
        if (l) _addRangeSet(target, l);
        if (r) _addRangeSet(target, r);
    }
    if (!$16271588ada7e89d$var$isEmptyRange(newSet)) _addRangeSet(target, newSet);
}
function $16271588ada7e89d$export$8f43b23b5d8de905(rangeSet1, rangeSet2) {
    var i1 = $16271588ada7e89d$var$getRangeSetIterator(rangeSet2);
    var nextResult1 = i1.next();
    if (nextResult1.done) return false;
    var a = nextResult1.value;
    var i2 = $16271588ada7e89d$var$getRangeSetIterator(rangeSet1);
    var nextResult2 = i2.next(a.from);
    var b = nextResult2.value;
    while(!nextResult1.done && !nextResult2.done){
        if ($16271588ada7e89d$var$cmp(b.from, a.to) <= 0 && $16271588ada7e89d$var$cmp(b.to, a.from) >= 0) return true;
        $16271588ada7e89d$var$cmp(a.from, b.from) < 0 ? a = (nextResult1 = i1.next(b.from)).value : b = (nextResult2 = i2.next(a.from)).value;
    }
    return false;
}
function $16271588ada7e89d$var$getRangeSetIterator(node) {
    var state = $16271588ada7e89d$var$isEmptyRange(node) ? null : {
        s: 0,
        n: node
    };
    return {
        next: function(key) {
            var keyProvided = arguments.length > 0;
            while(state)switch(state.s){
                case 0:
                    state.s = 1;
                    if (keyProvided) while(state.n.l && $16271588ada7e89d$var$cmp(key, state.n.from) < 0)state = {
                        up: state,
                        n: state.n.l,
                        s: 1
                    };
                    else while(state.n.l)state = {
                        up: state,
                        n: state.n.l,
                        s: 1
                    };
                case 1:
                    state.s = 2;
                    if (!keyProvided || $16271588ada7e89d$var$cmp(key, state.n.to) <= 0) return {
                        value: state.n,
                        done: false
                    };
                case 2:
                    if (state.n.r) {
                        state.s = 3;
                        state = {
                            up: state,
                            n: state.n.r,
                            s: 0
                        };
                        continue;
                    }
                case 3:
                    state = state.up;
            }
            return {
                done: true
            };
        }
    };
}
function $16271588ada7e89d$var$rebalance(target) {
    var _a, _b;
    var diff = (((_a = target.r) === null || _a === void 0 ? void 0 : _a.d) || 0) - (((_b = target.l) === null || _b === void 0 ? void 0 : _b.d) || 0);
    var r = diff > 1 ? "r" : diff < -1 ? "l" : "";
    if (r) {
        var l = r === "r" ? "l" : "r";
        var rootClone = $16271588ada7e89d$var$__assign({}, target);
        var oldRootRight = target[r];
        target.from = oldRootRight.from;
        target.to = oldRootRight.to;
        target[r] = oldRootRight[r];
        rootClone[r] = oldRootRight[l];
        target[l] = rootClone;
        rootClone.d = $16271588ada7e89d$var$computeDepth(rootClone);
    }
    target.d = $16271588ada7e89d$var$computeDepth(target);
}
function $16271588ada7e89d$var$computeDepth(_a) {
    var r = _a.r, l = _a.l;
    return (r ? l ? Math.max(r.d, l.d) : r.d : l ? l.d : 0) + 1;
}
var $16271588ada7e89d$var$observabilityMiddleware = {
    stack: "dbcore",
    level: 0,
    create: function(core) {
        var dbName = core.schema.name;
        var FULL_RANGE = new $16271588ada7e89d$export$34cb5241245008dd(core.MIN_KEY, core.MAX_KEY);
        return $16271588ada7e89d$var$__assign($16271588ada7e89d$var$__assign({}, core), {
            table: function(tableName) {
                var table = core.table(tableName);
                var schema = table.schema;
                var primaryKey = schema.primaryKey;
                var extractKey = primaryKey.extractKey, outbound = primaryKey.outbound;
                var tableClone = $16271588ada7e89d$var$__assign($16271588ada7e89d$var$__assign({}, table), {
                    mutate: function(req) {
                        var trans = req.trans;
                        var mutatedParts = trans.mutatedParts || (trans.mutatedParts = {});
                        var getRangeSet = function(indexName) {
                            var part = "idb://" + dbName + "/" + tableName + "/" + indexName;
                            return mutatedParts[part] || (mutatedParts[part] = new $16271588ada7e89d$export$34cb5241245008dd());
                        };
                        var pkRangeSet = getRangeSet("");
                        var delsRangeSet = getRangeSet(":dels");
                        var type = req.type;
                        var _a = req.type === "deleteRange" ? [
                            req.range
                        ] : req.type === "delete" ? [
                            req.keys
                        ] : req.values.length < 50 ? [
                            [],
                            req.values
                        ] : [], keys = _a[0], newObjs = _a[1];
                        var oldCache = req.trans["_cache"];
                        return table.mutate(req).then(function(res) {
                            if ($16271588ada7e89d$var$isArray(keys)) {
                                if (type !== "delete") keys = res.results;
                                pkRangeSet.addKeys(keys);
                                var oldObjs = $16271588ada7e89d$var$getFromTransactionCache(keys, oldCache);
                                if (!oldObjs && type !== "add") delsRangeSet.addKeys(keys);
                                if (oldObjs || newObjs) $16271588ada7e89d$var$trackAffectedIndexes(getRangeSet, schema, oldObjs, newObjs);
                            } else if (keys) {
                                var range = {
                                    from: keys.lower,
                                    to: keys.upper
                                };
                                delsRangeSet.add(range);
                                pkRangeSet.add(range);
                            } else {
                                pkRangeSet.add(FULL_RANGE);
                                delsRangeSet.add(FULL_RANGE);
                                schema.indexes.forEach(function(idx) {
                                    return getRangeSet(idx.name).add(FULL_RANGE);
                                });
                            }
                            return res;
                        });
                    }
                });
                var getRange = function(_a) {
                    var _b, _c;
                    var _d = _a.query, index = _d.index, range = _d.range;
                    return [
                        index,
                        new $16271588ada7e89d$export$34cb5241245008dd((_b = range.lower) !== null && _b !== void 0 ? _b : core.MIN_KEY, (_c = range.upper) !== null && _c !== void 0 ? _c : core.MAX_KEY)
                    ];
                };
                var readSubscribers = {
                    get: function(req) {
                        return [
                            primaryKey,
                            new $16271588ada7e89d$export$34cb5241245008dd(req.key)
                        ];
                    },
                    getMany: function(req) {
                        return [
                            primaryKey,
                            new $16271588ada7e89d$export$34cb5241245008dd().addKeys(req.keys)
                        ];
                    },
                    count: getRange,
                    query: getRange,
                    openCursor: getRange
                };
                $16271588ada7e89d$var$keys(readSubscribers).forEach(function(method) {
                    tableClone[method] = function(req) {
                        var subscr = $16271588ada7e89d$var$PSD.subscr;
                        if (subscr) {
                            var getRangeSet = function(indexName) {
                                var part = "idb://" + dbName + "/" + tableName + "/" + indexName;
                                return subscr[part] || (subscr[part] = new $16271588ada7e89d$export$34cb5241245008dd());
                            };
                            var pkRangeSet_1 = getRangeSet("");
                            var delsRangeSet_1 = getRangeSet(":dels");
                            var _a = readSubscribers[method](req), queriedIndex = _a[0], queriedRanges = _a[1];
                            getRangeSet(queriedIndex.name || "").add(queriedRanges);
                            if (!queriedIndex.isPrimaryKey) {
                                if (method === "count") delsRangeSet_1.add(FULL_RANGE);
                                else {
                                    var keysPromise_1 = method === "query" && outbound && req.values && table.query($16271588ada7e89d$var$__assign($16271588ada7e89d$var$__assign({}, req), {
                                        values: false
                                    }));
                                    return table[method].apply(this, arguments).then(function(res) {
                                        if (method === "query") {
                                            if (outbound && req.values) return keysPromise_1.then(function(_a) {
                                                var resultingKeys = _a.result;
                                                pkRangeSet_1.addKeys(resultingKeys);
                                                return res;
                                            });
                                            var pKeys = req.values ? res.result.map(extractKey) : res.result;
                                            if (req.values) pkRangeSet_1.addKeys(pKeys);
                                            else delsRangeSet_1.addKeys(pKeys);
                                        } else if (method === "openCursor") {
                                            var cursor_1 = res;
                                            var wantValues_1 = req.values;
                                            return cursor_1 && Object.create(cursor_1, {
                                                key: {
                                                    get: function() {
                                                        delsRangeSet_1.addKey(cursor_1.primaryKey);
                                                        return cursor_1.key;
                                                    }
                                                },
                                                primaryKey: {
                                                    get: function() {
                                                        var pkey = cursor_1.primaryKey;
                                                        delsRangeSet_1.addKey(pkey);
                                                        return pkey;
                                                    }
                                                },
                                                value: {
                                                    get: function() {
                                                        wantValues_1 && pkRangeSet_1.addKey(cursor_1.primaryKey);
                                                        return cursor_1.value;
                                                    }
                                                }
                                            });
                                        }
                                        return res;
                                    });
                                }
                            }
                        }
                        return table[method].apply(this, arguments);
                    };
                });
                return tableClone;
            }
        });
    }
};
function $16271588ada7e89d$var$trackAffectedIndexes(getRangeSet, schema, oldObjs, newObjs) {
    function addAffectedIndex(ix) {
        var rangeSet = getRangeSet(ix.name || "");
        function extractKey(obj) {
            return obj != null ? ix.extractKey(obj) : null;
        }
        var addKeyOrKeys = function(key) {
            return ix.multiEntry && $16271588ada7e89d$var$isArray(key) ? key.forEach(function(key) {
                return rangeSet.addKey(key);
            }) : rangeSet.addKey(key);
        };
        (oldObjs || newObjs).forEach(function(_, i) {
            var oldKey = oldObjs && extractKey(oldObjs[i]);
            var newKey = newObjs && extractKey(newObjs[i]);
            if ($16271588ada7e89d$var$cmp(oldKey, newKey) !== 0) {
                if (oldKey != null) addKeyOrKeys(oldKey);
                if (newKey != null) addKeyOrKeys(newKey);
            }
        });
    }
    schema.indexes.forEach(addAffectedIndex);
}
var $16271588ada7e89d$export$4ece27d405df7279 = function() {
    function Dexie(name, options) {
        var _this = this;
        this._middlewares = {};
        this.verno = 0;
        var deps = Dexie.dependencies;
        this._options = options = $16271588ada7e89d$var$__assign({
            addons: Dexie.addons,
            autoOpen: true,
            indexedDB: deps.indexedDB,
            IDBKeyRange: deps.IDBKeyRange
        }, options);
        this._deps = {
            indexedDB: options.indexedDB,
            IDBKeyRange: options.IDBKeyRange
        };
        var addons = options.addons;
        this._dbSchema = {};
        this._versions = [];
        this._storeNames = [];
        this._allTables = {};
        this.idbdb = null;
        this._novip = this;
        var state = {
            dbOpenError: null,
            isBeingOpened: false,
            onReadyBeingFired: null,
            openComplete: false,
            dbReadyResolve: $16271588ada7e89d$var$nop,
            dbReadyPromise: null,
            cancelOpen: $16271588ada7e89d$var$nop,
            openCanceller: null,
            autoSchema: true,
            PR1398_maxLoop: 3
        };
        state.dbReadyPromise = new $16271588ada7e89d$var$DexiePromise(function(resolve) {
            state.dbReadyResolve = resolve;
        });
        state.openCanceller = new $16271588ada7e89d$var$DexiePromise(function(_, reject) {
            state.cancelOpen = reject;
        });
        this._state = state;
        this.name = name;
        this.on = $16271588ada7e89d$var$Events(this, "populate", "blocked", "versionchange", "close", {
            ready: [
                $16271588ada7e89d$var$promisableChain,
                $16271588ada7e89d$var$nop
            ]
        });
        this.on.ready.subscribe = $16271588ada7e89d$var$override(this.on.ready.subscribe, function(subscribe) {
            return function(subscriber, bSticky) {
                Dexie.vip(function() {
                    var state = _this._state;
                    if (state.openComplete) {
                        if (!state.dbOpenError) $16271588ada7e89d$var$DexiePromise.resolve().then(subscriber);
                        if (bSticky) subscribe(subscriber);
                    } else if (state.onReadyBeingFired) {
                        state.onReadyBeingFired.push(subscriber);
                        if (bSticky) subscribe(subscriber);
                    } else {
                        subscribe(subscriber);
                        var db_1 = _this;
                        if (!bSticky) subscribe(function unsubscribe() {
                            db_1.on.ready.unsubscribe(subscriber);
                            db_1.on.ready.unsubscribe(unsubscribe);
                        });
                    }
                });
            };
        });
        this.Collection = $16271588ada7e89d$var$createCollectionConstructor(this);
        this.Table = $16271588ada7e89d$var$createTableConstructor(this);
        this.Transaction = $16271588ada7e89d$var$createTransactionConstructor(this);
        this.Version = $16271588ada7e89d$var$createVersionConstructor(this);
        this.WhereClause = $16271588ada7e89d$var$createWhereClauseConstructor(this);
        this.on("versionchange", function(ev) {
            if (ev.newVersion > 0) console.warn("Another connection wants to upgrade database '" + _this.name + "'. Closing db now to resume the upgrade.");
            else console.warn("Another connection wants to delete database '" + _this.name + "'. Closing db now to resume the delete request.");
            _this.close();
        });
        this.on("blocked", function(ev) {
            if (!ev.newVersion || ev.newVersion < ev.oldVersion) console.warn("Dexie.delete('" + _this.name + "') was blocked");
            else console.warn("Upgrade '" + _this.name + "' blocked by other connection holding version " + ev.oldVersion / 10);
        });
        this._maxKey = $16271588ada7e89d$var$getMaxKey(options.IDBKeyRange);
        this._createTransaction = function(mode, storeNames, dbschema, parentTransaction) {
            return new _this.Transaction(mode, storeNames, dbschema, _this._options.chromeTransactionDurability, parentTransaction);
        };
        this._fireOnBlocked = function(ev) {
            _this.on("blocked").fire(ev);
            $16271588ada7e89d$var$connections.filter(function(c) {
                return c.name === _this.name && c !== _this && !c._state.vcFired;
            }).map(function(c) {
                return c.on("versionchange").fire(ev);
            });
        };
        this.use($16271588ada7e89d$var$virtualIndexMiddleware);
        this.use($16271588ada7e89d$var$hooksMiddleware);
        this.use($16271588ada7e89d$var$observabilityMiddleware);
        this.use($16271588ada7e89d$var$cacheExistingValuesMiddleware);
        this.vip = Object.create(this, {
            _vip: {
                value: true
            }
        });
        addons.forEach(function(addon) {
            return addon(_this);
        });
    }
    Dexie.prototype.version = function(versionNumber) {
        if (isNaN(versionNumber) || versionNumber < 0.1) throw new $16271588ada7e89d$var$exceptions.Type("Given version is not a positive number");
        versionNumber = Math.round(versionNumber * 10) / 10;
        if (this.idbdb || this._state.isBeingOpened) throw new $16271588ada7e89d$var$exceptions.Schema("Cannot add version when database is open");
        this.verno = Math.max(this.verno, versionNumber);
        var versions = this._versions;
        var versionInstance = versions.filter(function(v) {
            return v._cfg.version === versionNumber;
        })[0];
        if (versionInstance) return versionInstance;
        versionInstance = new this.Version(versionNumber);
        versions.push(versionInstance);
        versions.sort($16271588ada7e89d$var$lowerVersionFirst);
        versionInstance.stores({});
        this._state.autoSchema = false;
        return versionInstance;
    };
    Dexie.prototype._whenReady = function(fn) {
        var _this = this;
        return this.idbdb && (this._state.openComplete || $16271588ada7e89d$var$PSD.letThrough || this._vip) ? fn() : new $16271588ada7e89d$var$DexiePromise(function(resolve, reject) {
            if (_this._state.openComplete) return reject(new $16271588ada7e89d$var$exceptions.DatabaseClosed(_this._state.dbOpenError));
            if (!_this._state.isBeingOpened) {
                if (!_this._options.autoOpen) {
                    reject(new $16271588ada7e89d$var$exceptions.DatabaseClosed());
                    return;
                }
                _this.open().catch($16271588ada7e89d$var$nop);
            }
            _this._state.dbReadyPromise.then(resolve, reject);
        }).then(fn);
    };
    Dexie.prototype.use = function(_a) {
        var stack = _a.stack, create = _a.create, level = _a.level, name = _a.name;
        if (name) this.unuse({
            stack: stack,
            name: name
        });
        var middlewares = this._middlewares[stack] || (this._middlewares[stack] = []);
        middlewares.push({
            stack: stack,
            create: create,
            level: level == null ? 10 : level,
            name: name
        });
        middlewares.sort(function(a, b) {
            return a.level - b.level;
        });
        return this;
    };
    Dexie.prototype.unuse = function(_a) {
        var stack = _a.stack, name = _a.name, create = _a.create;
        if (stack && this._middlewares[stack]) this._middlewares[stack] = this._middlewares[stack].filter(function(mw) {
            return create ? mw.create !== create : name ? mw.name !== name : false;
        });
        return this;
    };
    Dexie.prototype.open = function() {
        return $16271588ada7e89d$var$dexieOpen(this);
    };
    Dexie.prototype._close = function() {
        var state = this._state;
        var idx = $16271588ada7e89d$var$connections.indexOf(this);
        if (idx >= 0) $16271588ada7e89d$var$connections.splice(idx, 1);
        if (this.idbdb) {
            try {
                this.idbdb.close();
            } catch (e) {}
            this._novip.idbdb = null;
        }
        state.dbReadyPromise = new $16271588ada7e89d$var$DexiePromise(function(resolve) {
            state.dbReadyResolve = resolve;
        });
        state.openCanceller = new $16271588ada7e89d$var$DexiePromise(function(_, reject) {
            state.cancelOpen = reject;
        });
    };
    Dexie.prototype.close = function() {
        this._close();
        var state = this._state;
        this._options.autoOpen = false;
        state.dbOpenError = new $16271588ada7e89d$var$exceptions.DatabaseClosed();
        if (state.isBeingOpened) state.cancelOpen(state.dbOpenError);
    };
    Dexie.prototype.delete = function() {
        var _this = this;
        var hasArguments = arguments.length > 0;
        var state = this._state;
        return new $16271588ada7e89d$var$DexiePromise(function(resolve, reject) {
            var doDelete = function() {
                _this.close();
                var req = _this._deps.indexedDB.deleteDatabase(_this.name);
                req.onsuccess = $16271588ada7e89d$var$wrap(function() {
                    $16271588ada7e89d$var$_onDatabaseDeleted(_this._deps, _this.name);
                    resolve();
                });
                req.onerror = $16271588ada7e89d$var$eventRejectHandler(reject);
                req.onblocked = _this._fireOnBlocked;
            };
            if (hasArguments) throw new $16271588ada7e89d$var$exceptions.InvalidArgument("Arguments not allowed in db.delete()");
            if (state.isBeingOpened) state.dbReadyPromise.then(doDelete);
            else doDelete();
        });
    };
    Dexie.prototype.backendDB = function() {
        return this.idbdb;
    };
    Dexie.prototype.isOpen = function() {
        return this.idbdb !== null;
    };
    Dexie.prototype.hasBeenClosed = function() {
        var dbOpenError = this._state.dbOpenError;
        return dbOpenError && dbOpenError.name === "DatabaseClosed";
    };
    Dexie.prototype.hasFailed = function() {
        return this._state.dbOpenError !== null;
    };
    Dexie.prototype.dynamicallyOpened = function() {
        return this._state.autoSchema;
    };
    Object.defineProperty(Dexie.prototype, "tables", {
        get: function() {
            var _this = this;
            return $16271588ada7e89d$var$keys(this._allTables).map(function(name) {
                return _this._allTables[name];
            });
        },
        enumerable: false,
        configurable: true
    });
    Dexie.prototype.transaction = function() {
        var args = $16271588ada7e89d$var$extractTransactionArgs.apply(this, arguments);
        return this._transaction.apply(this, args);
    };
    Dexie.prototype._transaction = function(mode, tables, scopeFunc) {
        var _this = this;
        var parentTransaction = $16271588ada7e89d$var$PSD.trans;
        if (!parentTransaction || parentTransaction.db !== this || mode.indexOf("!") !== -1) parentTransaction = null;
        var onlyIfCompatible = mode.indexOf("?") !== -1;
        mode = mode.replace("!", "").replace("?", "");
        var idbMode, storeNames;
        try {
            storeNames = tables.map(function(table) {
                var storeName = table instanceof _this.Table ? table.name : table;
                if (typeof storeName !== "string") throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");
                return storeName;
            });
            if (mode == "r" || mode === $16271588ada7e89d$var$READONLY) idbMode = $16271588ada7e89d$var$READONLY;
            else if (mode == "rw" || mode == $16271588ada7e89d$var$READWRITE) idbMode = $16271588ada7e89d$var$READWRITE;
            else throw new $16271588ada7e89d$var$exceptions.InvalidArgument("Invalid transaction mode: " + mode);
            if (parentTransaction) {
                if (parentTransaction.mode === $16271588ada7e89d$var$READONLY && idbMode === $16271588ada7e89d$var$READWRITE) {
                    if (onlyIfCompatible) parentTransaction = null;
                    else throw new $16271588ada7e89d$var$exceptions.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");
                }
                if (parentTransaction) storeNames.forEach(function(storeName) {
                    if (parentTransaction && parentTransaction.storeNames.indexOf(storeName) === -1) {
                        if (onlyIfCompatible) parentTransaction = null;
                        else throw new $16271588ada7e89d$var$exceptions.SubTransaction("Table " + storeName + " not included in parent transaction.");
                    }
                });
                if (onlyIfCompatible && parentTransaction && !parentTransaction.active) parentTransaction = null;
            }
        } catch (e) {
            return parentTransaction ? parentTransaction._promise(null, function(_, reject) {
                reject(e);
            }) : $16271588ada7e89d$var$rejection(e);
        }
        var enterTransaction = $16271588ada7e89d$var$enterTransactionScope.bind(null, this, idbMode, storeNames, parentTransaction, scopeFunc);
        return parentTransaction ? parentTransaction._promise(idbMode, enterTransaction, "lock") : $16271588ada7e89d$var$PSD.trans ? $16271588ada7e89d$var$usePSD($16271588ada7e89d$var$PSD.transless, function() {
            return _this._whenReady(enterTransaction);
        }) : this._whenReady(enterTransaction);
    };
    Dexie.prototype.table = function(tableName) {
        if (!$16271588ada7e89d$var$hasOwn(this._allTables, tableName)) throw new $16271588ada7e89d$var$exceptions.InvalidTable("Table " + tableName + " does not exist");
        return this._allTables[tableName];
    };
    return Dexie;
}();
var $16271588ada7e89d$var$symbolObservable = typeof Symbol !== "undefined" && "observable" in Symbol ? Symbol.observable : "@@observable";
var $16271588ada7e89d$var$Observable = function() {
    function Observable(subscribe) {
        this._subscribe = subscribe;
    }
    Observable.prototype.subscribe = function(x, error, complete) {
        return this._subscribe(!x || typeof x === "function" ? {
            next: x,
            error: error,
            complete: complete
        } : x);
    };
    Observable.prototype[$16271588ada7e89d$var$symbolObservable] = function() {
        return this;
    };
    return Observable;
}();
function $16271588ada7e89d$var$extendObservabilitySet(target, newSet) {
    $16271588ada7e89d$var$keys(newSet).forEach(function(part) {
        var rangeSet = target[part] || (target[part] = new $16271588ada7e89d$export$34cb5241245008dd());
        $16271588ada7e89d$export$4876cc3130d3f820(rangeSet, newSet[part]);
    });
    return target;
}
function $16271588ada7e89d$export$6a9705d8f6f38796(querier) {
    return new $16271588ada7e89d$var$Observable(function(observer) {
        var scopeFuncIsAsync = $16271588ada7e89d$var$isAsyncFunction(querier);
        function execute(subscr) {
            if (scopeFuncIsAsync) $16271588ada7e89d$var$incrementExpectedAwaits();
            var exec = function() {
                return $16271588ada7e89d$var$newScope(querier, {
                    subscr: subscr,
                    trans: null
                });
            };
            var rv = $16271588ada7e89d$var$PSD.trans ? $16271588ada7e89d$var$usePSD($16271588ada7e89d$var$PSD.transless, exec) : exec();
            if (scopeFuncIsAsync) rv.then($16271588ada7e89d$var$decrementExpectedAwaits, $16271588ada7e89d$var$decrementExpectedAwaits);
            return rv;
        }
        var closed = false;
        var accumMuts = {};
        var currentObs = {};
        var subscription = {
            get closed () {
                return closed;
            },
            unsubscribe: function() {
                closed = true;
                $16271588ada7e89d$var$globalEvents.storagemutated.unsubscribe(mutationListener);
            }
        };
        observer.start && observer.start(subscription);
        var querying = false, startedListening = false;
        function shouldNotify() {
            return $16271588ada7e89d$var$keys(currentObs).some(function(key) {
                return accumMuts[key] && $16271588ada7e89d$export$8f43b23b5d8de905(accumMuts[key], currentObs[key]);
            });
        }
        var mutationListener = function(parts) {
            $16271588ada7e89d$var$extendObservabilitySet(accumMuts, parts);
            if (shouldNotify()) doQuery();
        };
        var doQuery = function() {
            if (querying || closed) return;
            accumMuts = {};
            var subscr = {};
            var ret = execute(subscr);
            if (!startedListening) {
                $16271588ada7e89d$var$globalEvents($16271588ada7e89d$var$DEXIE_STORAGE_MUTATED_EVENT_NAME, mutationListener);
                startedListening = true;
            }
            querying = true;
            Promise.resolve(ret).then(function(result) {
                querying = false;
                if (closed) return;
                if (shouldNotify()) doQuery();
                else {
                    accumMuts = {};
                    currentObs = subscr;
                    observer.next && observer.next(result);
                }
            }, function(err) {
                querying = false;
                observer.error && observer.error(err);
                subscription.unsubscribe();
            });
        };
        doQuery();
        return subscription;
    });
}
var $16271588ada7e89d$var$domDeps;
try {
    $16271588ada7e89d$var$domDeps = {
        indexedDB: $16271588ada7e89d$var$_global.indexedDB || $16271588ada7e89d$var$_global.mozIndexedDB || $16271588ada7e89d$var$_global.webkitIndexedDB || $16271588ada7e89d$var$_global.msIndexedDB,
        IDBKeyRange: $16271588ada7e89d$var$_global.IDBKeyRange || $16271588ada7e89d$var$_global.webkitIDBKeyRange
    };
} catch (e) {
    $16271588ada7e89d$var$domDeps = {
        indexedDB: null,
        IDBKeyRange: null
    };
}
var $16271588ada7e89d$var$Dexie = $16271588ada7e89d$export$4ece27d405df7279;
$16271588ada7e89d$var$props($16271588ada7e89d$var$Dexie, $16271588ada7e89d$var$__assign($16271588ada7e89d$var$__assign({}, $16271588ada7e89d$var$fullNameExceptions), {
    delete: function(databaseName) {
        var db = new $16271588ada7e89d$var$Dexie(databaseName, {
            addons: []
        });
        return db.delete();
    },
    exists: function(name) {
        return new $16271588ada7e89d$var$Dexie(name, {
            addons: []
        }).open().then(function(db) {
            db.close();
            return true;
        }).catch("NoSuchDatabaseError", function() {
            return false;
        });
    },
    getDatabaseNames: function(cb) {
        try {
            return $16271588ada7e89d$var$getDatabaseNames($16271588ada7e89d$var$Dexie.dependencies).then(cb);
        } catch (_a) {
            return $16271588ada7e89d$var$rejection(new $16271588ada7e89d$var$exceptions.MissingAPI());
        }
    },
    defineClass: function() {
        function Class(content) {
            $16271588ada7e89d$var$extend(this, content);
        }
        return Class;
    },
    ignoreTransaction: function(scopeFunc) {
        return $16271588ada7e89d$var$PSD.trans ? $16271588ada7e89d$var$usePSD($16271588ada7e89d$var$PSD.transless, scopeFunc) : scopeFunc();
    },
    vip: $16271588ada7e89d$var$vip,
    async: function(generatorFn) {
        return function() {
            try {
                var rv = $16271588ada7e89d$var$awaitIterator(generatorFn.apply(this, arguments));
                if (!rv || typeof rv.then !== "function") return $16271588ada7e89d$var$DexiePromise.resolve(rv);
                return rv;
            } catch (e) {
                return $16271588ada7e89d$var$rejection(e);
            }
        };
    },
    spawn: function(generatorFn, args, thiz) {
        try {
            var rv = $16271588ada7e89d$var$awaitIterator(generatorFn.apply(thiz, args || []));
            if (!rv || typeof rv.then !== "function") return $16271588ada7e89d$var$DexiePromise.resolve(rv);
            return rv;
        } catch (e) {
            return $16271588ada7e89d$var$rejection(e);
        }
    },
    currentTransaction: {
        get: function() {
            return $16271588ada7e89d$var$PSD.trans || null;
        }
    },
    waitFor: function(promiseOrFunction, optionalTimeout) {
        var promise = $16271588ada7e89d$var$DexiePromise.resolve(typeof promiseOrFunction === "function" ? $16271588ada7e89d$var$Dexie.ignoreTransaction(promiseOrFunction) : promiseOrFunction).timeout(optionalTimeout || 60000);
        return $16271588ada7e89d$var$PSD.trans ? $16271588ada7e89d$var$PSD.trans.waitFor(promise) : promise;
    },
    Promise: $16271588ada7e89d$var$DexiePromise,
    debug: {
        get: function() {
            return $16271588ada7e89d$var$debug;
        },
        set: function(value) {
            $16271588ada7e89d$var$setDebug(value, value === "dexie" ? function() {
                return true;
            } : $16271588ada7e89d$var$dexieStackFrameFilter);
        }
    },
    derive: $16271588ada7e89d$var$derive,
    extend: $16271588ada7e89d$var$extend,
    props: $16271588ada7e89d$var$props,
    override: $16271588ada7e89d$var$override,
    Events: $16271588ada7e89d$var$Events,
    on: $16271588ada7e89d$var$globalEvents,
    liveQuery: $16271588ada7e89d$export$6a9705d8f6f38796,
    extendObservabilitySet: $16271588ada7e89d$var$extendObservabilitySet,
    getByKeyPath: $16271588ada7e89d$var$getByKeyPath,
    setByKeyPath: $16271588ada7e89d$var$setByKeyPath,
    delByKeyPath: $16271588ada7e89d$var$delByKeyPath,
    shallowClone: $16271588ada7e89d$var$shallowClone,
    deepClone: $16271588ada7e89d$var$deepClone,
    getObjectDiff: $16271588ada7e89d$var$getObjectDiff,
    cmp: $16271588ada7e89d$var$cmp,
    asap: $16271588ada7e89d$var$asap$1,
    minKey: $16271588ada7e89d$var$minKey,
    addons: [],
    connections: $16271588ada7e89d$var$connections,
    errnames: $16271588ada7e89d$var$errnames,
    dependencies: $16271588ada7e89d$var$domDeps,
    semVer: $16271588ada7e89d$var$DEXIE_VERSION,
    version: $16271588ada7e89d$var$DEXIE_VERSION.split(".").map(function(n) {
        return parseInt(n);
    }).reduce(function(p, c, i) {
        return p + c / Math.pow(10, i * 2);
    })
}));
$16271588ada7e89d$var$Dexie.maxKey = $16271588ada7e89d$var$getMaxKey($16271588ada7e89d$var$Dexie.dependencies.IDBKeyRange);
if (typeof dispatchEvent !== "undefined" && typeof addEventListener !== "undefined") {
    $16271588ada7e89d$var$globalEvents($16271588ada7e89d$var$DEXIE_STORAGE_MUTATED_EVENT_NAME, function(updatedParts) {
        if (!$16271588ada7e89d$var$propagatingLocally) {
            var event_1;
            if ($16271588ada7e89d$var$isIEOrEdge) {
                event_1 = document.createEvent("CustomEvent");
                event_1.initCustomEvent($16271588ada7e89d$var$STORAGE_MUTATED_DOM_EVENT_NAME, true, true, updatedParts);
            } else event_1 = new CustomEvent($16271588ada7e89d$var$STORAGE_MUTATED_DOM_EVENT_NAME, {
                detail: updatedParts
            });
            $16271588ada7e89d$var$propagatingLocally = true;
            dispatchEvent(event_1);
            $16271588ada7e89d$var$propagatingLocally = false;
        }
    });
    addEventListener($16271588ada7e89d$var$STORAGE_MUTATED_DOM_EVENT_NAME, function(_a) {
        var detail = _a.detail;
        if (!$16271588ada7e89d$var$propagatingLocally) $16271588ada7e89d$var$propagateLocally(detail);
    });
}
function $16271588ada7e89d$var$propagateLocally(updateParts) {
    var wasMe = $16271588ada7e89d$var$propagatingLocally;
    try {
        $16271588ada7e89d$var$propagatingLocally = true;
        $16271588ada7e89d$var$globalEvents.storagemutated.fire(updateParts);
    } finally{
        $16271588ada7e89d$var$propagatingLocally = wasMe;
    }
}
var $16271588ada7e89d$var$propagatingLocally = false;
if (typeof BroadcastChannel !== "undefined") {
    var $16271588ada7e89d$var$bc_1 = new BroadcastChannel($16271588ada7e89d$var$STORAGE_MUTATED_DOM_EVENT_NAME);
    if (typeof $16271588ada7e89d$var$bc_1.unref === "function") $16271588ada7e89d$var$bc_1.unref();
    $16271588ada7e89d$var$globalEvents($16271588ada7e89d$var$DEXIE_STORAGE_MUTATED_EVENT_NAME, function(changedParts) {
        if (!$16271588ada7e89d$var$propagatingLocally) $16271588ada7e89d$var$bc_1.postMessage(changedParts);
    });
    $16271588ada7e89d$var$bc_1.onmessage = function(ev) {
        if (ev.data) $16271588ada7e89d$var$propagateLocally(ev.data);
    };
} else if (typeof self !== "undefined" && typeof navigator !== "undefined") {
    $16271588ada7e89d$var$globalEvents($16271588ada7e89d$var$DEXIE_STORAGE_MUTATED_EVENT_NAME, function(changedParts) {
        try {
            if (!$16271588ada7e89d$var$propagatingLocally) {
                if (typeof localStorage !== "undefined") localStorage.setItem($16271588ada7e89d$var$STORAGE_MUTATED_DOM_EVENT_NAME, JSON.stringify({
                    trig: Math.random(),
                    changedParts: changedParts
                }));
                if (typeof self["clients"] === "object") $16271588ada7e89d$var$__spreadArray([], self["clients"].matchAll({
                    includeUncontrolled: true
                }), true).forEach(function(client) {
                    return client.postMessage({
                        type: $16271588ada7e89d$var$STORAGE_MUTATED_DOM_EVENT_NAME,
                        changedParts: changedParts
                    });
                });
            }
        } catch (_a) {}
    });
    if (typeof addEventListener !== "undefined") addEventListener("storage", function(ev) {
        if (ev.key === $16271588ada7e89d$var$STORAGE_MUTATED_DOM_EVENT_NAME) {
            var data = JSON.parse(ev.newValue);
            if (data) $16271588ada7e89d$var$propagateLocally(data.changedParts);
        }
    });
    var $16271588ada7e89d$var$swContainer = self.document && navigator.serviceWorker;
    if ($16271588ada7e89d$var$swContainer) $16271588ada7e89d$var$swContainer.addEventListener("message", $16271588ada7e89d$var$propagateMessageLocally);
}
function $16271588ada7e89d$var$propagateMessageLocally(_a) {
    var data = _a.data;
    if (data && data.type === $16271588ada7e89d$var$STORAGE_MUTATED_DOM_EVENT_NAME) $16271588ada7e89d$var$propagateLocally(data.changedParts);
}
$16271588ada7e89d$var$DexiePromise.rejectionMapper = $16271588ada7e89d$var$mapError;
$16271588ada7e89d$var$setDebug($16271588ada7e89d$var$debug, $16271588ada7e89d$var$dexieStackFrameFilter);


const $329cbfd0fe536217$var$contentLengthKey = "content-length";
class $329cbfd0fe536217$export$bc90ab7a546762d1 {
    constructor(progressCallback){
        this.progressCallback = progressCallback;
    }
    async doFetch(resource) {
        let uint8Array = null;
        let response = await fetch(resource);
        if (response === null) throw new Error("response is null");
        if (response.body === null) throw new Error("body of response is null");
        console.log("Headers : " + JSON.stringify(response.headers));
        console.log(...response.headers);
        response.headers.forEach((value, key)=>{
            console.log(key + ":" + value);
        });
        // Not all headers are log
        // It needs CORS authorization
        /*
    HTTP/1.1 200 OK
    Server: nginx/1.14.0 (Ubuntu)
    Date: Mon, 27 Feb 2023 20:49:28 GMT
    Last-Modified: Sun, 26 Feb 2023 21:47:11 GMT
    Access-Control-Allow-Origin: *
    Content-Type: application/octet-stream
    Content-Length: 80740352
    ETag: "63fbd35f-4d00000"
    Accept-Ranges: bytes
    */ // TODO : handle zipping, the size would not be correct
        // It would require a custom header, or to know the size of the document beforehand
        // Content-Encoding: gzip
        const contentLength = response.headers.get($329cbfd0fe536217$var$contentLengthKey);
        if (contentLength != null) {
            const contentLengthInt = parseInt(contentLength, 10);
            uint8Array = await this.getResponseContentWithKnownContentLength(response, contentLengthInt);
        } else uint8Array = await this.getResponseContentWithUnknownContentLength(response);
        // TODO : fix this, should not be null
        if (uint8Array === null) throw new Error("array is null at the end of the fetch");
        return uint8Array;
    }
    async getResponseContentWithKnownContentLength(response, contentLength) {
        if (response.body === null) throw new Error("body of response is null");
        let uint8Array = new Uint8Array(contentLength);
        let progress = 0;
        const me = this;
        await response.body.pipeTo(new WritableStream({
            write (chunk) {
                // console.log("new chunk");
                uint8Array.set(chunk, progress);
                progress += chunk.length;
                me.progressCallback.callback(contentLength, progress, chunk.length);
            // console.log("progress: " + progress);
            },
            close () {
                console.log("close");
            },
            abort (e) {
                console.error("abort", e);
            }
        }));
        return uint8Array;
    }
    async getResponseContentWithUnknownContentLength(response) {
        if (response.body === null) throw new Error("body of response is null");
        let uint8Array = null;
        let progress = 0;
        const me = this;
        await response.body.pipeTo(new WritableStream({
            write (chunk) {
                // console.log("new chunk");
                if (uint8Array === null) {
                    // console.log("Initializing array");
                    uint8Array = new Uint8Array(chunk);
                    progress += chunk.length;
                } else {
                    // FIXME : it could be more elegant to initialize it before
                    let newArray = new Uint8Array(progress + chunk.length);
                    newArray.set(uint8Array);
                    newArray.set(chunk, progress);
                    uint8Array = newArray;
                    progress += chunk.length;
                }
                me.progressCallback.callback(null, progress, chunk.length);
            // console.log("progress: " + progress);
            },
            close () {
                console.log("close");
            },
            abort (e) {
                console.error("abort", e);
            }
        }));
        return uint8Array;
    }
}



var $4Dor1 = parcelRequire("4Dor1");
class $70b9a664c95c9375$export$2712fa70f5c14f01 extends (0, $16271588ada7e89d$export$4ece27d405df7279) {
    // sqlDB: Database
    sequencesCount = -1;
    wasInit = false;
    get wordDatabaseFullPath() {
        return this.wordDatabaseRootURL + this.wordDatabaseFilename;
    }
    constructor(wordDatabaseRootURL, wordDatabaseFilename, logger){
        super("FrenchWordDatabase");
        this.wordDatabaseRootURL = wordDatabaseRootURL;
        this.wordDatabaseFilename = wordDatabaseFilename;
        this.logger = logger;
        this.version(1).stores({
            /* words: 'id, nomPropre, Verbe', 'id, nom, adjectif, prenom, patronyme, nomPropre, titre, Verbe, Adverbe, AdverbeDeNegation, AdverbeInterrogatif,' +
        // locutions
        ' LocutionAdverbiale, LocutionAdjectivale, LocutionVerbale, LocutionNominale, LocutionPatronymique, LocutionInterjective, ' +
        'LocutionPrepositive, LocutionPrepositiveVerbale, LocutionConjonctive, LocutionConjonctiveDeSubordination, Interjection, MotGrammatical' +
        // Determinants
        'Determinant, DeterminantDemonstratif, DeterminantExclamatif, DeterminantIndefini, DeterminantNegatif, DeterminantPossessif, ' +
        // Preposition
        'Preposition, PrepositionVerbale, ' +
        // Nombre
        'Nombre, NombreLatin, ' +
        // Conjonction
        'Conjonction, ConjonctionDeCoordination, ConjonctionDeSubordination, ' +
        // Prefixe verbale
        'PrefixeVerbal, ' +
        // Pronom
        'Pronom, PronomAdverbial, PronomDemonstratif, PronomIndefini, PronomIndefiniNegatif, PronomInterrogatif, PronomPersonnelComplementDObjet, PronomPersonnelSujet, PronomRelatif',
      sequences: 'id, sequence, occurences', */ files: "id++, filename"
        });
        // this.words = this.table("words")
        // this.sequences = this.table("sequences")
        this.files = this.table("files");
    }
    initSQL = async ()=>{
        console.log("Querying sql.js WASM file");
        /*
    const SQL = await initSqlJs({
      locateFile: (file: any) => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.1/${file}`// `./node_modules/sql.js/dist/${file}`// `https://sql.js.org/dist/${file}`// `/node_modules/sql.js/dist/${file}`
    })
    */ const SQL = await $4Dor1({
            // Required to load the wasm binary asynchronously. Of course, you can host it wherever you want
            // You can omit locateFile completely when running in node
            locateFile: (file)=>`https://sql.js.org/dist/${file}`
        });
        // TODO : fix duplication
        console.log("Initializing word database");
        this.logger.writeLn("Initializing word database");
        let uint8Array = null;
        const count = await this.files.count();
        if (count !== 0) {
            this.logger.writeLn("Word database present in local storage, fetching it");
            console.log("Word database present in local storage, fetching it");
            const file = await this.files.where("filename").equalsIgnoreCase(this.wordDatabaseFilename).first();
            uint8Array = file?.blob;
        } else {
            this.logger.writeLn("Word database not present locally, fetching it from the server");
            console.log("Word database (SQLite) not present locally, fetching it from the server");
            try {
                // TODO : use multiple provider XMLHttpRequest, Axios etc
                // TODO : make a class for this (the SimpleProgressCallback)
                this.logger.newLine();
                this.logger.writeLn("Progress: ");
                let lastProgressPerCent = 0;
                const progressCallback = {
                    callback: (contentLength, currentProgress, lastChunkLength)=>{
                        if (contentLength === null) return;
                        const progressInPerCent = currentProgress / contentLength * 100;
                        if (progressInPerCent >= lastProgressPerCent + 10) {
                            this.logger.writeLn(progressInPerCent.toFixed() + " %");
                            lastProgressPerCent += 10;
                        }
                    }
                };
                const fetchProgress = new (0, $329cbfd0fe536217$export$bc90ab7a546762d1)(progressCallback);
                uint8Array = await fetchProgress.doFetch(this.wordDatabaseFullPath);
                this.logger.writeLn("Done !");
                this.logger.newLine();
                console.log("Done");
            } catch (err) {
                console.log("Unexpected error occured while fetching SQLite word database from the server", err);
                throw err;
            }
            if (uint8Array === null) {
                this.logger.error("Error: Database is empty");
                throw new Error("Database file array is null");
            }
            if (uint8Array.length === 0) {
                this.logger.error("Error: Database is empty");
                throw new Error("Database file array is empty");
            }
            const t0 = performance.now();
            this.files.add({
                filename: "sample.db",
                blob: uint8Array
            }).then(function(lastKey) {
                const t1 = performance.now();
                console.log("File was inserted (key: " + lastKey + "), it took " + (t1 - t0) / 1000 + " seconds");
            }).catch((0, $16271588ada7e89d$export$4ece27d405df7279).BulkError, function(e) {
                console.error("An unexpected error occurred while inserting file, error count : " + e.failures.length);
                console.error(e);
            });
        }
        // const [SQL, buf] = await Promise.all([sqlPromise, dataPromise])
        this.logger.writeLn("Loading word database in memory");
        console.log("initializing sqlite database");
        this.sqlDB = new SQL.Database(uint8Array);
        const sequenceCount = this.countSequences();
        if (sequenceCount === undefined) {
            // TODO : it is probably better to catch the errors and log them elsewhere
            // TODO : uniformize the formats of errors
            this.logger.error("Error: No sequences are present in the database");
            throw new Error("No sequences were present in the database");
        } else this.sequencesCount = sequenceCount;
        const wordCount = this.countWords();
        if (wordCount === undefined) {
            // TODO : it is probably better to catch the errors and log them elsewhere
            // TODO : uniformize the formats of errors
            this.logger.error("Error: No words are present in the database");
            throw new Error("No sequences were present in the database");
        } else this.sequencesCount = sequenceCount;
        this.logger.writeLn("Word count: " + wordCount);
        this.logger.writeLn("Sequence count: " + sequenceCount);
        // FIXME : it should be ensured elsewhere that the prompt is displayed
        this.logger.prompt();
        // TODO : move it to an extension
        // TODO : create a collate ?
        function compareInsensitive(word1, word2) {
            return word1.localeCompare(word2, "fr", {
                sensitivity: "base"
            }) === 0;
        }
        this.sqlDB.create_function("compareInsensitive", compareInsensitive);
        // TODO : make a lib for all this
        // TODO : this does not work with accents
        // Checkout instr maybe
        function containsInsensitive(word1, word2) {
            return word1.search(new RegExp(word2, "i")) !== -1;
        }
        this.sqlDB.create_function("containsInsensitive", containsInsensitive);
        this.wasInit = true;
    };
    // FIXME : should it throw an exception instead ?
    countSequences() {
        const stmt = this.sqlDB.prepare("SELECT count(*) as c FROM sequences");
        while(stmt.step()){
            const count = stmt.getAsObject();
            return count.c;
        }
        return undefined;
    }
    // FIXME : should it throw an exception instead ?
    countWords() {
        const stmt = this.sqlDB.prepare("SELECT count(*) as c FROM words");
        while(stmt.step()){
            const count = stmt.getAsObject();
            return count.c;
        }
        return undefined;
    }
    getSequence(minOccurences, maxOccurences) {
        /*
    const id = Math.floor(Math.random() * this.sequencesCount) + 0
    const stmt = this.sqlDB.prepare("SELECT * FROM sequences WHERE id=:id LIMIT 1")
    stmt.bind({
      ':id': id
    })
    */ const stmt = this.sqlDB.prepare("SELECT * FROM sequences WHERE occurences BETWEEN :minOccurences AND :maxOccurences ORDER BY RANDOM() LIMIT 1");
        stmt.bind({
            ":minOccurences": minOccurences,
            ":maxOccurences": maxOccurences
        });
        let result = "";
        while(stmt.step()){
            const sequence = stmt.getAsObject();
            result = sequence.sequence;
        }
        // free the memory used by the statement
        stmt.free();
        return result // .toLowerCase()
        ;
    }
    // TODO : check words and sequence like GAIE et égaie
    wordExists(word) {
        console.log("verifying if word exist (" + word + ")");
        // We dont use compare insensitive because it is too slow
        // const stmt = this.sqlDB.prepare("SELECT * FROM words WHERE compareInsensitive(word, :word) LIMIT 1")// COLLATE NOCASE
        const normalizedWord = word.normalize("NFD").replace(/\p{Diacritic}/gu, "").toLowerCase();
        console.log("normalized : " + normalizedWord);
        const stmt = this.sqlDB.prepare("SELECT * FROM words WHERE normalized_word = :word LIMIT 1") // COLLATE NOCASE
        ;
        stmt.bind({
            ":word": normalizedWord
        });
        let result = "";
        while(stmt.step()){
            const word = stmt.getAsObject();
            result = word.word;
        }
        // free the memory used by the statement
        stmt.free();
        return result.length > 0;
    }
    getWord(sequence) {
        const stmt = this.sqlDB.prepare("SELECT * FROM words WHERE containsInsensitive(normalized_word, :sequence) LIMIT 1") // COLLATE NOCASE
        ;
        stmt.bind({
            ":sequence": sequence
        });
        let result = "";
        while(stmt.step()){
            const word = stmt.getAsObject();
            result = word.word;
        }
        // free the memory used by the statement
        stmt.free();
        return result;
    }
}





function $f85250c2639e72d4$export$a6b19750ed7f872e() {
    const config = {
        peerServerHostname: "https://peerjs-server.onesime-deleham.ovh",
        peerServerPort: Number.parseInt("443")
    };
    return config;
}


// TODO : replace it by own code
// Modification of the code there https://github.com/peers/peerjs/blob/master/lib/api.ts
// MIT license 
class $ae70f98c30b1f545$export$8bb20086de2bb4f4 {
    constructor(_options){
        this._options = _options;
        if (this._options.path === undefined) this._options.path = "/";
        if (this._options.key === undefined) this._options.key = "peerjs";
    }
    _buildUrl(method) {
        const protocol = this._options.secure ? "https://" : "http://";
        let url = protocol + this._options.host + ":" + this._options.port + this._options.path + this._options.key + "/" + method;
        const queryString = "?ts=" + new Date().getTime() + "" + Math.random();
        url += queryString;
        return url;
    }
    /** Get a unique ID from the server via XHR and initialize with it. */ async retrieveId() {
        const url = this._buildUrl("id");
        try {
            const response = await fetch(url);
            if (response.status !== 200) throw new Error(`Error. Status:${response.status}`);
            return response.text();
        } catch (error) {
            console.error("Error retrieving ID", error);
            let pathError = "";
            if (this._options.path === "/") pathError = " If you passed in a `path` to your self-hosted PeerServer, you'll also need to pass in that same path when creating a new Peer.";
            throw new Error("Could not get an ID from the server." + pathError);
        }
    }
}


// Credit to Pawel : https://stackoverflow.com/questions/29085197/how-do-you-json-stringify-an-es6-map
// License CC BY-SA 4.0 https://creativecommons.org/licenses/by-sa/4.0/
function $c09b3d59f634b369$export$63698c10df99509c(_, value) {
    if (typeof value === "object" && value !== null) {
        if (value.dataType === "Map") {
            console.log("deserializing map");
            return new Map(value.value);
        }
    }
    return value;
}


class $a61d14da41d3c9b9$export$4c8d0976dab07915 extends (0, $ae70f98c30b1f545$export$8bb20086de2bb4f4) {
    constructor(_options){
        super(_options);
    }
    async isConnected(peerId) {
        const url = this._buildUrl("peer/" + peerId + "/connected");
        try {
            // TODO : use no-cache every where
            const response = await fetch(url, {
                cache: "no-store",
                headers: {
                    "pragma": "no-cache",
                    "cache-control": "no-cache"
                }
            });
            if (response.status !== 200) {
                if (response.status === 401) throw new Error("An error occurred while verifying if the peer is connected.");
                throw new Error(`HTTP error (status code: ${response.status})`);
            }
            return response.text();
        } catch (error) {
            console.error("An unexpected error occurred", error);
            throw error;
        }
    }
    // Modification of the code there https://github.com/peers/peerjs/blob/master/lib/api.ts
    // MIT license 
    // To support rooms
    async listAllPeers(roomId) {
        let url = "";
        if (typeof roomId === "undefined" || roomId === "") url = this._buildUrl("peers");
        else url = this._buildUrl("peers/" + roomId);
        try {
            const response = await fetch(url);
            if (response.status !== 200) {
                if (response.status === 401) {
                    let helpfulError = "";
                    helpfulError = "You need to enable `allow_discovery` on your self-hosted PeerServer to use this feature.";
                    throw new Error("It doesn't look like you have permission to list peers IDs. " + helpfulError);
                }
                throw new Error(`HTTP error (status code: ${response.status})`);
            }
            return response.json();
        } catch (error) {
            console.error(error);
            throw error;
        }
    }
    async getRooms() {
        const url = this._buildUrl("rooms");
        try {
            const response = await fetch(url);
            if (response.status !== 200) {
                response.status;
                throw new Error(`HTTP error (status code: ${response.status})`);
            }
            const roomsAsString = await response.text();
            const rooms = JSON.parse(roomsAsString, (0, $c09b3d59f634b369$export$63698c10df99509c));
            return rooms;
        } catch (error) {
            console.error(error);
            throw error;
        }
    }
    async getRoom(roomId) {
        const url = this._buildUrl("room/" + roomId);
        try {
            const response = await fetch(url);
            if (response.status !== 200) {
                response.status;
                throw new Error(`HTTP error (status code: ${response.status})`);
            }
            const roomAsString = await response.text();
            const room = JSON.parse(roomAsString, (0, $c09b3d59f634b369$export$63698c10df99509c));
            return room;
        } catch (error) {
            console.error(error);
            throw error;
        }
    }
    // TODO : replace any by an interface
    async createRoom(room) {
        const url = this._buildUrl("room");
        try {
            const jsonBody = JSON.stringify(room);
            const fetchOptions = {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                },
                body: jsonBody
            };
            const response = await fetch(url, fetchOptions);
            if (response.status !== 200) {
                response.status;
                throw new Error(`HTTP error (status code: ${response.status})`);
            }
            return response.text();
        } catch (error) {
            console.error(error);
            throw error;
        }
    }
    async joinRoom(roomId, peerId) {
        const url = this._buildUrl("room/" + roomId + "/join");
        try {
            const jsonBody = JSON.stringify({
                peerId: peerId
            });
            const fetchOptions = {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                },
                body: jsonBody
            };
            const response = await fetch(url, fetchOptions);
            if (response.status !== 200) {
                response.status;
                throw new Error(`HTTP error (status code: ${response.status})`);
            }
            return response.text();
        } catch (error) {
            console.error(error);
            throw error;
        }
    }
    async leaveRoom(roomId, peerId) {
        const url = this._buildUrl("room/" + roomId + "/leave");
        try {
            const jsonBody = JSON.stringify({
                peerId: peerId
            });
            const fetchOptions = {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                },
                body: jsonBody
            };
            const response = await fetch(url, fetchOptions);
            if (response.status !== 200) {
                response.status;
                throw new Error(`HTTP error (status code: ${response.status})`);
            }
            return response.text();
        } catch (error) {
            console.error(error);
            throw error;
        }
    }
}



// TODO : move it elswhere ?
function $7357a5a27f192088$var$formatRoomForCmdLine(room) {
    // TODO : should log something else than an ugly id for the roomOwner
    return `id: ${room.roomId}, name: ${room.roomName}, owner: ${room.roomOwner?.id}, players: ${room.clients?.size}`;
}
class $7357a5a27f192088$export$912fb411e26e3541 extends (0, $0ecdc2575819a6ae$export$d7a37541bc9e9a3e) {
    constructor(roomManager, peer, configureCommand, logger, joinRoomCallback){
        super(logger);
        this.roomManager = roomManager;
        this.peer = peer;
        this.configureCommand = configureCommand;
        this.joinRoomCallback = joinRoomCallback;
    }
    setup() {
        this.name("room");
        this.alias("rm");
        const listCommand = this.command("list");
        this.configureCommand(listCommand);
        listCommand// .alias('wasm')
        .alias("ls").description("List the rooms of the server").action(async ()=>{
            const rooms = await this.roomManager.getRooms();
            this.logger.newLine();
            rooms.forEach((room, key)=>{
                this.logger.writeLn($7357a5a27f192088$var$formatRoomForCmdLine(room));
            });
            this.logger.prompt();
        });
        const statusCommand = this.command("status");
        this.configureCommand(statusCommand);
        statusCommand// .alias('status')
        .description("Indicate the status of server").action(()=>{
        // TODO : this should be computed
        // TODO : check multiple status (WASM etc)
        // if (this.frenchWordDatabase.wasInit === true) {
        //   this.logger.info('The database was initialized');
        // } else {
        //   this.logger.info('The database was not initialized');
        // }
        });
        const joinCommand = this.command("join");
        this.configureCommand(joinCommand);
        joinCommand// .alias('status')
        .description("Join a room").argument("<room>", "the room to join").option("-p, --password [password]", "the password of the room").action(async (roomId, password)=>{
            console.log("room: " + roomId + ", password: " + password);
            this.logger.newLine();
            try {
                const room = await this.roomManager.joinRoom(roomId, this.peer.id);
                if (!room) {
                    console.log("did not join room");
                    this.logger.writeLn("We were not able to join the room");
                    return;
                }
                this.logger.writeLn("Room joined");
                // this.logger.writeLn('Fetching the room.');
                const self = this;
                // TODO : logs the clients, but using something nice
                room.clients.forEach((value, key)=>{
                    if (value.id === self.peer.id) return;
                    console.log("connections");
                    console.log(self.peer.connections);
                    const connection = self.peer.connect(value.id);
                    self.logger.writeLn(`Connected to ${value.id}`);
                // TODO
                // this.bindConnection(connection)
                });
                this.joinRoomCallback(room);
            } catch (error) {
                console.error(error);
                this.logger.writeLn(`An error occurred while attempting to join the room (${error.message}).`);
            }
            this.logger.prompt();
        });
        const createCommand = this.command("create");
        this.configureCommand(createCommand);
        createCommand// .alias('status')
        .description("Create a room").argument("<room-name>", "the name of the room").option("-p, --password [password]", "the password of the room").action(async (roomName, password)=>{
            console.log("roomname: " + roomName + ", password: " + password);
            console.log(password); // FIXME : it is not null or undefined
            if (password !== null && password !== undefined) console.log("not undefined nor null");
            this.logger.newLine();
            // TODO : use RoomType here
            const room = {
                roomName: roomName,
                roomType: 0,
                password: ""
            };
            if (password !== undefined) room.password = password;
            try {
                console.log("creating room");
                const createdRoom = await this.roomManager.createRoom(room, this.peer.id);
                this.logger.writeLn(`The room was created (${$7357a5a27f192088$var$formatRoomForCmdLine(createdRoom)})`);
            } catch (error) {
                this.logger.writeLn(`An error occurred while attempting to create the room (${error})`);
            }
            this.logger.prompt();
        });
    // TODO : init (using a factory)
    }
}


var $a52c7a17f48f0c79$exports = {};
parcelRequire = function(e, r, t, n) {
    var i, o = "function" == typeof parcelRequire && parcelRequire, u = undefined;
    function f(t, n) {
        if (!r[t]) {
            if (!e[t]) {
                var i = "function" == typeof parcelRequire && parcelRequire;
                if (!n && i) return i(t, !0);
                if (o) return o(t, !0);
                if (u && "string" == typeof t) return u(t);
                var c = new Error("Cannot find module '" + t + "'");
                throw c.code = "MODULE_NOT_FOUND", c;
            }
            p.resolve = function(r) {
                return e[t][1][r] || r;
            }, p.cache = {};
            var l = r[t] = new f.Module(t);
            e[t][0].call(l.exports, p, l, l.exports, this);
        }
        return r[t].exports;
        function p(e) {
            return f(p.resolve(e));
        }
    }
    f.isParcelRequire = !0, f.Module = function(e) {
        this.id = e, this.bundle = f, this.exports = {};
    }, f.modules = e, f.cache = r, f.parent = o, f.register = function(r, t) {
        e[r] = [
            function(e, r) {
                r.exports = t;
            },
            {}
        ];
    };
    for(var c = 0; c < t.length; c++)try {
        f(t[c]);
    } catch (e) {
        i || (i = e);
    }
    if (t.length) {
        var l = f(t[t.length - 1]);
        $a52c7a17f48f0c79$exports = l;
    }
    if (parcelRequire = f, i) throw i;
    return f;
}({
    "mtGK": [
        function(require1, module1, exports) {
            var e = {};
            e.useBlobBuilder = function() {
                try {
                    return new Blob([]), !1;
                } catch (e) {
                    return !0;
                }
            }(), e.useArrayBufferView = !e.useBlobBuilder && function() {
                try {
                    return 0 === new Blob([
                        new Uint8Array([])
                    ]).size;
                } catch (e) {
                    return !0;
                }
            }(), module1.exports.binaryFeatures = e;
            var r = module1.exports.BlobBuilder;
            function t() {
                this._pieces = [], this._parts = [];
            }
            "undefined" != typeof window && (r = module1.exports.BlobBuilder = window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder || window.BlobBuilder), t.prototype.append = function(e) {
                "number" == typeof e ? this._pieces.push(e) : (this.flush(), this._parts.push(e));
            }, t.prototype.flush = function() {
                if (this._pieces.length > 0) {
                    var r = new Uint8Array(this._pieces);
                    e.useArrayBufferView || (r = r.buffer), this._parts.push(r), this._pieces = [];
                }
            }, t.prototype.getBuffer = function() {
                if (this.flush(), e.useBlobBuilder) {
                    for(var t = new r, i = 0, u = this._parts.length; i < u; i++)t.append(this._parts[i]);
                    return t.getBlob();
                }
                return new Blob(this._parts);
            }, module1.exports.BufferBuilder = t;
        },
        {}
    ],
    "c7XW": [
        function(require1, module1, exports) {
            var t = require1("./bufferbuilder").BufferBuilder, e = require1("./bufferbuilder").binaryFeatures, i = {
                unpack: function(t) {
                    return new r(t).unpack();
                },
                pack: function(t) {
                    var e = new n;
                    return e.pack(t), e.getBuffer();
                }
            };
            function r(t) {
                this.index = 0, this.dataBuffer = t, this.dataView = new Uint8Array(this.dataBuffer), this.length = this.dataBuffer.byteLength;
            }
            function n() {
                this.bufferBuilder = new t;
            }
            function u(t) {
                var e = t.charCodeAt(0);
                return e <= 2047 ? "00" : e <= 65535 ? "000" : e <= 2097151 ? "0000" : e <= 67108863 ? "00000" : "000000";
            }
            function a(t) {
                return t.length > 600 ? new Blob([
                    t
                ]).size : t.replace(/[^\u0000-\u007F]/g, u).length;
            }
            module1.exports = i, r.prototype.unpack = function() {
                var t, e = this.unpack_uint8();
                if (e < 128) return e;
                if ((224 ^ e) < 32) return (224 ^ e) - 32;
                if ((t = 160 ^ e) <= 15) return this.unpack_raw(t);
                if ((t = 176 ^ e) <= 15) return this.unpack_string(t);
                if ((t = 144 ^ e) <= 15) return this.unpack_array(t);
                if ((t = 128 ^ e) <= 15) return this.unpack_map(t);
                switch(e){
                    case 192:
                        return null;
                    case 193:
                        return;
                    case 194:
                        return !1;
                    case 195:
                        return !0;
                    case 202:
                        return this.unpack_float();
                    case 203:
                        return this.unpack_double();
                    case 204:
                        return this.unpack_uint8();
                    case 205:
                        return this.unpack_uint16();
                    case 206:
                        return this.unpack_uint32();
                    case 207:
                        return this.unpack_uint64();
                    case 208:
                        return this.unpack_int8();
                    case 209:
                        return this.unpack_int16();
                    case 210:
                        return this.unpack_int32();
                    case 211:
                        return this.unpack_int64();
                    case 212:
                    case 213:
                    case 214:
                    case 215:
                        return;
                    case 216:
                        return t = this.unpack_uint16(), this.unpack_string(t);
                    case 217:
                        return t = this.unpack_uint32(), this.unpack_string(t);
                    case 218:
                        return t = this.unpack_uint16(), this.unpack_raw(t);
                    case 219:
                        return t = this.unpack_uint32(), this.unpack_raw(t);
                    case 220:
                        return t = this.unpack_uint16(), this.unpack_array(t);
                    case 221:
                        return t = this.unpack_uint32(), this.unpack_array(t);
                    case 222:
                        return t = this.unpack_uint16(), this.unpack_map(t);
                    case 223:
                        return t = this.unpack_uint32(), this.unpack_map(t);
                }
            }, r.prototype.unpack_uint8 = function() {
                var t = 255 & this.dataView[this.index];
                return this.index++, t;
            }, r.prototype.unpack_uint16 = function() {
                var t = this.read(2), e = 256 * (255 & t[0]) + (255 & t[1]);
                return this.index += 2, e;
            }, r.prototype.unpack_uint32 = function() {
                var t = this.read(4), e = 256 * (256 * (256 * t[0] + t[1]) + t[2]) + t[3];
                return this.index += 4, e;
            }, r.prototype.unpack_uint64 = function() {
                var t = this.read(8), e = 256 * (256 * (256 * (256 * (256 * (256 * (256 * t[0] + t[1]) + t[2]) + t[3]) + t[4]) + t[5]) + t[6]) + t[7];
                return this.index += 8, e;
            }, r.prototype.unpack_int8 = function() {
                var t = this.unpack_uint8();
                return t < 128 ? t : t - 256;
            }, r.prototype.unpack_int16 = function() {
                var t = this.unpack_uint16();
                return t < 32768 ? t : t - 65536;
            }, r.prototype.unpack_int32 = function() {
                var t = this.unpack_uint32();
                return t < Math.pow(2, 31) ? t : t - Math.pow(2, 32);
            }, r.prototype.unpack_int64 = function() {
                var t = this.unpack_uint64();
                return t < Math.pow(2, 63) ? t : t - Math.pow(2, 64);
            }, r.prototype.unpack_raw = function(t) {
                if (this.length < this.index + t) throw new Error("BinaryPackFailure: index is out of range " + this.index + " " + t + " " + this.length);
                var e = this.dataBuffer.slice(this.index, this.index + t);
                return this.index += t, e;
            }, r.prototype.unpack_string = function(t) {
                for(var e, i, r = this.read(t), n = 0, u = ""; n < t;)(e = r[n]) < 128 ? (u += String.fromCharCode(e), n++) : (192 ^ e) < 32 ? (i = (192 ^ e) << 6 | 63 & r[n + 1], u += String.fromCharCode(i), n += 2) : (i = (15 & e) << 12 | (63 & r[n + 1]) << 6 | 63 & r[n + 2], u += String.fromCharCode(i), n += 3);
                return this.index += t, u;
            }, r.prototype.unpack_array = function(t) {
                for(var e = new Array(t), i = 0; i < t; i++)e[i] = this.unpack();
                return e;
            }, r.prototype.unpack_map = function(t) {
                for(var e = {}, i = 0; i < t; i++){
                    var r = this.unpack(), n = this.unpack();
                    e[r] = n;
                }
                return e;
            }, r.prototype.unpack_float = function() {
                var t = this.unpack_uint32(), e = (t >> 23 & 255) - 127;
                return (0 === t >> 31 ? 1 : -1) * (8388607 & t | 8388608) * Math.pow(2, e - 23);
            }, r.prototype.unpack_double = function() {
                var t = this.unpack_uint32(), e = this.unpack_uint32(), i = (t >> 20 & 2047) - 1023;
                return (0 === t >> 31 ? 1 : -1) * ((1048575 & t | 1048576) * Math.pow(2, i - 20) + e * Math.pow(2, i - 52));
            }, r.prototype.read = function(t) {
                var e = this.index;
                if (e + t <= this.length) return this.dataView.subarray(e, e + t);
                throw new Error("BinaryPackFailure: read index out of range");
            }, n.prototype.getBuffer = function() {
                return this.bufferBuilder.getBuffer();
            }, n.prototype.pack = function(t) {
                var i = typeof t;
                if ("string" === i) this.pack_string(t);
                else if ("number" === i) Math.floor(t) === t ? this.pack_integer(t) : this.pack_double(t);
                else if ("boolean" === i) !0 === t ? this.bufferBuilder.append(195) : !1 === t && this.bufferBuilder.append(194);
                else if ("undefined" === i) this.bufferBuilder.append(192);
                else {
                    if ("object" !== i) throw new Error('Type "' + i + '" not yet supported');
                    if (null === t) this.bufferBuilder.append(192);
                    else {
                        var r = t.constructor;
                        if (r == Array) this.pack_array(t);
                        else if (r == Blob || r == File || t instanceof Blob || t instanceof File) this.pack_bin(t);
                        else if (r == ArrayBuffer) e.useArrayBufferView ? this.pack_bin(new Uint8Array(t)) : this.pack_bin(t);
                        else if ("BYTES_PER_ELEMENT" in t) e.useArrayBufferView ? this.pack_bin(new Uint8Array(t.buffer)) : this.pack_bin(t.buffer);
                        else if (r == Object || r.toString().startsWith("class")) this.pack_object(t);
                        else if (r == Date) this.pack_string(t.toString());
                        else {
                            if ("function" != typeof t.toBinaryPack) throw new Error('Type "' + r.toString() + '" not yet supported');
                            this.bufferBuilder.append(t.toBinaryPack());
                        }
                    }
                }
                this.bufferBuilder.flush();
            }, n.prototype.pack_bin = function(t) {
                var e = t.length || t.byteLength || t.size;
                if (e <= 15) this.pack_uint8(160 + e);
                else if (e <= 65535) this.bufferBuilder.append(218), this.pack_uint16(e);
                else {
                    if (!(e <= 4294967295)) throw new Error("Invalid length");
                    this.bufferBuilder.append(219), this.pack_uint32(e);
                }
                this.bufferBuilder.append(t);
            }, n.prototype.pack_string = function(t) {
                var e = a(t);
                if (e <= 15) this.pack_uint8(176 + e);
                else if (e <= 65535) this.bufferBuilder.append(216), this.pack_uint16(e);
                else {
                    if (!(e <= 4294967295)) throw new Error("Invalid length");
                    this.bufferBuilder.append(217), this.pack_uint32(e);
                }
                this.bufferBuilder.append(t);
            }, n.prototype.pack_array = function(t) {
                var e = t.length;
                if (e <= 15) this.pack_uint8(144 + e);
                else if (e <= 65535) this.bufferBuilder.append(220), this.pack_uint16(e);
                else {
                    if (!(e <= 4294967295)) throw new Error("Invalid length");
                    this.bufferBuilder.append(221), this.pack_uint32(e);
                }
                for(var i = 0; i < e; i++)this.pack(t[i]);
            }, n.prototype.pack_integer = function(t) {
                if (t >= -32 && t <= 127) this.bufferBuilder.append(255 & t);
                else if (t >= 0 && t <= 255) this.bufferBuilder.append(204), this.pack_uint8(t);
                else if (t >= -128 && t <= 127) this.bufferBuilder.append(208), this.pack_int8(t);
                else if (t >= 0 && t <= 65535) this.bufferBuilder.append(205), this.pack_uint16(t);
                else if (t >= -32768 && t <= 32767) this.bufferBuilder.append(209), this.pack_int16(t);
                else if (t >= 0 && t <= 4294967295) this.bufferBuilder.append(206), this.pack_uint32(t);
                else if (t >= -2147483648 && t <= 2147483647) this.bufferBuilder.append(210), this.pack_int32(t);
                else if (t >= -9223372036854776000 && t <= 0x8000000000000000) this.bufferBuilder.append(211), this.pack_int64(t);
                else {
                    if (!(t >= 0 && t <= 0x10000000000000000)) throw new Error("Invalid integer");
                    this.bufferBuilder.append(207), this.pack_uint64(t);
                }
            }, n.prototype.pack_double = function(t) {
                var e = 0;
                t < 0 && (e = 1, t = -t);
                var i = Math.floor(Math.log(t) / Math.LN2), r = t / Math.pow(2, i) - 1, n = Math.floor(r * Math.pow(2, 52)), u = Math.pow(2, 32), a = e << 31 | i + 1023 << 20 | n / u & 1048575, p = n % u;
                this.bufferBuilder.append(203), this.pack_int32(a), this.pack_int32(p);
            }, n.prototype.pack_object = function(t) {
                var e = Object.keys(t).length;
                if (e <= 15) this.pack_uint8(128 + e);
                else if (e <= 65535) this.bufferBuilder.append(222), this.pack_uint16(e);
                else {
                    if (!(e <= 4294967295)) throw new Error("Invalid length");
                    this.bufferBuilder.append(223), this.pack_uint32(e);
                }
                for(var i in t)t.hasOwnProperty(i) && (this.pack(i), this.pack(t[i]));
            }, n.prototype.pack_uint8 = function(t) {
                this.bufferBuilder.append(t);
            }, n.prototype.pack_uint16 = function(t) {
                this.bufferBuilder.append(t >> 8), this.bufferBuilder.append(255 & t);
            }, n.prototype.pack_uint32 = function(t) {
                var e = 4294967295 & t;
                this.bufferBuilder.append((4278190080 & e) >>> 24), this.bufferBuilder.append((16711680 & e) >>> 16), this.bufferBuilder.append((65280 & e) >>> 8), this.bufferBuilder.append(255 & e);
            }, n.prototype.pack_uint64 = function(t) {
                var e = t / Math.pow(2, 32), i = t % Math.pow(2, 32);
                this.bufferBuilder.append((4278190080 & e) >>> 24), this.bufferBuilder.append((16711680 & e) >>> 16), this.bufferBuilder.append((65280 & e) >>> 8), this.bufferBuilder.append(255 & e), this.bufferBuilder.append((4278190080 & i) >>> 24), this.bufferBuilder.append((16711680 & i) >>> 16), this.bufferBuilder.append((65280 & i) >>> 8), this.bufferBuilder.append(255 & i);
            }, n.prototype.pack_int8 = function(t) {
                this.bufferBuilder.append(255 & t);
            }, n.prototype.pack_int16 = function(t) {
                this.bufferBuilder.append((65280 & t) >> 8), this.bufferBuilder.append(255 & t);
            }, n.prototype.pack_int32 = function(t) {
                this.bufferBuilder.append(t >>> 24 & 255), this.bufferBuilder.append((16711680 & t) >>> 16), this.bufferBuilder.append((65280 & t) >>> 8), this.bufferBuilder.append(255 & t);
            }, n.prototype.pack_int64 = function(t) {
                var e = Math.floor(t / Math.pow(2, 32)), i = t % Math.pow(2, 32);
                this.bufferBuilder.append((4278190080 & e) >>> 24), this.bufferBuilder.append((16711680 & e) >>> 16), this.bufferBuilder.append((65280 & e) >>> 8), this.bufferBuilder.append(255 & e), this.bufferBuilder.append((4278190080 & i) >>> 24), this.bufferBuilder.append((16711680 & i) >>> 16), this.bufferBuilder.append((65280 & i) >>> 8), this.bufferBuilder.append(255 & i);
            };
        },
        {
            "./bufferbuilder": "mtGK"
        }
    ],
    "CFi4": [
        function(require1, module1, exports) {
            "use strict";
            function e(e, t, n) {
                return t in e ? Object.defineProperty(e, t, {
                    value: n,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : e[t] = n, e;
            }
            function t(e) {
                return (t = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                    return typeof e;
                } : function(e) {
                    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                })(e);
            }
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.extractVersion = o, exports.wrapPeerConnectionEvent = i, exports.disableLog = s, exports.disableWarnings = a, exports.log = p, exports.deprecated = u, exports.detectBrowser = c, exports.compactObject = f, exports.walkStats = l, exports.filterStats = v;
            var n = !0, r = !0;
            function o(e, t, n) {
                var r = e.match(t);
                return r && r.length >= n && parseInt(r[n], 10);
            }
            function i(e, t, n) {
                if (e.RTCPeerConnection) {
                    var r = e.RTCPeerConnection.prototype, o = r.addEventListener;
                    r.addEventListener = function(e, r) {
                        if (e !== t) return o.apply(this, arguments);
                        var i = function(e) {
                            var t = n(e);
                            t && (r.handleEvent ? r.handleEvent(t) : r(t));
                        };
                        return this._eventMap = this._eventMap || {}, this._eventMap[t] || (this._eventMap[t] = new Map), this._eventMap[t].set(r, i), o.apply(this, [
                            e,
                            i
                        ]);
                    };
                    var i = r.removeEventListener;
                    r.removeEventListener = function(e, n) {
                        if (e !== t || !this._eventMap || !this._eventMap[t]) return i.apply(this, arguments);
                        if (!this._eventMap[t].has(n)) return i.apply(this, arguments);
                        var r = this._eventMap[t].get(n);
                        return this._eventMap[t].delete(n), 0 === this._eventMap[t].size && delete this._eventMap[t], 0 === Object.keys(this._eventMap).length && delete this._eventMap, i.apply(this, [
                            e,
                            r
                        ]);
                    }, Object.defineProperty(r, "on" + t, {
                        get: function() {
                            return this["_on" + t];
                        },
                        set: function(e) {
                            this["_on" + t] && (this.removeEventListener(t, this["_on" + t]), delete this["_on" + t]), e && this.addEventListener(t, this["_on" + t] = e);
                        },
                        enumerable: !0,
                        configurable: !0
                    });
                }
            }
            function s(e) {
                return "boolean" != typeof e ? new Error("Argument type: " + t(e) + ". Please use a boolean.") : (n = e, e ? "adapter.js logging disabled" : "adapter.js logging enabled");
            }
            function a(e) {
                return "boolean" != typeof e ? new Error("Argument type: " + t(e) + ". Please use a boolean.") : (r = !e, "adapter.js deprecation warnings " + (e ? "disabled" : "enabled"));
            }
            function p() {
                if ("object" === ("undefined" == typeof window ? "undefined" : t(window))) {
                    if (n) return;
                    "undefined" != typeof console && "function" == typeof console.log && console.log.apply(console, arguments);
                }
            }
            function u(e, t) {
                r && console.warn(e + " is deprecated, please use " + t + " instead.");
            }
            function c(e) {
                var t = {
                    browser: null,
                    version: null
                };
                if (void 0 === e || !e.navigator) return t.browser = "Not a browser.", t;
                var { navigator: n  } = e;
                if (n.mozGetUserMedia) t.browser = "firefox", t.version = o(n.userAgent, /Firefox\/(\d+)\./, 1);
                else if (n.webkitGetUserMedia || !1 === e.isSecureContext && e.webkitRTCPeerConnection && !e.RTCIceGatherer) t.browser = "chrome", t.version = o(n.userAgent, /Chrom(e|ium)\/(\d+)\./, 2);
                else if (n.mediaDevices && n.userAgent.match(/Edge\/(\d+).(\d+)$/)) t.browser = "edge", t.version = o(n.userAgent, /Edge\/(\d+).(\d+)$/, 2);
                else {
                    if (!e.RTCPeerConnection || !n.userAgent.match(/AppleWebKit\/(\d+)\./)) return t.browser = "Not a supported browser.", t;
                    t.browser = "safari", t.version = o(n.userAgent, /AppleWebKit\/(\d+)\./, 1), t.supportsUnifiedPlan = e.RTCRtpTransceiver && "currentDirection" in e.RTCRtpTransceiver.prototype;
                }
                return t;
            }
            function d(e) {
                return "[object Object]" === Object.prototype.toString.call(e);
            }
            function f(t) {
                return d(t) ? Object.keys(t).reduce(function(n, r) {
                    var o = d(t[r]), i = o ? f(t[r]) : t[r], s = o && !Object.keys(i).length;
                    return void 0 === i || s ? n : Object.assign(n, e({}, r, i));
                }, {}) : t;
            }
            function l(e, t, n) {
                t && !n.has(t.id) && (n.set(t.id, t), Object.keys(t).forEach(function(r) {
                    r.endsWith("Id") ? l(e, e.get(t[r]), n) : r.endsWith("Ids") && t[r].forEach(function(t) {
                        l(e, e.get(t), n);
                    });
                }));
            }
            function v(e, t, n) {
                var r = n ? "outbound-rtp" : "inbound-rtp", o = new Map;
                if (null === t) return o;
                var i = [];
                return e.forEach(function(e) {
                    "track" === e.type && e.trackIdentifier === t.id && i.push(e);
                }), i.forEach(function(t) {
                    e.forEach(function(n) {
                        n.type === r && n.trackId === t.id && l(e, n, o);
                    });
                }), o;
            }
        },
        {}
    ],
    "VVBf": [
        function(require1, module1, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.shimGetUserMedia = i;
            var e = t(require1("../utils.js"));
            function r(e) {
                if ("function" != typeof WeakMap) return null;
                var t = new WeakMap, o = new WeakMap;
                return (r = function(e) {
                    return e ? o : t;
                })(e);
            }
            function t(e, t) {
                if (!t && e && e.__esModule) return e;
                if (null === e || "object" != typeof e && "function" != typeof e) return {
                    default: e
                };
                var o = r(t);
                if (o && o.has(e)) return o.get(e);
                var n = {}, i = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for(var a in e)if ("default" !== a && Object.prototype.hasOwnProperty.call(e, a)) {
                    var c = i ? Object.getOwnPropertyDescriptor(e, a) : null;
                    c && (c.get || c.set) ? Object.defineProperty(n, a, c) : n[a] = e[a];
                }
                return n.default = e, o && o.set(e, n), n;
            }
            function o(e) {
                return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                    return typeof e;
                } : function(e) {
                    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                })(e);
            }
            var n = e.log;
            function i(e, r) {
                var t = e && e.navigator;
                if (t.mediaDevices) {
                    var i = function(e) {
                        if ("object" !== o(e) || e.mandatory || e.optional) return e;
                        var r = {};
                        return Object.keys(e).forEach(function(t) {
                            if ("require" !== t && "advanced" !== t && "mediaSource" !== t) {
                                var n = "object" === o(e[t]) ? e[t] : {
                                    ideal: e[t]
                                };
                                void 0 !== n.exact && "number" == typeof n.exact && (n.min = n.max = n.exact);
                                var i = function(e, r) {
                                    return e ? e + r.charAt(0).toUpperCase() + r.slice(1) : "deviceId" === r ? "sourceId" : r;
                                };
                                if (void 0 !== n.ideal) {
                                    r.optional = r.optional || [];
                                    var a = {};
                                    "number" == typeof n.ideal ? (a[i("min", t)] = n.ideal, r.optional.push(a), (a = {})[i("max", t)] = n.ideal, r.optional.push(a)) : (a[i("", t)] = n.ideal, r.optional.push(a));
                                }
                                void 0 !== n.exact && "number" != typeof n.exact ? (r.mandatory = r.mandatory || {}, r.mandatory[i("", t)] = n.exact) : [
                                    "min",
                                    "max"
                                ].forEach(function(e) {
                                    void 0 !== n[e] && (r.mandatory = r.mandatory || {}, r.mandatory[i(e, t)] = n[e]);
                                });
                            }
                        }), e.advanced && (r.optional = (r.optional || []).concat(e.advanced)), r;
                    }, a = function(e, a) {
                        if (r.version >= 61) return a(e);
                        if ((e = JSON.parse(JSON.stringify(e))) && "object" === o(e.audio)) {
                            var c = function(e, r, t) {
                                r in e && !(t in e) && (e[t] = e[r], delete e[r]);
                            };
                            c((e = JSON.parse(JSON.stringify(e))).audio, "autoGainControl", "googAutoGainControl"), c(e.audio, "noiseSuppression", "googNoiseSuppression"), e.audio = i(e.audio);
                        }
                        if (e && "object" === o(e.video)) {
                            var d = e.video.facingMode;
                            d = d && ("object" === o(d) ? d : {
                                ideal: d
                            });
                            var u, s = r.version < 66;
                            if (d && ("user" === d.exact || "environment" === d.exact || "user" === d.ideal || "environment" === d.ideal) && (!t.mediaDevices.getSupportedConstraints || !t.mediaDevices.getSupportedConstraints().facingMode || s)) {
                                if (delete e.video.facingMode, "environment" === d.exact || "environment" === d.ideal ? u = [
                                    "back",
                                    "rear"
                                ] : "user" !== d.exact && "user" !== d.ideal || (u = [
                                    "front"
                                ]), u) return t.mediaDevices.enumerateDevices().then(function(r) {
                                    var t = (r = r.filter(function(e) {
                                        return "videoinput" === e.kind;
                                    })).find(function(e) {
                                        return u.some(function(r) {
                                            return e.label.toLowerCase().includes(r);
                                        });
                                    });
                                    return !t && r.length && u.includes("back") && (t = r[r.length - 1]), t && (e.video.deviceId = d.exact ? {
                                        exact: t.deviceId
                                    } : {
                                        ideal: t.deviceId
                                    }), e.video = i(e.video), n("chrome: " + JSON.stringify(e)), a(e);
                                });
                            }
                            e.video = i(e.video);
                        }
                        return n("chrome: " + JSON.stringify(e)), a(e);
                    }, c = function(e) {
                        return r.version >= 64 ? e : {
                            name: ({
                                PermissionDeniedError: "NotAllowedError",
                                PermissionDismissedError: "NotAllowedError",
                                InvalidStateError: "NotAllowedError",
                                DevicesNotFoundError: "NotFoundError",
                                ConstraintNotSatisfiedError: "OverconstrainedError",
                                TrackStartError: "NotReadableError",
                                MediaDeviceFailedDueToShutdown: "NotAllowedError",
                                MediaDeviceKillSwitchOn: "NotAllowedError",
                                TabCaptureError: "AbortError",
                                ScreenCaptureError: "AbortError",
                                DeviceCaptureError: "AbortError"
                            })[e.name] || e.name,
                            message: e.message,
                            constraint: e.constraint || e.constraintName,
                            toString: function() {
                                return this.name + (this.message && ": ") + this.message;
                            }
                        };
                    };
                    if (t.getUserMedia = (function(e, r, o) {
                        a(e, function(e) {
                            t.webkitGetUserMedia(e, r, function(e) {
                                o && o(c(e));
                            });
                        });
                    }).bind(t), t.mediaDevices.getUserMedia) {
                        var d = t.mediaDevices.getUserMedia.bind(t.mediaDevices);
                        t.mediaDevices.getUserMedia = function(e) {
                            return a(e, function(e) {
                                return d(e).then(function(r) {
                                    if (e.audio && !r.getAudioTracks().length || e.video && !r.getVideoTracks().length) throw r.getTracks().forEach(function(e) {
                                        e.stop();
                                    }), new DOMException("", "NotFoundError");
                                    return r;
                                }, function(e) {
                                    return Promise.reject(c(e));
                                });
                            });
                        };
                    }
                }
            }
        },
        {
            "../utils.js": "CFi4"
        }
    ],
    "X0oV": [
        function(require1, module1, exports) {
            "use strict";
            function e(e, i) {
                e.navigator.mediaDevices && "getDisplayMedia" in e.navigator.mediaDevices || e.navigator.mediaDevices && ("function" == typeof i ? e.navigator.mediaDevices.getDisplayMedia = function(a) {
                    return i(a).then(function(i) {
                        var t = a.video && a.video.width, o = a.video && a.video.height, d = a.video && a.video.frameRate;
                        return a.video = {
                            mandatory: {
                                chromeMediaSource: "desktop",
                                chromeMediaSourceId: i,
                                maxFrameRate: d || 3
                            }
                        }, t && (a.video.mandatory.maxWidth = t), o && (a.video.mandatory.maxHeight = o), e.navigator.mediaDevices.getUserMedia(a);
                    });
                } : console.error("shimGetDisplayMedia: getSourceId argument is not a function"));
            }
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.shimGetDisplayMedia = e;
        },
        {}
    ],
    "xPY1": [
        function(require1, module1, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.shimMediaStream = a, exports.shimOnTrack = c, exports.shimGetSendersWithDtmf = p, exports.shimGetStats = d, exports.shimSenderReceiverGetStats = h, exports.shimAddTrackRemoveTrackWithNative = f, exports.shimAddTrackRemoveTrack = m, exports.shimPeerConnection = u, exports.fixNegotiationNeeded = l, Object.defineProperty(exports, "shimGetUserMedia", {
                enumerable: !0,
                get: function() {
                    return t.shimGetUserMedia;
                }
            }), Object.defineProperty(exports, "shimGetDisplayMedia", {
                enumerable: !0,
                get: function() {
                    return r.shimGetDisplayMedia;
                }
            });
            var e = i(require1("../utils.js")), t = require1("./getusermedia"), r = require1("./getdisplaymedia");
            function n(e) {
                if ("function" != typeof WeakMap) return null;
                var t = new WeakMap, r = new WeakMap;
                return (n = function(e) {
                    return e ? r : t;
                })(e);
            }
            function i(e, t) {
                if (!t && e && e.__esModule) return e;
                if (null === e || "object" != typeof e && "function" != typeof e) return {
                    default: e
                };
                var r = n(t);
                if (r && r.has(e)) return r.get(e);
                var i = {}, o = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for(var s in e)if ("default" !== s && Object.prototype.hasOwnProperty.call(e, s)) {
                    var a = o ? Object.getOwnPropertyDescriptor(e, s) : null;
                    a && (a.get || a.set) ? Object.defineProperty(i, s, a) : i[s] = e[s];
                }
                return i.default = e, r && r.set(e, i), i;
            }
            function o(e, t, r) {
                return t in e ? Object.defineProperty(e, t, {
                    value: r,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : e[t] = r, e;
            }
            function s(e) {
                return (s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                    return typeof e;
                } : function(e) {
                    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                })(e);
            }
            function a(e) {
                e.MediaStream = e.MediaStream || e.webkitMediaStream;
            }
            function c(t) {
                if ("object" !== s(t) || !t.RTCPeerConnection || "ontrack" in t.RTCPeerConnection.prototype) e.wrapPeerConnectionEvent(t, "track", function(e) {
                    return e.transceiver || Object.defineProperty(e, "transceiver", {
                        value: {
                            receiver: e.receiver
                        }
                    }), e;
                });
                else {
                    Object.defineProperty(t.RTCPeerConnection.prototype, "ontrack", {
                        get: function() {
                            return this._ontrack;
                        },
                        set: function(e) {
                            this._ontrack && this.removeEventListener("track", this._ontrack), this.addEventListener("track", this._ontrack = e);
                        },
                        enumerable: !0,
                        configurable: !0
                    });
                    var r = t.RTCPeerConnection.prototype.setRemoteDescription;
                    t.RTCPeerConnection.prototype.setRemoteDescription = function() {
                        var e = this;
                        return this._ontrackpoly || (this._ontrackpoly = function(r) {
                            r.stream.addEventListener("addtrack", function(n) {
                                var i;
                                i = t.RTCPeerConnection.prototype.getReceivers ? e.getReceivers().find(function(e) {
                                    return e.track && e.track.id === n.track.id;
                                }) : {
                                    track: n.track
                                };
                                var o = new Event("track");
                                o.track = n.track, o.receiver = i, o.transceiver = {
                                    receiver: i
                                }, o.streams = [
                                    r.stream
                                ], e.dispatchEvent(o);
                            }), r.stream.getTracks().forEach(function(n) {
                                var i;
                                i = t.RTCPeerConnection.prototype.getReceivers ? e.getReceivers().find(function(e) {
                                    return e.track && e.track.id === n.id;
                                }) : {
                                    track: n
                                };
                                var o = new Event("track");
                                o.track = n, o.receiver = i, o.transceiver = {
                                    receiver: i
                                }, o.streams = [
                                    r.stream
                                ], e.dispatchEvent(o);
                            });
                        }, this.addEventListener("addstream", this._ontrackpoly)), r.apply(this, arguments);
                    };
                }
            }
            function p(e) {
                if ("object" === s(e) && e.RTCPeerConnection && !("getSenders" in e.RTCPeerConnection.prototype) && "createDTMFSender" in e.RTCPeerConnection.prototype) {
                    var t = function(e, t) {
                        return {
                            track: t,
                            get dtmf () {
                                return void 0 === this._dtmf && ("audio" === t.kind ? this._dtmf = e.createDTMFSender(t) : this._dtmf = null), this._dtmf;
                            },
                            _pc: e
                        };
                    };
                    if (!e.RTCPeerConnection.prototype.getSenders) {
                        e.RTCPeerConnection.prototype.getSenders = function() {
                            return this._senders = this._senders || [], this._senders.slice();
                        };
                        var r = e.RTCPeerConnection.prototype.addTrack;
                        e.RTCPeerConnection.prototype.addTrack = function(e, n) {
                            var i = r.apply(this, arguments);
                            return i || (i = t(this, e), this._senders.push(i)), i;
                        };
                        var n = e.RTCPeerConnection.prototype.removeTrack;
                        e.RTCPeerConnection.prototype.removeTrack = function(e) {
                            n.apply(this, arguments);
                            var t = this._senders.indexOf(e);
                            -1 !== t && this._senders.splice(t, 1);
                        };
                    }
                    var i = e.RTCPeerConnection.prototype.addStream;
                    e.RTCPeerConnection.prototype.addStream = function(e) {
                        var r = this;
                        this._senders = this._senders || [], i.apply(this, [
                            e
                        ]), e.getTracks().forEach(function(e) {
                            r._senders.push(t(r, e));
                        });
                    };
                    var o = e.RTCPeerConnection.prototype.removeStream;
                    e.RTCPeerConnection.prototype.removeStream = function(e) {
                        var t = this;
                        this._senders = this._senders || [], o.apply(this, [
                            e
                        ]), e.getTracks().forEach(function(e) {
                            var r = t._senders.find(function(t) {
                                return t.track === e;
                            });
                            r && t._senders.splice(t._senders.indexOf(r), 1);
                        });
                    };
                } else if ("object" === s(e) && e.RTCPeerConnection && "getSenders" in e.RTCPeerConnection.prototype && "createDTMFSender" in e.RTCPeerConnection.prototype && e.RTCRtpSender && !("dtmf" in e.RTCRtpSender.prototype)) {
                    var a = e.RTCPeerConnection.prototype.getSenders;
                    e.RTCPeerConnection.prototype.getSenders = function() {
                        var e = this, t = a.apply(this, []);
                        return t.forEach(function(t) {
                            return t._pc = e;
                        }), t;
                    }, Object.defineProperty(e.RTCRtpSender.prototype, "dtmf", {
                        get: function() {
                            return void 0 === this._dtmf && ("audio" === this.track.kind ? this._dtmf = this._pc.createDTMFSender(this.track) : this._dtmf = null), this._dtmf;
                        }
                    });
                }
            }
            function d(e) {
                if (e.RTCPeerConnection) {
                    var t = e.RTCPeerConnection.prototype.getStats;
                    e.RTCPeerConnection.prototype.getStats = function() {
                        var e = this, [r, n, i] = arguments;
                        if (arguments.length > 0 && "function" == typeof r) return t.apply(this, arguments);
                        if (0 === t.length && (0 === arguments.length || "function" != typeof r)) return t.apply(this, []);
                        var o = function(e) {
                            var t = {};
                            return e.result().forEach(function(e) {
                                var r = {
                                    id: e.id,
                                    timestamp: e.timestamp,
                                    type: {
                                        localcandidate: "local-candidate",
                                        remotecandidate: "remote-candidate"
                                    }[e.type] || e.type
                                };
                                e.names().forEach(function(t) {
                                    r[t] = e.stat(t);
                                }), t[r.id] = r;
                            }), t;
                        }, s = function(e) {
                            return new Map(Object.keys(e).map(function(t) {
                                return [
                                    t,
                                    e[t]
                                ];
                            }));
                        };
                        if (arguments.length >= 2) return t.apply(this, [
                            function(e) {
                                n(s(o(e)));
                            },
                            r
                        ]);
                        return new Promise(function(r, n) {
                            t.apply(e, [
                                function(e) {
                                    r(s(o(e)));
                                },
                                n
                            ]);
                        }).then(n, i);
                    };
                }
            }
            function h(t) {
                if ("object" === s(t) && t.RTCPeerConnection && t.RTCRtpSender && t.RTCRtpReceiver) {
                    if (!("getStats" in t.RTCRtpSender.prototype)) {
                        var r = t.RTCPeerConnection.prototype.getSenders;
                        r && (t.RTCPeerConnection.prototype.getSenders = function() {
                            var e = this, t = r.apply(this, []);
                            return t.forEach(function(t) {
                                return t._pc = e;
                            }), t;
                        });
                        var n = t.RTCPeerConnection.prototype.addTrack;
                        n && (t.RTCPeerConnection.prototype.addTrack = function() {
                            var e = n.apply(this, arguments);
                            return e._pc = this, e;
                        }), t.RTCRtpSender.prototype.getStats = function() {
                            var t = this;
                            return this._pc.getStats().then(function(r) {
                                return e.filterStats(r, t.track, !0);
                            });
                        };
                    }
                    if (!("getStats" in t.RTCRtpReceiver.prototype)) {
                        var i = t.RTCPeerConnection.prototype.getReceivers;
                        i && (t.RTCPeerConnection.prototype.getReceivers = function() {
                            var e = this, t = i.apply(this, []);
                            return t.forEach(function(t) {
                                return t._pc = e;
                            }), t;
                        }), e.wrapPeerConnectionEvent(t, "track", function(e) {
                            return e.receiver._pc = e.srcElement, e;
                        }), t.RTCRtpReceiver.prototype.getStats = function() {
                            var t = this;
                            return this._pc.getStats().then(function(r) {
                                return e.filterStats(r, t.track, !1);
                            });
                        };
                    }
                    if ("getStats" in t.RTCRtpSender.prototype && "getStats" in t.RTCRtpReceiver.prototype) {
                        var o = t.RTCPeerConnection.prototype.getStats;
                        t.RTCPeerConnection.prototype.getStats = function() {
                            if (arguments.length > 0 && arguments[0] instanceof t.MediaStreamTrack) {
                                var e, r, n, i = arguments[0];
                                return this.getSenders().forEach(function(t) {
                                    t.track === i && (e ? n = !0 : e = t);
                                }), this.getReceivers().forEach(function(e) {
                                    return e.track === i && (r ? n = !0 : r = e), e.track === i;
                                }), n || e && r ? Promise.reject(new DOMException("There are more than one sender or receiver for the track.", "InvalidAccessError")) : e ? e.getStats() : r ? r.getStats() : Promise.reject(new DOMException("There is no sender or receiver for the track.", "InvalidAccessError"));
                            }
                            return o.apply(this, arguments);
                        };
                    }
                }
            }
            function f(e) {
                e.RTCPeerConnection.prototype.getLocalStreams = function() {
                    var e = this;
                    return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, Object.keys(this._shimmedLocalStreams).map(function(t) {
                        return e._shimmedLocalStreams[t][0];
                    });
                };
                var t = e.RTCPeerConnection.prototype.addTrack;
                e.RTCPeerConnection.prototype.addTrack = function(e, r) {
                    if (!r) return t.apply(this, arguments);
                    this._shimmedLocalStreams = this._shimmedLocalStreams || {};
                    var n = t.apply(this, arguments);
                    return this._shimmedLocalStreams[r.id] ? -1 === this._shimmedLocalStreams[r.id].indexOf(n) && this._shimmedLocalStreams[r.id].push(n) : this._shimmedLocalStreams[r.id] = [
                        r,
                        n
                    ], n;
                };
                var r = e.RTCPeerConnection.prototype.addStream;
                e.RTCPeerConnection.prototype.addStream = function(e) {
                    var t = this;
                    this._shimmedLocalStreams = this._shimmedLocalStreams || {}, e.getTracks().forEach(function(e) {
                        if (t.getSenders().find(function(t) {
                            return t.track === e;
                        })) throw new DOMException("Track already exists.", "InvalidAccessError");
                    });
                    var n = this.getSenders();
                    r.apply(this, arguments);
                    var i = this.getSenders().filter(function(e) {
                        return -1 === n.indexOf(e);
                    });
                    this._shimmedLocalStreams[e.id] = [
                        e
                    ].concat(i);
                };
                var n = e.RTCPeerConnection.prototype.removeStream;
                e.RTCPeerConnection.prototype.removeStream = function(e) {
                    return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, delete this._shimmedLocalStreams[e.id], n.apply(this, arguments);
                };
                var i = e.RTCPeerConnection.prototype.removeTrack;
                e.RTCPeerConnection.prototype.removeTrack = function(e) {
                    var t = this;
                    return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, e && Object.keys(this._shimmedLocalStreams).forEach(function(r) {
                        var n = t._shimmedLocalStreams[r].indexOf(e);
                        -1 !== n && t._shimmedLocalStreams[r].splice(n, 1), 1 === t._shimmedLocalStreams[r].length && delete t._shimmedLocalStreams[r];
                    }), i.apply(this, arguments);
                };
            }
            function m(e, t) {
                if (e.RTCPeerConnection) {
                    if (e.RTCPeerConnection.prototype.addTrack && t.version >= 65) return f(e);
                    var r = e.RTCPeerConnection.prototype.getLocalStreams;
                    e.RTCPeerConnection.prototype.getLocalStreams = function() {
                        var e = this, t = r.apply(this);
                        return this._reverseStreams = this._reverseStreams || {}, t.map(function(t) {
                            return e._reverseStreams[t.id];
                        });
                    };
                    var n = e.RTCPeerConnection.prototype.addStream;
                    e.RTCPeerConnection.prototype.addStream = function(t) {
                        var r = this;
                        if (this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {}, t.getTracks().forEach(function(e) {
                            if (r.getSenders().find(function(t) {
                                return t.track === e;
                            })) throw new DOMException("Track already exists.", "InvalidAccessError");
                        }), !this._reverseStreams[t.id]) {
                            var i = new e.MediaStream(t.getTracks());
                            this._streams[t.id] = i, this._reverseStreams[i.id] = t, t = i;
                        }
                        n.apply(this, [
                            t
                        ]);
                    };
                    var i = e.RTCPeerConnection.prototype.removeStream;
                    e.RTCPeerConnection.prototype.removeStream = function(e) {
                        this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {}, i.apply(this, [
                            this._streams[e.id] || e
                        ]), delete this._reverseStreams[this._streams[e.id] ? this._streams[e.id].id : e.id], delete this._streams[e.id];
                    }, e.RTCPeerConnection.prototype.addTrack = function(t, r) {
                        var n = this;
                        if ("closed" === this.signalingState) throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.", "InvalidStateError");
                        var i = [].slice.call(arguments, 1);
                        if (1 !== i.length || !i[0].getTracks().find(function(e) {
                            return e === t;
                        })) throw new DOMException("The adapter.js addTrack polyfill only supports a single  stream which is associated with the specified track.", "NotSupportedError");
                        if (this.getSenders().find(function(e) {
                            return e.track === t;
                        })) throw new DOMException("Track already exists.", "InvalidAccessError");
                        this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {};
                        var o = this._streams[r.id];
                        if (o) o.addTrack(t), Promise.resolve().then(function() {
                            n.dispatchEvent(new Event("negotiationneeded"));
                        });
                        else {
                            var s = new e.MediaStream([
                                t
                            ]);
                            this._streams[r.id] = s, this._reverseStreams[s.id] = r, this.addStream(s);
                        }
                        return this.getSenders().find(function(e) {
                            return e.track === t;
                        });
                    }, [
                        "createOffer",
                        "createAnswer"
                    ].forEach(function(t) {
                        var r = e.RTCPeerConnection.prototype[t], n = o({}, t, function() {
                            var e = this, t = arguments;
                            return arguments.length && "function" == typeof arguments[0] ? r.apply(this, [
                                function(r) {
                                    var n = c(e, r);
                                    t[0].apply(null, [
                                        n
                                    ]);
                                },
                                function(e) {
                                    t[1] && t[1].apply(null, e);
                                },
                                arguments[2]
                            ]) : r.apply(this, arguments).then(function(t) {
                                return c(e, t);
                            });
                        });
                        e.RTCPeerConnection.prototype[t] = n[t];
                    });
                    var s = e.RTCPeerConnection.prototype.setLocalDescription;
                    e.RTCPeerConnection.prototype.setLocalDescription = function() {
                        var e, t, r;
                        return arguments.length && arguments[0].type ? (arguments[0] = (e = this, t = arguments[0], r = t.sdp, Object.keys(e._reverseStreams || []).forEach(function(t) {
                            var n = e._reverseStreams[t], i = e._streams[n.id];
                            r = r.replace(new RegExp(n.id, "g"), i.id);
                        }), new RTCSessionDescription({
                            type: t.type,
                            sdp: r
                        })), s.apply(this, arguments)) : s.apply(this, arguments);
                    };
                    var a = Object.getOwnPropertyDescriptor(e.RTCPeerConnection.prototype, "localDescription");
                    Object.defineProperty(e.RTCPeerConnection.prototype, "localDescription", {
                        get: function() {
                            var e = a.get.apply(this);
                            return "" === e.type ? e : c(this, e);
                        }
                    }), e.RTCPeerConnection.prototype.removeTrack = function(e) {
                        var t, r = this;
                        if ("closed" === this.signalingState) throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.", "InvalidStateError");
                        if (!e._pc) throw new DOMException("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.", "TypeError");
                        if (!(e._pc === this)) throw new DOMException("Sender was not created by this connection.", "InvalidAccessError");
                        this._streams = this._streams || {}, Object.keys(this._streams).forEach(function(n) {
                            r._streams[n].getTracks().find(function(t) {
                                return e.track === t;
                            }) && (t = r._streams[n]);
                        }), t && (1 === t.getTracks().length ? this.removeStream(this._reverseStreams[t.id]) : t.removeTrack(e.track), this.dispatchEvent(new Event("negotiationneeded")));
                    };
                }
                function c(e, t) {
                    var r = t.sdp;
                    return Object.keys(e._reverseStreams || []).forEach(function(t) {
                        var n = e._reverseStreams[t], i = e._streams[n.id];
                        r = r.replace(new RegExp(i.id, "g"), n.id);
                    }), new RTCSessionDescription({
                        type: t.type,
                        sdp: r
                    });
                }
            }
            function u(e, t) {
                !e.RTCPeerConnection && e.webkitRTCPeerConnection && (e.RTCPeerConnection = e.webkitRTCPeerConnection), e.RTCPeerConnection && t.version < 53 && [
                    "setLocalDescription",
                    "setRemoteDescription",
                    "addIceCandidate"
                ].forEach(function(t) {
                    var r = e.RTCPeerConnection.prototype[t], n = o({}, t, function() {
                        return arguments[0] = new ("addIceCandidate" === t ? e.RTCIceCandidate : e.RTCSessionDescription)(arguments[0]), r.apply(this, arguments);
                    });
                    e.RTCPeerConnection.prototype[t] = n[t];
                });
            }
            function l(t, r) {
                e.wrapPeerConnectionEvent(t, "negotiationneeded", function(e) {
                    var t = e.target;
                    if (!(r.version < 72 || t.getConfiguration && "plan-b" === t.getConfiguration().sdpSemantics) || "stable" === t.signalingState) return e;
                });
            }
        },
        {
            "../utils.js": "CFi4",
            "./getusermedia": "VVBf",
            "./getdisplaymedia": "X0oV"
        }
    ],
    "DAHH": [
        function(require1, module1, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.filterIceServers = n;
            var r = t(require1("../utils"));
            function e(r) {
                if ("function" != typeof WeakMap) return null;
                var t = new WeakMap, n = new WeakMap;
                return (e = function(r) {
                    return r ? n : t;
                })(r);
            }
            function t(r, t) {
                if (!t && r && r.__esModule) return r;
                if (null === r || "object" != typeof r && "function" != typeof r) return {
                    default: r
                };
                var n = e(t);
                if (n && n.has(r)) return n.get(r);
                var u = {}, i = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for(var f in r)if ("default" !== f && Object.prototype.hasOwnProperty.call(r, f)) {
                    var l = i ? Object.getOwnPropertyDescriptor(r, f) : null;
                    l && (l.get || l.set) ? Object.defineProperty(u, f, l) : u[f] = r[f];
                }
                return u.default = r, n && n.set(r, u), u;
            }
            function n(e, t) {
                var n = !1;
                return (e = JSON.parse(JSON.stringify(e))).filter(function(e) {
                    if (e && (e.urls || e.url)) {
                        var t = e.urls || e.url;
                        e.url && !e.urls && r.deprecated("RTCIceServer.url", "RTCIceServer.urls");
                        var u = "string" == typeof t;
                        return u && (t = [
                            t
                        ]), t = t.filter(function(r) {
                            if (0 === r.indexOf("stun:")) return !1;
                            var e = r.startsWith("turn") && !r.startsWith("turn:[") && r.includes("transport=udp");
                            return e && !n ? (n = !0, !0) : e && !n;
                        }), delete e.url, e.urls = u ? t[0] : t, !!t.length;
                    }
                });
            }
        },
        {
            "../utils": "CFi4"
        }
    ],
    "rjLK": [
        function(require1, module1, exports) {
            "use strict";
            var r = {
                generateIdentifier: function() {
                    return Math.random().toString(36).substr(2, 10);
                }
            };
            r.localCName = r.generateIdentifier(), r.splitLines = function(r) {
                return r.trim().split("\n").map(function(r) {
                    return r.trim();
                });
            }, r.splitSections = function(r) {
                return r.split("\nm=").map(function(r, e) {
                    return (e > 0 ? "m=" + r : r).trim() + "\r\n";
                });
            }, r.getDescription = function(e) {
                var t = r.splitSections(e);
                return t && t[0];
            }, r.getMediaSections = function(e) {
                var t = r.splitSections(e);
                return t.shift(), t;
            }, r.matchPrefix = function(e, t) {
                return r.splitLines(e).filter(function(r) {
                    return 0 === r.indexOf(t);
                });
            }, r.parseCandidate = function(r) {
                for(var e, t = {
                    foundation: (e = 0 === r.indexOf("a=candidate:") ? r.substring(12).split(" ") : r.substring(10).split(" "))[0],
                    component: parseInt(e[1], 10),
                    protocol: e[2].toLowerCase(),
                    priority: parseInt(e[3], 10),
                    ip: e[4],
                    address: e[4],
                    port: parseInt(e[5], 10),
                    type: e[7]
                }, a = 8; a < e.length; a += 2)switch(e[a]){
                    case "raddr":
                        t.relatedAddress = e[a + 1];
                        break;
                    case "rport":
                        t.relatedPort = parseInt(e[a + 1], 10);
                        break;
                    case "tcptype":
                        t.tcpType = e[a + 1];
                        break;
                    case "ufrag":
                        t.ufrag = e[a + 1], t.usernameFragment = e[a + 1];
                        break;
                    default:
                        t[e[a]] = e[a + 1];
                }
                return t;
            }, r.writeCandidate = function(r) {
                var e = [];
                e.push(r.foundation), e.push(r.component), e.push(r.protocol.toUpperCase()), e.push(r.priority), e.push(r.address || r.ip), e.push(r.port);
                var t = r.type;
                return e.push("typ"), e.push(t), "host" !== t && r.relatedAddress && r.relatedPort && (e.push("raddr"), e.push(r.relatedAddress), e.push("rport"), e.push(r.relatedPort)), r.tcpType && "tcp" === r.protocol.toLowerCase() && (e.push("tcptype"), e.push(r.tcpType)), (r.usernameFragment || r.ufrag) && (e.push("ufrag"), e.push(r.usernameFragment || r.ufrag)), "candidate:" + e.join(" ");
            }, r.parseIceOptions = function(r) {
                return r.substr(14).split(" ");
            }, r.parseRtpMap = function(r) {
                var e = r.substr(9).split(" "), t = {
                    payloadType: parseInt(e.shift(), 10)
                };
                return e = e[0].split("/"), t.name = e[0], t.clockRate = parseInt(e[1], 10), t.channels = 3 === e.length ? parseInt(e[2], 10) : 1, t.numChannels = t.channels, t;
            }, r.writeRtpMap = function(r) {
                var e = r.payloadType;
                void 0 !== r.preferredPayloadType && (e = r.preferredPayloadType);
                var t = r.channels || r.numChannels || 1;
                return "a=rtpmap:" + e + " " + r.name + "/" + r.clockRate + (1 !== t ? "/" + t : "") + "\r\n";
            }, r.parseExtmap = function(r) {
                var e = r.substr(9).split(" ");
                return {
                    id: parseInt(e[0], 10),
                    direction: e[0].indexOf("/") > 0 ? e[0].split("/")[1] : "sendrecv",
                    uri: e[1]
                };
            }, r.writeExtmap = function(r) {
                return "a=extmap:" + (r.id || r.preferredId) + (r.direction && "sendrecv" !== r.direction ? "/" + r.direction : "") + " " + r.uri + "\r\n";
            }, r.parseFmtp = function(r) {
                for(var e, t = {}, a = r.substr(r.indexOf(" ") + 1).split(";"), n = 0; n < a.length; n++)t[(e = a[n].trim().split("="))[0].trim()] = e[1];
                return t;
            }, r.writeFmtp = function(r) {
                var e = "", t = r.payloadType;
                if (void 0 !== r.preferredPayloadType && (t = r.preferredPayloadType), r.parameters && Object.keys(r.parameters).length) {
                    var a = [];
                    Object.keys(r.parameters).forEach(function(e) {
                        r.parameters[e] ? a.push(e + "=" + r.parameters[e]) : a.push(e);
                    }), e += "a=fmtp:" + t + " " + a.join(";") + "\r\n";
                }
                return e;
            }, r.parseRtcpFb = function(r) {
                var e = r.substr(r.indexOf(" ") + 1).split(" ");
                return {
                    type: e.shift(),
                    parameter: e.join(" ")
                };
            }, r.writeRtcpFb = function(r) {
                var e = "", t = r.payloadType;
                return void 0 !== r.preferredPayloadType && (t = r.preferredPayloadType), r.rtcpFeedback && r.rtcpFeedback.length && r.rtcpFeedback.forEach(function(r) {
                    e += "a=rtcp-fb:" + t + " " + r.type + (r.parameter && r.parameter.length ? " " + r.parameter : "") + "\r\n";
                }), e;
            }, r.parseSsrcMedia = function(r) {
                var e = r.indexOf(" "), t = {
                    ssrc: parseInt(r.substr(7, e - 7), 10)
                }, a = r.indexOf(":", e);
                return a > -1 ? (t.attribute = r.substr(e + 1, a - e - 1), t.value = r.substr(a + 1)) : t.attribute = r.substr(e + 1), t;
            }, r.parseSsrcGroup = function(r) {
                var e = r.substr(13).split(" ");
                return {
                    semantics: e.shift(),
                    ssrcs: e.map(function(r) {
                        return parseInt(r, 10);
                    })
                };
            }, r.getMid = function(e) {
                var t = r.matchPrefix(e, "a=mid:")[0];
                if (t) return t.substr(6);
            }, r.parseFingerprint = function(r) {
                var e = r.substr(14).split(" ");
                return {
                    algorithm: e[0].toLowerCase(),
                    value: e[1]
                };
            }, r.getDtlsParameters = function(e, t) {
                return {
                    role: "auto",
                    fingerprints: r.matchPrefix(e + t, "a=fingerprint:").map(r.parseFingerprint)
                };
            }, r.writeDtlsParameters = function(r, e) {
                var t = "a=setup:" + e + "\r\n";
                return r.fingerprints.forEach(function(r) {
                    t += "a=fingerprint:" + r.algorithm + " " + r.value + "\r\n";
                }), t;
            }, r.parseCryptoLine = function(r) {
                var e = r.substr(9).split(" ");
                return {
                    tag: parseInt(e[0], 10),
                    cryptoSuite: e[1],
                    keyParams: e[2],
                    sessionParams: e.slice(3)
                };
            }, r.writeCryptoLine = function(e) {
                return "a=crypto:" + e.tag + " " + e.cryptoSuite + " " + ("object" == typeof e.keyParams ? r.writeCryptoKeyParams(e.keyParams) : e.keyParams) + (e.sessionParams ? " " + e.sessionParams.join(" ") : "") + "\r\n";
            }, r.parseCryptoKeyParams = function(r) {
                if (0 !== r.indexOf("inline:")) return null;
                var e = r.substr(7).split("|");
                return {
                    keyMethod: "inline",
                    keySalt: e[0],
                    lifeTime: e[1],
                    mkiValue: e[2] ? e[2].split(":")[0] : void 0,
                    mkiLength: e[2] ? e[2].split(":")[1] : void 0
                };
            }, r.writeCryptoKeyParams = function(r) {
                return r.keyMethod + ":" + r.keySalt + (r.lifeTime ? "|" + r.lifeTime : "") + (r.mkiValue && r.mkiLength ? "|" + r.mkiValue + ":" + r.mkiLength : "");
            }, r.getCryptoParameters = function(e, t) {
                return r.matchPrefix(e + t, "a=crypto:").map(r.parseCryptoLine);
            }, r.getIceParameters = function(e, t) {
                var a = r.matchPrefix(e + t, "a=ice-ufrag:")[0], n = r.matchPrefix(e + t, "a=ice-pwd:")[0];
                return a && n ? {
                    usernameFragment: a.substr(12),
                    password: n.substr(10)
                } : null;
            }, r.writeIceParameters = function(r) {
                return "a=ice-ufrag:" + r.usernameFragment + "\r\na=ice-pwd:" + r.password + "\r\n";
            }, r.parseRtpParameters = function(e) {
                for(var t = {
                    codecs: [],
                    headerExtensions: [],
                    fecMechanisms: [],
                    rtcp: []
                }, a = r.splitLines(e)[0].split(" "), n = 3; n < a.length; n++){
                    var s = a[n], i = r.matchPrefix(e, "a=rtpmap:" + s + " ")[0];
                    if (i) {
                        var p = r.parseRtpMap(i), c = r.matchPrefix(e, "a=fmtp:" + s + " ");
                        switch(p.parameters = c.length ? r.parseFmtp(c[0]) : {}, p.rtcpFeedback = r.matchPrefix(e, "a=rtcp-fb:" + s + " ").map(r.parseRtcpFb), t.codecs.push(p), p.name.toUpperCase()){
                            case "RED":
                            case "ULPFEC":
                                t.fecMechanisms.push(p.name.toUpperCase());
                        }
                    }
                }
                return r.matchPrefix(e, "a=extmap:").forEach(function(e) {
                    t.headerExtensions.push(r.parseExtmap(e));
                }), t;
            }, r.writeRtpDescription = function(e, t) {
                var a = "";
                a += "m=" + e + " ", a += t.codecs.length > 0 ? "9" : "0", a += " UDP/TLS/RTP/SAVPF ", a += t.codecs.map(function(r) {
                    return void 0 !== r.preferredPayloadType ? r.preferredPayloadType : r.payloadType;
                }).join(" ") + "\r\n", a += "c=IN IP4 0.0.0.0\r\n", a += "a=rtcp:9 IN IP4 0.0.0.0\r\n", t.codecs.forEach(function(e) {
                    a += r.writeRtpMap(e), a += r.writeFmtp(e), a += r.writeRtcpFb(e);
                });
                var n = 0;
                return t.codecs.forEach(function(r) {
                    r.maxptime > n && (n = r.maxptime);
                }), n > 0 && (a += "a=maxptime:" + n + "\r\n"), a += "a=rtcp-mux\r\n", t.headerExtensions && t.headerExtensions.forEach(function(e) {
                    a += r.writeExtmap(e);
                }), a;
            }, r.parseRtpEncodingParameters = function(e) {
                var t, a = [], n = r.parseRtpParameters(e), s = -1 !== n.fecMechanisms.indexOf("RED"), i = -1 !== n.fecMechanisms.indexOf("ULPFEC"), p = r.matchPrefix(e, "a=ssrc:").map(function(e) {
                    return r.parseSsrcMedia(e);
                }).filter(function(r) {
                    return "cname" === r.attribute;
                }), c = p.length > 0 && p[0].ssrc, o = r.matchPrefix(e, "a=ssrc-group:FID").map(function(r) {
                    return r.substr(17).split(" ").map(function(r) {
                        return parseInt(r, 10);
                    });
                });
                o.length > 0 && o[0].length > 1 && o[0][0] === c && (t = o[0][1]), n.codecs.forEach(function(r) {
                    if ("RTX" === r.name.toUpperCase() && r.parameters.apt) {
                        var e = {
                            ssrc: c,
                            codecPayloadType: parseInt(r.parameters.apt, 10)
                        };
                        c && t && (e.rtx = {
                            ssrc: t
                        }), a.push(e), s && ((e = JSON.parse(JSON.stringify(e))).fec = {
                            ssrc: c,
                            mechanism: i ? "red+ulpfec" : "red"
                        }, a.push(e));
                    }
                }), 0 === a.length && c && a.push({
                    ssrc: c
                });
                var u = r.matchPrefix(e, "b=");
                return u.length && (u = 0 === u[0].indexOf("b=TIAS:") ? parseInt(u[0].substr(7), 10) : 0 === u[0].indexOf("b=AS:") ? 1e3 * parseInt(u[0].substr(5), 10) * .95 - 16e3 : void 0, a.forEach(function(r) {
                    r.maxBitrate = u;
                })), a;
            }, r.parseRtcpParameters = function(e) {
                var t = {}, a = r.matchPrefix(e, "a=ssrc:").map(function(e) {
                    return r.parseSsrcMedia(e);
                }).filter(function(r) {
                    return "cname" === r.attribute;
                })[0];
                a && (t.cname = a.value, t.ssrc = a.ssrc);
                var n = r.matchPrefix(e, "a=rtcp-rsize");
                t.reducedSize = n.length > 0, t.compound = 0 === n.length;
                var s = r.matchPrefix(e, "a=rtcp-mux");
                return t.mux = s.length > 0, t;
            }, r.parseMsid = function(e) {
                var t, a = r.matchPrefix(e, "a=msid:");
                if (1 === a.length) return {
                    stream: (t = a[0].substr(7).split(" "))[0],
                    track: t[1]
                };
                var n = r.matchPrefix(e, "a=ssrc:").map(function(e) {
                    return r.parseSsrcMedia(e);
                }).filter(function(r) {
                    return "msid" === r.attribute;
                });
                return n.length > 0 ? {
                    stream: (t = n[0].value.split(" "))[0],
                    track: t[1]
                } : void 0;
            }, r.parseSctpDescription = function(e) {
                var t, a = r.parseMLine(e), n = r.matchPrefix(e, "a=max-message-size:");
                n.length > 0 && (t = parseInt(n[0].substr(19), 10)), isNaN(t) && (t = 65536);
                var s = r.matchPrefix(e, "a=sctp-port:");
                if (s.length > 0) return {
                    port: parseInt(s[0].substr(12), 10),
                    protocol: a.fmt,
                    maxMessageSize: t
                };
                if (r.matchPrefix(e, "a=sctpmap:").length > 0) {
                    var i = r.matchPrefix(e, "a=sctpmap:")[0].substr(10).split(" ");
                    return {
                        port: parseInt(i[0], 10),
                        protocol: i[1],
                        maxMessageSize: t
                    };
                }
            }, r.writeSctpDescription = function(r, e) {
                var t = [];
                return t = "DTLS/SCTP" !== r.protocol ? [
                    "m=" + r.kind + " 9 " + r.protocol + " " + e.protocol + "\r\n",
                    "c=IN IP4 0.0.0.0\r\n",
                    "a=sctp-port:" + e.port + "\r\n"
                ] : [
                    "m=" + r.kind + " 9 " + r.protocol + " " + e.port + "\r\n",
                    "c=IN IP4 0.0.0.0\r\n",
                    "a=sctpmap:" + e.port + " " + e.protocol + " 65535\r\n"
                ], void 0 !== e.maxMessageSize && t.push("a=max-message-size:" + e.maxMessageSize + "\r\n"), t.join("");
            }, r.generateSessionId = function() {
                return Math.random().toString().substr(2, 21);
            }, r.writeSessionBoilerplate = function(e, t, a) {
                var n = void 0 !== t ? t : 2;
                return "v=0\r\no=" + (a || "thisisadapterortc") + " " + (e || r.generateSessionId()) + " " + n + " IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\n";
            }, r.writeMediaSection = function(e, t, a, n) {
                var s = r.writeRtpDescription(e.kind, t);
                if (s += r.writeIceParameters(e.iceGatherer.getLocalParameters()), s += r.writeDtlsParameters(e.dtlsTransport.getLocalParameters(), "offer" === a ? "actpass" : "active"), s += "a=mid:" + e.mid + "\r\n", e.direction ? s += "a=" + e.direction + "\r\n" : e.rtpSender && e.rtpReceiver ? s += "a=sendrecv\r\n" : e.rtpSender ? s += "a=sendonly\r\n" : e.rtpReceiver ? s += "a=recvonly\r\n" : s += "a=inactive\r\n", e.rtpSender) {
                    var i = "msid:" + n.id + " " + e.rtpSender.track.id + "\r\n";
                    s += "a=" + i, s += "a=ssrc:" + e.sendEncodingParameters[0].ssrc + " " + i, e.sendEncodingParameters[0].rtx && (s += "a=ssrc:" + e.sendEncodingParameters[0].rtx.ssrc + " " + i, s += "a=ssrc-group:FID " + e.sendEncodingParameters[0].ssrc + " " + e.sendEncodingParameters[0].rtx.ssrc + "\r\n");
                }
                return s += "a=ssrc:" + e.sendEncodingParameters[0].ssrc + " cname:" + r.localCName + "\r\n", e.rtpSender && e.sendEncodingParameters[0].rtx && (s += "a=ssrc:" + e.sendEncodingParameters[0].rtx.ssrc + " cname:" + r.localCName + "\r\n"), s;
            }, r.getDirection = function(e, t) {
                for(var a = r.splitLines(e), n = 0; n < a.length; n++)switch(a[n]){
                    case "a=sendrecv":
                    case "a=sendonly":
                    case "a=recvonly":
                    case "a=inactive":
                        return a[n].substr(2);
                }
                return t ? r.getDirection(t) : "sendrecv";
            }, r.getKind = function(e) {
                return r.splitLines(e)[0].split(" ")[0].substr(2);
            }, r.isRejected = function(r) {
                return "0" === r.split(" ", 2)[1];
            }, r.parseMLine = function(e) {
                var t = r.splitLines(e)[0].substr(2).split(" ");
                return {
                    kind: t[0],
                    port: parseInt(t[1], 10),
                    protocol: t[2],
                    fmt: t.slice(3).join(" ")
                };
            }, r.parseOLine = function(e) {
                var t = r.matchPrefix(e, "o=")[0].substr(2).split(" ");
                return {
                    username: t[0],
                    sessionId: t[1],
                    sessionVersion: parseInt(t[2], 10),
                    netType: t[3],
                    addressType: t[4],
                    address: t[5]
                };
            }, r.isValidSDP = function(e) {
                if ("string" != typeof e || 0 === e.length) return !1;
                for(var t = r.splitLines(e), a = 0; a < t.length; a++)if (t[a].length < 2 || "=" !== t[a].charAt(1)) return !1;
                return !0;
            }, "object" == typeof module1 && (module1.exports = r);
        },
        {}
    ],
    "MaDE": [
        function(require1, module1, exports) {
            "use strict";
            var e = require1("sdp");
            function t(e) {
                return ({
                    inboundrtp: "inbound-rtp",
                    outboundrtp: "outbound-rtp",
                    candidatepair: "candidate-pair",
                    localcandidate: "local-candidate",
                    remotecandidate: "remote-candidate"
                })[e.type] || e.type;
            }
            function r(t, r, n, a, i) {
                var s = e.writeRtpDescription(t.kind, r);
                if (s += e.writeIceParameters(t.iceGatherer.getLocalParameters()), s += e.writeDtlsParameters(t.dtlsTransport.getLocalParameters(), "offer" === n ? "actpass" : i || "active"), s += "a=mid:" + t.mid + "\r\n", t.rtpSender && t.rtpReceiver ? s += "a=sendrecv\r\n" : t.rtpSender ? s += "a=sendonly\r\n" : t.rtpReceiver ? s += "a=recvonly\r\n" : s += "a=inactive\r\n", t.rtpSender) {
                    var o = t.rtpSender._initialTrackId || t.rtpSender.track.id;
                    t.rtpSender._initialTrackId = o;
                    var c = "msid:" + (a ? a.id : "-") + " " + o + "\r\n";
                    s += "a=" + c, s += "a=ssrc:" + t.sendEncodingParameters[0].ssrc + " " + c, t.sendEncodingParameters[0].rtx && (s += "a=ssrc:" + t.sendEncodingParameters[0].rtx.ssrc + " " + c, s += "a=ssrc-group:FID " + t.sendEncodingParameters[0].ssrc + " " + t.sendEncodingParameters[0].rtx.ssrc + "\r\n");
                }
                return s += "a=ssrc:" + t.sendEncodingParameters[0].ssrc + " cname:" + e.localCName + "\r\n", t.rtpSender && t.sendEncodingParameters[0].rtx && (s += "a=ssrc:" + t.sendEncodingParameters[0].rtx.ssrc + " cname:" + e.localCName + "\r\n"), s;
            }
            function n(e, t) {
                var r = !1;
                return (e = JSON.parse(JSON.stringify(e))).filter(function(e) {
                    if (e && (e.urls || e.url)) {
                        var n = e.urls || e.url;
                        e.url && !e.urls && console.warn("RTCIceServer.url is deprecated! Use urls instead.");
                        var a = "string" == typeof n;
                        return a && (n = [
                            n
                        ]), n = n.filter(function(e) {
                            return 0 === e.indexOf("turn:") && -1 !== e.indexOf("transport=udp") && -1 === e.indexOf("turn:[") && !r ? (r = !0, !0) : 0 === e.indexOf("stun:") && t >= 14393 && -1 === e.indexOf("?transport=udp");
                        }), delete e.url, e.urls = a ? n[0] : n, !!n.length;
                    }
                });
            }
            function a(e, t) {
                var r = {
                    codecs: [],
                    headerExtensions: [],
                    fecMechanisms: []
                }, n = function(e, t) {
                    e = parseInt(e, 10);
                    for(var r = 0; r < t.length; r++)if (t[r].payloadType === e || t[r].preferredPayloadType === e) return t[r];
                }, a = function(e, t, r, a) {
                    var i = n(e.parameters.apt, r), s = n(t.parameters.apt, a);
                    return i && s && i.name.toLowerCase() === s.name.toLowerCase();
                };
                return e.codecs.forEach(function(n) {
                    for(var i = 0; i < t.codecs.length; i++){
                        var s = t.codecs[i];
                        if (n.name.toLowerCase() === s.name.toLowerCase() && n.clockRate === s.clockRate) {
                            if ("rtx" === n.name.toLowerCase() && n.parameters && s.parameters.apt && !a(n, s, e.codecs, t.codecs)) continue;
                            (s = JSON.parse(JSON.stringify(s))).numChannels = Math.min(n.numChannels, s.numChannels), r.codecs.push(s), s.rtcpFeedback = s.rtcpFeedback.filter(function(e) {
                                for(var t = 0; t < n.rtcpFeedback.length; t++)if (n.rtcpFeedback[t].type === e.type && n.rtcpFeedback[t].parameter === e.parameter) return !0;
                                return !1;
                            });
                            break;
                        }
                    }
                }), e.headerExtensions.forEach(function(e) {
                    for(var n = 0; n < t.headerExtensions.length; n++){
                        var a = t.headerExtensions[n];
                        if (e.uri === a.uri) {
                            r.headerExtensions.push(a);
                            break;
                        }
                    }
                }), r;
            }
            function i(e, t, r) {
                return -1 !== ({
                    offer: {
                        setLocalDescription: [
                            "stable",
                            "have-local-offer"
                        ],
                        setRemoteDescription: [
                            "stable",
                            "have-remote-offer"
                        ]
                    },
                    answer: {
                        setLocalDescription: [
                            "have-remote-offer",
                            "have-local-pranswer"
                        ],
                        setRemoteDescription: [
                            "have-local-offer",
                            "have-remote-pranswer"
                        ]
                    }
                })[t][e].indexOf(r);
            }
            function s(e, t) {
                var r = e.getRemoteCandidates().find(function(e) {
                    return t.foundation === e.foundation && t.ip === e.ip && t.port === e.port && t.priority === e.priority && t.protocol === e.protocol && t.type === e.type;
                });
                return r || e.addRemoteCandidate(t), !r;
            }
            function o(e, t) {
                var r = new Error(t);
                return r.name = e, r.code = ({
                    NotSupportedError: 9,
                    InvalidStateError: 11,
                    InvalidAccessError: 15,
                    TypeError: void 0,
                    OperationError: void 0
                })[e], r;
            }
            module1.exports = function(c, d) {
                function p(e, t) {
                    t.addTrack(e), t.dispatchEvent(new c.MediaStreamTrackEvent("addtrack", {
                        track: e
                    }));
                }
                function l(e, t, r, n) {
                    var a = new Event("track");
                    a.track = t, a.receiver = r, a.transceiver = {
                        receiver: r
                    }, a.streams = n, c.setTimeout(function() {
                        e._dispatchEvent("track", a);
                    });
                }
                var f = function(t) {
                    var r = this, a = document.createDocumentFragment();
                    if ([
                        "addEventListener",
                        "removeEventListener",
                        "dispatchEvent"
                    ].forEach(function(e) {
                        r[e] = a[e].bind(a);
                    }), this.canTrickleIceCandidates = null, this.needNegotiation = !1, this.localStreams = [], this.remoteStreams = [], this._localDescription = null, this._remoteDescription = null, this.signalingState = "stable", this.iceConnectionState = "new", this.connectionState = "new", this.iceGatheringState = "new", t = JSON.parse(JSON.stringify(t || {})), this.usingBundle = "max-bundle" === t.bundlePolicy, "negotiate" === t.rtcpMuxPolicy) throw o("NotSupportedError", "rtcpMuxPolicy 'negotiate' is not supported");
                    switch(t.rtcpMuxPolicy || (t.rtcpMuxPolicy = "require"), t.iceTransportPolicy){
                        case "all":
                        case "relay":
                            break;
                        default:
                            t.iceTransportPolicy = "all";
                    }
                    switch(t.bundlePolicy){
                        case "balanced":
                        case "max-compat":
                        case "max-bundle":
                            break;
                        default:
                            t.bundlePolicy = "balanced";
                    }
                    if (t.iceServers = n(t.iceServers || [], d), this._iceGatherers = [], t.iceCandidatePoolSize) for(var i = t.iceCandidatePoolSize; i > 0; i--)this._iceGatherers.push(new c.RTCIceGatherer({
                        iceServers: t.iceServers,
                        gatherPolicy: t.iceTransportPolicy
                    }));
                    else t.iceCandidatePoolSize = 0;
                    this._config = t, this.transceivers = [], this._sdpSessionId = e.generateSessionId(), this._sdpSessionVersion = 0, this._dtlsRole = void 0, this._isClosed = !1;
                };
                Object.defineProperty(f.prototype, "localDescription", {
                    configurable: !0,
                    get: function() {
                        return this._localDescription;
                    }
                }), Object.defineProperty(f.prototype, "remoteDescription", {
                    configurable: !0,
                    get: function() {
                        return this._remoteDescription;
                    }
                }), f.prototype.onicecandidate = null, f.prototype.onaddstream = null, f.prototype.ontrack = null, f.prototype.onremovestream = null, f.prototype.onsignalingstatechange = null, f.prototype.oniceconnectionstatechange = null, f.prototype.onconnectionstatechange = null, f.prototype.onicegatheringstatechange = null, f.prototype.onnegotiationneeded = null, f.prototype.ondatachannel = null, f.prototype._dispatchEvent = function(e, t) {
                    this._isClosed || (this.dispatchEvent(t), "function" == typeof this["on" + e] && this["on" + e](t));
                }, f.prototype._emitGatheringStateChange = function() {
                    var e = new Event("icegatheringstatechange");
                    this._dispatchEvent("icegatheringstatechange", e);
                }, f.prototype.getConfiguration = function() {
                    return this._config;
                }, f.prototype.getLocalStreams = function() {
                    return this.localStreams;
                }, f.prototype.getRemoteStreams = function() {
                    return this.remoteStreams;
                }, f.prototype._createTransceiver = function(e, t) {
                    var r = this.transceivers.length > 0, n = {
                        track: null,
                        iceGatherer: null,
                        iceTransport: null,
                        dtlsTransport: null,
                        localCapabilities: null,
                        remoteCapabilities: null,
                        rtpSender: null,
                        rtpReceiver: null,
                        kind: e,
                        mid: null,
                        sendEncodingParameters: null,
                        recvEncodingParameters: null,
                        stream: null,
                        associatedRemoteMediaStreams: [],
                        wantReceive: !0
                    };
                    if (this.usingBundle && r) n.iceTransport = this.transceivers[0].iceTransport, n.dtlsTransport = this.transceivers[0].dtlsTransport;
                    else {
                        var a = this._createIceAndDtlsTransports();
                        n.iceTransport = a.iceTransport, n.dtlsTransport = a.dtlsTransport;
                    }
                    return t || this.transceivers.push(n), n;
                }, f.prototype.addTrack = function(e, t) {
                    if (this._isClosed) throw o("InvalidStateError", "Attempted to call addTrack on a closed peerconnection.");
                    var r;
                    if (this.transceivers.find(function(t) {
                        return t.track === e;
                    })) throw o("InvalidAccessError", "Track already exists.");
                    for(var n = 0; n < this.transceivers.length; n++)this.transceivers[n].track || this.transceivers[n].kind !== e.kind || (r = this.transceivers[n]);
                    return r || (r = this._createTransceiver(e.kind)), this._maybeFireNegotiationNeeded(), -1 === this.localStreams.indexOf(t) && this.localStreams.push(t), r.track = e, r.stream = t, r.rtpSender = new c.RTCRtpSender(e, r.dtlsTransport), r.rtpSender;
                }, f.prototype.addStream = function(e) {
                    var t = this;
                    if (d >= 15025) e.getTracks().forEach(function(r) {
                        t.addTrack(r, e);
                    });
                    else {
                        var r = e.clone();
                        e.getTracks().forEach(function(e, t) {
                            var n = r.getTracks()[t];
                            e.addEventListener("enabled", function(e) {
                                n.enabled = e.enabled;
                            });
                        }), r.getTracks().forEach(function(e) {
                            t.addTrack(e, r);
                        });
                    }
                }, f.prototype.removeTrack = function(e) {
                    if (this._isClosed) throw o("InvalidStateError", "Attempted to call removeTrack on a closed peerconnection.");
                    if (!(e instanceof c.RTCRtpSender)) throw new TypeError("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.");
                    var t = this.transceivers.find(function(t) {
                        return t.rtpSender === e;
                    });
                    if (!t) throw o("InvalidAccessError", "Sender was not created by this connection.");
                    var r = t.stream;
                    t.rtpSender.stop(), t.rtpSender = null, t.track = null, t.stream = null, -1 === this.transceivers.map(function(e) {
                        return e.stream;
                    }).indexOf(r) && this.localStreams.indexOf(r) > -1 && this.localStreams.splice(this.localStreams.indexOf(r), 1), this._maybeFireNegotiationNeeded();
                }, f.prototype.removeStream = function(e) {
                    var t = this;
                    e.getTracks().forEach(function(e) {
                        var r = t.getSenders().find(function(t) {
                            return t.track === e;
                        });
                        r && t.removeTrack(r);
                    });
                }, f.prototype.getSenders = function() {
                    return this.transceivers.filter(function(e) {
                        return !!e.rtpSender;
                    }).map(function(e) {
                        return e.rtpSender;
                    });
                }, f.prototype.getReceivers = function() {
                    return this.transceivers.filter(function(e) {
                        return !!e.rtpReceiver;
                    }).map(function(e) {
                        return e.rtpReceiver;
                    });
                }, f.prototype._createIceGatherer = function(e, t) {
                    var r = this;
                    if (t && e > 0) return this.transceivers[0].iceGatherer;
                    if (this._iceGatherers.length) return this._iceGatherers.shift();
                    var n = new c.RTCIceGatherer({
                        iceServers: this._config.iceServers,
                        gatherPolicy: this._config.iceTransportPolicy
                    });
                    return Object.defineProperty(n, "state", {
                        value: "new",
                        writable: !0
                    }), this.transceivers[e].bufferedCandidateEvents = [], this.transceivers[e].bufferCandidates = function(t) {
                        var a = !t.candidate || 0 === Object.keys(t.candidate).length;
                        n.state = a ? "completed" : "gathering", null !== r.transceivers[e].bufferedCandidateEvents && r.transceivers[e].bufferedCandidateEvents.push(t);
                    }, n.addEventListener("localcandidate", this.transceivers[e].bufferCandidates), n;
                }, f.prototype._gather = function(t, r) {
                    var n = this, a = this.transceivers[r].iceGatherer;
                    if (!a.onlocalcandidate) {
                        var i = this.transceivers[r].bufferedCandidateEvents;
                        this.transceivers[r].bufferedCandidateEvents = null, a.removeEventListener("localcandidate", this.transceivers[r].bufferCandidates), a.onlocalcandidate = function(i) {
                            if (!(n.usingBundle && r > 0)) {
                                var s = new Event("icecandidate");
                                s.candidate = {
                                    sdpMid: t,
                                    sdpMLineIndex: r
                                };
                                var o = i.candidate, c = !o || 0 === Object.keys(o).length;
                                if (c) "new" !== a.state && "gathering" !== a.state || (a.state = "completed");
                                else {
                                    "new" === a.state && (a.state = "gathering"), o.component = 1, o.ufrag = a.getLocalParameters().usernameFragment;
                                    var d = e.writeCandidate(o);
                                    s.candidate = Object.assign(s.candidate, e.parseCandidate(d)), s.candidate.candidate = d, s.candidate.toJSON = function() {
                                        return {
                                            candidate: s.candidate.candidate,
                                            sdpMid: s.candidate.sdpMid,
                                            sdpMLineIndex: s.candidate.sdpMLineIndex,
                                            usernameFragment: s.candidate.usernameFragment
                                        };
                                    };
                                }
                                var p = e.getMediaSections(n._localDescription.sdp);
                                p[s.candidate.sdpMLineIndex] += c ? "a=end-of-candidates\r\n" : "a=" + s.candidate.candidate + "\r\n", n._localDescription.sdp = e.getDescription(n._localDescription.sdp) + p.join("");
                                var l = n.transceivers.every(function(e) {
                                    return e.iceGatherer && "completed" === e.iceGatherer.state;
                                });
                                "gathering" !== n.iceGatheringState && (n.iceGatheringState = "gathering", n._emitGatheringStateChange()), c || n._dispatchEvent("icecandidate", s), l && (n._dispatchEvent("icecandidate", new Event("icecandidate")), n.iceGatheringState = "complete", n._emitGatheringStateChange());
                            }
                        }, c.setTimeout(function() {
                            i.forEach(function(e) {
                                a.onlocalcandidate(e);
                            });
                        }, 0);
                    }
                }, f.prototype._createIceAndDtlsTransports = function() {
                    var e = this, t = new c.RTCIceTransport(null);
                    t.onicestatechange = function() {
                        e._updateIceConnectionState(), e._updateConnectionState();
                    };
                    var r = new c.RTCDtlsTransport(t);
                    return r.ondtlsstatechange = function() {
                        e._updateConnectionState();
                    }, r.onerror = function() {
                        Object.defineProperty(r, "state", {
                            value: "failed",
                            writable: !0
                        }), e._updateConnectionState();
                    }, {
                        iceTransport: t,
                        dtlsTransport: r
                    };
                }, f.prototype._disposeIceAndDtlsTransports = function(e) {
                    var t = this.transceivers[e].iceGatherer;
                    t && (delete t.onlocalcandidate, delete this.transceivers[e].iceGatherer);
                    var r = this.transceivers[e].iceTransport;
                    r && (delete r.onicestatechange, delete this.transceivers[e].iceTransport);
                    var n = this.transceivers[e].dtlsTransport;
                    n && (delete n.ondtlsstatechange, delete n.onerror, delete this.transceivers[e].dtlsTransport);
                }, f.prototype._transceive = function(t, r, n) {
                    var i = a(t.localCapabilities, t.remoteCapabilities);
                    r && t.rtpSender && (i.encodings = t.sendEncodingParameters, i.rtcp = {
                        cname: e.localCName,
                        compound: t.rtcpParameters.compound
                    }, t.recvEncodingParameters.length && (i.rtcp.ssrc = t.recvEncodingParameters[0].ssrc), t.rtpSender.send(i)), n && t.rtpReceiver && i.codecs.length > 0 && ("video" === t.kind && t.recvEncodingParameters && d < 15019 && t.recvEncodingParameters.forEach(function(e) {
                        delete e.rtx;
                    }), t.recvEncodingParameters.length ? i.encodings = t.recvEncodingParameters : i.encodings = [
                        {}
                    ], i.rtcp = {
                        compound: t.rtcpParameters.compound
                    }, t.rtcpParameters.cname && (i.rtcp.cname = t.rtcpParameters.cname), t.sendEncodingParameters.length && (i.rtcp.ssrc = t.sendEncodingParameters[0].ssrc), t.rtpReceiver.receive(i));
                }, f.prototype.setLocalDescription = function(t) {
                    var r, n, s = this;
                    if (-1 === [
                        "offer",
                        "answer"
                    ].indexOf(t.type)) return Promise.reject(o("TypeError", 'Unsupported type "' + t.type + '"'));
                    if (!i("setLocalDescription", t.type, s.signalingState) || s._isClosed) return Promise.reject(o("InvalidStateError", "Can not set local " + t.type + " in state " + s.signalingState));
                    if ("offer" === t.type) r = e.splitSections(t.sdp), n = r.shift(), r.forEach(function(t, r) {
                        var n = e.parseRtpParameters(t);
                        s.transceivers[r].localCapabilities = n;
                    }), s.transceivers.forEach(function(e, t) {
                        s._gather(e.mid, t);
                    });
                    else if ("answer" === t.type) {
                        r = e.splitSections(s._remoteDescription.sdp), n = r.shift();
                        var c = e.matchPrefix(n, "a=ice-lite").length > 0;
                        r.forEach(function(t, r) {
                            var i = s.transceivers[r], o = i.iceGatherer, d = i.iceTransport, p = i.dtlsTransport, l = i.localCapabilities, f = i.remoteCapabilities;
                            if (!(e.isRejected(t) && 0 === e.matchPrefix(t, "a=bundle-only").length) && !i.rejected) {
                                var u = e.getIceParameters(t, n), v = e.getDtlsParameters(t, n);
                                c && (v.role = "server"), s.usingBundle && 0 !== r || (s._gather(i.mid, r), "new" === d.state && d.start(o, u, c ? "controlling" : "controlled"), "new" === p.state && p.start(v));
                                var h = a(l, f);
                                s._transceive(i, h.codecs.length > 0, !1);
                            }
                        });
                    }
                    return s._localDescription = {
                        type: t.type,
                        sdp: t.sdp
                    }, "offer" === t.type ? s._updateSignalingState("have-local-offer") : s._updateSignalingState("stable"), Promise.resolve();
                }, f.prototype.setRemoteDescription = function(t) {
                    var r = this;
                    if (-1 === [
                        "offer",
                        "answer"
                    ].indexOf(t.type)) return Promise.reject(o("TypeError", 'Unsupported type "' + t.type + '"'));
                    if (!i("setRemoteDescription", t.type, r.signalingState) || r._isClosed) return Promise.reject(o("InvalidStateError", "Can not set remote " + t.type + " in state " + r.signalingState));
                    var n = {};
                    r.remoteStreams.forEach(function(e) {
                        n[e.id] = e;
                    });
                    var f = [], u = e.splitSections(t.sdp), v = u.shift(), h = e.matchPrefix(v, "a=ice-lite").length > 0, m = e.matchPrefix(v, "a=group:BUNDLE ").length > 0;
                    r.usingBundle = m;
                    var g = e.matchPrefix(v, "a=ice-options:")[0];
                    return r.canTrickleIceCandidates = !!g && g.substr(14).split(" ").indexOf("trickle") >= 0, u.forEach(function(i, o) {
                        var l = e.splitLines(i), u = e.getKind(i), g = e.isRejected(i) && 0 === e.matchPrefix(i, "a=bundle-only").length, y = l[0].substr(2).split(" ")[2], S = e.getDirection(i, v), T = e.parseMsid(i), E = e.getMid(i) || e.generateIdentifier();
                        if (g || "application" === u && ("DTLS/SCTP" === y || "UDP/DTLS/SCTP" === y)) r.transceivers[o] = {
                            mid: E,
                            kind: u,
                            protocol: y,
                            rejected: !0
                        };
                        else {
                            var C, P, w, R, _, k, b, x, D;
                            !g && r.transceivers[o] && r.transceivers[o].rejected && (r.transceivers[o] = r._createTransceiver(u, !0));
                            var I, L, M = e.parseRtpParameters(i);
                            g || (I = e.getIceParameters(i, v), (L = e.getDtlsParameters(i, v)).role = "client"), b = e.parseRtpEncodingParameters(i);
                            var O = e.parseRtcpParameters(i), G = e.matchPrefix(i, "a=end-of-candidates", v).length > 0, j = e.matchPrefix(i, "a=candidate:").map(function(t) {
                                return e.parseCandidate(t);
                            }).filter(function(e) {
                                return 1 === e.component;
                            });
                            if (("offer" === t.type || "answer" === t.type) && !g && m && o > 0 && r.transceivers[o] && (r._disposeIceAndDtlsTransports(o), r.transceivers[o].iceGatherer = r.transceivers[0].iceGatherer, r.transceivers[o].iceTransport = r.transceivers[0].iceTransport, r.transceivers[o].dtlsTransport = r.transceivers[0].dtlsTransport, r.transceivers[o].rtpSender && r.transceivers[o].rtpSender.setTransport(r.transceivers[0].dtlsTransport), r.transceivers[o].rtpReceiver && r.transceivers[o].rtpReceiver.setTransport(r.transceivers[0].dtlsTransport)), "offer" !== t.type || g) {
                                if ("answer" === t.type && !g) P = (C = r.transceivers[o]).iceGatherer, w = C.iceTransport, R = C.dtlsTransport, _ = C.rtpReceiver, k = C.sendEncodingParameters, x = C.localCapabilities, r.transceivers[o].recvEncodingParameters = b, r.transceivers[o].remoteCapabilities = M, r.transceivers[o].rtcpParameters = O, j.length && "new" === w.state && (!h && !G || m && 0 !== o ? j.forEach(function(e) {
                                    s(C.iceTransport, e);
                                }) : w.setRemoteCandidates(j)), m && 0 !== o || ("new" === w.state && w.start(P, I, "controlling"), "new" === R.state && R.start(L)), !a(C.localCapabilities, C.remoteCapabilities).codecs.filter(function(e) {
                                    return "rtx" === e.name.toLowerCase();
                                }).length && C.sendEncodingParameters[0].rtx && delete C.sendEncodingParameters[0].rtx, r._transceive(C, "sendrecv" === S || "recvonly" === S, "sendrecv" === S || "sendonly" === S), !_ || "sendrecv" !== S && "sendonly" !== S ? delete C.rtpReceiver : (D = _.track, T ? (n[T.stream] || (n[T.stream] = new c.MediaStream), p(D, n[T.stream]), f.push([
                                    D,
                                    _,
                                    n[T.stream]
                                ])) : (n.default || (n.default = new c.MediaStream), p(D, n.default), f.push([
                                    D,
                                    _,
                                    n.default
                                ])));
                            } else {
                                (C = r.transceivers[o] || r._createTransceiver(u)).mid = E, C.iceGatherer || (C.iceGatherer = r._createIceGatherer(o, m)), j.length && "new" === C.iceTransport.state && (!G || m && 0 !== o ? j.forEach(function(e) {
                                    s(C.iceTransport, e);
                                }) : C.iceTransport.setRemoteCandidates(j)), x = c.RTCRtpReceiver.getCapabilities(u), d < 15019 && (x.codecs = x.codecs.filter(function(e) {
                                    return "rtx" !== e.name;
                                })), k = C.sendEncodingParameters || [
                                    {
                                        ssrc: 1001 * (2 * o + 2)
                                    }
                                ];
                                var N, A = !1;
                                if ("sendrecv" === S || "sendonly" === S) {
                                    if (A = !C.rtpReceiver, _ = C.rtpReceiver || new c.RTCRtpReceiver(C.dtlsTransport, u), A) D = _.track, T && "-" === T.stream || (T ? (n[T.stream] || (n[T.stream] = new c.MediaStream, Object.defineProperty(n[T.stream], "id", {
                                        get: function() {
                                            return T.stream;
                                        }
                                    })), Object.defineProperty(D, "id", {
                                        get: function() {
                                            return T.track;
                                        }
                                    }), N = n[T.stream]) : (n.default || (n.default = new c.MediaStream), N = n.default)), N && (p(D, N), C.associatedRemoteMediaStreams.push(N)), f.push([
                                        D,
                                        _,
                                        N
                                    ]);
                                } else C.rtpReceiver && C.rtpReceiver.track && (C.associatedRemoteMediaStreams.forEach(function(e) {
                                    var t, r, n = e.getTracks().find(function(e) {
                                        return e.id === C.rtpReceiver.track.id;
                                    });
                                    n && (t = n, (r = e).removeTrack(t), r.dispatchEvent(new c.MediaStreamTrackEvent("removetrack", {
                                        track: t
                                    })));
                                }), C.associatedRemoteMediaStreams = []);
                                C.localCapabilities = x, C.remoteCapabilities = M, C.rtpReceiver = _, C.rtcpParameters = O, C.sendEncodingParameters = k, C.recvEncodingParameters = b, r._transceive(r.transceivers[o], !1, A);
                            }
                        }
                    }), void 0 === r._dtlsRole && (r._dtlsRole = "offer" === t.type ? "active" : "passive"), r._remoteDescription = {
                        type: t.type,
                        sdp: t.sdp
                    }, "offer" === t.type ? r._updateSignalingState("have-remote-offer") : r._updateSignalingState("stable"), Object.keys(n).forEach(function(e) {
                        var t = n[e];
                        if (t.getTracks().length) {
                            if (-1 === r.remoteStreams.indexOf(t)) {
                                r.remoteStreams.push(t);
                                var a = new Event("addstream");
                                a.stream = t, c.setTimeout(function() {
                                    r._dispatchEvent("addstream", a);
                                });
                            }
                            f.forEach(function(e) {
                                var n = e[0], a = e[1];
                                t.id === e[2].id && l(r, n, a, [
                                    t
                                ]);
                            });
                        }
                    }), f.forEach(function(e) {
                        e[2] || l(r, e[0], e[1], []);
                    }), c.setTimeout(function() {
                        r && r.transceivers && r.transceivers.forEach(function(e) {
                            e.iceTransport && "new" === e.iceTransport.state && e.iceTransport.getRemoteCandidates().length > 0 && (console.warn("Timeout for addRemoteCandidate. Consider sending an end-of-candidates notification"), e.iceTransport.addRemoteCandidate({}));
                        });
                    }, 4e3), Promise.resolve();
                }, f.prototype.close = function() {
                    this.transceivers.forEach(function(e) {
                        e.iceTransport && e.iceTransport.stop(), e.dtlsTransport && e.dtlsTransport.stop(), e.rtpSender && e.rtpSender.stop(), e.rtpReceiver && e.rtpReceiver.stop();
                    }), this._isClosed = !0, this._updateSignalingState("closed");
                }, f.prototype._updateSignalingState = function(e) {
                    this.signalingState = e;
                    var t = new Event("signalingstatechange");
                    this._dispatchEvent("signalingstatechange", t);
                }, f.prototype._maybeFireNegotiationNeeded = function() {
                    var e = this;
                    "stable" === this.signalingState && !0 !== this.needNegotiation && (this.needNegotiation = !0, c.setTimeout(function() {
                        if (e.needNegotiation) {
                            e.needNegotiation = !1;
                            var t = new Event("negotiationneeded");
                            e._dispatchEvent("negotiationneeded", t);
                        }
                    }, 0));
                }, f.prototype._updateIceConnectionState = function() {
                    var e, t = {
                        new: 0,
                        closed: 0,
                        checking: 0,
                        connected: 0,
                        completed: 0,
                        disconnected: 0,
                        failed: 0
                    };
                    if (this.transceivers.forEach(function(e) {
                        e.iceTransport && !e.rejected && t[e.iceTransport.state]++;
                    }), e = "new", t.failed > 0 ? e = "failed" : t.checking > 0 ? e = "checking" : t.disconnected > 0 ? e = "disconnected" : t.new > 0 ? e = "new" : t.connected > 0 ? e = "connected" : t.completed > 0 && (e = "completed"), e !== this.iceConnectionState) {
                        this.iceConnectionState = e;
                        var r = new Event("iceconnectionstatechange");
                        this._dispatchEvent("iceconnectionstatechange", r);
                    }
                }, f.prototype._updateConnectionState = function() {
                    var e, t = {
                        new: 0,
                        closed: 0,
                        connecting: 0,
                        connected: 0,
                        completed: 0,
                        disconnected: 0,
                        failed: 0
                    };
                    if (this.transceivers.forEach(function(e) {
                        e.iceTransport && e.dtlsTransport && !e.rejected && (t[e.iceTransport.state]++, t[e.dtlsTransport.state]++);
                    }), t.connected += t.completed, e = "new", t.failed > 0 ? e = "failed" : t.connecting > 0 ? e = "connecting" : t.disconnected > 0 ? e = "disconnected" : t.new > 0 ? e = "new" : t.connected > 0 && (e = "connected"), e !== this.connectionState) {
                        this.connectionState = e;
                        var r = new Event("connectionstatechange");
                        this._dispatchEvent("connectionstatechange", r);
                    }
                }, f.prototype.createOffer = function() {
                    var t = this;
                    if (t._isClosed) return Promise.reject(o("InvalidStateError", "Can not call createOffer after close"));
                    var n = t.transceivers.filter(function(e) {
                        return "audio" === e.kind;
                    }).length, a = t.transceivers.filter(function(e) {
                        return "video" === e.kind;
                    }).length, i = arguments[0];
                    if (i) {
                        if (i.mandatory || i.optional) throw new TypeError("Legacy mandatory/optional constraints not supported.");
                        void 0 !== i.offerToReceiveAudio && (n = !0 === i.offerToReceiveAudio ? 1 : !1 === i.offerToReceiveAudio ? 0 : i.offerToReceiveAudio), void 0 !== i.offerToReceiveVideo && (a = !0 === i.offerToReceiveVideo ? 1 : !1 === i.offerToReceiveVideo ? 0 : i.offerToReceiveVideo);
                    }
                    for(t.transceivers.forEach(function(e) {
                        "audio" === e.kind ? --n < 0 && (e.wantReceive = !1) : "video" === e.kind && --a < 0 && (e.wantReceive = !1);
                    }); n > 0 || a > 0;)n > 0 && (t._createTransceiver("audio"), n--), a > 0 && (t._createTransceiver("video"), a--);
                    var s = e.writeSessionBoilerplate(t._sdpSessionId, t._sdpSessionVersion++);
                    t.transceivers.forEach(function(r, n) {
                        var a = r.track, i = r.kind, s = r.mid || e.generateIdentifier();
                        r.mid = s, r.iceGatherer || (r.iceGatherer = t._createIceGatherer(n, t.usingBundle));
                        var o = c.RTCRtpSender.getCapabilities(i);
                        d < 15019 && (o.codecs = o.codecs.filter(function(e) {
                            return "rtx" !== e.name;
                        })), o.codecs.forEach(function(e) {
                            "H264" === e.name && void 0 === e.parameters["level-asymmetry-allowed"] && (e.parameters["level-asymmetry-allowed"] = "1"), r.remoteCapabilities && r.remoteCapabilities.codecs && r.remoteCapabilities.codecs.forEach(function(t) {
                                e.name.toLowerCase() === t.name.toLowerCase() && e.clockRate === t.clockRate && (e.preferredPayloadType = t.payloadType);
                            });
                        }), o.headerExtensions.forEach(function(e) {
                            (r.remoteCapabilities && r.remoteCapabilities.headerExtensions || []).forEach(function(t) {
                                e.uri === t.uri && (e.id = t.id);
                            });
                        });
                        var p = r.sendEncodingParameters || [
                            {
                                ssrc: 1001 * (2 * n + 1)
                            }
                        ];
                        a && d >= 15019 && "video" === i && !p[0].rtx && (p[0].rtx = {
                            ssrc: p[0].ssrc + 1
                        }), r.wantReceive && (r.rtpReceiver = new c.RTCRtpReceiver(r.dtlsTransport, i)), r.localCapabilities = o, r.sendEncodingParameters = p;
                    }), "max-compat" !== t._config.bundlePolicy && (s += "a=group:BUNDLE " + t.transceivers.map(function(e) {
                        return e.mid;
                    }).join(" ") + "\r\n"), s += "a=ice-options:trickle\r\n", t.transceivers.forEach(function(n, a) {
                        s += r(n, n.localCapabilities, "offer", n.stream, t._dtlsRole), s += "a=rtcp-rsize\r\n", !n.iceGatherer || "new" === t.iceGatheringState || 0 !== a && t.usingBundle || (n.iceGatherer.getLocalCandidates().forEach(function(t) {
                            t.component = 1, s += "a=" + e.writeCandidate(t) + "\r\n";
                        }), "completed" === n.iceGatherer.state && (s += "a=end-of-candidates\r\n"));
                    });
                    var p = new c.RTCSessionDescription({
                        type: "offer",
                        sdp: s
                    });
                    return Promise.resolve(p);
                }, f.prototype.createAnswer = function() {
                    var t = this;
                    if (t._isClosed) return Promise.reject(o("InvalidStateError", "Can not call createAnswer after close"));
                    if ("have-remote-offer" !== t.signalingState && "have-local-pranswer" !== t.signalingState) return Promise.reject(o("InvalidStateError", "Can not call createAnswer in signalingState " + t.signalingState));
                    var n = e.writeSessionBoilerplate(t._sdpSessionId, t._sdpSessionVersion++);
                    t.usingBundle && (n += "a=group:BUNDLE " + t.transceivers.map(function(e) {
                        return e.mid;
                    }).join(" ") + "\r\n"), n += "a=ice-options:trickle\r\n";
                    var i = e.getMediaSections(t._remoteDescription.sdp).length;
                    t.transceivers.forEach(function(e, s) {
                        if (!(s + 1 > i)) {
                            if (e.rejected) return "application" === e.kind ? "DTLS/SCTP" === e.protocol ? n += "m=application 0 DTLS/SCTP 5000\r\n" : n += "m=application 0 " + e.protocol + " webrtc-datachannel\r\n" : "audio" === e.kind ? n += "m=audio 0 UDP/TLS/RTP/SAVPF 0\r\na=rtpmap:0 PCMU/8000\r\n" : "video" === e.kind && (n += "m=video 0 UDP/TLS/RTP/SAVPF 120\r\na=rtpmap:120 VP8/90000\r\n"), void (n += "c=IN IP4 0.0.0.0\r\na=inactive\r\na=mid:" + e.mid + "\r\n");
                            var o;
                            if (e.stream) "audio" === e.kind ? o = e.stream.getAudioTracks()[0] : "video" === e.kind && (o = e.stream.getVideoTracks()[0]), o && d >= 15019 && "video" === e.kind && !e.sendEncodingParameters[0].rtx && (e.sendEncodingParameters[0].rtx = {
                                ssrc: e.sendEncodingParameters[0].ssrc + 1
                            });
                            var c = a(e.localCapabilities, e.remoteCapabilities);
                            !c.codecs.filter(function(e) {
                                return "rtx" === e.name.toLowerCase();
                            }).length && e.sendEncodingParameters[0].rtx && delete e.sendEncodingParameters[0].rtx, n += r(e, c, "answer", e.stream, t._dtlsRole), e.rtcpParameters && e.rtcpParameters.reducedSize && (n += "a=rtcp-rsize\r\n");
                        }
                    });
                    var s = new c.RTCSessionDescription({
                        type: "answer",
                        sdp: n
                    });
                    return Promise.resolve(s);
                }, f.prototype.addIceCandidate = function(t) {
                    var r, n = this;
                    return t && void 0 === t.sdpMLineIndex && !t.sdpMid ? Promise.reject(new TypeError("sdpMLineIndex or sdpMid required")) : new Promise(function(a, i) {
                        if (!n._remoteDescription) return i(o("InvalidStateError", "Can not add ICE candidate without a remote description"));
                        if (t && "" !== t.candidate) {
                            var c = t.sdpMLineIndex;
                            if (t.sdpMid) {
                                for(var d = 0; d < n.transceivers.length; d++)if (n.transceivers[d].mid === t.sdpMid) {
                                    c = d;
                                    break;
                                }
                            }
                            var p = n.transceivers[c];
                            if (!p) return i(o("OperationError", "Can not add ICE candidate"));
                            if (p.rejected) return a();
                            var l = Object.keys(t.candidate).length > 0 ? e.parseCandidate(t.candidate) : {};
                            if ("tcp" === l.protocol && (0 === l.port || 9 === l.port)) return a();
                            if (l.component && 1 !== l.component) return a();
                            if ((0 === c || c > 0 && p.iceTransport !== n.transceivers[0].iceTransport) && !s(p.iceTransport, l)) return i(o("OperationError", "Can not add ICE candidate"));
                            var f = t.candidate.trim();
                            0 === f.indexOf("a=") && (f = f.substr(2)), (r = e.getMediaSections(n._remoteDescription.sdp))[c] += "a=" + (l.type ? f : "end-of-candidates") + "\r\n", n._remoteDescription.sdp = e.getDescription(n._remoteDescription.sdp) + r.join("");
                        } else for(var u = 0; u < n.transceivers.length && (n.transceivers[u].rejected || (n.transceivers[u].iceTransport.addRemoteCandidate({}), (r = e.getMediaSections(n._remoteDescription.sdp))[u] += "a=end-of-candidates\r\n", n._remoteDescription.sdp = e.getDescription(n._remoteDescription.sdp) + r.join(""), !n.usingBundle)); u++);
                        a();
                    });
                }, f.prototype.getStats = function(e) {
                    if (e && e instanceof c.MediaStreamTrack) {
                        var t = null;
                        if (this.transceivers.forEach(function(r) {
                            r.rtpSender && r.rtpSender.track === e ? t = r.rtpSender : r.rtpReceiver && r.rtpReceiver.track === e && (t = r.rtpReceiver);
                        }), !t) throw o("InvalidAccessError", "Invalid selector.");
                        return t.getStats();
                    }
                    var r = [];
                    return this.transceivers.forEach(function(e) {
                        [
                            "rtpSender",
                            "rtpReceiver",
                            "iceGatherer",
                            "iceTransport",
                            "dtlsTransport"
                        ].forEach(function(t) {
                            e[t] && r.push(e[t].getStats());
                        });
                    }), Promise.all(r).then(function(e) {
                        var t = new Map;
                        return e.forEach(function(e) {
                            e.forEach(function(e) {
                                t.set(e.id, e);
                            });
                        }), t;
                    });
                };
                [
                    "RTCRtpSender",
                    "RTCRtpReceiver",
                    "RTCIceGatherer",
                    "RTCIceTransport",
                    "RTCDtlsTransport"
                ].forEach(function(e) {
                    var r = c[e];
                    if (r && r.prototype && r.prototype.getStats) {
                        var n = r.prototype.getStats;
                        r.prototype.getStats = function() {
                            return n.apply(this).then(function(e) {
                                var r = new Map;
                                return Object.keys(e).forEach(function(n) {
                                    e[n].type = t(e[n]), r.set(n, e[n]);
                                }), r;
                            });
                        };
                    }
                });
                var u = [
                    "createOffer",
                    "createAnswer"
                ];
                return u.forEach(function(e) {
                    var t = f.prototype[e];
                    f.prototype[e] = function() {
                        var e = arguments;
                        return "function" == typeof e[0] || "function" == typeof e[1] ? t.apply(this, [
                            arguments[2]
                        ]).then(function(t) {
                            "function" == typeof e[0] && e[0].apply(null, [
                                t
                            ]);
                        }, function(t) {
                            "function" == typeof e[1] && e[1].apply(null, [
                                t
                            ]);
                        }) : t.apply(this, arguments);
                    };
                }), (u = [
                    "setLocalDescription",
                    "setRemoteDescription",
                    "addIceCandidate"
                ]).forEach(function(e) {
                    var t = f.prototype[e];
                    f.prototype[e] = function() {
                        var e = arguments;
                        return "function" == typeof e[1] || "function" == typeof e[2] ? t.apply(this, arguments).then(function() {
                            "function" == typeof e[1] && e[1].apply(null);
                        }, function(t) {
                            "function" == typeof e[2] && e[2].apply(null, [
                                t
                            ]);
                        }) : t.apply(this, arguments);
                    };
                }), [
                    "getStats"
                ].forEach(function(e) {
                    var t = f.prototype[e];
                    f.prototype[e] = function() {
                        var e = arguments;
                        return "function" == typeof e[1] ? t.apply(this, arguments).then(function() {
                            "function" == typeof e[1] && e[1].apply(null);
                        }) : t.apply(this, arguments);
                    };
                }), f;
            };
        },
        {
            "sdp": "rjLK"
        }
    ],
    "oPFB": [
        function(require1, module1, exports) {
            "use strict";
            function e(e) {
                var r = e && e.navigator, t = r.mediaDevices.getUserMedia.bind(r.mediaDevices);
                r.mediaDevices.getUserMedia = function(e) {
                    return t(e).catch(function(e) {
                        return Promise.reject(function(e) {
                            return {
                                name: ({
                                    PermissionDeniedError: "NotAllowedError"
                                })[e.name] || e.name,
                                message: e.message,
                                constraint: e.constraint,
                                toString: function() {
                                    return this.name;
                                }
                            };
                        }(e));
                    });
                };
            }
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.shimGetUserMedia = e;
        },
        {}
    ],
    "MNMV": [
        function(require1, module1, exports) {
            "use strict";
            function e(e) {
                "getDisplayMedia" in e.navigator && e.navigator.mediaDevices && (e.navigator.mediaDevices && "getDisplayMedia" in e.navigator.mediaDevices || (e.navigator.mediaDevices.getDisplayMedia = e.navigator.getDisplayMedia.bind(e.navigator)));
            }
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.shimGetDisplayMedia = e;
        },
        {}
    ],
    "erDH": [
        function(require1, module1, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.shimPeerConnection = p, exports.shimReplaceTrack = s, Object.defineProperty(exports, "shimGetUserMedia", {
                enumerable: !0,
                get: function() {
                    return n.shimGetUserMedia;
                }
            }), Object.defineProperty(exports, "shimGetDisplayMedia", {
                enumerable: !0,
                get: function() {
                    return i.shimGetDisplayMedia;
                }
            });
            var e = c(require1("../utils")), t = require1("./filtericeservers"), r = o(require1("rtcpeerconnection-shim")), n = require1("./getusermedia"), i = require1("./getdisplaymedia");
            function o(e) {
                return e && e.__esModule ? e : {
                    default: e
                };
            }
            function a(e) {
                if ("function" != typeof WeakMap) return null;
                var t = new WeakMap, r = new WeakMap;
                return (a = function(e) {
                    return e ? r : t;
                })(e);
            }
            function c(e, t) {
                if (!t && e && e.__esModule) return e;
                if (null === e || "object" != typeof e && "function" != typeof e) return {
                    default: e
                };
                var r = a(t);
                if (r && r.has(e)) return r.get(e);
                var n = {}, i = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for(var o in e)if ("default" !== o && Object.prototype.hasOwnProperty.call(e, o)) {
                    var c = i ? Object.getOwnPropertyDescriptor(e, o) : null;
                    c && (c.get || c.set) ? Object.defineProperty(n, o, c) : n[o] = e[o];
                }
                return n.default = e, r && r.set(e, n), n;
            }
            function p(n, i) {
                if (n.RTCIceGatherer && (n.RTCIceCandidate || (n.RTCIceCandidate = function(e) {
                    return e;
                }), n.RTCSessionDescription || (n.RTCSessionDescription = function(e) {
                    return e;
                }), i.version < 15025)) {
                    var o = Object.getOwnPropertyDescriptor(n.MediaStreamTrack.prototype, "enabled");
                    Object.defineProperty(n.MediaStreamTrack.prototype, "enabled", {
                        set: function(e) {
                            o.set.call(this, e);
                            var t = new Event("enabled");
                            t.enabled = e, this.dispatchEvent(t);
                        }
                    });
                }
                !n.RTCRtpSender || "dtmf" in n.RTCRtpSender.prototype || Object.defineProperty(n.RTCRtpSender.prototype, "dtmf", {
                    get: function() {
                        return void 0 === this._dtmf && ("audio" === this.track.kind ? this._dtmf = new n.RTCDtmfSender(this) : "video" === this.track.kind && (this._dtmf = null)), this._dtmf;
                    }
                }), n.RTCDtmfSender && !n.RTCDTMFSender && (n.RTCDTMFSender = n.RTCDtmfSender);
                var a = (0, r.default)(n, i.version);
                n.RTCPeerConnection = function(r) {
                    return r && r.iceServers && (r.iceServers = (0, t.filterIceServers)(r.iceServers, i.version), e.log("ICE servers after filtering:", r.iceServers)), new a(r);
                }, n.RTCPeerConnection.prototype = a.prototype;
            }
            function s(e) {
                !e.RTCRtpSender || "replaceTrack" in e.RTCRtpSender.prototype || (e.RTCRtpSender.prototype.replaceTrack = e.RTCRtpSender.prototype.setTrack);
            }
        },
        {
            "../utils": "CFi4",
            "./filtericeservers": "DAHH",
            "rtcpeerconnection-shim": "MaDE",
            "./getusermedia": "oPFB",
            "./getdisplaymedia": "MNMV"
        }
    ],
    "YYF6": [
        function(require1, module1, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.shimGetUserMedia = n;
            var e = o(require1("../utils"));
            function t(e) {
                if ("function" != typeof WeakMap) return null;
                var o = new WeakMap, r = new WeakMap;
                return (t = function(e) {
                    return e ? r : o;
                })(e);
            }
            function o(e, o) {
                if (!o && e && e.__esModule) return e;
                if (null === e || "object" != typeof e && "function" != typeof e) return {
                    default: e
                };
                var r = t(o);
                if (r && r.has(e)) return r.get(e);
                var n = {}, i = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for(var a in e)if ("default" !== a && Object.prototype.hasOwnProperty.call(e, a)) {
                    var s = i ? Object.getOwnPropertyDescriptor(e, a) : null;
                    s && (s.get || s.set) ? Object.defineProperty(n, a, s) : n[a] = e[a];
                }
                return n.default = e, r && r.set(e, n), n;
            }
            function r(e) {
                return (r = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                    return typeof e;
                } : function(e) {
                    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                })(e);
            }
            function n(t, o) {
                var n = t && t.navigator, i = t && t.MediaStreamTrack;
                if (n.getUserMedia = function(t, o, r) {
                    e.deprecated("navigator.getUserMedia", "navigator.mediaDevices.getUserMedia"), n.mediaDevices.getUserMedia(t).then(o, r);
                }, !(o.version > 55 && "autoGainControl" in n.mediaDevices.getSupportedConstraints())) {
                    var a = function(e, t, o) {
                        t in e && !(o in e) && (e[o] = e[t], delete e[t]);
                    }, s = n.mediaDevices.getUserMedia.bind(n.mediaDevices);
                    if (n.mediaDevices.getUserMedia = function(e) {
                        return "object" === r(e) && "object" === r(e.audio) && (e = JSON.parse(JSON.stringify(e)), a(e.audio, "autoGainControl", "mozAutoGainControl"), a(e.audio, "noiseSuppression", "mozNoiseSuppression")), s(e);
                    }, i && i.prototype.getSettings) {
                        var p = i.prototype.getSettings;
                        i.prototype.getSettings = function() {
                            var e = p.apply(this, arguments);
                            return a(e, "mozAutoGainControl", "autoGainControl"), a(e, "mozNoiseSuppression", "noiseSuppression"), e;
                        };
                    }
                    if (i && i.prototype.applyConstraints) {
                        var u = i.prototype.applyConstraints;
                        i.prototype.applyConstraints = function(e) {
                            return "audio" === this.kind && "object" === r(e) && (e = JSON.parse(JSON.stringify(e)), a(e, "autoGainControl", "mozAutoGainControl"), a(e, "noiseSuppression", "mozNoiseSuppression")), u.apply(this, [
                                e
                            ]);
                        };
                    }
                }
            }
        },
        {
            "../utils": "CFi4"
        }
    ],
    "HA7P": [
        function(require1, module1, exports) {
            "use strict";
            function e(e, i) {
                e.navigator.mediaDevices && "getDisplayMedia" in e.navigator.mediaDevices || e.navigator.mediaDevices && (e.navigator.mediaDevices.getDisplayMedia = function(a) {
                    if (!a || !a.video) {
                        var t = new DOMException("getDisplayMedia without video constraints is undefined");
                        return t.name = "NotFoundError", t.code = 8, Promise.reject(t);
                    }
                    return !0 === a.video ? a.video = {
                        mediaSource: i
                    } : a.video.mediaSource = i, e.navigator.mediaDevices.getUserMedia(a);
                });
            }
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.shimGetDisplayMedia = e;
        },
        {}
    ],
    "CgK8": [
        function(require1, module1, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.shimOnTrack = s, exports.shimPeerConnection = c, exports.shimSenderGetStats = p, exports.shimReceiverGetStats = u, exports.shimRemoveStream = f, exports.shimRTCDataChannel = d, exports.shimAddTransceiver = C, exports.shimGetParameters = y, exports.shimCreateOffer = l, exports.shimCreateAnswer = m, Object.defineProperty(exports, "shimGetUserMedia", {
                enumerable: !0,
                get: function() {
                    return t.shimGetUserMedia;
                }
            }), Object.defineProperty(exports, "shimGetDisplayMedia", {
                enumerable: !0,
                get: function() {
                    return n.shimGetDisplayMedia;
                }
            });
            var e = o(require1("../utils")), t = require1("./getusermedia"), n = require1("./getdisplaymedia");
            function r(e) {
                if ("function" != typeof WeakMap) return null;
                var t = new WeakMap, n = new WeakMap;
                return (r = function(e) {
                    return e ? n : t;
                })(e);
            }
            function o(e, t) {
                if (!t && e && e.__esModule) return e;
                if (null === e || "object" != typeof e && "function" != typeof e) return {
                    default: e
                };
                var n = r(t);
                if (n && n.has(e)) return n.get(e);
                var o = {}, i = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for(var a in e)if ("default" !== a && Object.prototype.hasOwnProperty.call(e, a)) {
                    var s = i ? Object.getOwnPropertyDescriptor(e, a) : null;
                    s && (s.get || s.set) ? Object.defineProperty(o, a, s) : o[a] = e[a];
                }
                return o.default = e, n && n.set(e, o), o;
            }
            function i(e, t, n) {
                return t in e ? Object.defineProperty(e, t, {
                    value: n,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : e[t] = n, e;
            }
            function a(e) {
                return (a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                    return typeof e;
                } : function(e) {
                    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                })(e);
            }
            function s(e) {
                "object" === a(e) && e.RTCTrackEvent && "receiver" in e.RTCTrackEvent.prototype && !("transceiver" in e.RTCTrackEvent.prototype) && Object.defineProperty(e.RTCTrackEvent.prototype, "transceiver", {
                    get: function() {
                        return {
                            receiver: this.receiver
                        };
                    }
                });
            }
            function c(e, t) {
                if ("object" === a(e) && (e.RTCPeerConnection || e.mozRTCPeerConnection)) {
                    !e.RTCPeerConnection && e.mozRTCPeerConnection && (e.RTCPeerConnection = e.mozRTCPeerConnection), t.version < 53 && [
                        "setLocalDescription",
                        "setRemoteDescription",
                        "addIceCandidate"
                    ].forEach(function(t) {
                        var n = e.RTCPeerConnection.prototype[t], r = i({}, t, function() {
                            return arguments[0] = new ("addIceCandidate" === t ? e.RTCIceCandidate : e.RTCSessionDescription)(arguments[0]), n.apply(this, arguments);
                        });
                        e.RTCPeerConnection.prototype[t] = r[t];
                    });
                    var n = {
                        inboundrtp: "inbound-rtp",
                        outboundrtp: "outbound-rtp",
                        candidatepair: "candidate-pair",
                        localcandidate: "local-candidate",
                        remotecandidate: "remote-candidate"
                    }, r = e.RTCPeerConnection.prototype.getStats;
                    e.RTCPeerConnection.prototype.getStats = function() {
                        var [e, o, i] = arguments;
                        return r.apply(this, [
                            e || null
                        ]).then(function(e) {
                            if (t.version < 53 && !o) try {
                                e.forEach(function(e) {
                                    e.type = n[e.type] || e.type;
                                });
                            } catch (r) {
                                if ("TypeError" !== r.name) throw r;
                                e.forEach(function(t, r) {
                                    e.set(r, Object.assign({}, t, {
                                        type: n[t.type] || t.type
                                    }));
                                });
                            }
                            return e;
                        }).then(o, i);
                    };
                }
            }
            function p(e) {
                if ("object" === a(e) && e.RTCPeerConnection && e.RTCRtpSender && !(e.RTCRtpSender && "getStats" in e.RTCRtpSender.prototype)) {
                    var t = e.RTCPeerConnection.prototype.getSenders;
                    t && (e.RTCPeerConnection.prototype.getSenders = function() {
                        var e = this, n = t.apply(this, []);
                        return n.forEach(function(t) {
                            return t._pc = e;
                        }), n;
                    });
                    var n = e.RTCPeerConnection.prototype.addTrack;
                    n && (e.RTCPeerConnection.prototype.addTrack = function() {
                        var e = n.apply(this, arguments);
                        return e._pc = this, e;
                    }), e.RTCRtpSender.prototype.getStats = function() {
                        return this.track ? this._pc.getStats(this.track) : Promise.resolve(new Map);
                    };
                }
            }
            function u(t) {
                if ("object" === a(t) && t.RTCPeerConnection && t.RTCRtpSender && !(t.RTCRtpSender && "getStats" in t.RTCRtpReceiver.prototype)) {
                    var n = t.RTCPeerConnection.prototype.getReceivers;
                    n && (t.RTCPeerConnection.prototype.getReceivers = function() {
                        var e = this, t = n.apply(this, []);
                        return t.forEach(function(t) {
                            return t._pc = e;
                        }), t;
                    }), e.wrapPeerConnectionEvent(t, "track", function(e) {
                        return e.receiver._pc = e.srcElement, e;
                    }), t.RTCRtpReceiver.prototype.getStats = function() {
                        return this._pc.getStats(this.track);
                    };
                }
            }
            function f(t) {
                !t.RTCPeerConnection || "removeStream" in t.RTCPeerConnection.prototype || (t.RTCPeerConnection.prototype.removeStream = function(t) {
                    var n = this;
                    e.deprecated("removeStream", "removeTrack"), this.getSenders().forEach(function(e) {
                        e.track && t.getTracks().includes(e.track) && n.removeTrack(e);
                    });
                });
            }
            function d(e) {
                e.DataChannel && !e.RTCDataChannel && (e.RTCDataChannel = e.DataChannel);
            }
            function C(e) {
                if ("object" === a(e) && e.RTCPeerConnection) {
                    var t = e.RTCPeerConnection.prototype.addTransceiver;
                    t && (e.RTCPeerConnection.prototype.addTransceiver = function() {
                        this.setParametersPromises = [];
                        var e = arguments[1], n = e && "sendEncodings" in e;
                        n && e.sendEncodings.forEach(function(e) {
                            if ("rid" in e) {
                                if (!/^[a-z0-9]{0,16}$/i.test(e.rid)) throw new TypeError("Invalid RID value provided.");
                            }
                            if ("scaleResolutionDownBy" in e && !(parseFloat(e.scaleResolutionDownBy) >= 1)) throw new RangeError("scale_resolution_down_by must be >= 1.0");
                            if ("maxFramerate" in e && !(parseFloat(e.maxFramerate) >= 0)) throw new RangeError("max_framerate must be >= 0.0");
                        });
                        var r = t.apply(this, arguments);
                        if (n) {
                            var { sender: o  } = r, i = o.getParameters();
                            "encodings" in i && (1 !== i.encodings.length || 0 !== Object.keys(i.encodings[0]).length) || (i.encodings = e.sendEncodings, o.sendEncodings = e.sendEncodings, this.setParametersPromises.push(o.setParameters(i).then(function() {
                                delete o.sendEncodings;
                            }).catch(function() {
                                delete o.sendEncodings;
                            })));
                        }
                        return r;
                    });
                }
            }
            function y(e) {
                if ("object" === a(e) && e.RTCRtpSender) {
                    var t = e.RTCRtpSender.prototype.getParameters;
                    t && (e.RTCRtpSender.prototype.getParameters = function() {
                        var e = t.apply(this, arguments);
                        return "encodings" in e || (e.encodings = [].concat(this.sendEncodings || [
                            {}
                        ])), e;
                    });
                }
            }
            function l(e) {
                if ("object" === a(e) && e.RTCPeerConnection) {
                    var t = e.RTCPeerConnection.prototype.createOffer;
                    e.RTCPeerConnection.prototype.createOffer = function() {
                        var e = arguments, n = this;
                        return this.setParametersPromises && this.setParametersPromises.length ? Promise.all(this.setParametersPromises).then(function() {
                            return t.apply(n, e);
                        }).finally(function() {
                            n.setParametersPromises = [];
                        }) : t.apply(this, arguments);
                    };
                }
            }
            function m(e) {
                if ("object" === a(e) && e.RTCPeerConnection) {
                    var t = e.RTCPeerConnection.prototype.createAnswer;
                    e.RTCPeerConnection.prototype.createAnswer = function() {
                        var e = arguments, n = this;
                        return this.setParametersPromises && this.setParametersPromises.length ? Promise.all(this.setParametersPromises).then(function() {
                            return t.apply(n, e);
                        }).finally(function() {
                            n.setParametersPromises = [];
                        }) : t.apply(this, arguments);
                    };
                }
            }
        },
        {
            "../utils": "CFi4",
            "./getusermedia": "YYF6",
            "./getdisplaymedia": "HA7P"
        }
    ],
    "KE77": [
        function(require1, module1, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.shimLocalStreamsAPI = n, exports.shimRemoteStreamsAPI = i, exports.shimCallbacksAPI = a, exports.shimGetUserMedia = c, exports.shimConstraints = s, exports.shimRTCIceServerUrls = d, exports.shimTrackEventTransceiver = f, exports.shimCreateOfferLegacy = p, exports.shimAudioContext = u;
            var e = r(require1("../utils"));
            function t(e) {
                if ("function" != typeof WeakMap) return null;
                var r = new WeakMap, o = new WeakMap;
                return (t = function(e) {
                    return e ? o : r;
                })(e);
            }
            function r(e, r) {
                if (!r && e && e.__esModule) return e;
                if (null === e || "object" != typeof e && "function" != typeof e) return {
                    default: e
                };
                var o = t(r);
                if (o && o.has(e)) return o.get(e);
                var n = {}, i = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for(var a in e)if ("default" !== a && Object.prototype.hasOwnProperty.call(e, a)) {
                    var c = i ? Object.getOwnPropertyDescriptor(e, a) : null;
                    c && (c.get || c.set) ? Object.defineProperty(n, a, c) : n[a] = e[a];
                }
                return n.default = e, o && o.set(e, n), n;
            }
            function o(e) {
                return (o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                    return typeof e;
                } : function(e) {
                    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                })(e);
            }
            function n(e) {
                if ("object" === o(e) && e.RTCPeerConnection) {
                    if ("getLocalStreams" in e.RTCPeerConnection.prototype || (e.RTCPeerConnection.prototype.getLocalStreams = function() {
                        return this._localStreams || (this._localStreams = []), this._localStreams;
                    }), !("addStream" in e.RTCPeerConnection.prototype)) {
                        var t = e.RTCPeerConnection.prototype.addTrack;
                        e.RTCPeerConnection.prototype.addStream = function(e) {
                            var r = this;
                            this._localStreams || (this._localStreams = []), this._localStreams.includes(e) || this._localStreams.push(e), e.getAudioTracks().forEach(function(o) {
                                return t.call(r, o, e);
                            }), e.getVideoTracks().forEach(function(o) {
                                return t.call(r, o, e);
                            });
                        }, e.RTCPeerConnection.prototype.addTrack = function(e) {
                            for(var r = this, o = arguments.length, n = new Array(o > 1 ? o - 1 : 0), i = 1; i < o; i++)n[i - 1] = arguments[i];
                            return n && n.forEach(function(e) {
                                r._localStreams ? r._localStreams.includes(e) || r._localStreams.push(e) : r._localStreams = [
                                    e
                                ];
                            }), t.apply(this, arguments);
                        };
                    }
                    "removeStream" in e.RTCPeerConnection.prototype || (e.RTCPeerConnection.prototype.removeStream = function(e) {
                        var t = this;
                        this._localStreams || (this._localStreams = []);
                        var r = this._localStreams.indexOf(e);
                        if (-1 !== r) {
                            this._localStreams.splice(r, 1);
                            var o = e.getTracks();
                            this.getSenders().forEach(function(e) {
                                o.includes(e.track) && t.removeTrack(e);
                            });
                        }
                    });
                }
            }
            function i(e) {
                if ("object" === o(e) && e.RTCPeerConnection && ("getRemoteStreams" in e.RTCPeerConnection.prototype || (e.RTCPeerConnection.prototype.getRemoteStreams = function() {
                    return this._remoteStreams ? this._remoteStreams : [];
                }), !("onaddstream" in e.RTCPeerConnection.prototype))) {
                    Object.defineProperty(e.RTCPeerConnection.prototype, "onaddstream", {
                        get: function() {
                            return this._onaddstream;
                        },
                        set: function(e) {
                            var t = this;
                            this._onaddstream && (this.removeEventListener("addstream", this._onaddstream), this.removeEventListener("track", this._onaddstreampoly)), this.addEventListener("addstream", this._onaddstream = e), this.addEventListener("track", this._onaddstreampoly = function(e) {
                                e.streams.forEach(function(e) {
                                    if (t._remoteStreams || (t._remoteStreams = []), !t._remoteStreams.includes(e)) {
                                        t._remoteStreams.push(e);
                                        var r = new Event("addstream");
                                        r.stream = e, t.dispatchEvent(r);
                                    }
                                });
                            });
                        }
                    });
                    var t = e.RTCPeerConnection.prototype.setRemoteDescription;
                    e.RTCPeerConnection.prototype.setRemoteDescription = function() {
                        var e = this;
                        return this._onaddstreampoly || this.addEventListener("track", this._onaddstreampoly = function(t) {
                            t.streams.forEach(function(t) {
                                if (e._remoteStreams || (e._remoteStreams = []), !(e._remoteStreams.indexOf(t) >= 0)) {
                                    e._remoteStreams.push(t);
                                    var r = new Event("addstream");
                                    r.stream = t, e.dispatchEvent(r);
                                }
                            });
                        }), t.apply(e, arguments);
                    };
                }
            }
            function a(e) {
                if ("object" === o(e) && e.RTCPeerConnection) {
                    var t = e.RTCPeerConnection.prototype, r = t.createOffer, n = t.createAnswer, i = t.setLocalDescription, a = t.setRemoteDescription, c = t.addIceCandidate;
                    t.createOffer = function(e, t) {
                        var o = arguments.length >= 2 ? arguments[2] : arguments[0], n = r.apply(this, [
                            o
                        ]);
                        return t ? (n.then(e, t), Promise.resolve()) : n;
                    }, t.createAnswer = function(e, t) {
                        var r = arguments.length >= 2 ? arguments[2] : arguments[0], o = n.apply(this, [
                            r
                        ]);
                        return t ? (o.then(e, t), Promise.resolve()) : o;
                    };
                    var s = function(e, t, r) {
                        var o = i.apply(this, [
                            e
                        ]);
                        return r ? (o.then(t, r), Promise.resolve()) : o;
                    };
                    t.setLocalDescription = s, s = function(e, t, r) {
                        var o = a.apply(this, [
                            e
                        ]);
                        return r ? (o.then(t, r), Promise.resolve()) : o;
                    }, t.setRemoteDescription = s, s = function(e, t, r) {
                        var o = c.apply(this, [
                            e
                        ]);
                        return r ? (o.then(t, r), Promise.resolve()) : o;
                    }, t.addIceCandidate = s;
                }
            }
            function c(e) {
                var t = e && e.navigator;
                if (t.mediaDevices && t.mediaDevices.getUserMedia) {
                    var r = t.mediaDevices, o = r.getUserMedia.bind(r);
                    t.mediaDevices.getUserMedia = function(e) {
                        return o(s(e));
                    };
                }
                !t.getUserMedia && t.mediaDevices && t.mediaDevices.getUserMedia && (t.getUserMedia = (function(e, r, o) {
                    t.mediaDevices.getUserMedia(e).then(r, o);
                }).bind(t));
            }
            function s(t) {
                return t && void 0 !== t.video ? Object.assign({}, t, {
                    video: e.compactObject(t.video)
                }) : t;
            }
            function d(t) {
                if (t.RTCPeerConnection) {
                    var r = t.RTCPeerConnection;
                    t.RTCPeerConnection = function(t, o) {
                        if (t && t.iceServers) {
                            for(var n = [], i = 0; i < t.iceServers.length; i++){
                                var a = t.iceServers[i];
                                !a.hasOwnProperty("urls") && a.hasOwnProperty("url") ? (e.deprecated("RTCIceServer.url", "RTCIceServer.urls"), (a = JSON.parse(JSON.stringify(a))).urls = a.url, delete a.url, n.push(a)) : n.push(t.iceServers[i]);
                            }
                            t.iceServers = n;
                        }
                        return new r(t, o);
                    }, t.RTCPeerConnection.prototype = r.prototype, "generateCertificate" in r && Object.defineProperty(t.RTCPeerConnection, "generateCertificate", {
                        get: function() {
                            return r.generateCertificate;
                        }
                    });
                }
            }
            function f(e) {
                "object" === o(e) && e.RTCTrackEvent && "receiver" in e.RTCTrackEvent.prototype && !("transceiver" in e.RTCTrackEvent.prototype) && Object.defineProperty(e.RTCTrackEvent.prototype, "transceiver", {
                    get: function() {
                        return {
                            receiver: this.receiver
                        };
                    }
                });
            }
            function p(e) {
                var t = e.RTCPeerConnection.prototype.createOffer;
                e.RTCPeerConnection.prototype.createOffer = function(e) {
                    if (e) {
                        void 0 !== e.offerToReceiveAudio && (e.offerToReceiveAudio = !!e.offerToReceiveAudio);
                        var r = this.getTransceivers().find(function(e) {
                            return "audio" === e.receiver.track.kind;
                        });
                        !1 === e.offerToReceiveAudio && r ? "sendrecv" === r.direction ? r.setDirection ? r.setDirection("sendonly") : r.direction = "sendonly" : "recvonly" === r.direction && (r.setDirection ? r.setDirection("inactive") : r.direction = "inactive") : !0 !== e.offerToReceiveAudio || r || this.addTransceiver("audio"), void 0 !== e.offerToReceiveVideo && (e.offerToReceiveVideo = !!e.offerToReceiveVideo);
                        var o = this.getTransceivers().find(function(e) {
                            return "video" === e.receiver.track.kind;
                        });
                        !1 === e.offerToReceiveVideo && o ? "sendrecv" === o.direction ? o.setDirection ? o.setDirection("sendonly") : o.direction = "sendonly" : "recvonly" === o.direction && (o.setDirection ? o.setDirection("inactive") : o.direction = "inactive") : !0 !== e.offerToReceiveVideo || o || this.addTransceiver("video");
                    }
                    return t.apply(this, arguments);
                };
            }
            function u(e) {
                "object" !== o(e) || e.AudioContext || (e.AudioContext = e.webkitAudioContext);
            }
        },
        {
            "../utils": "CFi4"
        }
    ],
    "Kluw": [
        function(require1, module1, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.shimRTCIceCandidate = a, exports.shimMaxMessageSize = c, exports.shimSendThrowTypeError = s, exports.shimConnectionState = p, exports.removeExtmapAllowMixed = d, exports.shimAddIceCandidateNullOrEmpty = u;
            var e = r(require1("sdp")), t = o(require1("./utils"));
            function n(e) {
                if ("function" != typeof WeakMap) return null;
                var t = new WeakMap, o = new WeakMap;
                return (n = function(e) {
                    return e ? o : t;
                })(e);
            }
            function o(e, t) {
                if (!t && e && e.__esModule) return e;
                if (null === e || "object" != typeof e && "function" != typeof e) return {
                    default: e
                };
                var o = n(t);
                if (o && o.has(e)) return o.get(e);
                var r = {}, i = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for(var a in e)if ("default" !== a && Object.prototype.hasOwnProperty.call(e, a)) {
                    var c = i ? Object.getOwnPropertyDescriptor(e, a) : null;
                    c && (c.get || c.set) ? Object.defineProperty(r, a, c) : r[a] = e[a];
                }
                return r.default = e, o && o.set(e, r), r;
            }
            function r(e) {
                return e && e.__esModule ? e : {
                    default: e
                };
            }
            function i(e) {
                return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                    return typeof e;
                } : function(e) {
                    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                })(e);
            }
            function a(n) {
                if (n.RTCIceCandidate && !(n.RTCIceCandidate && "foundation" in n.RTCIceCandidate.prototype)) {
                    var o = n.RTCIceCandidate;
                    n.RTCIceCandidate = function(t) {
                        if ("object" === i(t) && t.candidate && 0 === t.candidate.indexOf("a=") && ((t = JSON.parse(JSON.stringify(t))).candidate = t.candidate.substr(2)), t.candidate && t.candidate.length) {
                            var n = new o(t), r = e.default.parseCandidate(t.candidate), a = Object.assign(n, r);
                            return a.toJSON = function() {
                                return {
                                    candidate: a.candidate,
                                    sdpMid: a.sdpMid,
                                    sdpMLineIndex: a.sdpMLineIndex,
                                    usernameFragment: a.usernameFragment
                                };
                            }, a;
                        }
                        return new o(t);
                    }, n.RTCIceCandidate.prototype = o.prototype, t.wrapPeerConnectionEvent(n, "icecandidate", function(e) {
                        return e.candidate && Object.defineProperty(e, "candidate", {
                            value: new n.RTCIceCandidate(e.candidate),
                            writable: "false"
                        }), e;
                    });
                }
            }
            function c(t, n) {
                if (t.RTCPeerConnection) {
                    "sctp" in t.RTCPeerConnection.prototype || Object.defineProperty(t.RTCPeerConnection.prototype, "sctp", {
                        get: function() {
                            return void 0 === this._sctp ? null : this._sctp;
                        }
                    });
                    var o = t.RTCPeerConnection.prototype.setRemoteDescription;
                    t.RTCPeerConnection.prototype.setRemoteDescription = function() {
                        if (this._sctp = null, "chrome" === n.browser && n.version >= 76) {
                            var { sdpSemantics: t  } = this.getConfiguration();
                            "plan-b" === t && Object.defineProperty(this, "sctp", {
                                get: function() {
                                    return void 0 === this._sctp ? null : this._sctp;
                                },
                                enumerable: !0,
                                configurable: !0
                            });
                        }
                        if (function(t) {
                            if (!t || !t.sdp) return !1;
                            var n = e.default.splitSections(t.sdp);
                            return n.shift(), n.some(function(t) {
                                var n = e.default.parseMLine(t);
                                return n && "application" === n.kind && -1 !== n.protocol.indexOf("SCTP");
                            });
                        }(arguments[0])) {
                            var r, i = function(e) {
                                var t = e.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
                                if (null === t || t.length < 2) return -1;
                                var n = parseInt(t[1], 10);
                                return n != n ? -1 : n;
                            }(arguments[0]), a = (p = i, d = 65536, "firefox" === n.browser && (d = n.version < 57 ? -1 === p ? 16384 : 2147483637 : n.version < 60 ? 57 === n.version ? 65535 : 65536 : 2147483637), d), c = function(t, o) {
                                var r = 65536;
                                "firefox" === n.browser && 57 === n.version && (r = 65535);
                                var i = e.default.matchPrefix(t.sdp, "a=max-message-size:");
                                return i.length > 0 ? r = parseInt(i[0].substr(19), 10) : "firefox" === n.browser && -1 !== o && (r = 2147483637), r;
                            }(arguments[0], i);
                            r = 0 === a && 0 === c ? Number.POSITIVE_INFINITY : 0 === a || 0 === c ? Math.max(a, c) : Math.min(a, c);
                            var s = {};
                            Object.defineProperty(s, "maxMessageSize", {
                                get: function() {
                                    return r;
                                }
                            }), this._sctp = s;
                        }
                        var p, d;
                        return o.apply(this, arguments);
                    };
                }
            }
            function s(e) {
                if (e.RTCPeerConnection && "createDataChannel" in e.RTCPeerConnection.prototype) {
                    var n = e.RTCPeerConnection.prototype.createDataChannel;
                    e.RTCPeerConnection.prototype.createDataChannel = function() {
                        var e = n.apply(this, arguments);
                        return o(e, this), e;
                    }, t.wrapPeerConnectionEvent(e, "datachannel", function(e) {
                        return o(e.channel, e.target), e;
                    });
                }
                function o(e, t) {
                    var n = e.send;
                    e.send = function() {
                        var o = arguments[0], r = o.length || o.size || o.byteLength;
                        if ("open" === e.readyState && t.sctp && r > t.sctp.maxMessageSize) throw new TypeError("Message too large (can send a maximum of " + t.sctp.maxMessageSize + " bytes)");
                        return n.apply(e, arguments);
                    };
                }
            }
            function p(e) {
                if (e.RTCPeerConnection && !("connectionState" in e.RTCPeerConnection.prototype)) {
                    var t = e.RTCPeerConnection.prototype;
                    Object.defineProperty(t, "connectionState", {
                        get: function() {
                            return ({
                                completed: "connected",
                                checking: "connecting"
                            })[this.iceConnectionState] || this.iceConnectionState;
                        },
                        enumerable: !0,
                        configurable: !0
                    }), Object.defineProperty(t, "onconnectionstatechange", {
                        get: function() {
                            return this._onconnectionstatechange || null;
                        },
                        set: function(e) {
                            this._onconnectionstatechange && (this.removeEventListener("connectionstatechange", this._onconnectionstatechange), delete this._onconnectionstatechange), e && this.addEventListener("connectionstatechange", this._onconnectionstatechange = e);
                        },
                        enumerable: !0,
                        configurable: !0
                    }), [
                        "setLocalDescription",
                        "setRemoteDescription"
                    ].forEach(function(e) {
                        var n = t[e];
                        t[e] = function() {
                            return this._connectionstatechangepoly || (this._connectionstatechangepoly = function(e) {
                                var t = e.target;
                                if (t._lastConnectionState !== t.connectionState) {
                                    t._lastConnectionState = t.connectionState;
                                    var n = new Event("connectionstatechange", e);
                                    t.dispatchEvent(n);
                                }
                                return e;
                            }, this.addEventListener("iceconnectionstatechange", this._connectionstatechangepoly)), n.apply(this, arguments);
                        };
                    });
                }
            }
            function d(e, t) {
                if (e.RTCPeerConnection && !("chrome" === t.browser && t.version >= 71 || "safari" === t.browser && t.version >= 605)) {
                    var n = e.RTCPeerConnection.prototype.setRemoteDescription;
                    e.RTCPeerConnection.prototype.setRemoteDescription = function(t) {
                        if (t && t.sdp && -1 !== t.sdp.indexOf("\na=extmap-allow-mixed")) {
                            var o = t.sdp.split("\n").filter(function(e) {
                                return "a=extmap-allow-mixed" !== e.trim();
                            }).join("\n");
                            e.RTCSessionDescription && t instanceof e.RTCSessionDescription ? arguments[0] = new e.RTCSessionDescription({
                                type: t.type,
                                sdp: o
                            }) : t.sdp = o;
                        }
                        return n.apply(this, arguments);
                    };
                }
            }
            function u(e, t) {
                if (e.RTCPeerConnection && e.RTCPeerConnection.prototype) {
                    var n = e.RTCPeerConnection.prototype.addIceCandidate;
                    n && 0 !== n.length && (e.RTCPeerConnection.prototype.addIceCandidate = function() {
                        return arguments[0] ? ("chrome" === t.browser && t.version < 78 || "firefox" === t.browser && t.version < 68 || "safari" === t.browser) && arguments[0] && "" === arguments[0].candidate ? Promise.resolve() : n.apply(this, arguments) : (arguments[1] && arguments[1].apply(null), Promise.resolve());
                    });
                }
            }
        },
        {
            "sdp": "rjLK",
            "./utils": "CFi4"
        }
    ],
    "M7d8": [
        function(require1, module1, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.adapterFactory = o;
            var e = m(require1("./utils")), i = m(require1("./chrome/chrome_shim")), r = m(require1("./edge/edge_shim")), s = m(require1("./firefox/firefox_shim")), t = m(require1("./safari/safari_shim")), a = m(require1("./common_shim"));
            function n(e) {
                if ("function" != typeof WeakMap) return null;
                var i = new WeakMap, r = new WeakMap;
                return (n = function(e) {
                    return e ? r : i;
                })(e);
            }
            function m(e, i) {
                if (!i && e && e.__esModule) return e;
                if (null === e || "object" != typeof e && "function" != typeof e) return {
                    default: e
                };
                var r = n(i);
                if (r && r.has(e)) return r.get(e);
                var s = {}, t = Object.defineProperty && Object.getOwnPropertyDescriptor;
                for(var a in e)if ("default" !== a && Object.prototype.hasOwnProperty.call(e, a)) {
                    var m = t ? Object.getOwnPropertyDescriptor(e, a) : null;
                    m && (m.get || m.set) ? Object.defineProperty(s, a, m) : s[a] = e[a];
                }
                return s.default = e, r && r.set(e, s), s;
            }
            function o() {
                var { window: n  } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, m = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {
                    shimChrome: !0,
                    shimFirefox: !0,
                    shimEdge: !0,
                    shimSafari: !0
                }, o = e.log, h = e.detectBrowser(n), d = {
                    browserDetails: h,
                    commonShim: a,
                    extractVersion: e.extractVersion,
                    disableLog: e.disableLog,
                    disableWarnings: e.disableWarnings
                };
                switch(h.browser){
                    case "chrome":
                        if (!i || !i.shimPeerConnection || !m.shimChrome) return o("Chrome shim is not included in this adapter release."), d;
                        if (null === h.version) return o("Chrome shim can not determine version, not shimming."), d;
                        o("adapter.js shimming chrome."), d.browserShim = i, a.shimAddIceCandidateNullOrEmpty(n, h), i.shimGetUserMedia(n, h), i.shimMediaStream(n, h), i.shimPeerConnection(n, h), i.shimOnTrack(n, h), i.shimAddTrackRemoveTrack(n, h), i.shimGetSendersWithDtmf(n, h), i.shimGetStats(n, h), i.shimSenderReceiverGetStats(n, h), i.fixNegotiationNeeded(n, h), a.shimRTCIceCandidate(n, h), a.shimConnectionState(n, h), a.shimMaxMessageSize(n, h), a.shimSendThrowTypeError(n, h), a.removeExtmapAllowMixed(n, h);
                        break;
                    case "firefox":
                        if (!s || !s.shimPeerConnection || !m.shimFirefox) return o("Firefox shim is not included in this adapter release."), d;
                        o("adapter.js shimming firefox."), d.browserShim = s, a.shimAddIceCandidateNullOrEmpty(n, h), s.shimGetUserMedia(n, h), s.shimPeerConnection(n, h), s.shimOnTrack(n, h), s.shimRemoveStream(n, h), s.shimSenderGetStats(n, h), s.shimReceiverGetStats(n, h), s.shimRTCDataChannel(n, h), s.shimAddTransceiver(n, h), s.shimGetParameters(n, h), s.shimCreateOffer(n, h), s.shimCreateAnswer(n, h), a.shimRTCIceCandidate(n, h), a.shimConnectionState(n, h), a.shimMaxMessageSize(n, h), a.shimSendThrowTypeError(n, h);
                        break;
                    case "edge":
                        if (!r || !r.shimPeerConnection || !m.shimEdge) return o("MS edge shim is not included in this adapter release."), d;
                        o("adapter.js shimming edge."), d.browserShim = r, r.shimGetUserMedia(n, h), r.shimGetDisplayMedia(n, h), r.shimPeerConnection(n, h), r.shimReplaceTrack(n, h), a.shimMaxMessageSize(n, h), a.shimSendThrowTypeError(n, h);
                        break;
                    case "safari":
                        if (!t || !m.shimSafari) return o("Safari shim is not included in this adapter release."), d;
                        o("adapter.js shimming safari."), d.browserShim = t, a.shimAddIceCandidateNullOrEmpty(n, h), t.shimRTCIceServerUrls(n, h), t.shimCreateOfferLegacy(n, h), t.shimCallbacksAPI(n, h), t.shimLocalStreamsAPI(n, h), t.shimRemoteStreamsAPI(n, h), t.shimTrackEventTransceiver(n, h), t.shimGetUserMedia(n, h), t.shimAudioContext(n, h), a.shimRTCIceCandidate(n, h), a.shimMaxMessageSize(n, h), a.shimSendThrowTypeError(n, h), a.removeExtmapAllowMixed(n, h);
                        break;
                    default:
                        o("Unsupported browser!");
                }
                return d;
            }
        },
        {
            "./utils": "CFi4",
            "./chrome/chrome_shim": "xPY1",
            "./edge/edge_shim": "erDH",
            "./firefox/firefox_shim": "CgK8",
            "./safari/safari_shim": "KE77",
            "./common_shim": "Kluw"
        }
    ],
    "noxD": [
        function(require1, module1, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.default = void 0;
            var e = require1("./adapter_factory.js"), t = (0, e.adapterFactory)({
                window: "undefined" == typeof window ? void 0 : window
            }), d = t;
            exports.default = d;
        },
        {
            "./adapter_factory.js": "M7d8"
        }
    ],
    "sXtV": [
        function(require1, module1, exports) {
            "use strict";
            var e = this && this.__importDefault || function(e) {
                return e && e.__esModule ? e : {
                    default: e
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.webRTCAdapter = void 0;
            var t = e(require1("webrtc-adapter"));
            exports.webRTCAdapter = t.default;
        },
        {
            "webrtc-adapter": "noxD"
        }
    ],
    "I31f": [
        function(require1, module1, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.Supports = void 0;
            var r = require1("./adapter");
            exports.Supports = new (function() {
                function e() {
                    this.isIOS = [
                        "iPad",
                        "iPhone",
                        "iPod"
                    ].includes(navigator.platform), this.supportedBrowsers = [
                        "firefox",
                        "chrome",
                        "safari"
                    ], this.minFirefoxVersion = 59, this.minChromeVersion = 72, this.minSafariVersion = 605;
                }
                return e.prototype.isWebRTCSupported = function() {
                    return "undefined" != typeof RTCPeerConnection;
                }, e.prototype.isBrowserSupported = function() {
                    var r = this.getBrowser(), e = this.getVersion();
                    return !!this.supportedBrowsers.includes(r) && ("chrome" === r ? e >= this.minChromeVersion : "firefox" === r ? e >= this.minFirefoxVersion : "safari" === r && !this.isIOS && e >= this.minSafariVersion);
                }, e.prototype.getBrowser = function() {
                    return r.webRTCAdapter.browserDetails.browser;
                }, e.prototype.getVersion = function() {
                    return r.webRTCAdapter.browserDetails.version || 0;
                }, e.prototype.isUnifiedPlanSupported = function() {
                    var e, i = this.getBrowser(), t = r.webRTCAdapter.browserDetails.version || 0;
                    if ("chrome" === i && t < 72) return !1;
                    if ("firefox" === i && t >= 59) return !0;
                    if (!(window.RTCRtpTransceiver && "currentDirection" in RTCRtpTransceiver.prototype)) return !1;
                    var o = !1;
                    try {
                        (e = new RTCPeerConnection).addTransceiver("audio"), o = !0;
                    } catch (s) {} finally{
                        e && e.close();
                    }
                    return o;
                }, e.prototype.toString = function() {
                    return "Supports: \n    browser:" + this.getBrowser() + " \n    version:" + this.getVersion() + " \n    isIOS:" + this.isIOS + " \n    isWebRTCSupported:" + this.isWebRTCSupported() + " \n    isBrowserSupported:" + this.isBrowserSupported() + " \n    isUnifiedPlanSupported:" + this.isUnifiedPlanSupported();
                }, e;
            }());
        },
        {
            "./adapter": "sXtV"
        }
    ],
    "BHXf": [
        function(require1, module1, exports) {
            "use strict";
            var e = this && this.__createBinding || (Object.create ? function(e, t, r, o) {
                void 0 === o && (o = r), Object.defineProperty(e, o, {
                    enumerable: !0,
                    get: function() {
                        return t[r];
                    }
                });
            } : function(e, t, r, o) {
                void 0 === o && (o = r), e[o] = t[r];
            }), t = this && this.__setModuleDefault || (Object.create ? function(e, t) {
                Object.defineProperty(e, "default", {
                    enumerable: !0,
                    value: t
                });
            } : function(e, t) {
                e.default = t;
            }), r = this && this.__importStar || function(r) {
                if (r && r.__esModule) return r;
                var o = {};
                if (null != r) for(var n in r)"default" !== n && Object.prototype.hasOwnProperty.call(r, n) && e(o, r, n);
                return t(o, r), o;
            };
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.util = void 0;
            var o = r(require1("peerjs-js-binarypack")), n = require1("./supports"), i = {
                iceServers: [
                    {
                        urls: "stun:stun.l.google.com:19302"
                    },
                    {
                        urls: "turn:0.peerjs.com:3478",
                        username: "peerjs",
                        credential: "peerjsp"
                    }
                ],
                sdpSemantics: "unified-plan"
            };
            exports.util = new (function() {
                function e() {
                    this.CLOUD_HOST = "0.peerjs.com", this.CLOUD_PORT = 443, this.chunkedBrowsers = {
                        Chrome: 1,
                        chrome: 1
                    }, this.chunkedMTU = 16300, this.defaultConfig = i, this.browser = n.Supports.getBrowser(), this.browserVersion = n.Supports.getVersion(), this.supports = function() {
                        var e, t = {
                            browser: n.Supports.isBrowserSupported(),
                            webRTC: n.Supports.isWebRTCSupported(),
                            audioVideo: !1,
                            data: !1,
                            binaryBlob: !1,
                            reliable: !1
                        };
                        if (!t.webRTC) return t;
                        try {
                            e = new RTCPeerConnection(i), t.audioVideo = !0;
                            var r = void 0;
                            try {
                                r = e.createDataChannel("_PEERJSTEST", {
                                    ordered: !0
                                }), t.data = !0, t.reliable = !!r.ordered;
                                try {
                                    r.binaryType = "blob", t.binaryBlob = !n.Supports.isIOS;
                                } catch (o) {}
                            } catch (o) {} finally{
                                r && r.close();
                            }
                        } catch (o) {} finally{
                            e && e.close();
                        }
                        return t;
                    }(), this.pack = o.pack, this.unpack = o.unpack, this._dataCount = 1;
                }
                return e.prototype.noop = function() {}, e.prototype.validateId = function(e) {
                    return !e || /^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/.test(e);
                }, e.prototype.chunk = function(e) {
                    for(var t = [], r = e.size, o = Math.ceil(r / exports.util.chunkedMTU), n = 0, i = 0; i < r;){
                        var a = Math.min(r, i + exports.util.chunkedMTU), u = e.slice(i, a), s = {
                            __peerData: this._dataCount,
                            n: n,
                            data: u,
                            total: o
                        };
                        t.push(s), i = a, n++;
                    }
                    return this._dataCount++, t;
                }, e.prototype.blobToArrayBuffer = function(e, t) {
                    var r = new FileReader;
                    return r.onload = function(e) {
                        e.target && t(e.target.result);
                    }, r.readAsArrayBuffer(e), r;
                }, e.prototype.binaryStringToArrayBuffer = function(e) {
                    for(var t = new Uint8Array(e.length), r = 0; r < e.length; r++)t[r] = 255 & e.charCodeAt(r);
                    return t.buffer;
                }, e.prototype.randomToken = function() {
                    return Math.random().toString(36).substr(2);
                }, e.prototype.isSecure = function() {
                    return "https:" === location.protocol;
                }, e;
            }());
        },
        {
            "peerjs-js-binarypack": "c7XW",
            "./supports": "I31f"
        }
    ],
    "Clm3": [
        function(require1, module1, exports) {
            "use strict";
            var e = Object.prototype.hasOwnProperty, t = "~";
            function n() {}
            function r(e, t, n) {
                this.fn = e, this.context = t, this.once = n || !1;
            }
            function o(e, n, o, s, i) {
                if ("function" != typeof o) throw new TypeError("The listener must be a function");
                var c = new r(o, s || e, i), f = t ? t + n : n;
                return e._events[f] ? e._events[f].fn ? e._events[f] = [
                    e._events[f],
                    c
                ] : e._events[f].push(c) : (e._events[f] = c, e._eventsCount++), e;
            }
            function s(e, t) {
                0 == --e._eventsCount ? e._events = new n : delete e._events[t];
            }
            function i() {
                this._events = new n, this._eventsCount = 0;
            }
            Object.create && (n.prototype = Object.create(null), (new n).__proto__ || (t = !1)), i.prototype.eventNames = function() {
                var n, r, o = [];
                if (0 === this._eventsCount) return o;
                for(r in n = this._events)e.call(n, r) && o.push(t ? r.slice(1) : r);
                return Object.getOwnPropertySymbols ? o.concat(Object.getOwnPropertySymbols(n)) : o;
            }, i.prototype.listeners = function(e) {
                var n = t ? t + e : e, r = this._events[n];
                if (!r) return [];
                if (r.fn) return [
                    r.fn
                ];
                for(var o = 0, s = r.length, i = new Array(s); o < s; o++)i[o] = r[o].fn;
                return i;
            }, i.prototype.listenerCount = function(e) {
                var n = t ? t + e : e, r = this._events[n];
                return r ? r.fn ? 1 : r.length : 0;
            }, i.prototype.emit = function(e, n, r, o, s, i) {
                var c = t ? t + e : e;
                if (!this._events[c]) return !1;
                var f, u, a = this._events[c], l = arguments.length;
                if (a.fn) {
                    switch(a.once && this.removeListener(e, a.fn, void 0, !0), l){
                        case 1:
                            return a.fn.call(a.context), !0;
                        case 2:
                            return a.fn.call(a.context, n), !0;
                        case 3:
                            return a.fn.call(a.context, n, r), !0;
                        case 4:
                            return a.fn.call(a.context, n, r, o), !0;
                        case 5:
                            return a.fn.call(a.context, n, r, o, s), !0;
                        case 6:
                            return a.fn.call(a.context, n, r, o, s, i), !0;
                    }
                    for(u = 1, f = new Array(l - 1); u < l; u++)f[u - 1] = arguments[u];
                    a.fn.apply(a.context, f);
                } else {
                    var v, h = a.length;
                    for(u = 0; u < h; u++)switch(a[u].once && this.removeListener(e, a[u].fn, void 0, !0), l){
                        case 1:
                            a[u].fn.call(a[u].context);
                            break;
                        case 2:
                            a[u].fn.call(a[u].context, n);
                            break;
                        case 3:
                            a[u].fn.call(a[u].context, n, r);
                            break;
                        case 4:
                            a[u].fn.call(a[u].context, n, r, o);
                            break;
                        default:
                            if (!f) for(v = 1, f = new Array(l - 1); v < l; v++)f[v - 1] = arguments[v];
                            a[u].fn.apply(a[u].context, f);
                    }
                }
                return !0;
            }, i.prototype.on = function(e, t, n) {
                return o(this, e, t, n, !1);
            }, i.prototype.once = function(e, t, n) {
                return o(this, e, t, n, !0);
            }, i.prototype.removeListener = function(e, n, r, o) {
                var i = t ? t + e : e;
                if (!this._events[i]) return this;
                if (!n) return s(this, i), this;
                var c = this._events[i];
                if (c.fn) c.fn !== n || o && !c.once || r && c.context !== r || s(this, i);
                else {
                    for(var f = 0, u = [], a = c.length; f < a; f++)(c[f].fn !== n || o && !c[f].once || r && c[f].context !== r) && u.push(c[f]);
                    u.length ? this._events[i] = 1 === u.length ? u[0] : u : s(this, i);
                }
                return this;
            }, i.prototype.removeAllListeners = function(e) {
                var r;
                return e ? (r = t ? t + e : e, this._events[r] && s(this, r)) : (this._events = new n, this._eventsCount = 0), this;
            }, i.prototype.off = i.prototype.removeListener, i.prototype.addListener = i.prototype.on, i.prefixed = t, i.EventEmitter = i, "undefined" != typeof module1 && (module1.exports = i);
        },
        {}
    ],
    "WOs9": [
        function(require1, module1, exports) {
            "use strict";
            var r = this && this.__read || function(r, e) {
                var o = "function" == typeof Symbol && r[Symbol.iterator];
                if (!o) return r;
                var t, n, l = o.call(r), i = [];
                try {
                    for(; (void 0 === e || e-- > 0) && !(t = l.next()).done;)i.push(t.value);
                } catch (s) {
                    n = {
                        error: s
                    };
                } finally{
                    try {
                        t && !t.done && (o = l.return) && o.call(l);
                    } finally{
                        if (n) throw n.error;
                    }
                }
                return i;
            }, e = this && this.__spreadArray || function(r, e) {
                for(var o = 0, t = e.length, n = r.length; o < t; o++, n++)r[n] = e[o];
                return r;
            };
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.LogLevel = void 0;
            var o, t = "PeerJS: ";
            !function(r) {
                r[r.Disabled = 0] = "Disabled", r[r.Errors = 1] = "Errors", r[r.Warnings = 2] = "Warnings", r[r.All = 3] = "All";
            }(o = exports.LogLevel || (exports.LogLevel = {}));
            var n = function() {
                function n() {
                    this._logLevel = o.Disabled;
                }
                return Object.defineProperty(n.prototype, "logLevel", {
                    get: function() {
                        return this._logLevel;
                    },
                    set: function(r) {
                        this._logLevel = r;
                    },
                    enumerable: !1,
                    configurable: !0
                }), n.prototype.log = function() {
                    for(var t = [], n = 0; n < arguments.length; n++)t[n] = arguments[n];
                    this._logLevel >= o.All && this._print.apply(this, e([
                        o.All
                    ], r(t)));
                }, n.prototype.warn = function() {
                    for(var t = [], n = 0; n < arguments.length; n++)t[n] = arguments[n];
                    this._logLevel >= o.Warnings && this._print.apply(this, e([
                        o.Warnings
                    ], r(t)));
                }, n.prototype.error = function() {
                    for(var t = [], n = 0; n < arguments.length; n++)t[n] = arguments[n];
                    this._logLevel >= o.Errors && this._print.apply(this, e([
                        o.Errors
                    ], r(t)));
                }, n.prototype.setLogFunction = function(r) {
                    this._print = r;
                }, n.prototype._print = function(n) {
                    for(var l = [], i = 1; i < arguments.length; i++)l[i - 1] = arguments[i];
                    var s = e([
                        t
                    ], r(l));
                    for(var a in s)s[a] instanceof Error && (s[a] = "(" + s[a].name + ") " + s[a].message);
                    n >= o.All ? console.log.apply(console, e([], r(s))) : n >= o.Warnings ? console.warn.apply(console, e([
                        "WARNING"
                    ], r(s))) : n >= o.Errors && console.error.apply(console, e([
                        "ERROR"
                    ], r(s)));
                }, n;
            }();
            exports.default = new n;
        },
        {}
    ],
    "ZRYf": [
        function(require1, module1, exports) {
            "use strict";
            var e, r, o, n, t, a, i;
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.ServerMessageType = exports.SocketEventType = exports.SerializationType = exports.PeerErrorType = exports.PeerEventType = exports.ConnectionType = exports.ConnectionEventType = void 0, function(e) {
                e.Open = "open", e.Stream = "stream", e.Data = "data", e.Close = "close", e.Error = "error", e.IceStateChanged = "iceStateChanged";
            }(e = exports.ConnectionEventType || (exports.ConnectionEventType = {})), function(e) {
                e.Data = "data", e.Media = "media";
            }(r = exports.ConnectionType || (exports.ConnectionType = {})), function(e) {
                e.Open = "open", e.Close = "close", e.Connection = "connection", e.Call = "call", e.Disconnected = "disconnected", e.Error = "error", e.ApplicationMessage = "application-message";
            }(o = exports.PeerEventType || (exports.PeerEventType = {})), function(e) {
                e.BrowserIncompatible = "browser-incompatible", e.Disconnected = "disconnected", e.InvalidID = "invalid-id", e.InvalidKey = "invalid-key", e.Network = "network", e.PeerUnavailable = "peer-unavailable", e.SslUnavailable = "ssl-unavailable", e.ServerError = "server-error", e.SocketError = "socket-error", e.SocketClosed = "socket-closed", e.UnavailableID = "unavailable-id", e.WebRTC = "webrtc";
            }(n = exports.PeerErrorType || (exports.PeerErrorType = {})), function(e) {
                e.Binary = "binary", e.BinaryUTF8 = "binary-utf8", e.JSON = "json";
            }(t = exports.SerializationType || (exports.SerializationType = {})), function(e) {
                e.Message = "message", e.Disconnected = "disconnected", e.Error = "error", e.Close = "close";
            }(a = exports.SocketEventType || (exports.SocketEventType = {})), function(e) {
                e.Heartbeat = "HEARTBEAT", e.Candidate = "CANDIDATE", e.Offer = "OFFER", e.Answer = "ANSWER", e.Open = "OPEN", e.Error = "ERROR", e.IdTaken = "ID-TAKEN", e.InvalidKey = "INVALID-KEY", e.Leave = "LEAVE", e.Expire = "EXPIRE", e.ApplicationMessage = "APPLICATION-MESSAGE";
            }(i = exports.ServerMessageType || (exports.ServerMessageType = {}));
        },
        {}
    ],
    "wJlv": [
        function(require1, module1, exports) {
            "use strict";
            var e = this && this.__extends || function() {
                var e = function(t, n) {
                    return (e = Object.setPrototypeOf || ({
                        __proto__: []
                    }) instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    } || function(e, t) {
                        for(var n in t)Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
                    })(t, n);
                };
                return function(t, n) {
                    if ("function" != typeof n && null !== n) throw new TypeError("Class extends value " + String(n) + " is not a constructor or null");
                    function o() {
                        this.constructor = t;
                    }
                    e(t, n), t.prototype = null === n ? Object.create(n) : (o.prototype = n.prototype, new o);
                };
            }(), t = this && this.__read || function(e, t) {
                var n = "function" == typeof Symbol && e[Symbol.iterator];
                if (!n) return e;
                var o, s, r = n.call(e), i = [];
                try {
                    for(; (void 0 === t || t-- > 0) && !(o = r.next()).done;)i.push(o.value);
                } catch (c) {
                    s = {
                        error: c
                    };
                } finally{
                    try {
                        o && !o.done && (n = r.return) && n.call(r);
                    } finally{
                        if (s) throw s.error;
                    }
                }
                return i;
            }, n = this && this.__spreadArray || function(e, t) {
                for(var n = 0, o = t.length, s = e.length; n < o; n++, s++)e[s] = t[n];
                return e;
            }, o = this && this.__values || function(e) {
                var t = "function" == typeof Symbol && Symbol.iterator, n = t && e[t], o = 0;
                if (n) return n.call(e);
                if (e && "number" == typeof e.length) return {
                    next: function() {
                        return e && o >= e.length && (e = void 0), {
                            value: e && e[o++],
                            done: !e
                        };
                    }
                };
                throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");
            }, s = this && this.__importDefault || function(e) {
                return e && e.__esModule ? e : {
                    default: e
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.Socket = void 0;
            var r = require1("eventemitter3"), i = s(require1("./logger")), c = require1("./enums"), a = function(s) {
                function r(e, t, n, o, r, i) {
                    void 0 === i && (i = 5e3);
                    var c = s.call(this) || this;
                    c.pingInterval = i, c._disconnected = !0, c._messagesQueue = [];
                    var a = e ? "wss://" : "ws://";
                    return c._baseUrl = a + t + ":" + n + o + "peerjs?key=" + r, c;
                }
                return e(r, s), r.prototype.start = function(e, t) {
                    var n = this;
                    this._id = e;
                    var o = this._baseUrl + "&id=" + e + "&token=" + t;
                    !this._socket && this._disconnected && (this._socket = new WebSocket(o), this._disconnected = !1, this._socket.onmessage = function(e) {
                        var t;
                        try {
                            t = JSON.parse(e.data), i.default.log("Server message received:", t);
                        } catch (o) {
                            return void i.default.log("Invalid server message", e.data);
                        }
                        n.emit(c.SocketEventType.Message, t);
                    }, this._socket.onclose = function(e) {
                        n._disconnected || (i.default.log("Socket closed.", e), n._cleanup(), n._disconnected = !0, n.emit(c.SocketEventType.Disconnected));
                    }, this._socket.onopen = function() {
                        n._disconnected || (n._sendQueuedMessages(), i.default.log("Socket open"), n._scheduleHeartbeat());
                    });
                }, r.prototype._scheduleHeartbeat = function() {
                    var e = this;
                    this._wsPingTimer = setTimeout(function() {
                        e._sendHeartbeat();
                    }, this.pingInterval);
                }, r.prototype._sendHeartbeat = function() {
                    if (this._wsOpen()) {
                        var e = JSON.stringify({
                            type: c.ServerMessageType.Heartbeat
                        });
                        this._socket.send(e), this._scheduleHeartbeat();
                    } else i.default.log("Cannot send heartbeat, because socket closed");
                }, r.prototype._wsOpen = function() {
                    return !!this._socket && 1 === this._socket.readyState;
                }, r.prototype._sendQueuedMessages = function() {
                    var e, s, r = n([], t(this._messagesQueue));
                    this._messagesQueue = [];
                    try {
                        for(var i = o(r), c = i.next(); !c.done; c = i.next()){
                            var a = c.value;
                            this.send(a);
                        }
                    } catch (u) {
                        e = {
                            error: u
                        };
                    } finally{
                        try {
                            c && !c.done && (s = i.return) && s.call(i);
                        } finally{
                            if (e) throw e.error;
                        }
                    }
                }, r.prototype.send = function(e) {
                    if (!this._disconnected) {
                        if (this._id) {
                            if (e.type) {
                                if (this._wsOpen()) {
                                    var t = JSON.stringify(e);
                                    this._socket.send(t);
                                }
                            } else this.emit(c.SocketEventType.Error, "Invalid message");
                        } else this._messagesQueue.push(e);
                    }
                }, r.prototype.close = function() {
                    this._disconnected || (this._cleanup(), this._disconnected = !0);
                }, r.prototype._cleanup = function() {
                    this._socket && (this._socket.onopen = this._socket.onmessage = this._socket.onclose = null, this._socket.close(), this._socket = void 0), clearTimeout(this._wsPingTimer);
                }, r;
            }(r.EventEmitter);
            exports.Socket = a;
        },
        {
            "eventemitter3": "Clm3",
            "./logger": "WOs9",
            "./enums": "ZRYf"
        }
    ],
    "HCdX": [
        function(require1, module1, exports) {
            "use strict";
            var e = this && this.__assign || function() {
                return (e = Object.assign || function(e) {
                    for(var n, t = 1, o = arguments.length; t < o; t++)for(var i in n = arguments[t])Object.prototype.hasOwnProperty.call(n, i) && (e[i] = n[i]);
                    return e;
                }).apply(this, arguments);
            }, n = this && this.__awaiter || function(e, n, t, o) {
                return new (t || (t = Promise))(function(i, r) {
                    function c(e) {
                        try {
                            s(o.next(e));
                        } catch (n) {
                            r(n);
                        }
                    }
                    function a(e) {
                        try {
                            s(o.throw(e));
                        } catch (n) {
                            r(n);
                        }
                    }
                    function s(e) {
                        var n;
                        e.done ? i(e.value) : (n = e.value, n instanceof t ? n : new t(function(e) {
                            e(n);
                        })).then(c, a);
                    }
                    s((o = o.apply(e, n || [])).next());
                });
            }, t = this && this.__generator || function(e, n) {
                var t, o, i, r, c = {
                    label: 0,
                    sent: function() {
                        if (1 & i[0]) throw i[1];
                        return i[1];
                    },
                    trys: [],
                    ops: []
                };
                return r = {
                    next: a(0),
                    throw: a(1),
                    return: a(2)
                }, "function" == typeof Symbol && (r[Symbol.iterator] = function() {
                    return this;
                }), r;
                function a(r) {
                    return function(a) {
                        return function(r) {
                            if (t) throw new TypeError("Generator is already executing.");
                            for(; c;)try {
                                if (t = 1, o && (i = 2 & r[0] ? o.return : r[0] ? o.throw || ((i = o.return) && i.call(o), 0) : o.next) && !(i = i.call(o, r[1])).done) return i;
                                switch(o = 0, i && (r = [
                                    2 & r[0],
                                    i.value
                                ]), r[0]){
                                    case 0:
                                    case 1:
                                        i = r;
                                        break;
                                    case 4:
                                        return c.label++, {
                                            value: r[1],
                                            done: !1
                                        };
                                    case 5:
                                        c.label++, o = r[1], r = [
                                            0
                                        ];
                                        continue;
                                    case 7:
                                        r = c.ops.pop(), c.trys.pop();
                                        continue;
                                    default:
                                        if (!(i = (i = c.trys).length > 0 && i[i.length - 1]) && (6 === r[0] || 2 === r[0])) {
                                            c = 0;
                                            continue;
                                        }
                                        if (3 === r[0] && (!i || r[1] > i[0] && r[1] < i[3])) {
                                            c.label = r[1];
                                            break;
                                        }
                                        if (6 === r[0] && c.label < i[1]) {
                                            c.label = i[1], i = r;
                                            break;
                                        }
                                        if (i && c.label < i[2]) {
                                            c.label = i[2], c.ops.push(r);
                                            break;
                                        }
                                        i[2] && c.ops.pop(), c.trys.pop();
                                        continue;
                                }
                                r = n.call(e, c);
                            } catch (a) {
                                r = [
                                    6,
                                    a
                                ], o = 0;
                            } finally{
                                t = i = 0;
                            }
                            if (5 & r[0]) throw r[1];
                            return {
                                value: r[0] ? r[1] : void 0,
                                done: !0
                            };
                        }([
                            r,
                            a
                        ]);
                    };
                }
            }, o = this && this.__importDefault || function(e) {
                return e && e.__esModule ? e : {
                    default: e
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.Negotiator = void 0;
            var i = require1("./util"), r = o(require1("./logger")), c = require1("./enums"), a = function() {
                function o(e) {
                    this.connection = e;
                }
                return o.prototype.startConnection = function(e) {
                    var n = this._startPeerConnection();
                    if (this.connection.peerConnection = n, this.connection.type === c.ConnectionType.Media && e._stream && this._addTracksToConnection(e._stream, n), e.originator) {
                        if (this.connection.type === c.ConnectionType.Data) {
                            var t = this.connection, o = {
                                ordered: !!e.reliable
                            }, i = n.createDataChannel(t.label, o);
                            t.initialize(i);
                        }
                        this._makeOffer();
                    } else this.handleSDP("OFFER", e.sdp);
                }, o.prototype._startPeerConnection = function() {
                    r.default.log("Creating RTCPeerConnection.");
                    var e = new RTCPeerConnection(this.connection.provider.options.config);
                    return this._setupListeners(e), e;
                }, o.prototype._setupListeners = function(e) {
                    var n = this, t = this.connection.peer, o = this.connection.connectionId, a = this.connection.type, s = this.connection.provider;
                    r.default.log("Listening for ICE candidates."), e.onicecandidate = function(e) {
                        e.candidate && e.candidate.candidate && (r.default.log("Received ICE candidates for " + t + ":", e.candidate), s.socket.send({
                            type: c.ServerMessageType.Candidate,
                            payload: {
                                candidate: e.candidate,
                                type: a,
                                connectionId: o
                            },
                            dst: t
                        }));
                    }, e.oniceconnectionstatechange = function() {
                        switch(e.iceConnectionState){
                            case "failed":
                                r.default.log("iceConnectionState is failed, closing connections to " + t), n.connection.emit(c.ConnectionEventType.Error, new Error("Negotiation of connection to " + t + " failed.")), n.connection.close();
                                break;
                            case "closed":
                                r.default.log("iceConnectionState is closed, closing connections to " + t), n.connection.emit(c.ConnectionEventType.Error, new Error("Connection to " + t + " closed.")), n.connection.close();
                                break;
                            case "disconnected":
                                r.default.log("iceConnectionState changed to disconnected on the connection with " + t);
                                break;
                            case "completed":
                                e.onicecandidate = i.util.noop;
                        }
                        n.connection.emit(c.ConnectionEventType.IceStateChanged, e.iceConnectionState);
                    }, r.default.log("Listening for data channel"), e.ondatachannel = function(e) {
                        r.default.log("Received data channel");
                        var n = e.channel;
                        s.getConnection(t, o).initialize(n);
                    }, r.default.log("Listening for remote stream"), e.ontrack = function(e) {
                        r.default.log("Received remote stream");
                        var i = e.streams[0], a = s.getConnection(t, o);
                        if (a.type === c.ConnectionType.Media) {
                            var d = a;
                            n._addStreamToMediaConnection(i, d);
                        }
                    };
                }, o.prototype.cleanup = function() {
                    r.default.log("Cleaning up PeerConnection to " + this.connection.peer);
                    var e = this.connection.peerConnection;
                    if (e) {
                        this.connection.peerConnection = null, e.onicecandidate = e.oniceconnectionstatechange = e.ondatachannel = e.ontrack = function() {};
                        var n = "closed" !== e.signalingState, t = !1;
                        if (this.connection.type === c.ConnectionType.Data) {
                            var o = this.connection.dataChannel;
                            o && (t = !!o.readyState && "closed" !== o.readyState);
                        }
                        (n || t) && e.close();
                    }
                }, o.prototype._makeOffer = function() {
                    return n(this, void 0, Promise, function() {
                        var n, o, a, s, d, l, u;
                        return t(this, function(t) {
                            switch(t.label){
                                case 0:
                                    n = this.connection.peerConnection, o = this.connection.provider, t.label = 1;
                                case 1:
                                    return t.trys.push([
                                        1,
                                        7,
                                        ,
                                        8
                                    ]), [
                                        4,
                                        n.createOffer(this.connection.options.constraints)
                                    ];
                                case 2:
                                    a = t.sent(), r.default.log("Created offer."), this.connection.options.sdpTransform && "function" == typeof this.connection.options.sdpTransform && (a.sdp = this.connection.options.sdpTransform(a.sdp) || a.sdp), t.label = 3;
                                case 3:
                                    return t.trys.push([
                                        3,
                                        5,
                                        ,
                                        6
                                    ]), [
                                        4,
                                        n.setLocalDescription(a)
                                    ];
                                case 4:
                                    return t.sent(), r.default.log("Set localDescription:", a, "for:" + this.connection.peer), s = {
                                        sdp: a,
                                        type: this.connection.type,
                                        connectionId: this.connection.connectionId,
                                        metadata: this.connection.metadata,
                                        browser: i.util.browser
                                    }, this.connection.type === c.ConnectionType.Data && (d = this.connection, s = e(e({}, s), {
                                        label: d.label,
                                        reliable: d.reliable,
                                        serialization: d.serialization
                                    })), o.socket.send({
                                        type: c.ServerMessageType.Offer,
                                        payload: s,
                                        dst: this.connection.peer
                                    }), [
                                        3,
                                        6
                                    ];
                                case 5:
                                    return "OperationError: Failed to set local offer sdp: Called in wrong state: kHaveRemoteOffer" != (l = t.sent()) && (o.emitError(c.PeerErrorType.WebRTC, l), r.default.log("Failed to setLocalDescription, ", l)), [
                                        3,
                                        6
                                    ];
                                case 6:
                                    return [
                                        3,
                                        8
                                    ];
                                case 7:
                                    return u = t.sent(), o.emitError(c.PeerErrorType.WebRTC, u), r.default.log("Failed to createOffer, ", u), [
                                        3,
                                        8
                                    ];
                                case 8:
                                    return [
                                        2
                                    ];
                            }
                        });
                    });
                }, o.prototype._makeAnswer = function() {
                    return n(this, void 0, Promise, function() {
                        var e, n, o, a, s;
                        return t(this, function(t) {
                            switch(t.label){
                                case 0:
                                    e = this.connection.peerConnection, n = this.connection.provider, t.label = 1;
                                case 1:
                                    return t.trys.push([
                                        1,
                                        7,
                                        ,
                                        8
                                    ]), [
                                        4,
                                        e.createAnswer()
                                    ];
                                case 2:
                                    o = t.sent(), r.default.log("Created answer."), this.connection.options.sdpTransform && "function" == typeof this.connection.options.sdpTransform && (o.sdp = this.connection.options.sdpTransform(o.sdp) || o.sdp), t.label = 3;
                                case 3:
                                    return t.trys.push([
                                        3,
                                        5,
                                        ,
                                        6
                                    ]), [
                                        4,
                                        e.setLocalDescription(o)
                                    ];
                                case 4:
                                    return t.sent(), r.default.log("Set localDescription:", o, "for:" + this.connection.peer), n.socket.send({
                                        type: c.ServerMessageType.Answer,
                                        payload: {
                                            sdp: o,
                                            type: this.connection.type,
                                            connectionId: this.connection.connectionId,
                                            browser: i.util.browser
                                        },
                                        dst: this.connection.peer
                                    }), [
                                        3,
                                        6
                                    ];
                                case 5:
                                    return a = t.sent(), n.emitError(c.PeerErrorType.WebRTC, a), r.default.log("Failed to setLocalDescription, ", a), [
                                        3,
                                        6
                                    ];
                                case 6:
                                    return [
                                        3,
                                        8
                                    ];
                                case 7:
                                    return s = t.sent(), n.emitError(c.PeerErrorType.WebRTC, s), r.default.log("Failed to create answer, ", s), [
                                        3,
                                        8
                                    ];
                                case 8:
                                    return [
                                        2
                                    ];
                            }
                        });
                    });
                }, o.prototype.handleSDP = function(e, o) {
                    return n(this, void 0, Promise, function() {
                        var n, i, a, s;
                        return t(this, function(t) {
                            switch(t.label){
                                case 0:
                                    o = new RTCSessionDescription(o), n = this.connection.peerConnection, i = this.connection.provider, r.default.log("Setting remote description", o), a = this, t.label = 1;
                                case 1:
                                    return t.trys.push([
                                        1,
                                        5,
                                        ,
                                        6
                                    ]), [
                                        4,
                                        n.setRemoteDescription(o)
                                    ];
                                case 2:
                                    return t.sent(), r.default.log("Set remoteDescription:" + e + " for:" + this.connection.peer), "OFFER" !== e ? [
                                        3,
                                        4
                                    ] : [
                                        4,
                                        a._makeAnswer()
                                    ];
                                case 3:
                                    t.sent(), t.label = 4;
                                case 4:
                                    return [
                                        3,
                                        6
                                    ];
                                case 5:
                                    return s = t.sent(), i.emitError(c.PeerErrorType.WebRTC, s), r.default.log("Failed to setRemoteDescription, ", s), [
                                        3,
                                        6
                                    ];
                                case 6:
                                    return [
                                        2
                                    ];
                            }
                        });
                    });
                }, o.prototype.handleCandidate = function(e) {
                    return n(this, void 0, Promise, function() {
                        var n, o, i, a, s, d;
                        return t(this, function(t) {
                            switch(t.label){
                                case 0:
                                    r.default.log("handleCandidate:", e), n = e.candidate, o = e.sdpMLineIndex, i = e.sdpMid, a = this.connection.peerConnection, s = this.connection.provider, t.label = 1;
                                case 1:
                                    return t.trys.push([
                                        1,
                                        3,
                                        ,
                                        4
                                    ]), [
                                        4,
                                        a.addIceCandidate(new RTCIceCandidate({
                                            sdpMid: i,
                                            sdpMLineIndex: o,
                                            candidate: n
                                        }))
                                    ];
                                case 2:
                                    return t.sent(), r.default.log("Added ICE candidate for:" + this.connection.peer), [
                                        3,
                                        4
                                    ];
                                case 3:
                                    return d = t.sent(), s.emitError(c.PeerErrorType.WebRTC, d), r.default.log("Failed to handleCandidate, ", d), [
                                        3,
                                        4
                                    ];
                                case 4:
                                    return [
                                        2
                                    ];
                            }
                        });
                    });
                }, o.prototype._addTracksToConnection = function(e, n) {
                    if (r.default.log("add tracks from stream " + e.id + " to peer connection"), !n.addTrack) return r.default.error("Your browser does't support RTCPeerConnection#addTrack. Ignored.");
                    e.getTracks().forEach(function(t) {
                        n.addTrack(t, e);
                    });
                }, o.prototype._addStreamToMediaConnection = function(e, n) {
                    r.default.log("add stream " + e.id + " to media connection " + n.connectionId), n.addStream(e);
                }, o;
            }();
            exports.Negotiator = a;
        },
        {
            "./util": "BHXf",
            "./logger": "WOs9",
            "./enums": "ZRYf"
        }
    ],
    "tQFK": [
        function(require1, module1, exports) {
            "use strict";
            var t = this && this.__extends || function() {
                var t = function(e, n) {
                    return (t = Object.setPrototypeOf || ({
                        __proto__: []
                    }) instanceof Array && function(t, e) {
                        t.__proto__ = e;
                    } || function(t, e) {
                        for(var n in e)Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
                    })(e, n);
                };
                return function(e, n) {
                    if ("function" != typeof n && null !== n) throw new TypeError("Class extends value " + String(n) + " is not a constructor or null");
                    function o() {
                        this.constructor = e;
                    }
                    t(e, n), e.prototype = null === n ? Object.create(n) : (o.prototype = n.prototype, new o);
                };
            }();
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.BaseConnection = void 0;
            var e = require1("eventemitter3"), n = function(e) {
                function n(t, n, o) {
                    var r = e.call(this) || this;
                    return r.peer = t, r.provider = n, r.options = o, r._open = !1, r.metadata = o.metadata, r;
                }
                return t(n, e), Object.defineProperty(n.prototype, "open", {
                    get: function() {
                        return this._open;
                    },
                    enumerable: !1,
                    configurable: !0
                }), n;
            }(e.EventEmitter);
            exports.BaseConnection = n;
        },
        {
            "eventemitter3": "Clm3"
        }
    ],
    "dbHP": [
        function(require1, module1, exports) {
            "use strict";
            var e = this && this.__extends || function() {
                var e = function(t, o) {
                    return (e = Object.setPrototypeOf || ({
                        __proto__: []
                    }) instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    } || function(e, t) {
                        for(var o in t)Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                    })(t, o);
                };
                return function(t, o) {
                    if ("function" != typeof o && null !== o) throw new TypeError("Class extends value " + String(o) + " is not a constructor or null");
                    function r() {
                        this.constructor = t;
                    }
                    e(t, o), t.prototype = null === o ? Object.create(o) : (r.prototype = o.prototype, new r);
                };
            }(), t = this && this.__assign || function() {
                return (t = Object.assign || function(e) {
                    for(var t, o = 1, r = arguments.length; o < r; o++)for(var n in t = arguments[o])Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
                    return e;
                }).apply(this, arguments);
            }, o = this && this.__values || function(e) {
                var t = "function" == typeof Symbol && Symbol.iterator, o = t && e[t], r = 0;
                if (o) return o.call(e);
                if (e && "number" == typeof e.length) return {
                    next: function() {
                        return e && r >= e.length && (e = void 0), {
                            value: e && e[r++],
                            done: !e
                        };
                    }
                };
                throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");
            }, r = this && this.__importDefault || function(e) {
                return e && e.__esModule ? e : {
                    default: e
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.MediaConnection = void 0;
            var n = require1("./util"), i = r(require1("./logger")), a = require1("./negotiator"), s = require1("./enums"), l = require1("./baseconnection"), c = function(r) {
                function l(e, t, o) {
                    var i = r.call(this, e, t, o) || this;
                    return i._localStream = i.options._stream, i.connectionId = i.options.connectionId || l.ID_PREFIX + n.util.randomToken(), i._negotiator = new a.Negotiator(i), i._localStream && i._negotiator.startConnection({
                        _stream: i._localStream,
                        originator: !0
                    }), i;
                }
                return e(l, r), Object.defineProperty(l.prototype, "type", {
                    get: function() {
                        return s.ConnectionType.Media;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(l.prototype, "localStream", {
                    get: function() {
                        return this._localStream;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(l.prototype, "remoteStream", {
                    get: function() {
                        return this._remoteStream;
                    },
                    enumerable: !1,
                    configurable: !0
                }), l.prototype.addStream = function(e) {
                    i.default.log("Receiving stream", e), this._remoteStream = e, r.prototype.emit.call(this, s.ConnectionEventType.Stream, e);
                }, l.prototype.handleMessage = function(e) {
                    var t = e.type, o = e.payload;
                    switch(e.type){
                        case s.ServerMessageType.Answer:
                            this._negotiator.handleSDP(t, o.sdp), this._open = !0;
                            break;
                        case s.ServerMessageType.Candidate:
                            this._negotiator.handleCandidate(o.candidate);
                            break;
                        default:
                            i.default.warn("Unrecognized message type:" + t + " from peer:" + this.peer);
                    }
                }, l.prototype.answer = function(e, r) {
                    var n, a;
                    if (void 0 === r && (r = {}), this._localStream) i.default.warn("Local stream already exists on this MediaConnection. Are you answering a call twice?");
                    else {
                        this._localStream = e, r && r.sdpTransform && (this.options.sdpTransform = r.sdpTransform), this._negotiator.startConnection(t(t({}, this.options._payload), {
                            _stream: e
                        }));
                        var s = this.provider._getMessages(this.connectionId);
                        try {
                            for(var l = o(s), c = l.next(); !c.done; c = l.next()){
                                var p = c.value;
                                this.handleMessage(p);
                            }
                        } catch (u) {
                            n = {
                                error: u
                            };
                        } finally{
                            try {
                                c && !c.done && (a = l.return) && a.call(l);
                            } finally{
                                if (n) throw n.error;
                            }
                        }
                        this._open = !0;
                    }
                }, l.prototype.close = function() {
                    this._negotiator && (this._negotiator.cleanup(), this._negotiator = null), this._localStream = null, this._remoteStream = null, this.provider && (this.provider._removeConnection(this), this.provider = null), this.options && this.options._stream && (this.options._stream = null), this.open && (this._open = !1, r.prototype.emit.call(this, s.ConnectionEventType.Close));
                }, l.ID_PREFIX = "mc_", l;
            }(l.BaseConnection);
            exports.MediaConnection = c;
        },
        {
            "./util": "BHXf",
            "./logger": "WOs9",
            "./negotiator": "HCdX",
            "./enums": "ZRYf",
            "./baseconnection": "tQFK"
        }
    ],
    "GGp6": [
        function(require1, module1, exports) {
            "use strict";
            var e = this && this.__extends || function() {
                var e = function(t, r) {
                    return (e = Object.setPrototypeOf || ({
                        __proto__: []
                    }) instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    } || function(e, t) {
                        for(var r in t)Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);
                    })(t, r);
                };
                return function(t, r) {
                    if ("function" != typeof r && null !== r) throw new TypeError("Class extends value " + String(r) + " is not a constructor or null");
                    function o() {
                        this.constructor = t;
                    }
                    e(t, r), t.prototype = null === r ? Object.create(r) : (o.prototype = r.prototype, new o);
                };
            }(), t = this && this.__importDefault || function(e) {
                return e && e.__esModule ? e : {
                    default: e
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.EncodingQueue = void 0;
            var r = require1("eventemitter3"), o = t(require1("./logger")), n = function(t) {
                function r() {
                    var e = t.call(this) || this;
                    return e.fileReader = new FileReader, e._queue = [], e._processing = !1, e.fileReader.onload = function(t) {
                        e._processing = !1, t.target && e.emit("done", t.target.result), e.doNextTask();
                    }, e.fileReader.onerror = function(t) {
                        o.default.error("EncodingQueue error:", t), e._processing = !1, e.destroy(), e.emit("error", t);
                    }, e;
                }
                return e(r, t), Object.defineProperty(r.prototype, "queue", {
                    get: function() {
                        return this._queue;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(r.prototype, "size", {
                    get: function() {
                        return this.queue.length;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(r.prototype, "processing", {
                    get: function() {
                        return this._processing;
                    },
                    enumerable: !1,
                    configurable: !0
                }), r.prototype.enque = function(e) {
                    this.queue.push(e), this.processing || this.doNextTask();
                }, r.prototype.destroy = function() {
                    this.fileReader.abort(), this._queue = [];
                }, r.prototype.doNextTask = function() {
                    0 !== this.size && (this.processing || (this._processing = !0, this.fileReader.readAsArrayBuffer(this.queue.shift())));
                }, r;
            }(r.EventEmitter);
            exports.EncodingQueue = n;
        },
        {
            "eventemitter3": "Clm3",
            "./logger": "WOs9"
        }
    ],
    "GBTQ": [
        function(require1, module1, exports) {
            "use strict";
            var e = this && this.__extends || function() {
                var e = function(t, n) {
                    return (e = Object.setPrototypeOf || ({
                        __proto__: []
                    }) instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    } || function(e, t) {
                        for(var n in t)Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
                    })(t, n);
                };
                return function(t, n) {
                    if ("function" != typeof n && null !== n) throw new TypeError("Class extends value " + String(n) + " is not a constructor or null");
                    function i() {
                        this.constructor = t;
                    }
                    e(t, n), t.prototype = null === n ? Object.create(n) : (i.prototype = n.prototype, new i);
                };
            }(), t = this && this.__values || function(e) {
                var t = "function" == typeof Symbol && Symbol.iterator, n = t && e[t], i = 0;
                if (n) return n.call(e);
                if (e && "number" == typeof e.length) return {
                    next: function() {
                        return e && i >= e.length && (e = void 0), {
                            value: e && e[i++],
                            done: !e
                        };
                    }
                };
                throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");
            }, n = this && this.__importDefault || function(e) {
                return e && e.__esModule ? e : {
                    default: e
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.DataConnection = void 0;
            var i = require1("./util"), o = n(require1("./logger")), r = require1("./negotiator"), a = require1("./enums"), s = require1("./baseconnection"), u = require1("./encodingQueue"), l = function(n) {
                function s(e, t, l) {
                    var f = n.call(this, e, t, l) || this;
                    return f.stringify = JSON.stringify, f.parse = JSON.parse, f._buffer = [], f._bufferSize = 0, f._buffering = !1, f._chunkedData = {}, f._encodingQueue = new u.EncodingQueue, f.connectionId = f.options.connectionId || s.ID_PREFIX + i.util.randomToken(), f.label = f.options.label || f.connectionId, f.serialization = f.options.serialization || a.SerializationType.Binary, f.reliable = !!f.options.reliable, f._encodingQueue.on("done", function(e) {
                        f._bufferedSend(e);
                    }), f._encodingQueue.on("error", function() {
                        o.default.error("DC#" + f.connectionId + ": Error occured in encoding from blob to arraybuffer, close DC"), f.close();
                    }), f._negotiator = new r.Negotiator(f), f._negotiator.startConnection(f.options._payload || {
                        originator: !0
                    }), f;
                }
                return e(s, n), Object.defineProperty(s.prototype, "type", {
                    get: function() {
                        return a.ConnectionType.Data;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(s.prototype, "dataChannel", {
                    get: function() {
                        return this._dc;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(s.prototype, "bufferSize", {
                    get: function() {
                        return this._bufferSize;
                    },
                    enumerable: !1,
                    configurable: !0
                }), s.prototype.initialize = function(e) {
                    this._dc = e, this._configureDataChannel();
                }, s.prototype._configureDataChannel = function() {
                    var e = this;
                    i.util.supports.binaryBlob && !i.util.supports.reliable || (this.dataChannel.binaryType = "arraybuffer"), this.dataChannel.onopen = function() {
                        o.default.log("DC#" + e.connectionId + " dc connection success"), e._open = !0, e.emit(a.ConnectionEventType.Open);
                    }, this.dataChannel.onmessage = function(t) {
                        o.default.log("DC#" + e.connectionId + " dc onmessage:", t.data), e._handleDataMessage(t);
                    }, this.dataChannel.onclose = function() {
                        o.default.log("DC#" + e.connectionId + " dc closed for:", e.peer), e.close();
                    };
                }, s.prototype._handleDataMessage = function(e) {
                    var t = this, o = e.data, r = o.constructor, s = o;
                    if (this.serialization === a.SerializationType.Binary || this.serialization === a.SerializationType.BinaryUTF8) {
                        if (r === Blob) return void i.util.blobToArrayBuffer(o, function(e) {
                            var n = i.util.unpack(e);
                            t.emit(a.ConnectionEventType.Data, n);
                        });
                        if (r === ArrayBuffer) s = i.util.unpack(o);
                        else if (r === String) {
                            var u = i.util.binaryStringToArrayBuffer(o);
                            s = i.util.unpack(u);
                        }
                    } else this.serialization === a.SerializationType.JSON && (s = this.parse(o));
                    s.__peerData ? this._handleChunk(s) : n.prototype.emit.call(this, a.ConnectionEventType.Data, s);
                }, s.prototype._handleChunk = function(e) {
                    var t = e.__peerData, n = this._chunkedData[t] || {
                        data: [],
                        count: 0,
                        total: e.total
                    };
                    if (n.data[e.n] = e.data, n.count++, this._chunkedData[t] = n, n.total === n.count) {
                        delete this._chunkedData[t];
                        var i = new Blob(n.data);
                        this._handleDataMessage({
                            data: i
                        });
                    }
                }, s.prototype.close = function() {
                    this._buffer = [], this._bufferSize = 0, this._chunkedData = {}, this._negotiator && (this._negotiator.cleanup(), this._negotiator = null), this.provider && (this.provider._removeConnection(this), this.provider = null), this.dataChannel && (this.dataChannel.onopen = null, this.dataChannel.onmessage = null, this.dataChannel.onclose = null, this._dc = null), this._encodingQueue && (this._encodingQueue.destroy(), this._encodingQueue.removeAllListeners(), this._encodingQueue = null), this.open && (this._open = !1, n.prototype.emit.call(this, a.ConnectionEventType.Close));
                }, s.prototype.send = function(e, t) {
                    if (this.open) {
                        if (this.serialization === a.SerializationType.JSON) this._bufferedSend(this.stringify(e));
                        else if (this.serialization === a.SerializationType.Binary || this.serialization === a.SerializationType.BinaryUTF8) {
                            var o = i.util.pack(e);
                            if (!t && o.size > i.util.chunkedMTU) return void this._sendChunks(o);
                            i.util.supports.binaryBlob ? this._bufferedSend(o) : this._encodingQueue.enque(o);
                        } else this._bufferedSend(e);
                    } else n.prototype.emit.call(this, a.ConnectionEventType.Error, new Error("Connection is not open. You should listen for the `open` event before sending messages."));
                }, s.prototype._bufferedSend = function(e) {
                    !this._buffering && this._trySend(e) || (this._buffer.push(e), this._bufferSize = this._buffer.length);
                }, s.prototype._trySend = function(e) {
                    var t = this;
                    if (!this.open) return !1;
                    if (this.dataChannel.bufferedAmount > s.MAX_BUFFERED_AMOUNT) return this._buffering = !0, setTimeout(function() {
                        t._buffering = !1, t._tryBuffer();
                    }, 50), !1;
                    try {
                        this.dataChannel.send(e);
                    } catch (n) {
                        return o.default.error("DC#:" + this.connectionId + " Error when sending:", n), this._buffering = !0, this.close(), !1;
                    }
                    return !0;
                }, s.prototype._tryBuffer = function() {
                    if (this.open && 0 !== this._buffer.length) {
                        var e = this._buffer[0];
                        this._trySend(e) && (this._buffer.shift(), this._bufferSize = this._buffer.length, this._tryBuffer());
                    }
                }, s.prototype._sendChunks = function(e) {
                    var n, r, a = i.util.chunk(e);
                    o.default.log("DC#" + this.connectionId + " Try to send " + a.length + " chunks...");
                    try {
                        for(var s = t(a), u = s.next(); !u.done; u = s.next()){
                            var l = u.value;
                            this.send(l, !0);
                        }
                    } catch (f) {
                        n = {
                            error: f
                        };
                    } finally{
                        try {
                            u && !u.done && (r = s.return) && r.call(s);
                        } finally{
                            if (n) throw n.error;
                        }
                    }
                }, s.prototype.handleMessage = function(e) {
                    var t = e.payload;
                    switch(e.type){
                        case a.ServerMessageType.Answer:
                            this._negotiator.handleSDP(e.type, t.sdp);
                            break;
                        case a.ServerMessageType.Candidate:
                            this._negotiator.handleCandidate(t.candidate);
                            break;
                        default:
                            o.default.warn("Unrecognized message type:", e.type, "from peer:", this.peer);
                    }
                }, s.ID_PREFIX = "dc_", s.MAX_BUFFERED_AMOUNT = 8388608, s;
            }(s.BaseConnection);
            exports.DataConnection = l;
        },
        {
            "./util": "BHXf",
            "./logger": "WOs9",
            "./negotiator": "HCdX",
            "./enums": "ZRYf",
            "./baseconnection": "tQFK",
            "./encodingQueue": "GGp6"
        }
    ],
    "in7L": [
        function(require1, module1, exports) {
            "use strict";
            var t = this && this.__awaiter || function(t, e, r, o) {
                return new (r || (r = Promise))(function(n, s) {
                    function i(t) {
                        try {
                            a(o.next(t));
                        } catch (e) {
                            s(e);
                        }
                    }
                    function u(t) {
                        try {
                            a(o.throw(t));
                        } catch (e) {
                            s(e);
                        }
                    }
                    function a(t) {
                        var e;
                        t.done ? n(t.value) : (e = t.value, e instanceof r ? e : new r(function(t) {
                            t(e);
                        })).then(i, u);
                    }
                    a((o = o.apply(t, e || [])).next());
                });
            }, e = this && this.__generator || function(t, e) {
                var r, o, n, s, i = {
                    label: 0,
                    sent: function() {
                        if (1 & n[0]) throw n[1];
                        return n[1];
                    },
                    trys: [],
                    ops: []
                };
                return s = {
                    next: u(0),
                    throw: u(1),
                    return: u(2)
                }, "function" == typeof Symbol && (s[Symbol.iterator] = function() {
                    return this;
                }), s;
                function u(s) {
                    return function(u) {
                        return function(s) {
                            if (r) throw new TypeError("Generator is already executing.");
                            for(; i;)try {
                                if (r = 1, o && (n = 2 & s[0] ? o.return : s[0] ? o.throw || ((n = o.return) && n.call(o), 0) : o.next) && !(n = n.call(o, s[1])).done) return n;
                                switch(o = 0, n && (s = [
                                    2 & s[0],
                                    n.value
                                ]), s[0]){
                                    case 0:
                                    case 1:
                                        n = s;
                                        break;
                                    case 4:
                                        return i.label++, {
                                            value: s[1],
                                            done: !1
                                        };
                                    case 5:
                                        i.label++, o = s[1], s = [
                                            0
                                        ];
                                        continue;
                                    case 7:
                                        s = i.ops.pop(), i.trys.pop();
                                        continue;
                                    default:
                                        if (!(n = (n = i.trys).length > 0 && n[n.length - 1]) && (6 === s[0] || 2 === s[0])) {
                                            i = 0;
                                            continue;
                                        }
                                        if (3 === s[0] && (!n || s[1] > n[0] && s[1] < n[3])) {
                                            i.label = s[1];
                                            break;
                                        }
                                        if (6 === s[0] && i.label < n[1]) {
                                            i.label = n[1], n = s;
                                            break;
                                        }
                                        if (n && i.label < n[2]) {
                                            i.label = n[2], i.ops.push(s);
                                            break;
                                        }
                                        n[2] && i.ops.pop(), i.trys.pop();
                                        continue;
                                }
                                s = e.call(t, i);
                            } catch (u) {
                                s = [
                                    6,
                                    u
                                ], o = 0;
                            } finally{
                                r = n = 0;
                            }
                            if (5 & s[0]) throw s[1];
                            return {
                                value: s[0] ? s[1] : void 0,
                                done: !0
                            };
                        }([
                            s,
                            u
                        ]);
                    };
                }
            }, r = this && this.__importDefault || function(t) {
                return t && t.__esModule ? t : {
                    default: t
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.API = void 0;
            var o = require1("./util"), n = r(require1("./logger")), s = function() {
                function r(t) {
                    this._options = t;
                }
                return r.prototype._buildUrl = function(t) {
                    var e = (this._options.secure ? "https://" : "http://") + this._options.host + ":" + this._options.port + this._options.path + this._options.key + "/" + t;
                    return e += "?ts=" + (new Date).getTime() + Math.random();
                }, r.prototype.retrieveId = function() {
                    return t(this, void 0, Promise, function() {
                        var t, r, s, i;
                        return e(this, function(e) {
                            switch(e.label){
                                case 0:
                                    t = this._buildUrl("id"), e.label = 1;
                                case 1:
                                    return e.trys.push([
                                        1,
                                        3,
                                        ,
                                        4
                                    ]), [
                                        4,
                                        fetch(t)
                                    ];
                                case 2:
                                    if (200 !== (r = e.sent()).status) throw new Error("Error. Status:" + r.status);
                                    return [
                                        2,
                                        r.text()
                                    ];
                                case 3:
                                    throw s = e.sent(), n.default.error("Error retrieving ID", s), i = "", "/" === this._options.path && this._options.host !== o.util.CLOUD_HOST && (i = " If you passed in a `path` to your self-hosted PeerServer, you'll also need to pass in that same path when creating a new Peer."), new Error("Could not get an ID from the server." + i);
                                case 4:
                                    return [
                                        2
                                    ];
                            }
                        });
                    });
                }, r.prototype.listAllPeers = function() {
                    return t(this, void 0, Promise, function() {
                        var t, r, s, i;
                        return e(this, function(e) {
                            switch(e.label){
                                case 0:
                                    t = this._buildUrl("peers"), e.label = 1;
                                case 1:
                                    return e.trys.push([
                                        1,
                                        3,
                                        ,
                                        4
                                    ]), [
                                        4,
                                        fetch(t)
                                    ];
                                case 2:
                                    if (200 !== (r = e.sent()).status) {
                                        if (401 === r.status) throw s = "", s = this._options.host === o.util.CLOUD_HOST ? "It looks like you're using the cloud server. You can email team@peerjs.com to enable peer listing for your API key." : "You need to enable `allow_discovery` on your self-hosted PeerServer to use this feature.", new Error("It doesn't look like you have permission to list peers IDs. " + s);
                                        throw new Error("Error. Status:" + r.status);
                                    }
                                    return [
                                        2,
                                        r.json()
                                    ];
                                case 3:
                                    throw i = e.sent(), n.default.error("Error retrieving list peers", i), new Error("Could not get list peers from the server." + i);
                                case 4:
                                    return [
                                        2
                                    ];
                            }
                        });
                    });
                }, r;
            }();
            exports.API = s;
        },
        {
            "./util": "BHXf",
            "./logger": "WOs9"
        }
    ],
    "Hxpd": [
        function(require1, module1, exports) {
            "use strict";
            var e = this && this.__extends || function() {
                var e = function(t, n) {
                    return (e = Object.setPrototypeOf || ({
                        __proto__: []
                    }) instanceof Array && function(e, t) {
                        e.__proto__ = t;
                    } || function(e, t) {
                        for(var n in t)Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
                    })(t, n);
                };
                return function(t, n) {
                    if ("function" != typeof n && null !== n) throw new TypeError("Class extends value " + String(n) + " is not a constructor or null");
                    function o() {
                        this.constructor = t;
                    }
                    e(t, n), t.prototype = null === n ? Object.create(n) : (o.prototype = n.prototype, new o);
                };
            }(), t = this && this.__assign || function() {
                return (t = Object.assign || function(e) {
                    for(var t, n = 1, o = arguments.length; n < o; n++)for(var r in t = arguments[n])Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);
                    return e;
                }).apply(this, arguments);
            }, n = this && this.__values || function(e) {
                var t = "function" == typeof Symbol && Symbol.iterator, n = t && e[t], o = 0;
                if (n) return n.call(e);
                if (e && "number" == typeof e.length) return {
                    next: function() {
                        return e && o >= e.length && (e = void 0), {
                            value: e && e[o++],
                            done: !e
                        };
                    }
                };
                throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");
            }, o = this && this.__read || function(e, t) {
                var n = "function" == typeof Symbol && e[Symbol.iterator];
                if (!n) return e;
                var o, r, i = n.call(e), s = [];
                try {
                    for(; (void 0 === t || t-- > 0) && !(o = i.next()).done;)s.push(o.value);
                } catch (a) {
                    r = {
                        error: a
                    };
                } finally{
                    try {
                        o && !o.done && (n = i.return) && n.call(i);
                    } finally{
                        if (r) throw r.error;
                    }
                }
                return s;
            }, r = this && this.__importDefault || function(e) {
                return e && e.__esModule ? e : {
                    default: e
                };
            };
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.Peer = void 0;
            var i = require1("eventemitter3"), s = require1("./util"), a = r(require1("./logger")), c = require1("./socket"), l = require1("./mediaconnection"), u = require1("./dataconnection"), d = require1("./enums"), p = require1("./api"), h = function() {
                return function() {};
            }(), f = function(r) {
                function i(e, n) {
                    var o, c = r.call(this) || this;
                    return c._id = null, c._lastServerId = null, c._destroyed = !1, c._disconnected = !1, c._open = !1, c._connections = new Map, c._lostMessages = new Map, e && e.constructor == Object ? n = e : e && (o = e.toString()), n = t({
                        debug: 0,
                        host: s.util.CLOUD_HOST,
                        port: s.util.CLOUD_PORT,
                        path: "/",
                        key: i.DEFAULT_KEY,
                        token: s.util.randomToken(),
                        config: s.util.defaultConfig
                    }, n), c._options = n, "/" === c._options.host && (c._options.host = window.location.hostname), c._options.path && ("/" !== c._options.path[0] && (c._options.path = "/" + c._options.path), "/" !== c._options.path[c._options.path.length - 1] && (c._options.path += "/")), void 0 === c._options.secure && c._options.host !== s.util.CLOUD_HOST ? c._options.secure = s.util.isSecure() : c._options.host == s.util.CLOUD_HOST && (c._options.secure = !0), c._options.logFunction && a.default.setLogFunction(c._options.logFunction), a.default.logLevel = c._options.debug || 0, c._api = new p.API(n), c._socket = c._createServerConnection(), s.util.supports.audioVideo || s.util.supports.data ? o && !s.util.validateId(o) ? (c._delayedAbort(d.PeerErrorType.InvalidID, 'ID "' + o + '" is invalid'), c) : (console.log("TOTOTOTOTOTOTOTO"), o ? c._initialize(o) : c._api.retrieveId().then(function(e) {
                        return c._initialize(e);
                    }).catch(function(e) {
                        return c._abort(d.PeerErrorType.ServerError, e);
                    }), c) : (c._delayedAbort(d.PeerErrorType.BrowserIncompatible, "The current browser does not support WebRTC"), c);
                }
                return e(i, r), Object.defineProperty(i.prototype, "id", {
                    get: function() {
                        return this._id;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(i.prototype, "options", {
                    get: function() {
                        return this._options;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(i.prototype, "open", {
                    get: function() {
                        return this._open;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(i.prototype, "socket", {
                    get: function() {
                        return this._socket;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(i.prototype, "connections", {
                    get: function() {
                        var e, t, r = Object.create(null);
                        try {
                            for(var i = n(this._connections), s = i.next(); !s.done; s = i.next()){
                                var a = o(s.value, 2), c = a[0], l = a[1];
                                r[c] = l;
                            }
                        } catch (u) {
                            e = {
                                error: u
                            };
                        } finally{
                            try {
                                s && !s.done && (t = i.return) && t.call(i);
                            } finally{
                                if (e) throw e.error;
                            }
                        }
                        return r;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(i.prototype, "destroyed", {
                    get: function() {
                        return this._destroyed;
                    },
                    enumerable: !1,
                    configurable: !0
                }), Object.defineProperty(i.prototype, "disconnected", {
                    get: function() {
                        return this._disconnected;
                    },
                    enumerable: !1,
                    configurable: !0
                }), i.prototype._createServerConnection = function() {
                    var e = this, t = new c.Socket(this._options.secure, this._options.host, this._options.port, this._options.path, this._options.key, this._options.pingInterval);
                    return t.on(d.SocketEventType.Message, function(t) {
                        e._handleMessage(t);
                    }), t.on(d.SocketEventType.Error, function(t) {
                        e._abort(d.PeerErrorType.SocketError, t);
                    }), t.on(d.SocketEventType.Disconnected, function() {
                        e.disconnected || (e.emitError(d.PeerErrorType.Network, "Lost connection to server."), e.disconnect());
                    }), t.on(d.SocketEventType.Close, function() {
                        e.disconnected || e._abort(d.PeerErrorType.SocketClosed, "Underlying socket is already closed.");
                    }), t;
                }, i.prototype._initialize = function(e) {
                    this._id = e, this.socket.start(e, this._options.token);
                }, i.prototype._handleMessage = function(e) {
                    var t, o, r = e.type, i = e.payload, s = e.src;
                    switch(r){
                        case d.ServerMessageType.Open:
                            this._lastServerId = this.id, this._open = !0, this.emit(d.PeerEventType.Open, this.id);
                            break;
                        case d.ServerMessageType.Error:
                            this._abort(d.PeerErrorType.ServerError, i.msg);
                            break;
                        case d.ServerMessageType.IdTaken:
                            this._abort(d.PeerErrorType.UnavailableID, 'ID "' + this.id + '" is taken');
                            break;
                        case d.ServerMessageType.InvalidKey:
                            this._abort(d.PeerErrorType.InvalidKey, 'API KEY "' + this._options.key + '" is invalid');
                            break;
                        case d.ServerMessageType.Leave:
                            a.default.log("Received leave message from " + s), this._cleanupPeer(s), this._connections.delete(s);
                            break;
                        case d.ServerMessageType.Expire:
                            this.emitError(d.PeerErrorType.PeerUnavailable, "Could not connect to peer " + s);
                            break;
                        case d.ServerMessageType.Offer:
                            var c = i.connectionId;
                            if ((_ = this.getConnection(s, c)) && (_.close(), a.default.warn("Offer received for existing Connection ID:" + c)), i.type === d.ConnectionType.Media) _ = new l.MediaConnection(s, this, {
                                connectionId: c,
                                _payload: i,
                                metadata: i.metadata
                            }), this._addConnection(s, _), this.emit(d.PeerEventType.Call, _);
                            else {
                                if (i.type !== d.ConnectionType.Data) return void a.default.warn("Received malformed connection type:" + i.type);
                                _ = new u.DataConnection(s, this, {
                                    connectionId: c,
                                    _payload: i,
                                    metadata: i.metadata,
                                    label: i.label,
                                    serialization: i.serialization,
                                    reliable: i.reliable
                                }), this._addConnection(s, _), this.emit(d.PeerEventType.Connection, _);
                            }
                            var p = this._getMessages(c);
                            try {
                                for(var h = n(p), f = h.next(); !f.done; f = h.next()){
                                    var y = f.value;
                                    _.handleMessage(y);
                                }
                            } catch (v) {
                                t = {
                                    error: v
                                };
                            } finally{
                                try {
                                    f && !f.done && (o = h.return) && o.call(h);
                                } finally{
                                    if (t) throw t.error;
                                }
                            }
                            break;
                        case d.ServerMessageType.ApplicationMessage:
                            this.emit(d.PeerEventType.ApplicationMessage, i);
                            break;
                        default:
                            if (!i) return void a.default.warn("You received a malformed message from " + s + " of type " + r);
                            var _;
                            c = i.connectionId;
                            (_ = this.getConnection(s, c)) && _.peerConnection ? _.handleMessage(e) : c ? this._storeMessage(c, e) : a.default.warn("You received an unrecognized message:", e);
                    }
                }, i.prototype._storeMessage = function(e, t) {
                    this._lostMessages.has(e) || this._lostMessages.set(e, []), this._lostMessages.get(e).push(t);
                }, i.prototype._getMessages = function(e) {
                    var t = this._lostMessages.get(e);
                    return t ? (this._lostMessages.delete(e), t) : [];
                }, i.prototype.connect = function(e, t) {
                    if (void 0 === t && (t = {}), this.disconnected) return a.default.warn("You cannot connect to a new Peer because you called .disconnect() on this Peer and ended your connection with the server. You can create a new Peer to reconnect, or call reconnect on this peer if you believe its ID to still be available."), void this.emitError(d.PeerErrorType.Disconnected, "Cannot connect to new Peer after disconnecting from server.");
                    var n = new u.DataConnection(e, this, t);
                    return this._addConnection(e, n), n;
                }, i.prototype.call = function(e, t, n) {
                    if (void 0 === n && (n = {}), this.disconnected) return a.default.warn("You cannot connect to a new Peer because you called .disconnect() on this Peer and ended your connection with the server. You can create a new Peer to reconnect."), void this.emitError(d.PeerErrorType.Disconnected, "Cannot connect to new Peer after disconnecting from server.");
                    if (t) {
                        n._stream = t;
                        var o = new l.MediaConnection(e, this, n);
                        return this._addConnection(e, o), o;
                    }
                    a.default.error("To call a peer, you must provide a stream from your browser's `getUserMedia`.");
                }, i.prototype._addConnection = function(e, t) {
                    a.default.log("add connection " + t.type + ":" + t.connectionId + " to peerId:" + e), this._connections.has(e) || this._connections.set(e, []), this._connections.get(e).push(t);
                }, i.prototype._removeConnection = function(e) {
                    var t = this._connections.get(e.peer);
                    if (t) {
                        var n = t.indexOf(e);
                        -1 !== n && t.splice(n, 1);
                    }
                    this._lostMessages.delete(e.connectionId);
                }, i.prototype.getConnection = function(e, t) {
                    var o, r, i = this._connections.get(e);
                    if (!i) return null;
                    try {
                        for(var s = n(i), a = s.next(); !a.done; a = s.next()){
                            var c = a.value;
                            if (c.connectionId === t) return c;
                        }
                    } catch (l) {
                        o = {
                            error: l
                        };
                    } finally{
                        try {
                            a && !a.done && (r = s.return) && r.call(s);
                        } finally{
                            if (o) throw o.error;
                        }
                    }
                    return null;
                }, i.prototype._delayedAbort = function(e, t) {
                    var n = this;
                    setTimeout(function() {
                        n._abort(e, t);
                    }, 0);
                }, i.prototype._abort = function(e, t) {
                    a.default.error("Aborting!"), this.emitError(e, t), this._lastServerId ? this.disconnect() : this.destroy();
                }, i.prototype.emitError = function(e, t) {
                    var n;
                    a.default.error("Error:", t), (n = "string" == typeof t ? new Error(t) : t).type = e, this.emit(d.PeerEventType.Error, n);
                }, i.prototype.destroy = function() {
                    this.destroyed || (a.default.log("Destroy peer with ID:" + this.id), this.disconnect(), this._cleanup(), this._destroyed = !0, this.emit(d.PeerEventType.Close));
                }, i.prototype._cleanup = function() {
                    var e, t;
                    try {
                        for(var o = n(this._connections.keys()), r = o.next(); !r.done; r = o.next()){
                            var i = r.value;
                            this._cleanupPeer(i), this._connections.delete(i);
                        }
                    } catch (s) {
                        e = {
                            error: s
                        };
                    } finally{
                        try {
                            r && !r.done && (t = o.return) && t.call(o);
                        } finally{
                            if (e) throw e.error;
                        }
                    }
                    this.socket.removeAllListeners();
                }, i.prototype._cleanupPeer = function(e) {
                    var t, o, r = this._connections.get(e);
                    if (r) try {
                        for(var i = n(r), s = i.next(); !s.done; s = i.next())s.value.close();
                    } catch (a) {
                        t = {
                            error: a
                        };
                    } finally{
                        try {
                            s && !s.done && (o = i.return) && o.call(i);
                        } finally{
                            if (t) throw t.error;
                        }
                    }
                }, i.prototype.disconnect = function() {
                    if (!this.disconnected) {
                        var e = this.id;
                        a.default.log("Disconnect peer with ID:" + e), this._disconnected = !0, this._open = !1, this.socket.close(), this._lastServerId = e, this._id = null, this.emit(d.PeerEventType.Disconnected, e);
                    }
                }, i.prototype.reconnect = function() {
                    if (this.disconnected && !this.destroyed) a.default.log("Attempting reconnection to server with ID " + this._lastServerId), this._disconnected = !1, this._initialize(this._lastServerId);
                    else {
                        if (this.destroyed) throw new Error("This peer cannot reconnect to the server. It has already been destroyed.");
                        if (this.disconnected || this.open) throw new Error("Peer " + this.id + " cannot reconnect because it is not disconnected from the server!");
                        a.default.error("In a hurry? We're still trying to make the initial connection!");
                    }
                }, i.prototype.listAllPeers = function(e) {
                    var t = this;
                    void 0 === e && (e = function(e) {}), this._api.listAllPeers().then(function(t) {
                        return e(t);
                    }).catch(function(e) {
                        return t._abort(d.PeerErrorType.ServerError, e);
                    });
                }, i.DEFAULT_KEY = "peerjs", i;
            }(i.EventEmitter);
            exports.Peer = f;
        },
        {
            "eventemitter3": "Clm3",
            "./util": "BHXf",
            "./logger": "WOs9",
            "./socket": "wJlv",
            "./mediaconnection": "dbHP",
            "./dataconnection": "GBTQ",
            "./enums": "ZRYf",
            "./api": "in7L"
        }
    ],
    "iTK6": [
        function(require1, module1, exports) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {
                value: !0
            }), exports.peerjs = void 0;
            var e = require1("./util"), r = require1("./peer");
            exports.peerjs = {
                Peer: r.Peer,
                util: e.util
            }, exports.default = r.Peer, window.peerjs = exports.peerjs, window.Peer = r.Peer;
        },
        {
            "./util": "BHXf",
            "./peer": "Hxpd"
        }
    ]
}, {}, [
    "iTK6"
], null) //# sourceMappingURL=/peerjs.min.js.map
;


function $eba903476496ad08$export$b16ebc549674fac6(config) {
    const peer = new (0, (/*@__PURE__*/$parcel$interopDefault($a52c7a17f48f0c79$exports)))({
        host: config.peerServerHostname,
        port: config.peerServerPort
    });
    peer.on("connection", (connection)=>{
        console.log("connection");
        console.log(connection);
        connection.on("data", (data)=>{
            console.log("data");
            console.log(connection);
            console.log(data);
        });
        connection.on("open", ()=>{
            console.log("open received");
            console.log(connection);
        });
        connection.on("close", function() {
            console.log("connection closed");
        });
    });
    peer.on("disconnected", function() {
        console.log("disconnected");
    });
    peer.on("close", function() {
        console.log("close");
    });
    peer.on("error", function(err) {
        console.error("error");
        console.error(err);
    });
    return peer;
}



class $f9c15133727769eb$export$e1c26fff9d765d09 extends (0, $b018198082cf097a$exports.Terminal) {
    constructor(options){
        super(options);
        this.history = [];
    }
    reprompt() {
        return;
    // this.clear();
    // super.write('\x1b7');// This save the state of the cursor
    // const reversed = this.history.slice().reverse();
    // console.log(reversed);
    // for (let item of reversed) {
    //   console.log(item);
    //   super.write(item);
    // }
    // super.write('\x1b8');// This restore the state of the cursor
    }
    write(data, callback) {
        // Called for each elements (each prompt of a letter)
        // console.log("writing " + data);
        this.history.push(data);
        super.write(data, callback);
    }
    writeNoHistory(data, callback) {
        // console.log("writenohistory " + data);
        super.write(data, callback);
    }
}


class $13dba5279abfefc4$export$5395e6a29292206e {
    constructor(client){
        this.client = client;
    }
    async joinRoom(roomId, peerId) {
        const resp = await this.client.joinRoom(roomId, peerId);
        console.log("resp join room " + resp);
        const room = await this.client.getRoom(roomId);
        this.currentRoom = room;
        return room;
    }
    async leaveRoom(roomId, peerId) {
        if (this.currentRoom === null) console.warn("Attempting to leave while not being in the room"); // could be there it the server return an error though
        const resp = await this.client.leaveRoom(roomId, peerId);
        console.log("resp leave room " + resp);
        this.currentRoom = null;
    }
    // TODO : create a manager which contains the peerId maybe
    async leaveCurrentRoom(peerId) {
        return this.leaveRoom(this.currentRoom?.roomId, peerId);
    }
    async createRoom(room, peerId) {
        // TODO : checkout if server can make the user join the room automatically
        console.log("creating room");
        console.log(room);
        console.log(peerId);
        const roomId = await this.client.createRoom(room);
        console.log("roomId " + roomId);
        const joinedRoom = await this.joinRoom(roomId, peerId);
        return joinedRoom;
    }
    async getRooms() {
        return this.client.getRooms();
    }
}


let $0033a60ebe78f1d0$export$3679fc5ae8d740bd;
(function(WordGameMessageType) {
    WordGameMessageType["StartingGame"] = "starting-game";
    WordGameMessageType["LettersToGuess"] = "letters-to-guess";
    WordGameMessageType["WordGuess"] = "word-guess";
    WordGameMessageType["IncorrectGuess"] = "incorrect-guess";
    WordGameMessageType["CorrectGuess"] = "correct-guess";
    WordGameMessageType["GuessTimeout"] = "guess-timeout";
    WordGameMessageType["PlayerWon"] = "player-won";
    WordGameMessageType["WordExample"] = "word-example";
    WordGameMessageType["UpdateSettings"] = "update-settings";
})($0033a60ebe78f1d0$export$3679fc5ae8d740bd || ($0033a60ebe78f1d0$export$3679fc5ae8d740bd = {}));
function $0033a60ebe78f1d0$export$a57b97c52307e22b(wordGameMessageType) {
    if (/*roomMessageType === RoomMessageType.Message ||*/ /*roomMessageType === WordGameMessageType.UpdatePlayerName ||
      roomMessageType === WordGameMessageType.WordExample*/ wordGameMessageType === $0033a60ebe78f1d0$export$3679fc5ae8d740bd.WordGuess) return false;
    return true;
}
 // FIXME : what to do with these
 // I think they are not useful
 // And this introduce differences between the fork and PeerJS, if I am not mistaken
 // export enum ApplicationMessageType {
 //   SetRoomOwner = 'SET-ROOM-OWNER'
 // }
 // // FIXME : what to do with these
 // export interface ApplicationMessage {
 //   applicationMessageType: ApplicationMessageType
 //   message: any
 // }
 // Used to emit events
 /*
export class Message {
  peer: string
  message: string
  debug: string

  constructor (peer: string, message: string, debug: string) {
    this.peer = peer
    this.message = message
    this.debug = debug
  }

  get toString (): string {
    let value = ''
    if (this.debug != null && this.debug !== '') {
      value += this.debug
    } else {
      value += this.peer
    }

    value += ': '

    value += this.message

    return value
  }
}
*/ 


function $4db5975e547232e5$export$805e70ebe548c2b2(rng, num) {
    var out = [];
    for(var idx = 0; idx != num; ++idx)out.push(rng.unsafeNext());
    return out;
}
function $4db5975e547232e5$export$a0791a7dbccaccbc(rng, num) {
    var nextRng = rng.clone();
    var out = $4db5975e547232e5$export$805e70ebe548c2b2(nextRng, num);
    return [
        out,
        nextRng
    ];
}
function $4db5975e547232e5$export$8b65a097d170e82b(rng, num) {
    for(var idx = 0; idx != num; ++idx)rng.unsafeNext();
}
function $4db5975e547232e5$export$1ff6516dcb15f8e9(rng, num) {
    var nextRng = rng.clone();
    $4db5975e547232e5$export$8b65a097d170e82b(nextRng, num);
    return nextRng;
}


var $4460df35b9268552$var$MULTIPLIER = 0x000343fd;
var $4460df35b9268552$var$INCREMENT = 0x00269ec3;
var $4460df35b9268552$var$MASK = 0xffffffff;
var $4460df35b9268552$var$MASK_2 = -2147483648 - 1;
var $4460df35b9268552$var$computeNextSeed = function(seed) {
    return seed * $4460df35b9268552$var$MULTIPLIER + $4460df35b9268552$var$INCREMENT & $4460df35b9268552$var$MASK;
};
var $4460df35b9268552$var$computeValueFromNextSeed = function(nextseed) {
    return (nextseed & $4460df35b9268552$var$MASK_2) >> 16;
};
var $4460df35b9268552$var$LinearCongruential32 = function() {
    function LinearCongruential32(seed) {
        this.seed = seed;
    }
    LinearCongruential32.prototype.clone = function() {
        return new LinearCongruential32(this.seed);
    };
    LinearCongruential32.prototype.next = function() {
        var nextRng = new LinearCongruential32(this.seed);
        var out = nextRng.unsafeNext();
        return [
            out,
            nextRng
        ];
    };
    LinearCongruential32.prototype.unsafeNext = function() {
        var s1 = $4460df35b9268552$var$computeNextSeed(this.seed);
        var v1 = $4460df35b9268552$var$computeValueFromNextSeed(s1);
        var s2 = $4460df35b9268552$var$computeNextSeed(s1);
        var v2 = $4460df35b9268552$var$computeValueFromNextSeed(s2);
        this.seed = $4460df35b9268552$var$computeNextSeed(s2);
        var v3 = $4460df35b9268552$var$computeValueFromNextSeed(this.seed);
        var vnext = v3 + (v2 + (v1 << 15) << 15);
        return vnext | 0;
    };
    return LinearCongruential32;
}();
var $4460df35b9268552$export$4478c30bf2c0818b = function(seed) {
    return new $4460df35b9268552$var$LinearCongruential32(seed);
};


var $8cb0244fd4ca3b26$var$MersenneTwister = function() {
    function MersenneTwister(states, index) {
        this.states = states;
        this.index = index;
    }
    MersenneTwister.twist = function(prev) {
        var mt = prev.slice();
        for(var idx = 0; idx !== MersenneTwister.N - MersenneTwister.M; ++idx){
            var y_1 = (mt[idx] & MersenneTwister.MASK_UPPER) + (mt[idx + 1] & MersenneTwister.MASK_LOWER);
            mt[idx] = mt[idx + MersenneTwister.M] ^ y_1 >>> 1 ^ -(y_1 & 1) & MersenneTwister.A;
        }
        for(var idx = MersenneTwister.N - MersenneTwister.M; idx !== MersenneTwister.N - 1; ++idx){
            var y_2 = (mt[idx] & MersenneTwister.MASK_UPPER) + (mt[idx + 1] & MersenneTwister.MASK_LOWER);
            mt[idx] = mt[idx + MersenneTwister.M - MersenneTwister.N] ^ y_2 >>> 1 ^ -(y_2 & 1) & MersenneTwister.A;
        }
        var y = (mt[MersenneTwister.N - 1] & MersenneTwister.MASK_UPPER) + (mt[0] & MersenneTwister.MASK_LOWER);
        mt[MersenneTwister.N - 1] = mt[MersenneTwister.M - 1] ^ y >>> 1 ^ -(y & 1) & MersenneTwister.A;
        return mt;
    };
    MersenneTwister.seeded = function(seed) {
        var out = Array(MersenneTwister.N);
        out[0] = seed;
        for(var idx = 1; idx !== MersenneTwister.N; ++idx){
            var xored = out[idx - 1] ^ out[idx - 1] >>> 30;
            out[idx] = Math.imul(MersenneTwister.F, xored) + idx | 0;
        }
        return out;
    };
    MersenneTwister.from = function(seed) {
        return new MersenneTwister(MersenneTwister.twist(MersenneTwister.seeded(seed)), 0);
    };
    MersenneTwister.prototype.clone = function() {
        return new MersenneTwister(this.states, this.index);
    };
    MersenneTwister.prototype.next = function() {
        var nextRng = new MersenneTwister(this.states, this.index);
        var out = nextRng.unsafeNext();
        return [
            out,
            nextRng
        ];
    };
    MersenneTwister.prototype.unsafeNext = function() {
        var y = this.states[this.index];
        y ^= this.states[this.index] >>> MersenneTwister.U;
        y ^= y << MersenneTwister.S & MersenneTwister.B;
        y ^= y << MersenneTwister.T & MersenneTwister.C;
        y ^= y >>> MersenneTwister.L;
        if (++this.index >= MersenneTwister.N) {
            this.states = MersenneTwister.twist(this.states);
            this.index = 0;
        }
        return y;
    };
    MersenneTwister.N = 624;
    MersenneTwister.M = 397;
    MersenneTwister.R = 31;
    MersenneTwister.A = 0x9908b0df;
    MersenneTwister.F = 1812433253;
    MersenneTwister.U = 11;
    MersenneTwister.S = 7;
    MersenneTwister.B = 0x9d2c5680;
    MersenneTwister.T = 15;
    MersenneTwister.C = 0xefc60000;
    MersenneTwister.L = 18;
    MersenneTwister.MASK_LOWER = Math.pow(2, MersenneTwister.R) - 1;
    MersenneTwister.MASK_UPPER = Math.pow(2, MersenneTwister.R);
    return MersenneTwister;
}();
function $8cb0244fd4ca3b26$export$2e2bcd8739ae039(seed) {
    return $8cb0244fd4ca3b26$var$MersenneTwister.from(seed);
}


var $b15c62df6024114b$var$XorShift128Plus = function() {
    function XorShift128Plus(s01, s00, s11, s10) {
        this.s01 = s01;
        this.s00 = s00;
        this.s11 = s11;
        this.s10 = s10;
    }
    XorShift128Plus.prototype.clone = function() {
        return new XorShift128Plus(this.s01, this.s00, this.s11, this.s10);
    };
    XorShift128Plus.prototype.next = function() {
        var nextRng = new XorShift128Plus(this.s01, this.s00, this.s11, this.s10);
        var out = nextRng.unsafeNext();
        return [
            out,
            nextRng
        ];
    };
    XorShift128Plus.prototype.unsafeNext = function() {
        var a0 = this.s00 ^ this.s00 << 23;
        var a1 = this.s01 ^ (this.s01 << 23 | this.s00 >>> 9);
        var b0 = a0 ^ this.s10 ^ (a0 >>> 18 | a1 << 14) ^ (this.s10 >>> 5 | this.s11 << 27);
        var b1 = a1 ^ this.s11 ^ a1 >>> 18 ^ this.s11 >>> 5;
        var out = this.s00 + this.s10 | 0;
        this.s01 = this.s11;
        this.s00 = this.s10;
        this.s11 = b1;
        this.s10 = b0;
        return out;
    };
    XorShift128Plus.prototype.jump = function() {
        var nextRng = new XorShift128Plus(this.s01, this.s00, this.s11, this.s10);
        nextRng.unsafeJump();
        return nextRng;
    };
    XorShift128Plus.prototype.unsafeJump = function() {
        var ns01 = 0;
        var ns00 = 0;
        var ns11 = 0;
        var ns10 = 0;
        var jump = [
            0x635d2dff,
            0x8a5cd789,
            0x5c472f96,
            0x121fd215
        ];
        for(var i = 0; i !== 4; ++i)for(var mask = 1; mask; mask <<= 1){
            if (jump[i] & mask) {
                ns01 ^= this.s01;
                ns00 ^= this.s00;
                ns11 ^= this.s11;
                ns10 ^= this.s10;
            }
            this.unsafeNext();
        }
        this.s01 = ns01;
        this.s00 = ns00;
        this.s11 = ns11;
        this.s10 = ns10;
    };
    return XorShift128Plus;
}();
var $b15c62df6024114b$export$51b7993fa7533128 = function(seed) {
    return new $b15c62df6024114b$var$XorShift128Plus(-1, ~seed, seed | 0, 0);
};


var $c6725ecbac3a55cd$var$XoroShiro128Plus = function() {
    function XoroShiro128Plus(s01, s00, s11, s10) {
        this.s01 = s01;
        this.s00 = s00;
        this.s11 = s11;
        this.s10 = s10;
    }
    XoroShiro128Plus.prototype.clone = function() {
        return new XoroShiro128Plus(this.s01, this.s00, this.s11, this.s10);
    };
    XoroShiro128Plus.prototype.next = function() {
        var nextRng = new XoroShiro128Plus(this.s01, this.s00, this.s11, this.s10);
        var out = nextRng.unsafeNext();
        return [
            out,
            nextRng
        ];
    };
    XoroShiro128Plus.prototype.unsafeNext = function() {
        var out = this.s00 + this.s10 | 0;
        var a0 = this.s10 ^ this.s00;
        var a1 = this.s11 ^ this.s01;
        var s00 = this.s00;
        var s01 = this.s01;
        this.s00 = s00 << 24 ^ s01 >>> 8 ^ a0 ^ a0 << 16;
        this.s01 = s01 << 24 ^ s00 >>> 8 ^ a1 ^ (a1 << 16 | a0 >>> 16);
        this.s10 = a1 << 5 ^ a0 >>> 27;
        this.s11 = a0 << 5 ^ a1 >>> 27;
        return out;
    };
    XoroShiro128Plus.prototype.jump = function() {
        var nextRng = new XoroShiro128Plus(this.s01, this.s00, this.s11, this.s10);
        nextRng.unsafeJump();
        return nextRng;
    };
    XoroShiro128Plus.prototype.unsafeJump = function() {
        var ns01 = 0;
        var ns00 = 0;
        var ns11 = 0;
        var ns10 = 0;
        var jump = [
            0xd8f554a5,
            0xdf900294,
            0x4b3201fc,
            0x170865df
        ];
        for(var i = 0; i !== 4; ++i)for(var mask = 1; mask; mask <<= 1){
            if (jump[i] & mask) {
                ns01 ^= this.s01;
                ns00 ^= this.s00;
                ns11 ^= this.s11;
                ns10 ^= this.s10;
            }
            this.unsafeNext();
        }
        this.s01 = ns01;
        this.s00 = ns00;
        this.s11 = ns11;
        this.s10 = ns10;
    };
    return XoroShiro128Plus;
}();
var $c6725ecbac3a55cd$export$7086c2a3897de949 = function(seed) {
    return new $c6725ecbac3a55cd$var$XoroShiro128Plus(-1, ~seed, seed | 0, 0);
};


function $3e3474f317fd3c26$export$d516518b259751ff(arrayIntA, arrayIntB) {
    if (arrayIntA.sign !== arrayIntB.sign) return $3e3474f317fd3c26$export$ac3004eec462f6c5(arrayIntA, {
        sign: -arrayIntB.sign,
        data: arrayIntB.data
    });
    var data = [];
    var reminder = 0;
    var dataA = arrayIntA.data;
    var dataB = arrayIntB.data;
    for(var indexA = dataA.length - 1, indexB = dataB.length - 1; indexA >= 0 || indexB >= 0; --indexA, --indexB){
        var vA = indexA >= 0 ? dataA[indexA] : 0;
        var vB = indexB >= 0 ? dataB[indexB] : 0;
        var current = vA + vB + reminder;
        data.push(current >>> 0);
        reminder = ~~(current / 0x100000000);
    }
    if (reminder !== 0) data.push(reminder);
    return {
        sign: arrayIntA.sign,
        data: data.reverse()
    };
}
function $3e3474f317fd3c26$export$3d75ca18b11ba0ad(arrayInt) {
    arrayInt.sign = 1;
    var data = arrayInt.data;
    for(var index = data.length - 1; index >= 0; --index)if (data[index] === 0xffffffff) data[index] = 0;
    else {
        data[index] += 1;
        return arrayInt;
    }
    data.unshift(1);
    return arrayInt;
}
function $3e3474f317fd3c26$var$isStrictlySmaller(dataA, dataB) {
    var maxLength = Math.max(dataA.length, dataB.length);
    for(var index = 0; index < maxLength; ++index){
        var indexA = index + dataA.length - maxLength;
        var indexB = index + dataB.length - maxLength;
        var vA = indexA >= 0 ? dataA[indexA] : 0;
        var vB = indexB >= 0 ? dataB[indexB] : 0;
        if (vA < vB) return true;
        if (vA > vB) return false;
    }
    return false;
}
function $3e3474f317fd3c26$export$ac3004eec462f6c5(arrayIntA, arrayIntB) {
    if (arrayIntA.sign !== arrayIntB.sign) return $3e3474f317fd3c26$export$d516518b259751ff(arrayIntA, {
        sign: -arrayIntB.sign,
        data: arrayIntB.data
    });
    var dataA = arrayIntA.data;
    var dataB = arrayIntB.data;
    if ($3e3474f317fd3c26$var$isStrictlySmaller(dataA, dataB)) {
        var out = $3e3474f317fd3c26$export$ac3004eec462f6c5(arrayIntB, arrayIntA);
        out.sign = -out.sign;
        return out;
    }
    var data = [];
    var reminder = 0;
    for(var indexA = dataA.length - 1, indexB = dataB.length - 1; indexA >= 0 || indexB >= 0; --indexA, --indexB){
        var vA = indexA >= 0 ? dataA[indexA] : 0;
        var vB = indexB >= 0 ? dataB[indexB] : 0;
        var current = vA - vB - reminder;
        data.push(current >>> 0);
        reminder = current < 0 ? 1 : 0;
    }
    return {
        sign: arrayIntA.sign,
        data: data.reverse()
    };
}
function $3e3474f317fd3c26$export$99350596d4aab7bb(arrayInt) {
    var data = arrayInt.data;
    var firstNonZero = 0;
    for(; firstNonZero !== data.length && data[firstNonZero] === 0; ++firstNonZero);
    if (firstNonZero === data.length) {
        arrayInt.sign = 1;
        arrayInt.data = [
            0
        ];
        return arrayInt;
    }
    data.splice(0, firstNonZero);
    return arrayInt;
}
function $3e3474f317fd3c26$export$3e83d7f3c9cb1714(out, n) {
    if (n < 0) {
        var posN = -n;
        out.sign = -1;
        out.data[0] = ~~(posN / 0x100000000);
        out.data[1] = posN >>> 0;
    } else {
        out.sign = 1;
        out.data[0] = ~~(n / 0x100000000);
        out.data[1] = n >>> 0;
    }
    return out;
}
function $3e3474f317fd3c26$export$2eb2611da6e26575(out, arrayIntA, arrayIntB) {
    var lowA = arrayIntA.data[1];
    var highA = arrayIntA.data[0];
    var signA = arrayIntA.sign;
    var lowB = arrayIntB.data[1];
    var highB = arrayIntB.data[0];
    var signB = arrayIntB.sign;
    out.sign = 1;
    if (signA === 1 && signB === -1) {
        var low_1 = lowA + lowB;
        var high = highA + highB + (low_1 > 0xffffffff ? 1 : 0);
        out.data[0] = high >>> 0;
        out.data[1] = low_1 >>> 0;
        return out;
    }
    var lowFirst = lowA;
    var highFirst = highA;
    var lowSecond = lowB;
    var highSecond = highB;
    if (signA === -1) {
        lowFirst = lowB;
        highFirst = highB;
        lowSecond = lowA;
        highSecond = highA;
    }
    var reminderLow = 0;
    var low = lowFirst - lowSecond;
    if (low < 0) {
        reminderLow = 1;
        low = low >>> 0;
    }
    out.data[0] = highFirst - highSecond - reminderLow;
    out.data[1] = low;
    return out;
}


function $d7d79e5f173660d7$export$a64630150a7e450d(rangeSize, rng) {
    var MaxAllowed = rangeSize > 2 ? ~~(0x100000000 / rangeSize) * rangeSize : 0x100000000;
    var deltaV = rng.unsafeNext() + 0x80000000;
    while(deltaV >= MaxAllowed)deltaV = rng.unsafeNext() + 0x80000000;
    return deltaV % rangeSize;
}


function $892f41ab41ba3843$export$2a5179cab76e01f9(out, rangeSize, rng) {
    var rangeLength = rangeSize.length;
    while(true){
        for(var index = 0; index !== rangeLength; ++index){
            var indexRangeSize = index === 0 ? rangeSize[0] + 1 : 0x100000000;
            var g = (0, $d7d79e5f173660d7$export$a64630150a7e450d)(indexRangeSize, rng);
            out[index] = g;
        }
        for(var index = 0; index !== rangeLength; ++index){
            var current = out[index];
            var currentInRange = rangeSize[index];
            if (current < currentInRange) return out;
            else if (current > currentInRange) break;
        }
    }
}


function $86cc04b470cc5d55$export$8d5b382dfebfd404(from, to, rng) {
    var rangeSize = (0, $3e3474f317fd3c26$export$99350596d4aab7bb)((0, $3e3474f317fd3c26$export$3d75ca18b11ba0ad)((0, $3e3474f317fd3c26$export$ac3004eec462f6c5)(to, from)));
    var emptyArrayIntData = rangeSize.data.slice(0);
    var g = (0, $892f41ab41ba3843$export$2a5179cab76e01f9)(emptyArrayIntData, rangeSize.data, rng);
    return (0, $3e3474f317fd3c26$export$99350596d4aab7bb)((0, $3e3474f317fd3c26$export$d516518b259751ff)({
        sign: 1,
        data: g
    }, from));
}


function $ce71c4f9629d6106$export$9d5496dce1605cbd(from, to, rng) {
    if (rng != null) {
        var nextRng = rng.clone();
        return [
            (0, $86cc04b470cc5d55$export$8d5b382dfebfd404)(from, to, nextRng),
            nextRng
        ];
    }
    return function(rng) {
        var nextRng = rng.clone();
        return [
            (0, $86cc04b470cc5d55$export$8d5b382dfebfd404)(from, to, nextRng),
            nextRng
        ];
    };
}


var $d18e2c40c4bcba3b$var$SBigInt = typeof BigInt !== "undefined" ? BigInt : undefined;
function $d18e2c40c4bcba3b$export$97590c101e87b265(from, to, rng) {
    var diff = to - from + $d18e2c40c4bcba3b$var$SBigInt(1);
    var MinRng = $d18e2c40c4bcba3b$var$SBigInt(-2147483648);
    var NumValues = $d18e2c40c4bcba3b$var$SBigInt(0x100000000);
    var FinalNumValues = NumValues;
    var NumIterations = 1;
    while(FinalNumValues < diff){
        FinalNumValues *= NumValues;
        ++NumIterations;
    }
    var MaxAcceptedRandom = FinalNumValues - FinalNumValues % diff;
    while(true){
        var value = $d18e2c40c4bcba3b$var$SBigInt(0);
        for(var num = 0; num !== NumIterations; ++num){
            var out = rng.unsafeNext();
            value = NumValues * value + ($d18e2c40c4bcba3b$var$SBigInt(out) - MinRng);
        }
        if (value < MaxAcceptedRandom) {
            var inDiff = value % diff;
            return inDiff + from;
        }
    }
}


function $d033a5f05e98f0f2$export$4c15201b91b84579(from, to, rng) {
    if (rng != null) {
        var nextRng = rng.clone();
        return [
            (0, $d18e2c40c4bcba3b$export$97590c101e87b265)(from, to, nextRng),
            nextRng
        ];
    }
    return function(rng) {
        var nextRng = rng.clone();
        return [
            (0, $d18e2c40c4bcba3b$export$97590c101e87b265)(from, to, nextRng),
            nextRng
        ];
    };
}





var $6b058feafeb050f0$var$safeNumberMaxSafeInteger = Number.MAX_SAFE_INTEGER;
var $6b058feafeb050f0$var$sharedA = {
    sign: 1,
    data: [
        0,
        0
    ]
};
var $6b058feafeb050f0$var$sharedB = {
    sign: 1,
    data: [
        0,
        0
    ]
};
var $6b058feafeb050f0$var$sharedC = {
    sign: 1,
    data: [
        0,
        0
    ]
};
var $6b058feafeb050f0$var$sharedData = [
    0,
    0
];
function $6b058feafeb050f0$var$uniformLargeIntInternal(from, to, rangeSize, rng) {
    var rangeSizeArrayIntValue = rangeSize <= $6b058feafeb050f0$var$safeNumberMaxSafeInteger ? (0, $3e3474f317fd3c26$export$3e83d7f3c9cb1714)($6b058feafeb050f0$var$sharedC, rangeSize) : (0, $3e3474f317fd3c26$export$2eb2611da6e26575)($6b058feafeb050f0$var$sharedC, (0, $3e3474f317fd3c26$export$3e83d7f3c9cb1714)($6b058feafeb050f0$var$sharedA, to), (0, $3e3474f317fd3c26$export$3e83d7f3c9cb1714)($6b058feafeb050f0$var$sharedB, from));
    if (rangeSizeArrayIntValue.data[1] === 0xffffffff) {
        rangeSizeArrayIntValue.data[0] += 1;
        rangeSizeArrayIntValue.data[1] = 0;
    } else rangeSizeArrayIntValue.data[1] += 1;
    (0, $892f41ab41ba3843$export$2a5179cab76e01f9)($6b058feafeb050f0$var$sharedData, rangeSizeArrayIntValue.data, rng);
    return $6b058feafeb050f0$var$sharedData[0] * 0x100000000 + $6b058feafeb050f0$var$sharedData[1] + from;
}
function $6b058feafeb050f0$export$cc63df14a268d457(from, to, rng) {
    var rangeSize = to - from;
    if (rangeSize <= 0xffffffff) {
        var g = (0, $d7d79e5f173660d7$export$a64630150a7e450d)(rangeSize + 1, rng);
        return g + from;
    }
    return $6b058feafeb050f0$var$uniformLargeIntInternal(from, to, rangeSize, rng);
}


function $c369ab140fecf33f$export$9f886abbeaa74a28(from, to, rng) {
    if (rng != null) {
        var nextRng = rng.clone();
        return [
            (0, $6b058feafeb050f0$export$cc63df14a268d457)(from, to, nextRng),
            nextRng
        ];
    }
    return function(rng) {
        var nextRng = rng.clone();
        return [
            (0, $6b058feafeb050f0$export$cc63df14a268d457)(from, to, nextRng),
            nextRng
        ];
    };
}





var $1b246709f951eff5$export$d37ccdbd9613d0b = "module";
var $1b246709f951eff5$export$a771dc8535ba5f2 = "6.0.1";
var $1b246709f951eff5$export$d191894afba61bba = "349e8d3113633ba2bbbb5a6ec129b7f665dd3112";



var $d1620b97bbbe7db9$export$2e2bcd8739ae039 = $d1620b97bbbe7db9$import$910d596caca46c57;


// import Peer from 'peerjs'
class $a70d216ea6b08154$export$98b66c25bb38499d {
    constructor(connection){
        this._connection = connection;
    }
    get peer() {
        return this._connection.peer;
    }
    send(data) {
        this._connection.send(data);
    }
    close() {
        this._connection.close();
    }
}


function $c6967c664d34d9ab$export$cb88b31dcf3267e1(user) {
    const result = {
        peer: {
            id: user.peer.id
        },
        name: user.name
    };
    return result;
}
let $c6967c664d34d9ab$export$80edbf15fa61a4db;
(function(MessageType) {
    MessageType["Room"] = "Room";
    MessageType["App"] = "App";
})($c6967c664d34d9ab$export$80edbf15fa61a4db || ($c6967c664d34d9ab$export$80edbf15fa61a4db = {}));
class $c6967c664d34d9ab$export$f69c19e57285b83a {
}
let $c6967c664d34d9ab$export$5dc765df1c44c6d;
(function(RoomMessageType) {
    RoomMessageType["Text"] = "Text";
    RoomMessageType["RenameUser"] = "RenameUser";
})($c6967c664d34d9ab$export$5dc765df1c44c6d || ($c6967c664d34d9ab$export$5dc765df1c44c6d = {}));
class $c6967c664d34d9ab$export$debca042239dc6a4 {
}
class $c6967c664d34d9ab$export$3a7b5e3ae427bfa9 {
}
class $c6967c664d34d9ab$export$960ceca6e111745f {
}
function $c6967c664d34d9ab$export$fd8bd963a989dc7f(from, payload) {
    return {
        type: $c6967c664d34d9ab$export$80edbf15fa61a4db.App,
        from: from,
        payload: payload
    };
}
class $c6967c664d34d9ab$export$af0a28b676495c42 {
    users = new Map();
    names = [];
    // PeerJS connections are not typed
    connections = new Map();
    constructor(localUser, roomMessageHandler, appMessageHandler, names = []){
        this.localUser = localUser;
        this.roomMessageHandler = roomMessageHandler;
        this.appMessageHandler = appMessageHandler;
        this.names = names;
        this.users.set(localUser.peer.id, localUser);
        this.bindPeer();
    }
    broadcast(message) {
        console.log("connections : " + this.connections.size);
        this.connections.forEach((connection)=>{
            console.log(`Sending message to ${connection.peer}`);
            connection.send(JSON.stringify(message));
        });
    }
    broadcastApplicationMessage(message) {
        const rootMessage = {
            type: $c6967c664d34d9ab$export$80edbf15fa61a4db.App,
            from: this.getUserPayload(this.localUser),
            payload: message
        };
        this.broadcast(rootMessage);
    }
    bindPeer() {
        const self = this;
        // TODO : use a common method for both sides of connections
        // This is not called when we are the ones opening the connection
        this.localUser.peer.base.on("connection", (connection)=>{
            console.log("connection");
            console.log(connection);
            this.bindConnection(connection);
        // FIXME : put this in connection.on('open') ?
        // peer.connections.set(connection.peer, new Connection(connection))
        });
    }
    bindConnection(connection) {
        // FIXME ; remove it or set it back if necessary
        const self = this;
        console.log("binding connection");
        console.log("peer " + connection.peer);
        // this.connections.set(connection.peer, new Connection(connection));
        // TODO : replace strings events by an enum
        connection.on("open", ()=>{
            console.log("connection open to " + connection.peer);
            this.connections.set(connection.peer, new (0, $a70d216ea6b08154$export$98b66c25bb38499d)(connection));
            // Init a user
            const peer = {
                id: connection.peer
            };
            const user = {
                peer: peer,
                name: this.getRandomUninitializedName()
            };
            this.users.set(peer.id, user);
            this.roomMessageHandler.onConnectionEstablished(connection, user);
            // Info : to synchronize the names
            this.sendRenameMessage(this.localUser.name, "");
        });
        connection.on("data", (data)=>{
            console.log("Data received");
            console.log(data);
            this.handleMessage(connection, data);
        });
        // TODO : (duplicate function) move this into a method with all the bindings
        connection.on("close", ()=>{
            console.log("connection closed");
            // FIXME : remove the user from the room server side too ?
            // TODO : rename peer of connection in either a Peer or peerId
            let user = this.users.get(connection.peer);
            this.users.delete(connection.peer);
            this.connections.delete(connection.peer);
            this.roomMessageHandler.onConnectionClosed(connection, user);
        // TODO : unit test that we never call this.api.leaveRoom ?
        // this.api.leaveRoom(this.room.roomId, this.peer.id)
        // this.pushMessage(new Message('(info)', this.localeMessaging.formatPeerHasDisconnected(connection.peer), ''))
        });
        // Seems to be never called
        connection.on("error", function(error) {
            console.log("connection : error received");
            console.log(error);
            let user = this.users.get(connection.peer);
            this.roomMessageHandler.onConnectionError(connection, error);
        });
    }
    handleMessage(connection, data) {
        console.log("handleMessage");
        console.log(data);
        const message = JSON.parse(data);
        let user = this.getUserByPeerId(message.from.peer.id);
        if (user === undefined) console.warn("user is undefined");
        // TODO : move all that into separate methods ?
        // TODO : put message formatting into separate class, can then translate it into fr / en
        switch(message.type){
            case $c6967c664d34d9ab$export$80edbf15fa61a4db.Room:
                const roomMessage = message.payload;
                this.handleRoomMessage(connection, user, roomMessage, message);
                break;
            case $c6967c664d34d9ab$export$80edbf15fa61a4db.App:
                const appMessage = message.payload;
                this.appMessageHandler.onAppMessage(user, appMessage, message);
                break;
            default:
                throw new Error("unknown peer message type");
        }
    }
    handleRoomMessage(connection, user, message, root) {
        switch(message.type){
            case $c6967c664d34d9ab$export$5dc765df1c44c6d.Text:
                const textMessage = message.payload;
                this.roomMessageHandler.onTextMessage(connection, user, textMessage.text, textMessage, root);
                break;
            case $c6967c664d34d9ab$export$5dc765df1c44c6d.RenameUser:
                const renameMessage = message.payload;
                if (user !== undefined) user.name = renameMessage.newName;
                this.roomMessageHandler.onRenameUserMessage(connection, user, renameMessage.newName, renameMessage.formerName, renameMessage, root);
                break;
            default:
                throw new Error("unknown room message type");
        }
    }
    sendMessage(text) {
        const textMessage = {
            text: text
        };
        const roomMessage = {
            type: $c6967c664d34d9ab$export$5dc765df1c44c6d.Text,
            payload: textMessage
        };
        // TODO : provide helpers for this
        const message = {
            type: $c6967c664d34d9ab$export$80edbf15fa61a4db.Room,
            from: this.getUserPayload(this.localUser),
            payload: roomMessage
        };
        // Info : we display the message
        // FIXME : this can be improved
        this.roomMessageHandler.onTextMessage(undefined, this.localUser, text, textMessage, message);
        this.broadcast(message);
    }
    sendRenameMessage(newName, formerName) {
        const renameMessage = {
            newName: newName,
            formerName: formerName
        };
        const roomMessage = {
            type: $c6967c664d34d9ab$export$5dc765df1c44c6d.RenameUser,
            payload: renameMessage
        };
        const message = {
            type: $c6967c664d34d9ab$export$80edbf15fa61a4db.Room,
            from: this.getUserPayload(this.localUser),
            payload: roomMessage
        };
        this.broadcast(message);
    }
    disconnect() {
        this.connections.forEach((connection)=>{
            console.log("closing connection " + connection.peer);
            connection.close();
        });
        this.connections.clear();
    }
    getUser(peerId) {
        return this.users.get(peerId);
    }
    // Info : necessary to avoid a circular dependency issue with the JSON serialization
    // Not sure why
    // FIXME : remedy this
    getUserPayload(localUser) {
        const user = {
            peer: {
                id: localUser.peer.id
            },
            name: localUser.name
        };
        return user;
    }
    // TODO : maybe use a class for this
    getRandomUninitializedName() {
        const seed = Date.now() ^ Math.random() * 0x100000000;
        const rng = (0, $d1620b97bbbe7db9$export$2e2bcd8739ae039).xoroshiro128plus(seed);
        const randomValue = (0, $d1620b97bbbe7db9$export$2e2bcd8739ae039).unsafeUniformIntDistribution(1, 999, rng);
        return `uninitialized-${randomValue}`;
    }
    getRandomName() {
        // TODO : generate a ano name if names is empty
        return this.names[Math.floor(Math.random() * this.names.length)];
    }
    getUserByPeerId(peerId) {
        return this.users.get(peerId);
    }
}


function $9277095b3bced417$export$111271cc6c178baf(player) {
    const result = {
        user: (0, $c6967c664d34d9ab$export$cb88b31dcf3267e1)(player.user),
        score: player.score
    };
    return result;
}


class $b4e64ee2da69b34c$export$5ef97d0a3ba0efd0 {
    // FIXME : is a map better ?
    players = [];
    // TODO : change gameStarted with something else ? like a state or gameHasStarted maybe
    // TODO : find a solution for the redefinition of this properties here and in the offline wordgame
    gameStarted = false;
    _currentSequence = "";
    // TODO : qqchse de plus comprehensif, like in a state (currentPlayerId)
    playerIdCurrentlyPlaying = "";
    // FIXME : move this ? use an event emitter ?
    // messages: Message[] = []
    // TODO : make it more obvious (its the id of the player, an index)
    currentId = 0;
    // TODO : use correct type, make is function more obvious
    currentTimer = null;
    // #endregion
    // #region "Computed properties"
    // FIXME : if we use getter, we need to synchronize it for each clients
    // Not sure we want to do this
    // get gameStarted(): boolean {
    //   // TODO : rename or a add a property isPlaying or equivalent in the offline WordGame
    //   return this.wordGame.isGuessing;
    // }
    get currentSequence() {
        if (this.isAdmin) return this.wordGame.currentSequence;
        return this._currentSequence;
    }
    get canStartGame() {
        if (this.room === null || this.room === undefined) return false;
        if (this.localPlayer === null || this.localPlayer === undefined) return false;
        if (this.gameStarted === true) return false;
        if (this.room.roomOwner.id === this.localPlayer.user.peer.id) return true;
        return false;
    }
    get canUpdateSettings() {
        return this.isAdmin && !this.gameStarted;
    }
    get isGuessing() {
        return this.localPlayer.user.peer?.id === this.playerIdCurrentlyPlaying;
    }
    get isAdmin() {
        return this.room?.roomOwner.id === this.localPlayer.user.peer.id;
    }
    // #endregion
    constructor(room, wordGame, p2pRoom, localeMessaging, settings, wordGameMessageHandler){
        this.room = room;
        this.wordGame = wordGame;
        this.p2pRoom = p2pRoom;
        //this.timer = timer
        this.localeMessaging = localeMessaging;
        this.settings = settings;
        this.wordGameMessageHandler = wordGameMessageHandler;
        // TODO : init player
        const self = this;
        const appMessageHandler = {
            onAppMessage: function(user, message, root) {
                self.handleAppMessage(user, message, root);
            }
        };
        this.localPlayer = {
            user: p2pRoom.localUser,
            score: 0
        };
        this.p2pRoom.appMessageHandler = appMessageHandler;
    // this.onMessagePushedCallback = onMessagePushedCallback;
    }
    // #region "Methods"
    startGame() {
        // TODO : only the owner
        console.log("start game");
        if (this.canStartGame === false) {
            console.log("cannot start game");
            // FIXME : should be handled this way ?
            this.wordGameMessageHandler.onAdminActionAttempted(this.localPlayer, (0, $0033a60ebe78f1d0$export$3679fc5ae8d740bd).StartingGame, this.getAdmin());
            return;
        }
        console.log("starting game");
        this.initiatePlayers();
        this.wordGameMessageHandler.onStartingGame(this.settings, this.players, this.getAdmin());
        console.log("players");
        console.log(this.players.length);
        const playersIds = this.players.map((x)=>x.user.peer.id);
        console.log("playersIds");
        console.log(playersIds);
        const startingGameMessage = {
            playersIds: playersIds
        };
        const message = {
            wordGameMessageType: (0, $0033a60ebe78f1d0$export$3679fc5ae8d740bd).StartingGame,
            payload: startingGameMessage
        };
        this.p2pRoom.broadcastApplicationMessage(message);
        // FIXME : Could wait or something else ?
        const id = Math.floor(Math.random() * this.players.length);
        this.newGuess(id);
        // Info : we have to set it manually
        this.gameStarted = true;
    // this.timer.startTimer()
    // FIXME : better way to do this
    // this.updateLocalPlayerName(this.name)
    }
    // TODO : use room or refresh room
    // When a player refresh the web page, he leaves, he should be removed, but he is not put back in
    initiatePlayers() {
        // For now, we take all user presently in the room
        this.players = [];
        console.log("clients");
        console.log(this.room.clients);
        this.p2pRoom.users.forEach((user, key)=>{
            const player = {
                user: user,
                score: 0
            };
            this.players.push(player);
        });
    }
    initiatePlayersFromPeerIds(peerIds) {
        this.players = [];
        if (peerIds.length === 0) {
            console.warn("attempting to initializing the players from an empty list of peers");
            return;
        }
        peerIds.forEach((id)=>{
            if (this.room.clients.get(id) === undefined) console.warn(`received an id which is not defined in the servers room ${id}`);
            const user = this.p2pRoom.getUser(id);
            if (user === undefined) {
                console.error(`received an id which is not defined in the p2p room ${id}`);
                return;
            }
            // FIXME (low) : mutualize with the other method ?
            const player = {
                user: user,
                score: 0
            };
            this.players.push(player);
        });
    }
    verifyGuess(wordGuessMessage) {
        console.log("verifying " + wordGuessMessage.word);
        if (wordGuessMessage.sequence !== this.wordGame.currentSequence) console.warn(`Local sequence (${this.currentSequence}) and message sequence (${wordGuessMessage.sequence}) are different`);
        const result = this.wordGame.verifyGuess(wordGuessMessage.word);
        const player = this.getPlayerByPeerId(wordGuessMessage.playerId);
        if (player === undefined) console.warn("player is undefined");
        switch(result){
            case (0, $1a88d18c4cbab4bd$export$bfc465b73e2e08a6).SUCCESSFUL_GUESS:
                console.log("Success !");
                // TODO : different way of computing score
                const score = wordGuessMessage.word.length;
                // const player = this.addScoreToPlayer(this.playerIdCurrentlyPlaying, score);
                player.score += score;
                const sanitizedPlayer = (0, $9277095b3bced417$export$111271cc6c178baf)(player);
                if (player === undefined) console.warn("player " + this.playerIdCurrentlyPlaying + " is undefined, cannot add score to him");
                const correctGuessMessage = {
                    points: score,
                    playerId: player.user.peer.id,
                    reason: result,
                    word: wordGuessMessage.word,
                    sequence: wordGuessMessage.sequence
                };
                // FIXME : we cannot use a single 'message' variable xD
                let message1 = {
                    wordGameMessageType: (0, $0033a60ebe78f1d0$export$3679fc5ae8d740bd).CorrectGuess,
                    payload: correctGuessMessage
                };
                this.p2pRoom.broadcastApplicationMessage(message1);
                this.wordGameMessageHandler.onCorrectGuess(player, wordGuessMessage.word, wordGuessMessage.sequence, score, result, this.getAdmin());
                if (player !== undefined && player.score >= this.settings.winningScore) {
                    this.clearTimer();
                    // this.timer.clearInterval()
                    console.log("player " + player.user.peer.id + " has won");
                    const playerWonMessage = {
                        playerId: player.user.peer.id,
                        score: player.score
                    };
                    const wordGameMessage = {
                        wordGameMessageType: (0, $0033a60ebe78f1d0$export$3679fc5ae8d740bd).PlayerWon,
                        payload: playerWonMessage
                    };
                    this.p2pRoom.broadcastApplicationMessage(wordGameMessage);
                    this.wordGameMessageHandler.onPlayerWon(player, this.localPlayer, this.getAdmin());
                    // this.pushMessage(new Message('game (' + this.peer.id + ')', this.localeMessaging.formatPlayerHasWon(playerWonMessage.playerId, playerWonMessage.score), ''))
                    // TODO : add an option to restart a game if necessary
                    this.wordGame.reset();
                // TODO : timer to restart the game
                //this.gameStarted = false
                } else this.newGuess();
                break;
            case (0, $1a88d18c4cbab4bd$export$bfc465b73e2e08a6).WORD_DO_NOT_EXIST:
                console.log("This word do not exist in the database.");
                const incorrectGuessMessage1 = {
                    word: wordGuessMessage.word,
                    sequence: this.wordGame.currentSequence,
                    reason: (0, $1a88d18c4cbab4bd$export$bfc465b73e2e08a6).WORD_DO_NOT_EXIST,
                    playerId: wordGuessMessage.playerId
                };
                let message2 = {
                    wordGameMessageType: (0, $0033a60ebe78f1d0$export$3679fc5ae8d740bd).IncorrectGuess,
                    payload: incorrectGuessMessage1
                };
                this.p2pRoom.broadcastApplicationMessage(message2);
                this.wordGameMessageHandler.onIncorrectGuess(player, wordGuessMessage.word, wordGuessMessage.sequence, result, this.getAdmin());
                break;
            case (0, $1a88d18c4cbab4bd$export$bfc465b73e2e08a6).WORD_DO_NOT_MATCH_SEQUENCE:
                console.log(`This word do not match the current sequence ('${this.wordGame.currentSequence}').`);
                const incorrectGuessMessage2 = {
                    word: wordGuessMessage.word,
                    sequence: this.wordGame.currentSequence,
                    reason: (0, $1a88d18c4cbab4bd$export$bfc465b73e2e08a6).WORD_DO_NOT_MATCH_SEQUENCE,
                    playerId: wordGuessMessage.playerId
                };
                let message3 = {
                    wordGameMessageType: (0, $0033a60ebe78f1d0$export$3679fc5ae8d740bd).IncorrectGuess,
                    payload: incorrectGuessMessage2
                };
                this.p2pRoom.broadcastApplicationMessage(message3);
                this.wordGameMessageHandler.onIncorrectGuess(player, wordGuessMessage.word, wordGuessMessage.sequence, result, this.getAdmin());
                break;
            default:
                // writeErr('Internal error');
                console.error(`GuessResult '${result} is unknown`);
        }
    // TODO : test œuf
    }
    newGuess(startingId) {
        // TODO : do not use clearTimeout but something else, so that this notion does not appear in this class
        this.clearTimer();
        if (startingId !== undefined) this.currentId = startingId;
        else this.currentId += 1;
        if (this.currentId >= this.players.length) this.currentId = 0;
        const player = this.players[this.currentId];
        this.wordGame.getNewSequence();
        const lettersToGuessMessage = {
            letters: this.currentSequence,
            timeToGuess: this.settings.timePerGuess,
            playerId: player.user.peer.id
        };
        const secondMessage = {
            wordGameMessageType: (0, $0033a60ebe78f1d0$export$3679fc5ae8d740bd).LettersToGuess,
            payload: lettersToGuessMessage
        };
        console.log("current id " + this.currentId);
        console.log("currentPlayerId " + this.playerIdCurrentlyPlaying);
        this.playerIdCurrentlyPlaying = player.user.peer.id;
        this.p2pRoom.broadcastApplicationMessage(secondMessage);
        this.wordGameMessageHandler.onSequenceToGuess(player, this.currentSequence, this.settings.timePerGuess, this.getAdmin());
        this.startTimer();
    // this.timer.startTimer()
    }
    // FIXME : should the responsibility to attempt a guess or send a message be here ?
    sendMessage(stringMessage) {
        let message;
        console.log("send message");
        console.log(this.gameStarted);
        console.log(this.isGuessing);
        if (this.gameStarted && this.isGuessing) {
            const wordGuessMessage = {
                word: stringMessage,
                sequence: this.currentSequence,
                playerId: this.localPlayer.user.peer.id
            };
            message = {
                wordGameMessageType: (0, $0033a60ebe78f1d0$export$3679fc5ae8d740bd).WordGuess,
                payload: wordGuessMessage
            };
            // FIXME : this was being this way for Vue, so that we can display guesses of the players
            /*
      if (this.localPlayer === undefined) {
        console.warn('self player is undefined')
      } else {
        ownPlayer.currentGuess = stringMessage
      }
      */ this.p2pRoom.broadcastApplicationMessage(message);
            this.wordGameMessageHandler.onGuessAttempt(this.localPlayer, stringMessage, this.currentSequence, this.getAdmin());
            if (this.isAdmin) this.verifyGuess(wordGuessMessage);
        } else this.p2pRoom.sendMessage(stringMessage);
    // this.pushMessage(new Message('me', stringMessage, ''))
    }
    // TODO : bind disconnections to the game
    handleAppMessage(user, anyMessage, root) {
        console.log("handleAppMessage");
        const message = anyMessage;
        // Info : not necessarely the admin
        let playerEmittor = this.getPlayerByPeerId(user.peer.id);
        if (playerEmittor === undefined) console.warn("player is undefined, should not be");
        // TODO : secure this, only admin should send game messages
        if ((0, $0033a60ebe78f1d0$export$a57b97c52307e22b)(message.wordGameMessageType) && user.peer.id !== this.room.roomOwner.id) {
            console.warn("Received a message of type " + message.wordGameMessageType + " which is protected and the player is not an admin");
            this.wordGameMessageHandler.onAdminActionAttempted(playerEmittor, message.wordGameMessageType, this.getAdmin());
            return;
        }
        // TODO : move all that into separate methods ?
        // TODO : put message formatting into separate class, can then translate it into fr / en
        switch(message.wordGameMessageType){
            case (0, $0033a60ebe78f1d0$export$3679fc5ae8d740bd).StartingGame:
                this.gameStarted = true;
                this.clearTimer();
                const startingGameMessage = message.payload;
                this.initiatePlayersFromPeerIds(startingGameMessage.playersIds);
                break;
            case (0, $0033a60ebe78f1d0$export$3679fc5ae8d740bd).LettersToGuess:
                const lettersToGuessMessage = message.payload;
                // Info : if we have received this message, we are not admin
                this._currentSequence = lettersToGuessMessage.letters;
                this.playerIdCurrentlyPlaying = lettersToGuessMessage.playerId;
                // TODO : add a settings to indicate wether or not this should be synchronized
                this.clearTimer();
                this.startTimer();
                const playerPlaying = this.getPlayerByPeerId(lettersToGuessMessage.playerId);
                this.wordGameMessageHandler.onSequenceToGuess(playerPlaying, lettersToGuessMessage.letters, lettersToGuessMessage.timeToGuess, this.localPlayer);
                break;
            case (0, $0033a60ebe78f1d0$export$3679fc5ae8d740bd).WordGuess:
                const wordGuessMessage = message.payload;
                if (this.playerIdCurrentlyPlaying !== user.peer.id) {
                    console.warn("player attempting to guess when not his turn"); // TODO : should probably throw ? could happen at last instant of guess turn
                    return;
                }
                // Info : this is for displaying the guesses of the players in Vue
                //player.currentGuess = wordGuessMessage.word
                if (this.isAdmin) this.verifyGuess(wordGuessMessage);
                break;
            case (0, $0033a60ebe78f1d0$export$3679fc5ae8d740bd).IncorrectGuess:
                const incorrectGuessMessage = message.payload;
                this.wordGameMessageHandler.onIncorrectGuess(this.getPlayerByPeerId(incorrectGuessMessage.playerId), incorrectGuessMessage.word, incorrectGuessMessage.sequence, incorrectGuessMessage.reason, this.getAdmin());
                break;
            case (0, $0033a60ebe78f1d0$export$3679fc5ae8d740bd).CorrectGuess:
                const correctGuessMessage = message.payload;
                console.log("correct guess, points : " + correctGuessMessage.points);
                const playerGuessing = this.getPlayerByPeerId(correctGuessMessage.playerId);
                if (playerGuessing === undefined) console.warn(`player ${correctGuessMessage.playerId} not found, cannot had score to him`);
                else playerGuessing.score += correctGuessMessage.points;
                this.wordGameMessageHandler.onCorrectGuess(playerGuessing, correctGuessMessage.word, correctGuessMessage.sequence, correctGuessMessage.points, correctGuessMessage.reason, this.getAdmin());
                this.clearTimer();
                break;
            case (0, $0033a60ebe78f1d0$export$3679fc5ae8d740bd).GuessTimeout:
                console.log("guess timeout");
                const guessTimeoutMessage = message.payload;
                // Info !important: there was a HTML element access here
                this.wordGameMessageHandler.onGuessTimeout(this.getPlayerByPeerId(guessTimeoutMessage.playerId), this.getAdmin());
                this.clearTimer();
                break;
            case (0, $0033a60ebe78f1d0$export$3679fc5ae8d740bd).PlayerWon:
                const playerWonMessage = message.payload;
                // TODO : verify the score locally
                // TODO : indicate if there is an anomaly
                if (playerWonMessage.playerId !== this.playerIdCurrentlyPlaying) console.warn("player not playing has won");
                this.wordGameMessageHandler.onPlayerWon(this.getPlayerByPeerId(playerWonMessage.playerId), playerEmittor, this.getAdmin());
                this.gameStarted = false;
                this.clearTimer();
                break;
            case (0, $0033a60ebe78f1d0$export$3679fc5ae8d740bd).WordExample:
                const wordExampleMessage = message.payload;
                this.wordGameMessageHandler.onWordExample(wordExampleMessage.word, wordExampleMessage.letters, this.getAdmin());
                break;
            case (0, $0033a60ebe78f1d0$export$3679fc5ae8d740bd).UpdateSettings:
                const updateSettingsMessage = message.payload;
                const formerSettings = this.settings;
                this.settings = updateSettingsMessage.settings;
                this.wordGameMessageHandler.onSettingsUpdated(updateSettingsMessage.settings, formerSettings, playerEmittor, this.getAdmin());
                break;
            default:
                console.warn("received unknown message type " + message.wordGameMessageType);
                console.warn(message);
                throw new Error("unknown peer message type " + message.wordGameMessageType);
        }
    }
    guessTimeout() {
        console.log("guess timeout");
        if (!this.isAdmin) {
            console.log(this);
            console.log("guess timeout, not the owner, doing nothing (" + this.room?.roomOwner.id + "!=" + this.localPlayer.user.peer.id + ")");
            return;
        }
        // TODO : need a getter for this
        const playerPlaying = this.getPlayerByPeerId(this.playerIdCurrentlyPlaying);
        // Info : this make sense only if the player is the admin ?
        this.wordGameMessageHandler.onGuessTimeout(playerPlaying, this.getAdmin());
        // Info !important : there was a document access there for the Vue project
        const guessTimeoutMessage = {
            playerId: playerPlaying.user.peer.id
        };
        const message = {
            wordGameMessageType: (0, $0033a60ebe78f1d0$export$3679fc5ae8d740bd).GuessTimeout,
            payload: guessTimeoutMessage
        };
        this.p2pRoom.broadcastApplicationMessage(message);
        this.getAndSendWordExample();
        this.newGuess();
    }
    startTimer() {
        this.currentTimer = setTimeout(this.guessTimeout.bind(this), this.settings.timePerGuess * 1000);
    }
    clearTimer() {
        clearTimeout(this.currentTimer);
    }
    getPlayerByPeerId(peerId) {
        for(let i = 0; i < this.players.length; i++){
            const player = this.players[i];
            if (player.user.peer.id === peerId) return player;
        }
        return undefined;
    }
    // TODO : use a getter ?
    getAdmin() {
        const adminId = this.room?.roomOwner;
        return this.getPlayerByPeerId(adminId.id);
    }
    getAndSendWordExample() {
        const word = this.wordGame.getExampleForSequence();
        const wordExampleMessage = {
            word: word,
            letters: this.currentSequence
        };
        const message = {
            wordGameMessageType: (0, $0033a60ebe78f1d0$export$3679fc5ae8d740bd).WordExample,
            payload: wordExampleMessage
        };
        this.p2pRoom.broadcastApplicationMessage(message);
        this.wordGameMessageHandler.onWordExample(word, this.currentSequence, this.getAdmin());
    }
    playerIsGuessing(peerId) {
        return this.playerIdCurrentlyPlaying === peerId;
    }
    updateSettings(settings) {
        if (!this.isAdmin) return;
        this.settings = {
            ...settings
        };
        this.wordGame.wordGameOptions = settings;
        const updateSettingsMessage = {
            settings: this.settings
        };
        const message = {
            wordGameMessageType: (0, $0033a60ebe78f1d0$export$3679fc5ae8d740bd).UpdateSettings,
            payload: updateSettingsMessage
        };
        this.p2pRoom.broadcastApplicationMessage(message);
    }
}


class $3cedf9cc0e765876$export$b6e989ddfbcc548d {
    formatAdminActionAttempted(playerName, roomMessageType) {
        return `player ${playerName} has attempted to manage the game but is not an admin of the room (${roomMessageType})`;
    }
    formatStartingGame(players) {
        return `Starting game (players: ${players.map((x)=>x.user.name).join(",")})`;
    }
    formatSettings(settings) {
        return `Configuration is : timer per guess=${settings.timePerGuess}s, winning score=${settings.winningScore}, max attempts=${settings.maxAttempts}, min occurences=${settings.minOccurences}, max occurences=${settings.maxOccurences}`;
    }
    formatPlayerMustGuessLetters(player, letters, timeToGuess, isSelf) {
        return (isSelf ? "You" : "player " + player) + " must guess a word containing " + letters + ` (${timeToGuess}s remaining)`;
    }
    formatPlayerHasWon(player, score, isSelf) {
        return (isSelf ? "You have" : "player " + player + " has") + " won with the score " + score + ", ending game.";
    }
    formatWrongPlayerHasWon(currentPlayerPlaying, winningPlayer) {
        return "room owner indicate that " + winningPlayer + " has won but current player is " + currentPlayerPlaying + " (for you), it might be a desync, ending game";
    }
    formatIncorrectGuess(player, word, isSelf) {
        return (isSelf ? "You have" : "player " + player + " has") + ` incorrectly guessed : ${word}`;
    }
    formatCorrectGuess(player, points, isSelf) {
        return (isSelf ? "You have" : "player " + player + " has") + " correctly guessed, points earned : " + points;
    }
    formatTimeToGuessTimedOut(player, isSelf) {
        return (isSelf ? "You have" : "player " + player + " has") + " not guessed in the provided time";
    }
    formatCurrentScore(player, score, isSelf) {
        return (isSelf ? "Your score" : "The score of the player " + player) + ` is ${score}`;
    }
    formatWordExample(word, letters) {
        return "word '" + word + "' contains letters " + letters;
    }
    formatPeerIsNowConnected(peer) {
        return peer + " is now connected";
    }
    formatPeerHasDisconnected(peer) {
        return peer + " has disconnected";
    }
    formatSettingsWereUpdated(player) {
        return player + " has updated the settings";
    }
}




class $6485ee4c578a6cae$export$ecd1fc136c422448 {
    get id() {
        return this.base.id;
    }
    constructor(base){
        this.base = base;
    }
}


// TODO : fix the blink cursor
// from https://github.com/xtermjs/xtermjs.org/blob/281b8e0f9ac58c5e78ff5b192563366c40787c4f/js/demo.js
// MIT license
var $b6c5268c81e07e00$var$baseTheme = {
    foreground: "#F8F8F8",
    background: "#2D2E2C",
    selection: "#5DA5D533",
    black: "#1E1E1D",
    brightBlack: "#262625",
    red: "#CE5C5C",
    brightRed: "#FF7272",
    green: "#5BCC5B",
    brightGreen: "#72FF72",
    yellow: "#CCCC5B",
    brightYellow: "#FFFF72",
    blue: "#5D5DD3",
    brightBlue: "#7279FF",
    magenta: "#BC5ED1",
    brightMagenta: "#E572FF",
    cyan: "#5DA5D5",
    brightCyan: "#72F0FF",
    white: "#F8F8F8",
    brightWhite: "#FFFFFF"
};
const $b6c5268c81e07e00$var$columnCount = 140;
function $b6c5268c81e07e00$var$getTermConf() {
    const termConf = {
        fontFamily: '"Cascadia Code", Menlo, monospace',
        theme: $b6c5268c81e07e00$var$baseTheme,
        cursorBlink: true,
        allowProposedApi: true,
        cols: $b6c5268c81e07e00$var$columnCount
    };
    return termConf;
}
// Info : we do it this instead of making a framework for handling this kind of situations
// var term = new Terminal(termConf);
const $b6c5268c81e07e00$var$scoreTermConf = $b6c5268c81e07e00$var$getTermConf();
$b6c5268c81e07e00$var$scoreTermConf.cursorBlink = false;
const $b6c5268c81e07e00$var$scoreTerm = new (0, $b018198082cf097a$exports.Terminal)($b6c5268c81e07e00$var$scoreTermConf);
// TODO : an API or equivallent for this kind of stuff ; this hide the cursor
// Info : \e does not work
$b6c5268c81e07e00$var$scoreTerm.write("\x1b[?25l");
const $b6c5268c81e07e00$var$promptTerm = new (0, $f9c15133727769eb$export$e1c26fff9d765d09)($b6c5268c81e07e00$var$getTermConf());
const $b6c5268c81e07e00$var$messageTermConf = $b6c5268c81e07e00$var$getTermConf();
$b6c5268c81e07e00$var$messageTermConf.cursorBlink = false;
const $b6c5268c81e07e00$var$messageTerm = new (0, $b018198082cf097a$exports.Terminal)($b6c5268c81e07e00$var$messageTermConf);
$b6c5268c81e07e00$var$messageTerm.write("\x1b[?25l");
// var testTerm = new Terminal(termConf);
// const targetElementId = 'terminal';
// const scoreElementId = 'scoreTerm';
const $b6c5268c81e07e00$var$promptElementId = "promptTerm";
const $b6c5268c81e07e00$var$messageElementId = "messageTerm";
const $b6c5268c81e07e00$var$testElementId = "testTerm";
//const fitAddon = new FitAddon();
function $b6c5268c81e07e00$var$commonTermSetup(term, elementId) {
    // Info : top element need a fixed size to use percentage down the hierarchy
    // FIXME : this is adding empty white space at the bottom of the element
    // I do know which property it is matching, it is the wayt the fit addon compute the size
    // But if we do not use it, the scrollbar is not present
    // And so, we cannot scroll to bottom
    // See https://github.com/xtermjs/xterm.js/issues/4430
    // It seem intended
    const fitAddon = new (0, $7fc71f98aa33c694$exports.FitAddon)();
    // I think it does not support percentages
    // Need to fit an height actually
    term.loadAddon(fitAddon);
    let targetElement = document.getElementById(elementId);
    if (targetElement != null) term.open(targetElement);
    else throw new Error("The document does not contain an element of id " + elementId);
    fitAddon.fit();
    // Info : does not work
    // Open the debugger in the browser, refresh, close the debugger : huge empty white spaces
    term.onResize((x)=>{
        // console.log("on term resize");
        fitAddon.fit();
    });
    /* FIXME : error below, I was using the chrome debugger
  p.ts:132 RangeError: Maximum call stack size exceeded
    at a.e (OptionsService.ts:105:21)
    at e.Terminal.i (Terminal.ts:35:25)
    at t.FitAddon.proposeDimensions (FitAddon.ts:68:51)
    at t.FitAddon.fit (FitAddon.ts:36:23)
    at app.ts:123:14
    at t.EventEmitter.fire (EventEmitter.ts:55:16)
    at EventEmitter.ts:68:23
    at t.EventEmitter.fire (EventEmitter.ts:55:16)
    at c.resize (BufferService.ts:47:20)
    at I.resize (CoreTerminal.ts:183:25)
*/ // Info : this does work (empty white space are 'normally' sized)
    function onResize() {
        try {
            // console.log('onResize');
            fitAddon.fit();
        } catch (e) {
            console.error(e);
        }
    }
    window.addEventListener("resize", onResize);
}
// commonTermSetup(scoreTerm, scoreElementId);
$b6c5268c81e07e00$var$commonTermSetup($b6c5268c81e07e00$var$promptTerm, $b6c5268c81e07e00$var$promptElementId);
$b6c5268c81e07e00$var$commonTermSetup($b6c5268c81e07e00$var$messageTerm, $b6c5268c81e07e00$var$messageElementId);
// commonTermSetup(testTerm, testElementId);
const $b6c5268c81e07e00$var$program = new (0, $bqCSz.Command)();
$b6c5268c81e07e00$var$program// Info : if you set it, you will need to pass it as a parameter
// If you do not set it, it will appear in the help command anyway
// There is something weird actually
// FIXME : 'run etc' is also working
.name("/run").description("CLI to execute commands").version("0.0.1");
function $b6c5268c81e07e00$var$writeNewLine() {
    $b6c5268c81e07e00$var$messageTerm.write("\r\n");
}
// TODO : use an option that make sure it is declared before it is used
var $b6c5268c81e07e00$var$command = "";
function $b6c5268c81e07e00$var$configureCommand(command) {
    // command.showHelpAfterError();
    command.configureOutput($b6c5268c81e07e00$var$configuration);
    command.exitOverride();
}
// TODO : checkout why I've putted a application-message event on PeerJS fork
const $b6c5268c81e07e00$var$config = (0, $f85250c2639e72d4$export$a6b19750ed7f872e)();
const $b6c5268c81e07e00$var$peer = (0, $eba903476496ad08$export$b16ebc549674fac6)($b6c5268c81e07e00$var$config);
console.log("https://peerjs-server.onesime-deleham.ovh");
console.log($b6c5268c81e07e00$var$config);
console.log($b6c5268c81e07e00$var$peer);
const $b6c5268c81e07e00$var$peerJSClient = new (0, $a61d14da41d3c9b9$export$4c8d0976dab07915)({
    host: $b6c5268c81e07e00$var$config.peerServerHostname,
    port: $b6c5268c81e07e00$var$config.peerServerPort
});
const $b6c5268c81e07e00$var$roomManager = new (0, $13dba5279abfefc4$export$5395e6a29292206e)($b6c5268c81e07e00$var$peerJSClient);
// TODO : move it an util or find an equivalent lib
function $b6c5268c81e07e00$var$isNullOrUndefined(object) {
    return object === null || object === undefined;
}
function $b6c5268c81e07e00$var$isInRoom() {
    return !$b6c5268c81e07e00$var$isNullOrUndefined($b6c5268c81e07e00$var$roomManager.currentRoom);
}
function $b6c5268c81e07e00$var$getRoomPrefix() {
    let value = "";
    if ($b6c5268c81e07e00$var$isInRoom()) {
        value += "(" + $b6c5268c81e07e00$var$roomManager.currentRoom.roomName;
        if ($b6c5268c81e07e00$var$localUser !== null) value += ":" + $b6c5268c81e07e00$var$localUser.name + ":" + $b6c5268c81e07e00$var$localUser.peer.id;
        value += ") ";
    }
    return value;
}
function $b6c5268c81e07e00$var$getFormattedRoomPrefix() {
    let value = "";
    if ($b6c5268c81e07e00$var$isInRoom()) {
        value += "(" + $b6c5268c81e07e00$var$formatRoomName($b6c5268c81e07e00$var$roomManager.currentRoom.roomName);
        if ($b6c5268c81e07e00$var$localUser !== null) value += ":" + $b6c5268c81e07e00$var$formatPeerName($b6c5268c81e07e00$var$localUser.name) + ":" + $b6c5268c81e07e00$var$formatPeerId($b6c5268c81e07e00$var$localUser.peer.id);
        value += ") : ";
    }
    return value;
}
function $b6c5268c81e07e00$var$prompt() {
    // TODO : conditional \r\n, some errors have one at the end, it produce two carriage return
    // command = '';
    let value = "\r\n";
    value += $b6c5268c81e07e00$var$getRoomPrefix();
    value += "$ ";
    $b6c5268c81e07e00$var$promptTerm.write(value);
    $b6c5268c81e07e00$var$promptTerm.reprompt();
}
function $b6c5268c81e07e00$var$writeLn(text) {
    // the new line character of commander is not the one supported by xterm
    $b6c5268c81e07e00$var$messageTerm.writeln(text.replace(/\n/g, "\r\n"));
}
function $b6c5268c81e07e00$var$writeOut(output) {
    $b6c5268c81e07e00$var$writeNewLine();
    $b6c5268c81e07e00$var$writeLn(output);
    $b6c5268c81e07e00$var$prompt();
}
// FIXME : print in red
function $b6c5268c81e07e00$var$writeErr(err) {
    $b6c5268c81e07e00$var$writeNewLine();
    console.error(err);
    if (err instanceof Error) $b6c5268c81e07e00$var$writeLn(err.message);
    else $b6c5268c81e07e00$var$writeLn(err);
    $b6c5268c81e07e00$var$prompt();
}
// TODO : print warn
const $b6c5268c81e07e00$var$configuration = {
    writeOut: $b6c5268c81e07e00$var$writeOut,
    writeErr: $b6c5268c81e07e00$var$writeErr,
    getOutHelpWidth: ()=>{
        return $b6c5268c81e07e00$var$columnCount;
    },
    getErrHelpWidth: ()=>{
        return $b6c5268c81e07e00$var$columnCount;
    }
};
const $b6c5268c81e07e00$var$logger = {
    info: $b6c5268c81e07e00$var$writeOut,
    error: $b6c5268c81e07e00$var$writeErr,
    writeLn: $b6c5268c81e07e00$var$writeLn,
    newLine: $b6c5268c81e07e00$var$writeNewLine,
    prompt: $b6c5268c81e07e00$var$prompt
};
function $b6c5268c81e07e00$var$initWordGameMulti() {
    return new (0, $b4e64ee2da69b34c$export$5ef97d0a3ba0efd0)($b6c5268c81e07e00$var$roomManager.currentRoom, $b6c5268c81e07e00$var$wordGame, $b6c5268c81e07e00$var$p2pRoom, new (0, $3cedf9cc0e765876$export$b6e989ddfbcc548d)(), $b6c5268c81e07e00$var$wordGameSettings, $b6c5268c81e07e00$var$wordGameMessageHandler);
}
// Cmdy commands
// TODO : checkout if can put a value argument without a name, positional
const $b6c5268c81e07e00$var$force = {
    name: "force",
    shorthand: "f",
    description: "Forcibly execute the command"
};
const $b6c5268c81e07e00$var$gameType = {
    name: "game",
    description: "Precise the type of game to start",
    shorthand: "g",
    types: [
        "string"
    ],
    required: false
};
// TODO : create a set game command ?
const $b6c5268c81e07e00$var$start = {
    name: "/start",
    description: "Start a game",
    flags: [
        $b6c5268c81e07e00$var$gameType
    ],
    allowUnknownArgs: false,
    exe: async (res)=>{
        console.log("start");
        console.log(res.flags);
        console.log(res.valueFlags);
        const game = res.valueFlags["game"];
        if (game === "word" || game === "word-guessr" || game === undefined) {
            console.log("yeah");
            $b6c5268c81e07e00$var$wordGameMulti = $b6c5268c81e07e00$var$initWordGameMulti();
            $b6c5268c81e07e00$var$wordGameMulti.startGame();
        } else $b6c5268c81e07e00$var$logger.writeLn($b6c5268c81e07e00$var$formatWarn(`The game '${game}' is not recognized`));
    }
};
// const game: CmdDefinition = {
//   name: "/game",
//   description: "Set a game",
//   flags: [
//   ],
//   allowUnknownArgs: false,
//   exe: async (res) => {
//     console.log("start");
//     console.log(res.flags);
//     console.log(res.valueFlags);
//   }
// }
const $b6c5268c81e07e00$var$leave = {
    name: "/leave",
    description: "Allow to leave the room",
    flags: [
        $b6c5268c81e07e00$var$force
    ],
    exe: async (res)=>{
        console.log("leave");
        console.log(res.flags);
        console.log(res.valueFlags);
        // TODO : check if is game I suppose
        // TODO : clear room connection
        // TODO : send a message also ?
        await $b6c5268c81e07e00$var$roomManager.leaveCurrentRoom($b6c5268c81e07e00$var$peer.id);
        if ($b6c5268c81e07e00$var$p2pRoom) {
            $b6c5268c81e07e00$var$p2pRoom.disconnect();
            $b6c5268c81e07e00$var$p2pRoom = null;
        }
        // TODO : transfer ownership
        // TODO : acquire ownership command
        $b6c5268c81e07e00$var$wordGameMulti = undefined;
        console.log("has left");
    }
};
const $b6c5268c81e07e00$var$connections = {
    name: "/connections",
    description: "List connections",
    flags: [],
    exe: async (res)=>{
        console.log("connections");
        console.log(res.flags);
        console.log(res.valueFlags);
        $b6c5268c81e07e00$var$p2pRoom?.connections.forEach((value, key)=>{
            const user = $b6c5268c81e07e00$var$p2pRoom.getUser(key);
            $b6c5268c81e07e00$var$logger.writeLn(`${$b6c5268c81e07e00$var$formatRoomName($b6c5268c81e07e00$var$roomManager.currentRoom?.roomName)}:${key}:${user.name}`);
        });
    }
};
const $b6c5268c81e07e00$var$players = {
    name: "/players",
    description: "List players",
    flags: [],
    exe: async (res)=>{
        console.log("connections");
        console.log(res.flags);
        console.log(res.valueFlags);
        if ($b6c5268c81e07e00$var$wordGameMulti === undefined) {
            $b6c5268c81e07e00$var$logger.writeLn("You are not in game, there is no players to list.");
            return;
        }
        $b6c5268c81e07e00$var$wordGameMulti.players.forEach((player)=>{
            $b6c5268c81e07e00$var$logger.writeLn(`${player.user.name}:${player.user.peer.id} (score: ${player.score})`);
        });
    }
};
const $b6c5268c81e07e00$var$root = {
    name: "",
    description: "",
    cmds: [
        $b6c5268c81e07e00$var$start,
        $b6c5268c81e07e00$var$leave,
        $b6c5268c81e07e00$var$connections,
        $b6c5268c81e07e00$var$players
    ],
    flags: []
};
const $b6c5268c81e07e00$var$wordGameSettings = {
    minOccurences: 250,
    maxOccurences: 1000,
    guessAsSession: true,
    maxAttempts: 5,
    // multi
    winningScore: 10,
    timePerGuess: 30
};
var $b6c5268c81e07e00$var$wordGame;
var $b6c5268c81e07e00$var$wordGameMulti;
var $b6c5268c81e07e00$var$p2pRoom;
// FIXME : either remove this or solve the timer issue
class $b6c5268c81e07e00$var$SimpleTimer {
    startTimer() {
        throw new Error("Method not implemented.");
    }
    clearInterval() {
        throw new Error("Method not implemented.");
    }
}
// TODO
// could use a state machine
// with fallbacks
// for parsing the input
const $b6c5268c81e07e00$var$resetSequence = "\x1b[0m";
const $b6c5268c81e07e00$var$blueFont = "\x1b[34m";
const $b6c5268c81e07e00$var$orangeFont = "\x1b[196m";
const $b6c5268c81e07e00$var$redFont = "\x1b[202m";
const $b6c5268c81e07e00$var$greenFont = "\x1b[2m"; // FIXME : should be green but is not
const $b6c5268c81e07e00$var$green2Font = "\x1b[34m"; // FIXME : should be green but is not
const $b6c5268c81e07e00$var$greyFont = "\x1b[8m";
const $b6c5268c81e07e00$var$yellowFont = "\x1b[226m";
function $b6c5268c81e07e00$var$formatRoomName(room) {
    return $b6c5268c81e07e00$var$green2Font + room + $b6c5268c81e07e00$var$resetSequence;
}
// TODO : allow to select it
function $b6c5268c81e07e00$var$formatPeerName(peer) {
    return $b6c5268c81e07e00$var$blueFont + peer + $b6c5268c81e07e00$var$resetSequence;
}
function $b6c5268c81e07e00$var$formatPeerId(peerId) {
    return $b6c5268c81e07e00$var$yellowFont + peerId + $b6c5268c81e07e00$var$resetSequence;
}
function $b6c5268c81e07e00$var$formatWarn(text) {
    return $b6c5268c81e07e00$var$orangeFont + text + $b6c5268c81e07e00$var$resetSequence;
}
function $b6c5268c81e07e00$var$formatError(text) {
    return $b6c5268c81e07e00$var$redFont + text + $b6c5268c81e07e00$var$resetSequence;
}
const $b6c5268c81e07e00$var$roomMessageHandler = {
    onConnectionEstablished: function(connection, user) {
        $b6c5268c81e07e00$var$logger.writeLn(`${$b6c5268c81e07e00$var$getFormattedRoomPrefix()}A connection was established`);
    },
    onConnectionClosed: function(connection, user) {
        $b6c5268c81e07e00$var$logger.writeLn(`${$b6c5268c81e07e00$var$getFormattedRoomPrefix()}A connection was closed`);
    },
    onConnectionError: function(connection, user, error) {
        $b6c5268c81e07e00$var$logger.writeLn(`${$b6c5268c81e07e00$var$getFormattedRoomPrefix()}${$b6c5268c81e07e00$var$formatError(error.message)}`);
    },
    onTextMessage: function(connection, user, text, textMessage, root) {
        $b6c5268c81e07e00$var$logger.writeLn(`${$b6c5268c81e07e00$var$getFormattedRoomPrefix()}${text}`);
    },
    onRenameUserMessage: function(connection, user, newName, formerName, renameUserMessage, root) {
        $b6c5268c81e07e00$var$logger.writeLn(`peer ${$b6c5268c81e07e00$var$formatPeerName(connection.peer)} has renamed to ${newName} ` + (formerName.length === 0 ? "" : `(formerlly named ${formerName})`));
    }
};
const $b6c5268c81e07e00$var$appMessageHandler = {
    onAppMessage: function(user, message, root) {
        $b6c5268c81e07e00$var$logger.writeLn(`(${$b6c5268c81e07e00$var$formatPeerName(user.name)}) : ${$b6c5268c81e07e00$var$formatWarn("received an application level message but there is no handling for this")}`);
        // Info : we try to start the game if necessary
        // TODO : another phase / messaging stack for this
        // pick game or something
        if (user.peer.id === $b6c5268c81e07e00$var$roomManager.currentRoom.roomOwner.id) {
            const wordGameMessage = message;
            if (wordGameMessage.wordGameMessageType === (0, $0033a60ebe78f1d0$export$3679fc5ae8d740bd).StartingGame) {
                if ($b6c5268c81e07e00$var$wordGameMulti !== null) console.warn("there is an error with the state of the application");
                $b6c5268c81e07e00$var$wordGameMulti = $b6c5268c81e07e00$var$initWordGameMulti();
                $b6c5268c81e07e00$var$wordGameMulti.handleAppMessage(user, message, root);
            } else {
                $b6c5268c81e07e00$var$logger.writeLn(`(${$b6c5268c81e07e00$var$formatPeerName(user.name)}) : ${$b6c5268c81e07e00$var$formatWarn("received an application level message but there is no handling for this")}`);
                console.warn("there is an error with the state of the application");
                console.warn(message);
            }
        }
    }
};
const $b6c5268c81e07e00$var$wordGameMessagingEN = new (0, $3cedf9cc0e765876$export$b6e989ddfbcc548d)();
function $b6c5268c81e07e00$var$isSelf(player) {
    return player.user.peer.id === $b6c5268c81e07e00$var$peer.id;
}
const $b6c5268c81e07e00$var$wordGameMessageHandler = {
    onStartingGame: function(settings, players, admin) {
        $b6c5268c81e07e00$var$logger.writeLn(`(admin:${$b6c5268c81e07e00$var$formatPeerName(admin.user.name)}) : ${$b6c5268c81e07e00$var$wordGameMessagingEN.formatStartingGame(players)}`);
        $b6c5268c81e07e00$var$logger.writeLn(`${$b6c5268c81e07e00$var$wordGameMessagingEN.formatSettings(settings)}`);
    },
    onPlayerWon: function(winner, from, admin) {
        $b6c5268c81e07e00$var$logger.writeLn(`(admin:${$b6c5268c81e07e00$var$formatPeerName(admin.user.name)}) : ${$b6c5268c81e07e00$var$wordGameMessagingEN.formatPlayerHasWon(winner.user.name, winner.score, $b6c5268c81e07e00$var$isSelf(winner))}`);
    },
    onAdminActionAttempted: function(player, messageType, admin) {
        $b6c5268c81e07e00$var$logger.writeLn(`(${$b6c5268c81e07e00$var$formatPeerName("administration")}) : ${$b6c5268c81e07e00$var$wordGameMessagingEN.formatAdminActionAttempted(player.user.name, messageType)}`);
    },
    onSequenceToGuess: function(player, sequence, timeToGuess, admin) {
        $b6c5268c81e07e00$var$logger.writeLn(`(admin:${$b6c5268c81e07e00$var$formatPeerName(admin.user.name)}) : ${$b6c5268c81e07e00$var$wordGameMessagingEN.formatPlayerMustGuessLetters(player.user.name, sequence, timeToGuess, $b6c5268c81e07e00$var$isSelf(player))}`);
    },
    onGuessAttempt (playerGuessing, word, sequence, admin) {
        $b6c5268c81e07e00$var$logger.writeLn(`(admin:${$b6c5268c81e07e00$var$formatPeerName(playerGuessing.user.name)}) : ${word}`);
    },
    onIncorrectGuess: function(playerGuessing, word, sequence, reason, admin) {
        $b6c5268c81e07e00$var$logger.writeLn(`(admin:${$b6c5268c81e07e00$var$formatPeerName(admin.user.name)}) : ${$b6c5268c81e07e00$var$wordGameMessagingEN.formatIncorrectGuess(playerGuessing.user.name, word, $b6c5268c81e07e00$var$isSelf(playerGuessing))}`);
    },
    onCorrectGuess: function(playerGuessing, word, sequence, scoreAdded, reason, admin) {
        $b6c5268c81e07e00$var$logger.writeLn(`(admin:${$b6c5268c81e07e00$var$formatPeerName(admin.user.name)}) : ${$b6c5268c81e07e00$var$wordGameMessagingEN.formatCorrectGuess(playerGuessing.user.name, scoreAdded, $b6c5268c81e07e00$var$isSelf(playerGuessing))}`);
        $b6c5268c81e07e00$var$logger.writeLn(`(admin:${$b6c5268c81e07e00$var$formatPeerName(admin.user.name)}) : ${$b6c5268c81e07e00$var$wordGameMessagingEN.formatCurrentScore(playerGuessing.user.name, playerGuessing.score, $b6c5268c81e07e00$var$isSelf(playerGuessing))}`);
    },
    onGuessTimeout: function(player, admin) {
        $b6c5268c81e07e00$var$logger.writeLn(`(admin:${$b6c5268c81e07e00$var$formatPeerName(admin.user.name)}) : ${$b6c5268c81e07e00$var$wordGameMessagingEN.formatTimeToGuessTimedOut(player.user.name, $b6c5268c81e07e00$var$isSelf(player))}`);
    },
    onWordExample: function(example, sequence, admin) {
        $b6c5268c81e07e00$var$logger.writeLn(`(admin:${$b6c5268c81e07e00$var$formatPeerName(admin.user.name)}) : ${$b6c5268c81e07e00$var$wordGameMessagingEN.formatWordExample(example, sequence)}`);
    },
    onSettingsUpdated: function(newSettings, formerSettings, player, admin) {
        $b6c5268c81e07e00$var$logger.writeLn(`(admin:${$b6c5268c81e07e00$var$formatPeerName(admin.user.name)}) : ${$b6c5268c81e07e00$var$wordGameMessagingEN.formatSettingsWereUpdated(player.user.name)}`);
        $b6c5268c81e07e00$var$logger.writeLn(`${$b6c5268c81e07e00$var$wordGameMessagingEN.formatSettings(newSettings)}`);
    }
};
const $b6c5268c81e07e00$var$animalNames = [
    "Dog",
    "Bear",
    "Duck",
    "Cat",
    "Turtle",
    "Horse",
    "Crocodile",
    "Chicken",
    "Dolphin"
];
// FIXME : duplicated, not sure it is useful in P2PRoom
function $b6c5268c81e07e00$var$getRandomName() {
    // TODO : generate a ano name if names is empty
    return $b6c5268c81e07e00$var$animalNames[Math.floor(Math.random() * $b6c5268c81e07e00$var$animalNames.length)];
}
var $b6c5268c81e07e00$var$localUser;
function $b6c5268c81e07e00$var$isSelfAdmin() {
    return $b6c5268c81e07e00$var$localUser.peer.id === $b6c5268c81e07e00$var$roomManager.currentRoom.roomOwner.id;
}
function $b6c5268c81e07e00$var$joinRoomCallback(room) {
    if ($b6c5268c81e07e00$var$p2pRoom !== null) console.warn("has just joined a room but p2pRoom is not null");
    if ($b6c5268c81e07e00$var$isNullOrUndefined($b6c5268c81e07e00$var$roomManager.currentRoom)) console.warn("currentRoom should not be null at this point");
    if ($b6c5268c81e07e00$var$roomManager.currentRoom !== room) console.warn("currentRoom should not be different than the room of the callback");
    if ($b6c5268c81e07e00$var$isNullOrUndefined($b6c5268c81e07e00$var$wordGame)) console.warn("wordGame should not be null at this point");
    $b6c5268c81e07e00$var$localUser = {
        peer: new (0, $6485ee4c578a6cae$export$ecd1fc136c422448)($b6c5268c81e07e00$var$peer),
        name: $b6c5268c81e07e00$var$getRandomName()
    };
    $b6c5268c81e07e00$var$p2pRoom = new (0, $c6967c664d34d9ab$export$af0a28b676495c42)($b6c5268c81e07e00$var$localUser, $b6c5268c81e07e00$var$roomMessageHandler, $b6c5268c81e07e00$var$appMessageHandler, $b6c5268c81e07e00$var$animalNames);
    room.clients.forEach((value, key)=>{
        if (value.id === $b6c5268c81e07e00$var$peer.id) return;
        console.log("connections");
        console.log($b6c5268c81e07e00$var$peer.connections);
        const connection = $b6c5268c81e07e00$var$peer.connect(value.id);
        // TODO : unit test to add to check we are not adding the connection here (at this level, it could failed at this point)
        // this.connections.set(connection.peer, new Connection(connection))
        // TODO : display the connection on 'connecting' et indiquer connected / failed|error
        $b6c5268c81e07e00$var$p2pRoom.bindConnection(connection);
    });
    if ($b6c5268c81e07e00$var$localUser.peer.id === room.roomOwner.id) $b6c5268c81e07e00$var$logger.writeLn("You are admin of the room");
    else $b6c5268c81e07e00$var$logger.writeLn("You are not admin of the room");
    console.log($b6c5268c81e07e00$var$peer.connections);
}
// TODO : try catch all of this
async function $b6c5268c81e07e00$var$main() {
    const rooms = $b6c5268c81e07e00$var$peerJSClient.getRooms();
    console.log(rooms);
    const wordDatabaseRootURL = "https://dev.onesime-deleham.ovh/";
    const wordDatabaseFilename = "sample.db";
    const frenchWordDatabase = new (0, $70b9a664c95c9375$export$2712fa70f5c14f01)(wordDatabaseRootURL, wordDatabaseFilename, $b6c5268c81e07e00$var$logger);
    // TODO : add a log here for Dexie
    await frenchWordDatabase.open();
    await frenchWordDatabase.initSQL();
    $b6c5268c81e07e00$var$wordGame = new (0, $abd5fd0e49b44b89$export$b6924ebf3ecaeccf)(frenchWordDatabase, $b6c5268c81e07e00$var$wordGameSettings);
    const wordGameCommand = new (0, $231a46fb2d0d27c3$export$6f18ceaacd1d0e31)($b6c5268c81e07e00$var$wordGame, $b6c5268c81e07e00$var$configureCommand, $b6c5268c81e07e00$var$logger);
    wordGameCommand.setup();
    $b6c5268c81e07e00$var$configureCommand(wordGameCommand);
    $b6c5268c81e07e00$var$program.addCommand(wordGameCommand);
    const databaseCommand = new (0, $d8508523bf6d8690$export$731654b94c24c6ec)(frenchWordDatabase, $b6c5268c81e07e00$var$configureCommand, $b6c5268c81e07e00$var$logger);
    databaseCommand.setup();
    $b6c5268c81e07e00$var$configureCommand(databaseCommand);
    $b6c5268c81e07e00$var$program.addCommand(databaseCommand);
    const roomCommand = new (0, $7357a5a27f192088$export$912fb411e26e3541)($b6c5268c81e07e00$var$roomManager, $b6c5268c81e07e00$var$peer, $b6c5268c81e07e00$var$configureCommand, $b6c5268c81e07e00$var$logger, $b6c5268c81e07e00$var$joinRoomCallback);
    roomCommand.setup();
    $b6c5268c81e07e00$var$configureCommand(roomCommand);
    $b6c5268c81e07e00$var$program.addCommand(roomCommand);
    $b6c5268c81e07e00$var$configureCommand($b6c5268c81e07e00$var$program);
    function handleOfflineInput(text) {
        const result = $b6c5268c81e07e00$var$wordGame.verifyGuess(text);
        $b6c5268c81e07e00$var$writeNewLine();
        switch(result){
            case (0, $1a88d18c4cbab4bd$export$bfc465b73e2e08a6).SUCCESSFUL_GUESS:
                $b6c5268c81e07e00$var$writeLn("Success !");
                break;
            case (0, $1a88d18c4cbab4bd$export$bfc465b73e2e08a6).WORD_DO_NOT_EXIST:
                $b6c5268c81e07e00$var$writeLn("This word do not exist in the database.");
                break;
            case (0, $1a88d18c4cbab4bd$export$bfc465b73e2e08a6).WORD_DO_NOT_MATCH_SEQUENCE:
                $b6c5268c81e07e00$var$writeLn(`This word do not match the current sequence ('${$b6c5268c81e07e00$var$wordGame.currentSequence}').`);
                break;
            default:
                $b6c5268c81e07e00$var$writeErr("Internal error");
                console.error(`GuessResult '${result} is unknown`);
        }
        if ($b6c5268c81e07e00$var$wordGame.remainingAttempts() === 0) {
            $b6c5268c81e07e00$var$writeLn("You have failed to find a word matching this sequence of letters.");
            $b6c5268c81e07e00$var$writeLn(`You could have tried : '${$b6c5268c81e07e00$var$wordGame.getExampleForSequence()}'`);
            $b6c5268c81e07e00$var$wordGame.reset();
            $b6c5268c81e07e00$var$prompt();
        } else $b6c5268c81e07e00$var$prompt();
    }
    async function handleInRoomInput(text) {
        // TODO : checkout for '//' as a way to send a message
        if (text.startsWith("/")) {
            console.log("starts with /, using cmdy");
            const argsForCmdy = [
                ...text.trim().split(" ")
            ];
            try {
                const parseResult = (0, $6kwtT.parseCmd)({
                    cmd: $b6c5268c81e07e00$var$root,
                    globalFlags: [],
                    args: argsForCmdy
                });
                if (parseResult.err) {
                    console.warn(parseResult.err);
                    // TODO : this is prompting, it would be nice to control when the prompt is made
                    // It has become hard to know
                    $b6c5268c81e07e00$var$logger.error(parseResult.err.message); // Info : we assume it is a normal exception
                } else {
                    if (parseResult.msg) {
                        console.log("has msg");
                        $b6c5268c81e07e00$var$logger.writeLn(parseResult.msg);
                    }
                    console.log("running command");
                    // FIXME : this is not working
                    // We return before the command is actually executed
                    // Which cause a UI bug when using /leave
                    await parseResult.exe();
                    console.log("command executed");
                    $b6c5268c81e07e00$var$prompt();
                }
            } catch (err) {
                console.log("an unexpected error occurred");
                console.error(err);
                $b6c5268c81e07e00$var$prompt();
            }
        } else {
            // TODO : handle error, not exist etc
            // wordGameMulti.sendMessage(text);
            if ($b6c5268c81e07e00$var$wordGameMulti !== undefined) {
                console.log("game prompt");
                $b6c5268c81e07e00$var$wordGameMulti.sendMessage(text);
            } else if ($b6c5268c81e07e00$var$p2pRoom !== null) {
                console.log("sending message");
                $b6c5268c81e07e00$var$p2pRoom.sendMessage(text);
            } else $b6c5268c81e07e00$var$logger.writeLn($b6c5268c81e07e00$var$formatWarn("Attempting to send a message while not connected"));
            $b6c5268c81e07e00$var$prompt();
        }
    }
    // TODO : implement Ctrl C & Ctrl V
    // TODO : arrow navigation in the commands
    // TODO : do not attempt to run the command if it is not the main one
    // TODO : add a help command
    // TODO : use a context system : if press wg, stay in the wg command
    async function runCommand(text) {
        console.log("runCommand");
        // process (node), script (script.js), args
        // require to pass the name of the command if the name is passed to the program
        // program.name('name-of-the-app')
        const args = [
            "nothing",
            /*'nothing',*/ ...text.trim().split(" ")
        ];
        try {
            // TODO : replace by a state machine or an input capture system
            // TODO : move the check somewhere else, it is also used in WordGameCommand
            if ($b6c5268c81e07e00$var$isInRoom()) await handleInRoomInput(text);
            else if ($b6c5268c81e07e00$var$wordGame.isGuessing) handleOfflineInput(text);
            else await $b6c5268c81e07e00$var$program.parseAsync(args);
        } catch (err) {
            console.log("an error occured:");
            console.warn(err);
        }
    }
    // TODO : test this
    // Modified version of this one https://github.com/xtermjs/xtermjs.org/blob/281b8e0f9ac58c5e78ff5b192563366c40787c4f/js/demo.js
    // MIT license
    $b6c5268c81e07e00$var$promptTerm.onData((e)=>{
        // console.log("ondata " + e);
        // TODO : use a special character enum provider
        switch(e){
            case "\x1b":
                if ($b6c5268c81e07e00$var$wordGame.isGuessing) {
                    $b6c5268c81e07e00$var$wordGame.reset();
                    $b6c5268c81e07e00$var$writeOut("You are no longer playing.");
                }
                break;
            case "\x03":
                if ($b6c5268c81e07e00$var$wordGame.isGuessing) {
                    $b6c5268c81e07e00$var$wordGame.reset();
                    $b6c5268c81e07e00$var$writeOut("You are no longer playing.");
                } else {
                    $b6c5268c81e07e00$var$promptTerm.writeNoHistory("^C");
                    $b6c5268c81e07e00$var$prompt();
                }
                break;
            case "\r":
                if ($b6c5268c81e07e00$var$command.trim().length > 0) // promptTerm.write(command);
                try {
                    runCommand($b6c5268c81e07e00$var$command);
                } catch (error) {
                    console.log(error);
                } finally{
                    console.log("finally");
                    //promptTerm.write(command);
                    $b6c5268c81e07e00$var$promptTerm.scrollToBottom(); // use this for the normal flow
                    $b6c5268c81e07e00$var$command = "";
                }
                else $b6c5268c81e07e00$var$prompt();
                break;
            case "\x7f":
                // Do not delete the prompt
                // Info : those are not available in typescript
                //if (term.buf_core.buffer.x > 2) {
                //if (term.buffer.x > 2) {
                if ($b6c5268c81e07e00$var$command.length > 0) {
                    $b6c5268c81e07e00$var$promptTerm.writeNoHistory("\b \b");
                    if ($b6c5268c81e07e00$var$command.length > 0) $b6c5268c81e07e00$var$command = $b6c5268c81e07e00$var$command.substr(0, $b6c5268c81e07e00$var$command.length - 1);
                }
                break;
            default:
                if (e >= String.fromCharCode(0x20) && e <= String.fromCharCode(0x7E) || e >= "\xa0") {
                    $b6c5268c81e07e00$var$command += e;
                    $b6c5268c81e07e00$var$promptTerm.writeNoHistory(e);
                }
        }
    });
    // if (targetElement != null) {
    // TODO : insert ASCII art here
    $b6c5268c81e07e00$var$messageTerm.write("\x1b[1;3;31mWordGuessr\x1b[0m ");
    // FIXME : illegal access is logged from here
    // In Firefox, A mutation operation was attempted on a database that did not allow mutations
    // Is also logged here, but should not be
    // There is also A mutation operation was attempted on a database that did not allow mutations.
    // (on the prompt)
    // TODO : verify if errors still occur
    const helpText = $b6c5268c81e07e00$var$program.helpInformation();
    $b6c5268c81e07e00$var$writeLn(helpText);
// prompt();
// }
}
$b6c5268c81e07e00$var$main();


//# sourceMappingURL=index.92f924b3.js.map
